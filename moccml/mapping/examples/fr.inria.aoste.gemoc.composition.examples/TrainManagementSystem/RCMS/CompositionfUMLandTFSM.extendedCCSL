ClockConstraintSystem model {
	imports {
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as kernel ;
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as CCSL ;
		
		import "../BMC/lib4RT.ccslLib" as lib4RT ;
		import "platform:/resource/fr.inria.aoste.gemoc.composition.examples/TrainManagementSystem/BMC/BMC.uml" as fUML ;
		
		import "../BDC/TFSMMoC.ccslLib" as TFSMMoC ;
		import "platform:/resource/fr.inria.aoste.gemoc.composition.examples/TrainManagementSystem/BDC/BDC.tfsm" as TFSM ;
		
	}
	entryBlock mainBlock
	Block mainBlock {
//end of composition
		
		
		
		
		
		
		Expression ThreeDownIsFalse=DelayFor( DelayForClockToDelay -> DownIsFalse 	,DelayForClockForCounting -> DownIsFalse 	,DelayForDelay -> three  )
		Expression ThreeUpIsFalse=DelayFor( DelayForClockToDelay -> UpIsFalse,DelayForClockForCounting -> UpIsFalse,DelayForDelay -> four  )
		//Activity1_finishActivity
		// Start Scenario
		Expression expSimu =  OneTickAndNoMore( OneTickAndNoMoreClock -> clkStart )
		Expression IsUpDecision_Union_unionOfTwoChoices = Union
		( Clock1 -> stopMotorUp_startIt,
		Clock2 -> UpIsFalse )
		Expression IsDownDecision_Union_unionOfTwoChoices = Union
		( Clock1 -> stopMotorDown_startIt,
		Clock2 -> DownIsFalse )
		Expression MergeFinalintermediate_unionOfIncomes1 = Sup
		( Clock2 -> Sendclosed_finishIt,
		Clock1 -> Sendopened_finishIt )
		Expression MergeUp_Union_unionOfActionAndDecision = Union
		( Clock1 -> startBarrierUp_finishIt,
		Clock2 -> UpIsFalse )
		Expression MergeDown_Union_unionOfActionAndDecision = Union
		( Clock1 -> startBarrierDown_finishIt,
		Clock2 -> DownIsFalse )
		//
		// TFSM + Scenario
		//
		
				Expression TrainFarEnoughintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> S1_to_S2_fire,
		Clock2 -> S1_to_S2_fire )
		Expression TrainComingintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> S0_to_S1_fire,
		Clock2 -> S0_to_S1_fire )
		Expression doOpenintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> Down_to_isOpenning_fire,
		Clock2 -> Down_to_isOpenning_fire )
		Expression doCloseintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> Up_to_isClosing_fire,
		Clock2 -> Up_to_isClosing_fire )
		Expression isClosing_to_Down_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Closing_entering,
		SampledOnTrigger -> Closed_occurs )
		Expression initState0_to_S0_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> initState0_entering,
		SampledOnTrigger -> start_occurs )
		Expression Up_to_isClosing_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Up_entering,
		SampledOnTrigger -> TrainComing_occurs )
		Expression Down_to_isOpenning_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Down_entering,
		SampledOnTrigger -> TrainFarEnough_occurs )
		Expression isOpenning_to_Up_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Opening_entering,
		SampledOnTrigger -> Opened_occurs )
		Expression initState_to_Up_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> initState_entering,
		SampledOnTrigger -> start_occurs )
		Expression S1_to_S2_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> S1_entering,
		DelayForClockForCounting -> scenarClock_ticks,
		DelayForDelay -> S1_to_S2guardTemporal1_afterDuration )
		Expression S0_to_S1_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> S0_entering,
		DelayForClockForCounting -> scenarClock_ticks,
		DelayForDelay -> S0_to_S1guardTemp0_afterDuration )
		Expression initStateintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initState_to_Up_fire,
		Clock2 -> initState_to_Up_fire )
		Expression Downintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Down_to_isOpenning_fire,
		Clock2 -> Down_to_isOpenning_fire )
		Expression initState0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initState0_to_S0_fire,
		Clock2 -> initState0_to_S0_fire )
		Expression Closingintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> isClosing_to_Down_fire,
		Clock2 -> isClosing_to_Down_fire )
		Expression Upintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Up_to_isClosing_fire,
		Clock2 -> Up_to_isClosing_fire )
		Expression S1intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> S1_to_S2_fire,
		Clock2 -> S1_to_S2_fire )
		Expression S0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> S0_to_S1_fire,
		Clock2 -> S0_to_S1_fire )
		Expression Openingintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> isOpenning_to_Up_fire,
		Clock2 -> isOpenning_to_Up_fire )
		Expression Downintermediate_allInputTransition1 = Union
		( Clock1 -> isClosing_to_Down_fire,
		Clock2 -> isClosing_to_Down_fire )
		Expression Closingintermediate_allInputTransition1 = Union
		( Clock1 -> Up_to_isClosing_fire,
		Clock2 -> Up_to_isClosing_fire )
		Expression Upintermediate_allInputTransition1 = Union
		( Clock1 -> initState_to_Up_fire,
		Clock2 -> isOpenning_to_Up_fire )
		Expression S2intermediate_allInputTransition1 = Union
		( Clock1 -> S1_to_S2_fire,
		Clock2 -> S1_to_S2_fire )
		Expression S1intermediate_allInputTransition1 = Union
		( Clock1 -> S0_to_S1_fire,
		Clock2 -> S0_to_S1_fire )
		Expression S0intermediate_allInputTransition1 = Union
		( Clock1 -> initState0_to_S0_fire,
		Clock2 -> initState0_to_S0_fire )
		Expression Openingintermediate_allInputTransition1 = Union
		( Clock1 -> Down_to_isOpenning_fire,
		Clock2 -> Down_to_isOpenning_fire )
		Expression RailRoadControlintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> RailRoadControl_start )
		Expression TrainArrivingDepartingintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> TrainArrivingDeparting_start )
/**
		 * Composition Stuff
		 */ 
		 
		Relation doCloseRendevous [ Coincides ]
		( Clock2 -> doClose_occurs ,
		Clock1 ->  doClose_startIt )
		
		Relation doOpenRendevous [ Coincides ]
		( Clock2 -> doOpen_occurs ,
		Clock1 ->  doOpen_startIt )
		
		Relation ClosedRendevous [ Coincides ]
		( Clock2 -> Closed_occurs ,
		Clock1 ->  Sendclosed_startIt )
		
		Relation OpenedRendevous [ Coincides ]
		( Clock2 ->  Opened_occurs,
		Clock1 ->  Sendopened_startIt )
		Relation fixNumberOfLoop1[Precedes](   LeftClock -> stopMotorDown_startIt ,	RightClock -> ThreeDownIsFalse )
		Relation fixNumberOfLoop2[Precedes](   LeftClock -> stopMotorUp_startIt ,	RightClock -> ThreeUpIsFalse)
		//Activity1_finishActivity
		// Start Scenario
		//Expression TrainComing_occurs =  OneTickAndNoMore( OneTickAndNoMoreClock -> clkStart )
		//Relation StartActivityOneTime2 [ Coincides ]
		//( Clock2 -> expSimu ,
		//Clock1 ->  TrainComing_occurs )
		
		
		
		Relation TrainFarEnoughFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> TrainFarEnoughintermediate_AllTriggeringOccurrences1,
		ClockB -> TrainFarEnough_occurs )
		Relation TrainComingFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> TrainComingintermediate_AllTriggeringOccurrences1,
		ClockB -> TrainComing_occurs )
		Relation doOpenFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> doOpenintermediate_AllTriggeringOccurrences1,
		ClockB -> doOpen_occurs )
		Relation doCloseFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> doCloseintermediate_AllTriggeringOccurrences1,
		ClockB -> doClose_occurs )
		Relation isClosing_to_DownCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> isClosing_to_Down_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> isClosing_to_Down_fire )
		Relation initState0_to_S0Coincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> initState0_to_S0_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> initState0_to_S0_fire )
		Relation Up_to_isClosingCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> Up_to_isClosing_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> Up_to_isClosing_fire )
		Relation Down_to_isOpenningCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> Down_to_isOpenning_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> Down_to_isOpenning_fire )
		Relation isOpenning_to_UpCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> isOpenning_to_Up_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> isOpenning_to_Up_fire )
		Relation initState_to_UpCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> initState_to_Up_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> initState_to_Up_fire )
		Relation S1_to_S2Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> S1_to_S2_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> S1_to_S2_fire )
		Relation S0_to_S1Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> S0_to_S1_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> S0_to_S1_fire )
		Relation initStateAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initState_entering,
		AlternatesRightClock -> initState_leaving )
		Relation DownAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Down_entering,
		AlternatesRightClock -> Down_leaving )
		Relation initState0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initState0_entering,
		AlternatesRightClock -> initState0_leaving )
		Relation ClosingAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Closing_entering,
		AlternatesRightClock -> Closing_leaving )
		Relation UpAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Up_entering,
		AlternatesRightClock -> Up_leaving )
		Relation S2Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> S2_entering,
		AlternatesRightClock -> S2_leaving )
		Relation S1Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> S1_entering,
		AlternatesRightClock -> S1_leaving )
		Relation S0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> S0_entering,
		AlternatesRightClock -> S0_leaving )
		Relation OpeningAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Opening_entering,
		AlternatesRightClock -> Opening_leaving )
		Relation initStateCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initStateintermediate_allFiredoutgoingTransition1,
		Clock1 -> initState_leaving )
		Relation DownCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Downintermediate_allFiredoutgoingTransition1,
		Clock1 -> Down_leaving )
		Relation initState0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initState0intermediate_allFiredoutgoingTransition1,
		Clock1 -> initState0_leaving )
		Relation ClosingCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Closingintermediate_allFiredoutgoingTransition1,
		Clock1 -> Closing_leaving )
		Relation UpCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Upintermediate_allFiredoutgoingTransition1,
		Clock1 -> Up_leaving )
		Relation S1Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> S1intermediate_allFiredoutgoingTransition1,
		Clock1 -> S1_leaving )
		Relation S0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> S0intermediate_allFiredoutgoingTransition1,
		Clock1 -> S0_leaving )
		Relation OpeningCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Openingintermediate_allFiredoutgoingTransition1,
		Clock1 -> Opening_leaving )
		Relation DownCauses_stateEntering [ Causes ]
		( LeftClock -> Downintermediate_allInputTransition1,
		RightClock -> Down_entering )
		Relation ClosingCauses_stateEntering [ Causes ]
		( LeftClock -> Closingintermediate_allInputTransition1,
		RightClock -> Closing_entering )
		Relation UpCauses_stateEntering [ Causes ]
		( LeftClock -> Upintermediate_allInputTransition1,
		RightClock -> Up_entering )
		Relation S2Causes_stateEntering [ Causes ]
		( LeftClock -> S2intermediate_allInputTransition1,
		RightClock -> S2_entering )
		Relation S1Causes_stateEntering [ Causes ]
		( LeftClock -> S1intermediate_allInputTransition1,
		RightClock -> S1_entering )
		Relation S0Causes_stateEntering [ Causes ]
		( LeftClock -> S0intermediate_allInputTransition1,
		RightClock -> S0_entering )
		Relation OpeningCauses_stateEntering [ Causes ]
		( LeftClock -> Openingintermediate_allInputTransition1,
		RightClock -> Opening_entering )
		Relation RailRoadControlintermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock2 -> initState_entering,
		Clock1 -> Up_entering )
		Relation RailRoadControlintermediate_oneStateAtATime1_3 [ Exclusion ]
		( Clock2 -> initState_entering,
		Clock1 -> Closing_entering )
		Relation RailRoadControlintermediate_oneStateAtATime1_4 [ Exclusion ]
		( Clock2 -> initState_entering,
		Clock1 -> Down_entering )
		Relation RailRoadControlintermediate_oneStateAtATime1_5 [ Exclusion ]
		( Clock2 -> initState_entering,
		Clock1 -> Opening_entering )
		Relation RailRoadControlintermediate_oneStateAtATime2_3 [ Exclusion ]
		( Clock2 -> Up_entering,
		Clock1 -> Closing_entering )
		Relation RailRoadControlintermediate_oneStateAtATime2_4 [ Exclusion ]
		( Clock2 -> Up_entering,
		Clock1 -> Down_entering )
		Relation RailRoadControlintermediate_oneStateAtATime2_5 [ Exclusion ]
		( Clock2 -> Up_entering,
		Clock1 -> Opening_entering )
		Relation RailRoadControlintermediate_oneStateAtATime3_4 [ Exclusion ]
		( Clock2 -> Closing_entering,
		Clock1 -> Down_entering )
		Relation RailRoadControlintermediate_oneStateAtATime3_5 [ Exclusion ]
		( Clock2 -> Closing_entering,
		Clock1 -> Opening_entering )
		Relation RailRoadControlintermediate_oneStateAtATime4_5 [ Exclusion ]
		( Clock2 -> Down_entering,
		Clock1 -> Opening_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock2 -> initState0_entering,
		Clock1 -> S0_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime1_3 [ Exclusion ]
		( Clock2 -> initState0_entering,
		Clock1 -> S1_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime1_4 [ Exclusion ]
		( Clock2 -> initState0_entering,
		Clock1 -> S2_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime2_3 [ Exclusion ]
		( Clock2 -> S0_entering,
		Clock1 -> S1_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime2_4 [ Exclusion ]
		( Clock2 -> S0_entering,
		Clock1 -> S2_entering )
		Relation TrainArrivingDepartingintermediate_oneStateAtATime3_4 [ Exclusion ]
		( Clock2 -> S1_entering,
		Clock1 -> S2_entering )
		Relation RailRoadControlintermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock2 -> initState_to_Up_fire,
		Clock1 -> Up_to_isClosing_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock2 -> initState_to_Up_fire,
		Clock1 -> isClosing_to_Down_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime1_4 [ Exclusion ]
		( Clock2 -> initState_to_Up_fire,
		Clock1 -> Down_to_isOpenning_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime1_5 [ Exclusion ]
		( Clock2 -> initState_to_Up_fire,
		Clock1 -> isOpenning_to_Up_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock2 -> Up_to_isClosing_fire,
		Clock1 -> isClosing_to_Down_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime2_4 [ Exclusion ]
		( Clock2 -> Up_to_isClosing_fire,
		Clock1 -> Down_to_isOpenning_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime2_5 [ Exclusion ]
		( Clock2 -> Up_to_isClosing_fire,
		Clock1 -> isOpenning_to_Up_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime3_4 [ Exclusion ]
		( Clock2 -> isClosing_to_Down_fire,
		Clock1 -> Down_to_isOpenning_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime3_5 [ Exclusion ]
		( Clock2 -> isClosing_to_Down_fire,
		Clock1 -> isOpenning_to_Up_fire )
		Relation RailRoadControlintermediate_oneTransitionAtATime4_5 [ Exclusion ]
		( Clock2 -> Down_to_isOpenning_fire,
		Clock1 -> isOpenning_to_Up_fire )
		Relation TrainArrivingDepartingintermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock2 -> initState0_to_S0_fire,
		Clock1 -> S0_to_S1_fire )
		Relation TrainArrivingDepartingintermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock2 -> initState0_to_S0_fire,
		Clock1 -> S1_to_S2_fire )
		Relation TrainArrivingDepartingintermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock2 -> S0_to_S1_fire,
		Clock1 -> S1_to_S2_fire )
		Relation RailRoadControlCoincides_firstIsInitialState [ Coincides ]
		( Clock2 -> RailRoadControl_start,
		Clock1 -> initState_entering )
		Relation TrainArrivingDepartingCoincides_firstIsInitialState [ Coincides ]
		( Clock2 -> TrainArrivingDeparting_start,
		Clock1 -> initState0_entering )
		Relation RailRoadControlCoincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> RailRoadControl_start,
		Clock1 -> RailRoadControlintermediate_onlyOneFirst1 )
		Relation TrainArrivingDepartingCoincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> TrainArrivingDeparting_start,
		Clock1 -> TrainArrivingDepartingintermediate_onlyOneFirst1 )
//
		//
		// Activity Diagram
		//
		//
		
		// ForkNode1_startIt alternates con InitNodeSTart
		Relation ForkAlternateswithInitNode [ Alternates ]
		( AlternatesLeftClock -> InitialNode1_startIt,
		AlternatesRightClock ->  ForkNode1_startIt )
		
		// Adding Alternanse with FinalNode
		Relation InitAlternatesWith [ Alternates ]
		( AlternatesLeftClock -> InitialNode1_startIt,
		AlternatesRightClock -> ActivityFinalNode1_startIt )
		Relation StartActivityOneTime [ Coincides ]
		( Clock2 -> expSimu ,
		Clock1 ->  Activity1_startActivity )
		Relation startBarrierDownCauses_waitControlToExecute [ Causes ]
		( LeftClock -> doClose_finishIt,
		RightClock -> startBarrierDown_startIt )
		Relation SendclosedCauses_waitControlToExecute [ Causes ]
		( LeftClock -> stopMotorDown_finishIt,
		RightClock -> Sendclosed_startIt )
		Relation startBarrierUpCauses_waitControlToExecute [ Causes ]
		( LeftClock -> doOpen_finishIt,
		RightClock -> startBarrierUp_startIt )
		Relation readSensorDownCauses_waitControlToExecute [ Causes ]
		( LeftClock -> MergeDown_finishIt,
		RightClock -> readSensorDown_startIt )
		Relation SendopenedCauses_waitControlToExecute [ Causes ]
		( LeftClock -> stopMotorUp_finishIt,
		RightClock -> Sendopened_startIt )
		Relation doCloseCauses_waitControlToExecute [ Causes ]
		( LeftClock -> ForkNode1_finishIt,
		RightClock -> doClose_startIt )
		Relation readSensorUpCauses_waitControlToExecute [ Causes ]
		( LeftClock -> MergeUp_finishIt,
		RightClock -> readSensorUp_startIt )
		Relation doOpenCauses_waitControlToExecute [ Causes ]
		( LeftClock -> ForkNode1_finishIt,
		RightClock -> doOpen_startIt )
		Relation stopMotorDownAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> stopMotorDown_startIt,
		AlternatesRightClock -> stopMotorDown_finishIt )
		Relation stopMotorUpAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> stopMotorUp_startIt,
		AlternatesRightClock -> stopMotorUp_finishIt )
		Relation startBarrierDownAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> startBarrierDown_startIt,
		AlternatesRightClock -> startBarrierDown_finishIt )
		Relation SendclosedAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> Sendclosed_startIt,
		AlternatesRightClock -> Sendclosed_finishIt )
		Relation startBarrierUpAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> startBarrierUp_startIt,
		AlternatesRightClock -> startBarrierUp_finishIt )
		Relation readSensorDownAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> readSensorDown_startIt,
		AlternatesRightClock -> readSensorDown_finishIt )
		Relation SendopenedAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> Sendopened_startIt,
		AlternatesRightClock -> Sendopened_finishIt )
		Relation doCloseAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> doClose_startIt,
		AlternatesRightClock -> doClose_finishIt )
		Relation readSensorUpAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> readSensorUp_startIt,
		AlternatesRightClock -> readSensorUp_finishIt )
		Relation doOpenAlternates_StartAlternatesWithFinish [ Alternates ]
		( AlternatesLeftClock -> doOpen_startIt,
		AlternatesRightClock -> doOpen_finishIt )
		Relation Activity1Causes_startCausesInit [ Causes ]
		( LeftClock -> Activity1_startActivity,
		RightClock -> InitialNode1_startIt )
		Relation Activity1Causes_lastSingleFinalNodeStopActivity [ Causes ]
		( LeftClock -> ActivityFinalNode1_finishIt,
		RightClock -> Activity1_finishActivity )
		Relation Activity1Alternates_noReEntrance [ Alternates ]
		( AlternatesLeftClock -> Activity1_startActivity,
		AlternatesRightClock -> Activity1_finishActivity )
		Relation IsUpDecisionExclusion_DecisionCausalitiesOutgoingControlNodesActions [ Exclusion ]
		( Clock2 -> stopMotorUp_startIt,
		Clock1 -> UpIsFalse )
		Relation IsDownDecisionExclusion_DecisionCausalitiesOutgoingControlNodesActions [ Exclusion ]
		( Clock2 -> stopMotorDown_startIt,
		Clock1 -> DownIsFalse )
		Relation IsUpDecisionAlternates_DecisionCausalitiesOutgoingControlNodesActionsAlternates [ Alternates ]
		( AlternatesLeftClock -> IsUpDecision_startIt,
		AlternatesRightClock -> IsUpDecision_Union_unionOfTwoChoices )
		Relation IsDownDecisionAlternates_DecisionCausalitiesOutgoingControlNodesActionsAlternates [ Alternates ]
		( AlternatesLeftClock -> IsDownDecision_startIt,
		AlternatesRightClock -> IsDownDecision_Union_unionOfTwoChoices )
		Relation MergeFinalPrecedes_MergeCausalitiesforTwoActions [ Precedes ]
		( LeftClock -> MergeFinalintermediate_unionOfIncomes1,
		RightClock -> MergeFinal_startIt )
		Relation MergeUpPrecedes_MergeCausalitiesforActionAndDecition [ Precedes ]
		( LeftClock -> MergeUp_Union_unionOfActionAndDecision,
		RightClock -> MergeUp_startIt )
		Relation MergeDownPrecedes_MergeCausalitiesforActionAndDecition [ Precedes ]
		( LeftClock -> MergeDown_Union_unionOfActionAndDecision,
		RightClock -> MergeDown_startIt )
		Relation MergeFinalCoincides_instantaneousExecution [ Precedes ]
		( LeftClock -> MergeFinal_startIt,
		RightClock -> MergeFinal_finishIt )
		Relation MergeUpCoincides_instantaneousExecution [ Precedes]
		( LeftClock -> MergeUp_startIt,
		RightClock -> MergeUp_finishIt )
		Relation IsUpDecisionCoincides_instantaneousExecution [ Precedes]
		( LeftClock -> IsUpDecision_startIt,
		RightClock -> IsUpDecision_finishIt )
		Relation MergeDownCoincides_instantaneousExecution [ Precedes ]
		( LeftClock -> MergeDown_startIt,
		RightClock -> MergeDown_finishIt )
		Relation ActivityFinalNode1Coincides_instantaneousExecution [ Precedes]
		( LeftClock -> ActivityFinalNode1_startIt,
		RightClock -> ActivityFinalNode1_finishIt )
		Relation IsDownDecisionCoincides_instantaneousExecution [ Precedes ]
		( LeftClock -> IsDownDecision_startIt,
		RightClock -> IsDownDecision_finishIt )
		Relation ForkNode1Coincides_instantaneousExecution [ Precedes ]
		( LeftClock -> ForkNode1_startIt,
		RightClock -> ForkNode1_finishIt )
		Relation InitialNode1Coincides_instantaneousExecution [ Precedes ]
		( LeftClock -> InitialNode1_startIt,
		RightClock -> InitialNode1_finishIt )
		Relation IsUpDecisionCauses_waitInputToControlFromAction [ Causes ]
		( LeftClock -> readSensorUp_finishIt,
		RightClock -> IsUpDecision_startIt )
		Relation IsDownDecisionCauses_waitInputToControlFromAction [ Causes ]
		( LeftClock -> readSensorDown_finishIt,
		RightClock -> IsDownDecision_startIt )
		Relation ActivityFinalNode1Causes_waitInputFromMergeNode [ Causes ]
		( LeftClock -> MergeFinal_finishIt,
		RightClock -> ActivityFinalNode1_startIt )
		Clock TrainFarEnough_occurs : clock -> evt_TrainFarEnough_occurs
		( "TFSM->TrainFarEnough" ) 
		Clock TrainComing_occurs : clock -> evt_TrainComing_occurs
		( "TFSM->TrainComing" )
		Clock start_occurs : clock -> evt_start_occurs
		( "TFSM->start" )
		Clock doOpen_occurs : clock -> evt_doOpen_occurs
		( "TFSM->doOpen" )
		Clock doClose_occurs : clock -> evt_doClose_occurs
		( "TFSM->doClose" )
		Clock Closed_occurs : clock -> evt_Closed_occurs
		( "TFSM->Closed" )
		Clock Opened_occurs : clock -> evt_Opened_occurs
		( "TFSM->Opened" )
		Clock scenarClock_ticks : clock -> evt_scenarClock_ticks
		( "TFSM->scenarClock" )
		Clock isClosing_to_Down_fire : clock -> evt_isClosing_to_Down_fire
		( "TFSM->isClosing_to_Down" )
		Clock initState0_to_S0_fire : clock -> evt_initState0_to_S0_fire
		( "TFSM->initState0_to_S0" )
		Clock Up_to_isClosing_fire : clock -> evt_Up_to_isClosing_fire
		( "TFSM->Up_to_isClosing" )
		Clock Down_to_isOpenning_fire : clock -> evt_Down_to_isOpenning_fire
		( "TFSM->Down_to_isOpenning" )
		Clock isOpenning_to_Up_fire : clock -> evt_isOpenning_to_Up_fire
		( "TFSM->isOpenning_to_Up" )
		Clock S1_to_S2_fire : clock -> evt_S1_to_S2_fire
		( "TFSM->S1_to_S2" )
		Clock initState_to_Up_fire : clock -> evt_initState_to_Up_fire
		( "TFSM->initState_to_Up" )
		Clock S0_to_S1_fire : clock -> evt_S0_to_S1_fire
		( "TFSM->S0_to_S1" )
		Clock initState_entering : clock -> evt_initState_entering
		( "TFSM->initState" )
		: start
		Clock Down_entering : clock -> evt_Down_entering
		( "TFSM->Down" )
		: start
		Clock initState0_entering : clock -> evt_initState0_entering
		( "TFSM->initState0" )
		: start
		Clock Closing_entering : clock -> evt_Closing_entering
		( "TFSM->Closing" )
		: start
		Clock Up_entering : clock -> evt_Up_entering
		( "TFSM->Up" )
		: start
		Clock S2_entering : clock -> evt_S2_entering
		( "TFSM->S2" )
		: start
		Clock S1_entering : clock -> evt_S1_entering
		( "TFSM->S1" )
		: start
		Clock S0_entering : clock -> evt_S0_entering
		( "TFSM->S0" )
		: start
		Clock Opening_entering : clock -> evt_Opening_entering
		( "TFSM->Opening" )
		: start
		Clock initState_leaving : clock -> evt_initState_leaving
		( "TFSM->initState" )
		: finish
		Clock Down_leaving : clock -> evt_Down_leaving
		( "TFSM->Down" )
		: finish
		Clock initState0_leaving : clock -> evt_initState0_leaving
		( "TFSM->initState0" )
		: finish
		Clock Closing_leaving : clock -> evt_Closing_leaving
		( "TFSM->Closing" )
		: finish
		Clock Up_leaving : clock -> evt_Up_leaving
		( "TFSM->Up" )
		: finish
		Clock S2_leaving : clock -> evt_S2_leaving
		( "TFSM->S2" )
		: finish
		Clock S1_leaving : clock -> evt_S1_leaving
		( "TFSM->S1" )
		: finish
		Clock S0_leaving : clock -> evt_S0_leaving
		( "TFSM->S0" )
		: finish
		Clock Opening_leaving : clock -> evt_Opening_leaving
		( "TFSM->Opening" )
		: finish
		Clock RailRoadControl_start : clock -> evt_RailRoadControl_start
		( "TFSM->RailRoadControl" )
		Clock TrainArrivingDeparting_start : clock -> evt_TrainArrivingDeparting_start
		( "TFSM->TrainArrivingDeparting" )
		Clock RailRoadControl_stall : clock -> evt_RailRoadControl_stall
		( )
		Clock TrainArrivingDeparting_stall : clock -> evt_TrainArrivingDeparting_stall
		( )
		Integer S1_to_S2guardTemporal1_afterDuration : int = 25
		Integer S0_to_S1guardTemp0_afterDuration : int = 5
		Clock clkStart 
		Clock MergeFinal_startIt -> evt_MergeFinal_startIt
		(  )
		: start
		Clock MergeUp_startIt -> evt_MergeUp_startIt
		( "fUML->MergeUp" )
		: start
		Clock IsUpDecision_startIt -> evt_IsUpDecision_startIt
		( "fUML->IsUpDecision" )
		: start
		Clock MergeDown_startIt -> evt_MergeDown_startIt
		( "fUML->MergeDown" )
		: start
		Clock ActivityFinalNode1_startIt -> evt_ActivityFinalNode1_startIt
		( "fUML->ActivityFinalNode1" )
		: start
		Clock IsDownDecision_startIt -> evt_IsDownDecision_startIt
		( "fUML->IsDownDecision" )
		: start
		Clock ForkNode1_startIt -> evt_ForkNode1_startIt
		( "fUML->ForkNode1" )
		: start
		Clock InitialNode1_startIt -> evt_InitialNode1_startIt
		( "fUML->InitialNode1" )
		: start
		Clock MergeFinal_finishIt -> evt_MergeFinal_finishIt
		(  )
		: finish
		Clock MergeUp_finishIt -> evt_MergeUp_finishIt
		( "fUML->MergeUp" )
		: finish
		Clock IsUpDecision_finishIt -> evt_IsUpDecision_finishIt
		( "fUML->IsUpDecision" )
		: finish
		Clock MergeDown_finishIt -> evt_MergeDown_finishIt
		( "fUML->MergeDown" )
		: finish
		Clock ActivityFinalNode1_finishIt -> evt_ActivityFinalNode1_finishIt
		( "fUML->ActivityFinalNode1" )
		: finish
		Clock IsDownDecision_finishIt -> evt_IsDownDecision_finishIt
		( "fUML->IsDownDecision" )
		: finish
		Clock ForkNode1_finishIt -> evt_ForkNode1_finishIt
		( "fUML->ForkNode1" )
		: finish
		Clock InitialNode1_finishIt -> evt_InitialNode1_finishIt
		( "fUML->InitialNode1" )
		: finish
		Clock UpIsFalse -> evt_UpIsFalse
		( "fUML->MergeUp" )
		Clock DownIsFalse -> evt_DownIsFalse
		( "fUML->MergeDown" )
		


		
		Clock Activity1_startActivity -> evt_Activity1_startActivity
		( "fUML->Model::Activity1" )
		: start
		Clock Activity1_finishActivity -> evt_Activity1_finishActivity
		( "fUML->Model::Activity1" )
		: finish
		Clock stopMotorDown_startIt -> evt_stopMotorDown_startIt
		( "fUML->stopMotorDown" )
		: start
		Clock stopMotorUp_startIt -> evt_stopMotorUp_startIt
		( "fUML->stopMotorUp" )
		: start
		Clock startBarrierDown_startIt -> evt_startBarrierDown_startIt
		( "fUML->startBarrierDown" )
		: start
		Clock Sendclosed_startIt -> evt_Sendclosed_startIt
		( "fUML->Sendclosed" )
		: start
		Clock startBarrierUp_startIt -> evt_startBarrierUp_startIt
		( "fUML->startBarrierUp" )
		: start
		Clock readSensorDown_startIt -> evt_readSensorDown_startIt
		( "fUML->readSensorDown" )
		: start
		Clock Sendopened_startIt -> evt_Sendopened_startIt
		( "fUML->Sendopened" )
		: start
		Clock doClose_startIt -> evt_doClose_startIt
		( "fUML->doClose" )
		: start
		Clock readSensorUp_startIt -> evt_readSensorUp_startIt
		( "fUML->readSensorUp" )
		: start
		Clock doOpen_startIt -> evt_doOpen_startIt
		( "fUML->doOpen" )
		: start
		Clock stopMotorDown_finishIt -> evt_stopMotorDown_finishIt
		( "fUML->stopMotorDown" )
		: finish
		Clock stopMotorUp_finishIt -> evt_stopMotorUp_finishIt
		( "fUML->stopMotorUp" )
		: finish
		Clock startBarrierDown_finishIt -> evt_startBarrierDown_finishIt
		( "fUML->startBarrierDown" )
		: finish
		Clock Sendclosed_finishIt -> evt_Sendclosed_finishIt
		( "fUML->Sendclosed" )
		: finish
		Clock startBarrierUp_finishIt -> evt_startBarrierUp_finishIt
		( "fUML->startBarrierUp" )
		: finish
		Clock readSensorDown_finishIt -> evt_readSensorDown_finishIt
		( "fUML->readSensorDown" )
		: finish
		Clock Sendopened_finishIt -> evt_Sendopened_finishIt
		( "fUML->Sendopened" )
		: finish
		Clock doClose_finishIt -> evt_doClose_finishIt
		( "fUML->doClose" )
		: finish
		Clock readSensorUp_finishIt -> evt_readSensorUp_finishIt
		( "fUML->readSensorUp" )
		: finish
		Clock doOpen_finishIt -> evt_doOpen_finishIt
		( "fUML->doOpen" )
		: finish
		
		
	}
}