ClockConstraintSystem systemExecutionModel {
	imports {
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as kernel ;
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as CCSL ;
		import "./TFSMMoC.ccslLib" as TFSMMoC ;
		import "platform:/resource/fr.inria.aoste.gemoc.example.tfsm.eclmoc/models/testParallel.tfsm" as System ;
	}
	entryBlock mainBlock
	Block mainBlock {
		Expression doSamplingintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> NormalSelfLoop_fire,
		Clock2 -> SafeSelfLoop_fire )
		Expression Sampleintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> SenseLoop_fire,
		Clock2 -> SenseLoop_fire )
		Expression startControlintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> obstacleDetected_fire,
		Clock2 -> obstacleDetected_fire )
		Expression initToNormalSampling_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> initState_entering,
		SampledOnTrigger -> startControl_occurs )
		Expression initToSenseLoop_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> initStateSensor_entering,
		SampledOnTrigger -> startControl_occurs )
		Expression normalToSafeintermediate_otherFireFromTheSameState21 = Union
		( Clock1 -> NormalSelfLoop_fire,
		Clock2 -> NormalSelfLoop_fire )
		Expression obstacleDetectedintermediate_otherFireFromTheSameState21 = Union
		( Clock1 -> SenseLoop_fire,
		Clock2 -> SenseLoop_fire )
		Expression safeToNormalintermediate_otherFireFromTheSameState21 = Union
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> SafeSelfLoop_fire )
		Expression SafeSelfLoopintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> safeToNormal_fire,
		Clock2 -> safeToNormal_fire )
		Expression SenseLoopintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> obstacleDetected_fire,
		Clock2 -> obstacleDetected_fire )
		Expression NormalSelfLoopintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> normalToSafe_fire,
		Clock2 -> normalToSafe_fire )
		Expression safeSamplingintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> safeToNormal_fire )
		Expression SampleAndDetectintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> SenseLoop_fire,
		Clock2 -> obstacleDetected_fire )
		Expression normalSamplingintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> NormalSelfLoop_fire,
		Clock2 -> normalToSafe_fire )
		Expression initStateSensorintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initToSenseLoop_fire,
		Clock2 -> initToSenseLoop_fire )
		Expression initStateintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> initToNormalSampling_fire )
		Expression safeSamplingintermediate_allInputTransition1 = Union
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> normalToSafe_fire )
		Expression SampleAndDetectintermediate_allInputTransition1 = Union
		( Clock1 -> initToSenseLoop_fire,
		Clock2 -> SenseLoop_fire )
		Expression SampleAndDetectintermediate_allInputTransition3 = Union
		( Clock1 -> SampleAndDetectintermediate_allInputTransition1,
		Clock2 -> obstacleDetected_fire )
		Expression normalSamplingintermediate_allInputTransition1 = Union
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> NormalSelfLoop_fire )
		Expression normalSamplingintermediate_allInputTransition3 = Union
		( Clock1 -> normalSamplingintermediate_allInputTransition1,
		Clock2 -> safeToNormal_fire )
		Expression robotSideintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> robotSide_start )
		Expression sensorSideintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> sensorSide_start )
		Expression wait45ticks=FilterBy( FilterByClock-> referencedClock_ticks 	,FilterBySeq-> filter1)
		Expression wait26ticks=FilterBy( FilterByClock-> referencedClock_ticks 	,FilterBySeq-> filter2)
		Relation doSamplingCoincides_occursWhenSolicitate [ Coincides ]
		( Clock2 -> doSamplingintermediate_AllTriggeringOccurrences1,
		Clock1 -> doSampling_occurs )
		Relation SampleCoincides_occursWhenSolicitate [ Coincides ]
		( Clock2 -> Sampleintermediate_AllTriggeringOccurrences1,
		Clock1 -> Sample_occurs )
		Relation startControlCoincides_occursWhenSolicitate [ Coincides ]
		( Clock2 -> startControlintermediate_AllTriggeringOccurrences1,
		Clock1 -> startControl_occurs )
		Relation initToNormalSamplingCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> initToNormalSampling_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> initToNormalSampling_fire )
		Relation initToSenseLoopCoincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> initToSenseLoop_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> initToSenseLoop_fire )
		Relation normalToSafeEventTransition_fireWhenEventOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> normalSampling_entering,
		EventTransition_Trigger -> goToSafeSampling_occurs,
		EventTransition_Reset -> normalToSafeintermediate_otherFireFromTheSameState21,
		EventTransition_Fire -> normalToSafe_fire )
		Relation obstacleDetectedEventTransition_fireWhenEventOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> SampleAndDetect_entering,
		EventTransition_Trigger -> startControl_occurs,
		EventTransition_Reset -> obstacleDetectedintermediate_otherFireFromTheSameState21,
		EventTransition_Fire -> obstacleDetected_fire )
		Relation safeToNormalEventTransition_fireWhenEventOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> safeSampling_entering,
		EventTransition_Trigger -> goToNormalSampling_occurs,
		EventTransition_Reset -> safeToNormalintermediate_otherFireFromTheSameState21,
		EventTransition_Fire -> safeToNormal_fire )
		Relation SafeSelfLoopTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> safeSampling_entering,
		TemporalTransition_RefClock -> referencedClock_ticks,
		TemporalTransition_Reset -> SafeSelfLoopintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> SafeSelfLoopsafeGuardguardDelay_afterDuration,
		TemporalTransition_Fire -> SafeSelfLoop_fire )
		Relation SenseLoopTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> SampleAndDetect_entering,
		TemporalTransition_RefClock -> referencedClockSampling_ticks,
		TemporalTransition_Reset -> SenseLoopintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> SenseLoopnormalGuardguardDelay_afterDuration,
		TemporalTransition_Fire -> SenseLoop_fire )
		Relation NormalSelfLoopTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> normalSampling_entering,
		TemporalTransition_RefClock -> referencedClock_ticks,
		TemporalTransition_Reset -> NormalSelfLoopintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> NormalSelfLoopnormalGuardguardDelay_afterDuration,
		TemporalTransition_Fire -> NormalSelfLoop_fire )
		Relation safeSamplingAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> safeSampling_entering,
		AlternatesRightClock -> safeSampling_leaving )
		Relation SampleAndDetectAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> SampleAndDetect_entering,
		AlternatesRightClock -> SampleAndDetect_leaving )
		Relation normalSamplingAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> normalSampling_entering,
		AlternatesRightClock -> normalSampling_leaving )
		Relation initStateSensorAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initStateSensor_entering,
		AlternatesRightClock -> initStateSensor_leaving )
		Relation initStateAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initState_entering,
		AlternatesRightClock -> initState_leaving )
		Relation safeSamplingCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> safeSamplingintermediate_allFiredoutgoingTransition1,
		Clock1 -> safeSampling_leaving )
		Relation SampleAndDetectCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> SampleAndDetectintermediate_allFiredoutgoingTransition1,
		Clock1 -> SampleAndDetect_leaving )
		Relation normalSamplingCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> normalSamplingintermediate_allFiredoutgoingTransition1,
		Clock1 -> normalSampling_leaving )
		Relation initStateSensorCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initStateSensorintermediate_allFiredoutgoingTransition1,
		Clock1 -> initStateSensor_leaving )
		Relation initStateCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initStateintermediate_allFiredoutgoingTransition1,
		Clock1 -> initState_leaving )
		Relation safeSamplingCauses_stateEntering [ Causes ]
		( LeftClock -> safeSamplingintermediate_allInputTransition1,
		RightClock -> safeSampling_entering )
		Relation SampleAndDetectCauses_stateEntering [ Causes ]
		( LeftClock -> SampleAndDetectintermediate_allInputTransition3,
		RightClock -> SampleAndDetect_entering )
		Relation normalSamplingCauses_stateEntering [ Causes ]
		( LeftClock -> normalSamplingintermediate_allInputTransition3,
		RightClock -> normalSampling_entering )
		Relation robotSideintermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock1 -> initState_entering,
		Clock2 -> safeSampling_entering )
		Relation robotSideintermediate_oneStateAtATime1_3 [ Exclusion ]
		( Clock1 -> initState_entering,
		Clock2 -> normalSampling_entering )
		Relation robotSideintermediate_oneStateAtATime2_3 [ Exclusion ]
		( Clock1 -> safeSampling_entering,
		Clock2 -> normalSampling_entering )
		Relation sensorSideintermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock1 -> initStateSensor_entering,
		Clock2 -> SampleAndDetect_entering )
		Relation robotSideintermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> SafeSelfLoop_fire )
		Relation robotSideintermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> safeToNormal_fire )
		Relation robotSideintermediate_oneTransitionAtATime1_4 [ Exclusion ]
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> NormalSelfLoop_fire )
		Relation robotSideintermediate_oneTransitionAtATime1_5 [ Exclusion ]
		( Clock1 -> initToNormalSampling_fire,
		Clock2 -> normalToSafe_fire )
		Relation robotSideintermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> safeToNormal_fire )
		Relation robotSideintermediate_oneTransitionAtATime2_4 [ Exclusion ]
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> NormalSelfLoop_fire )
		Relation robotSideintermediate_oneTransitionAtATime2_5 [ Exclusion ]
		( Clock1 -> SafeSelfLoop_fire,
		Clock2 -> normalToSafe_fire )
		Relation robotSideintermediate_oneTransitionAtATime3_4 [ Exclusion ]
		( Clock1 -> safeToNormal_fire,
		Clock2 -> NormalSelfLoop_fire )
		Relation robotSideintermediate_oneTransitionAtATime3_5 [ Exclusion ]
		( Clock1 -> safeToNormal_fire,
		Clock2 -> normalToSafe_fire )
		Relation robotSideintermediate_oneTransitionAtATime4_5 [ Exclusion ]
		( Clock1 -> NormalSelfLoop_fire,
		Clock2 -> normalToSafe_fire )
		Relation sensorSideintermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock1 -> initToSenseLoop_fire,
		Clock2 -> SenseLoop_fire )
		Relation sensorSideintermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock1 -> initToSenseLoop_fire,
		Clock2 -> obstacleDetected_fire )
		Relation sensorSideintermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock1 -> SenseLoop_fire,
		Clock2 -> obstacleDetected_fire )
		Relation robotSideCoincides_firstIsInitialState [ Coincides ]
		( Clock2 -> robotSide_start,
		Clock1 -> initState_entering )
		Relation sensorSideCoincides_firstIsInitialState [ Coincides ]
		( Clock2 -> sensorSide_start,
		Clock1 -> initStateSensor_entering )
		Relation robotSideCoincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> robotSide_start,
		Clock1 -> robotSideintermediate_onlyOneFirst1 )
		Relation sensorSideCoincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> sensorSide_start,
		Clock1 -> sensorSideintermediate_onlyOneFirst1 )
		Relation wait45ticksAndMakegoToNormalOccuring[Coincides](Clock2-> wait45ticks ,	Clock1-> goToNormalSampling_occurs)
		Relation wait45ticksAndMakegoToSafeOccuring[Coincides](Clock2-> wait26ticks ,	Clock1-> goToSafeSampling_occurs)
		Clock doSampling_occurs : clock -> evt_doSampling_occurs
		( "doSampling" )
		Clock goToNormalSampling_occurs : clock -> evt_goToNormalSampling_occurs
		( "goToNormalSampling" )
		Clock Sample_occurs : clock -> evt_Sample_occurs
		( "SampleAndDetect" )
		Clock startControl_occurs : clock -> evt_startControl_occurs
		( "startControl" )
		Clock goToSafeSampling_occurs : clock -> evt_goToSafeSampling_occurs
		( "goToSafeSampling" )
		Clock referencedClock_ticks : clock -> evt_referencedClock_ticks
		( "referencedClock" )
		Clock referencedClockSampling_ticks : clock -> evt_referencedClockSampling_ticks
		( "referencedClock" )
		Clock SafeSelfLoop_fire : clock -> evt_SafeSelfLoop_fire
		( )
		: start
		Clock SenseLoop_fire : clock -> evt_SenseLoop_fire
		( )
		: start
		Clock initToNormalSampling_fire : clock -> evt_initToNormalSampling_fire
		( )
		: start
		Clock NormalSelfLoop_fire : clock -> evt_NormalSelfLoop_fire
		( )
		: start
		Clock normalToSafe_fire : clock -> evt_normalToSafe_fire
		( )
		: start
		Clock obstacleDetected_fire : clock -> evt_obstacleDetected_fire
		( )
		: start
		Clock safeToNormal_fire : clock -> evt_safeToNormal_fire
		( )
		: start
		Clock initToSenseLoop_fire : clock -> evt_initToSenseLoop_fire
		( )
		: start
		Clock safeSampling_entering : clock -> evt_safeSampling_entering
		( )
		: start
		Clock SampleAndDetect_entering : clock -> evt_SampleAndDetect_entering
		( )
		: start
		Clock normalSampling_entering : clock -> evt_normalSampling_entering
		( )
		: start
		Clock initStateSensor_entering : clock -> evt_initStateSensor_entering
		( )
		: start
		Clock initState_entering : clock -> evt_initState_entering
		( )
		: start
		Clock safeSampling_leaving : clock -> evt_safeSampling_leaving
		( )
		: start
		Clock SampleAndDetect_leaving : clock -> evt_SampleAndDetect_leaving
		( )
		: start
		Clock normalSampling_leaving : clock -> evt_normalSampling_leaving
		( )
		: start
		Clock initStateSensor_leaving : clock -> evt_initStateSensor_leaving
		( )
		: start
		Clock initState_leaving : clock -> evt_initState_leaving
		( )
		: start
		Clock robotSide_start : clock -> evt_robotSide_start
		( "robotSide" )
		: start
		Clock sensorSide_start : clock -> evt_sensorSide_start
		( "sensorSide" )
		: start
				Sequence filter1= 45(12)
		Sequence filter2= 24(14)
		Integer SafeSelfLoopsafeGuardguardDelay_afterDuration : int = 7
		Integer SenseLoopnormalGuardguardDelay_afterDuration : int = 15
		Integer NormalSelfLoopnormalGuardguardDelay_afterDuration : int = 15
	}
}