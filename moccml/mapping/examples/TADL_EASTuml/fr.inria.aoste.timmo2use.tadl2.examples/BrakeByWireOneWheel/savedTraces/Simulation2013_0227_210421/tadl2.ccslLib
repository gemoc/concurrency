/* CCSL Library 
 *
 *@author:  agoknil / j.deantoni
 * date :  mer. mai 9 2012  04:49:34 CEST 
 */
Library CCSL {
	imports {
		 // import statements
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as lib0; 
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as lib1; 

	}
	DenseClockType physicalTime{
		baseUnit micros
	}
	RelationLibrary timmo2useRelations{
		RelationDefinition PeriodicDef[Periodic]{
			Integer offset=0
			Expression Periodic_temp=Periodic( PeriodicBaseClock-> PeriodicC2 , PeriodicPeriod-> PeriodicP , PeriodicOffset-> OffsetP)
			Relation relation_0[Coincides ( Clock2-> Periodic_temp ,	Clock1-> PeriodicC1  )

		}
		RelationDefinition PeriodicDef[PeriodicTB]{
			Integer offset=0
			Expression Periodic_temp=Periodic( PeriodicBaseClock-> PeriodicC2 , PeriodicPeriod-> PeriodicR , PeriodicOffset-> OffsetP)
			Relation relation_0[Periodic (PeriodicC1-> Periodic_temp ,	PeriodicC2-> PeriodicC1 ,	PeriodicP-> PeriodicL, OffsetP-> offset)			

		}
		RelationDefinition DelayConstraintDef[DelayConstraint]{
			Expression lower=DelayFor( DelayForClockToDelay-> sourceE ,DelayForClockForCounting-> lowerC ,DelayForDelay-> lowerV  )
			Relation relation_1[NonStrictPrecedes ( LeftClock-> lower  , RightClock-> targetE )
			
			Expression upper=DelayFor( DelayForClockToDelay-> sourceE ,DelayForClockForCounting-> upperC ,DelayForDelay-> upperV  )
			Relation relation_2[NonStrictPrecedes (   LeftClock-> targetE , RightClock-> upper  )

		}
		RelationDefinition SilentConstrainDef[SilentConstraint]{
			Expression lower=DelayFor( DelayForClockToDelay-> sourceE ,DelayForClockForCounting-> lowerC ,DelayForDelay-> lowerV  )
			
			Expression upper=DelayFor( DelayForClockToDelay-> sourceE ,DelayForClockForCounting-> upperC ,DelayForDelay-> upperV  )
			
	
		}
		RelationDefinition RepeatConstrainDef[RepeatConstraint]{
			Integer offset=0
			Expression lower=Periodic( PeriodicBaseClock-> BaseC , PeriodicPeriod-> MinV , PeriodicOffset-> offset)
			Expression upper=Periodic( PeriodicBaseClock-> BaseC , PeriodicPeriod-> MaxV , PeriodicOffset-> offset)
			Relation relation_1[NonStrictPrecedes (   LeftClock-> lower , RightClock-> TempC  )
			Relation relation_2[NonStrictPrecedes (   LeftClock-> TempC , RightClock-> upper  )
			Relation relation_3[Periodic (PeriodicC1-> RepetitionC ,	PeriodicC2-> TempC ,	PeriodicP-> Span, OffsetP-> offset)
		}
		RelationDeclaration Periodic(PeriodicC1:clock, PeriodicC2:clock, PeriodicP:int, OffsetP: int) RelationDeclaration PeriodicTB(PeriodicC1:clock, PeriodicC2:clock, PeriodicL:int, PeriodicR:int, OffsetP: int)
		//Delay Constraint
		RelationDeclaration DelayConstraint(sourceE:clock, targetE:clock, lowerV:int, lowerC:clock, upperV:int, upperC:clock)
		//Silent Constraint
		RelationDeclaration SilentConstraint(sourceE:clock, targetE:clock, lowerV:int, lowerC:clock, upperV:int, upperC:clock) RelationDeclaration RepeatConstraint(RepetitionC:clock, BaseC:clock, TempC:clock, MinV:int, MaxV: int, Span: int)
	}
	ExpressionLibrary timmo2useUsefullExpressions{
		ExpressionDefinition AgeEventChainOverrideDef[AgeEventChainOverride]{
			root = AgeEventChainOverride_delayFor1_minus_BSampleonA
			
			Integer AgeEventChainOverride_delay = 1
			Expression AgeEventChainOverride_left_DelayedBy_One=DelayFor( DelayForClockToDelay-> AgeEventChainOverride_left ,DelayForClockForCounting-> AgeEventChainOverride_left ,DelayForDelay-> AgeEventChainOverride_delay  )
			Expression AgeEventChainOverride_right_SampledOn_left=NonStrictSampledOn(NonStrictSampledOnSampledClock-> AgeEventChainOverride_right ,NonStrictSampledOnTrigger-> AgeEventChainOverride_left  )
			Expression AgeEventChainOverride_delayFor1_minus_BSampleonA =Minus( MinusLeftClock-> AgeEventChainOverride_left_DelayedBy_One ,MinusRightClock-> AgeEventChainOverride_right_SampledOn_left  )
		}
		ExpressionDeclaration AgeEventChainOverride(AgeEventChainOverride_left:clock, AgeEventChainOverride_right:clock):clock
	}
}