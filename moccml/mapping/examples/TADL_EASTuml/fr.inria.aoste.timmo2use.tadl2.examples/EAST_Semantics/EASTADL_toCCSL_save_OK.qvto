import fr.inria.aoste.timesquare.ecl.EclQVToHelper;

	
modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
//modeltype pivot uses 'http://www.eclipse.org/ocl/3.1.0/Pivot';
	   
modeltype inMM uses 'http://www.eclipse.org/uml2/4.0.0/UML';
modeltype QVT uses 'http://www.eclipse.org/QVT/1.0.0/Operational';//http://www.eclipse.org/m2m/qvt/oml/1.0.0/Stdlib';//http://www.eclipse.org/qvt/1.0/ImperativeOCL'; 
modeltype TimeModel uses 'http://fr.inria.aoste.timemodel';
modeltype eastadl uses 'http://fr.inria.aoste.gemoc.eastadl';

	

transformation doUML_To_CCSL(in inM : inMM, out TimeModel);

property theCCSLSpec			:TimeModel::CCSLModel::ClockConstraintSystem = null;
property theMainBlock			:TimeModel::CCSLModel::Block				 = null;

property Kernel_Integer 	: TimeModel::BasicType::Type		= null;
property Kernel_Clock_Type 	: TimeModel::BasicType::Type		= null;

property seqOfRelationDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration)    = Sequence{};
property seqOfAbstractEntity :		Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)    = Sequence{};
property seqOfExpressionDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration)    = Sequence{};


query identifyUserRelations() {
	var kernelTypes :  	Sequence(TimeModel::BasicType::Type) := Sequence{};
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/EAST_Semantics/EASTADL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/EAST_Semantics/EASTADL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/EAST_Semantics/EASTADL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/EAST_Semantics/EASTADL.ccslLib")[TimeModel::BasicType::Type];

	Kernel_Integer 					:= kernelTypes[name='int']->asSequence()->first();
	Kernel_Clock_Type				:= kernelTypes[name='clock']->asSequence()->first();	
	return;
}


//usefull function :)
	mapping Real::Real2Integer(n: String) :TimeModel::BasicType::IntegerElement {
		name:= n;
		type:= Kernel_Integer;
		value := self.round();

		end{
			theMainBlock.elements += result;
		}
	}

main() {
	identifyUserRelations();
	inM.rootObjects()[inMM::Package]->asSequence()->first()-> map uml2CCSL();
	}

			
			

	mapping inMM::Package::uml2CCSL() : TimeModel::CCSLModel::ClockConstraintSystem {
	    theCCSLSpec := result;
	    name := self.name;
	    theMainBlock :=object TimeModel::CCSLModel::Block{
	    	name := "mainBlock";
	    };
	    subBlock += theMainBlock;
	    result.superBlock := theMainBlock;

		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'kernel';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'CCSL';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/EAST_Semantics/EASTADL.ccslLib';
			alias := 'EASTADL';
			
		}; 
	
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};

		

		inM.rootObjects().allSubobjects()->including(self)[ Class ]->map activate2Clock();
		


		

		inM.rootObjects().allSubobjects()->including(self)[ Port ]->map write2Clock();
		inM.rootObjects().allSubobjects()->including(self)[ Port ]->map read2Clock();
		


		

		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map start2Clock();
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map stop2Clock();
		


		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map PrototypeStartsWhenTriggered322PrototypeStartsWhenTriggered();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map StartThenStop132StartThenStop();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map AllOutputPortWriteCoincides132AllOutputPortWriteCoincides();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map OutputPortWriteCoincidesWithStop132OutputPortWriteCoincidesWithStop();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map AllInputPortReadCoincidesWithStart562AllInputPortReadCoincidesWithStart();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map InputPortReadCoincidesWithStart562InputPortReadCoincidesWithStart();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Property ]->map EventTriggerRule952EventTriggerRule();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ Port ]->map portCausalities192portCausalities();
		inM.rootObjects().allSubobjects()->including(self)[ Port ]->map portMutexReadWrite192portMutexReadWrite();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ Connector ]->map instantaneousCommunication12instantaneousCommunication();
		
	}





//create the expressions...
	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM::Property::intermediate_doIt2Expression(an1 : uml::Port, an2 : uml::Port, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := self.name+'intermediate_doIt'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "ResetableSup")->first();
				 
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an1.name+'_read']->first();
					_abstract := seqOfAbstractEntity[name = 'ResetableSup_clock1' and container().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).name = 'ResetableSup']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an2.name+'_read']->first();
					_abstract := seqOfAbstractEntity[name = 'ResetableSup_clock1' and container().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).name = 'ResetableSup']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfAbstractEntity[name = 'ResetableSup_reset' and container().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).name = 'ResetableSup']->first();
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM::Property::intermediate_doIt2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : uml::Port, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := self.name+'intermediate_doIt'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "ResetableSup")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					_abstract := seqOfExpressionDeclaration[name = 'ResetableSup']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);									};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an.name+'_read']->first();
					
					_abstract := seqOfAbstractEntity[name = 'ResetableSup_clock1' and container().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).name = 'ResetableSup']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfAbstractEntity[name = 'ResetableSup_reset' and container().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration).name = 'ResetableSup']->first();
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM::Property::doIt2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{
		var sources : Sequence(uml::Port) := self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								).oclAsType(Port)->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_doIt2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_doIt2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_doIt2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}





	 	mapping inMM::Class::activate2Clock() :TimeModel::Clock 
			when { (not self.getAppliedStereotype('eastLight::FunctionTrigger')->isEmpty()) }
		{
			name:= self.name+'_activate';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_activate';
				kind := TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM::Port::write2Clock() :TimeModel::Clock 
		{
			name:= self.name+'_write';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_write';
				kind := TimeModel::EventKind::produce;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM::Port::read2Clock() :TimeModel::Clock 
			when { (self.getValue(self.getAppliedStereotype('eastLight::FlowPort'),'direction') = eastLight::PortDirection::IN) }
		{
			name:= self.name+'_read';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_read';
				kind := TimeModel::EventKind::consume;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM::Property::start2Clock() :TimeModel::Clock 
			when { (not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()) }
		{
			name:= self.name+'_start';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_start';
				kind := TimeModel::EventKind::start;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM::Property::stop2Clock() :TimeModel::Clock 
			when { (not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()) }
		{
			name:= self.name+'_stop';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_stop';
				kind := TimeModel::EventKind::finish;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		

//relation stuff		
	
		mapping inMM::Property::PrototypeStartsWhenTriggered322PrototypeStartsWhenTriggered(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()) 
				
}
		{
		 	name := self.name+"Coincides_PrototypeStartsWhenTriggered";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
						bindable := theMainBlock.elements[name = self.getValue(self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype'),'functionTrigger')
											.oclAsType(eastLight::FunctionTrigger).base_Class.name+'_activate']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM::Property::StartThenStop132StartThenStop(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(not  self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()) 
				
}
		{
		 	name := self.name+"Alternates_StartThenStop";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Alternates")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfAbstractEntity[name = 'AlternatesLeftClock']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_stop']->first();
					_abstract := seqOfAbstractEntity[name = 'AlternatesRightClock']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	

//Create an intermediate relation
	mapping inMM::Property::intermediate_AllOutputPortWriteCoincides132AllOutputPortWriteCoincides(an1 : uml::Port, an2 : uml::Port, nbi : Integer, nbj : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
	{
		name := self.name+'intermediate_AllOutputPortWriteCoincides'+nbi.toString()+"_"+nbj.toString();
		var seqAbstract : Sequence(Stdlib::Element) := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::Coincidence).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence();
		type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an1.name+'_write']->first();
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an2.name+'_write']->first();
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.relations += result;
		}
	}
	
	mapping inMM::Property::AllOutputPortWriteCoincides132AllOutputPortWriteCoincides()
			when { (not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()	
			) }
	{
		init{
			var sources : Sequence(uml::Port) := self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::OUT
								).oclAsType(Port)->asSequence();
			var i : Integer := 1;
			var j : Integer := 1;
			var size : Integer = sources->size(); 
			while (i <= size){
				j := i+1;
				while (j <= size){
					theMainBlock.relations +=  self.map intermediate_AllOutputPortWriteCoincides132AllOutputPortWriteCoincides(sources->at(i),sources->at(j), i, j);
					j := j + 1;
				};
				i := i + 1;
			};
		}
	}

		
	
		mapping inMM::Property::OutputPortWriteCoincidesWithStop132OutputPortWriteCoincidesWithStop(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty()) 
				
}
		{
		 	name := self.name+"Coincides_OutputPortWriteCoincidesWithStop";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::OUT
								)->first().oclAsType(Port).name+'_write']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_stop']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	

//Create an intermediate relation
	mapping inMM::Property::intermediate_AllInputPortReadCoincidesWithStart562AllInputPortReadCoincidesWithStart(an1 : uml::Port, an2 : uml::Port, nbi : Integer, nbj : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
	{
		name := self.name+'intermediate_AllInputPortReadCoincidesWithStart'+nbi.toString()+"_"+nbj.toString();
		var seqAbstract : Sequence(Stdlib::Element) := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::Coincidence).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence();
		type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an1.name+'_read']->first();
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an2.name+'_read']->first();
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.relations += result;
		}
	}
	
	
	
	
	mapping inMM::Port::portMutexReadWrite192portMutexReadWrite(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.getValue(self.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN) 
				
}
		{
		 	name := self.name+"Exclusion_portMutexReadWrite";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Exclusion")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_write']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_read']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
	
	
	
	
	
	
	mapping inMM::Property::AllInputPortReadCoincidesWithStart562AllInputPortReadCoincidesWithStart()
			when { ((not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty())
				and
				(not self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								).oclAsType(Port)->isEmpty())
			) }
	{
		init{
			var sources : Sequence(uml::Port) := self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								).oclAsType(Port)->asSequence();
			var i : Integer := 1;
			var j : Integer := 1;
			var size : Integer = sources->size(); 
			while (i <= size){
				j := i+1;
				while (j <= size){
					theMainBlock.relations +=  self.map intermediate_AllInputPortReadCoincidesWithStart562AllInputPortReadCoincidesWithStart(sources->at(i),sources->at(j), i, j);
					j := j + 1;
				};
				i := i + 1;
			};
		}
	}

		
	
		mapping inMM::Property::InputPortReadCoincidesWithStart562InputPortReadCoincidesWithStart(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				((not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty())
					and
				(not self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								).oclAsType(Port)->isEmpty())
			) 
				
}
		{
		 	name := self.name+"Coincides_InputPortReadCoincidesWithStart";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								)->first().oclAsType(Port).name+'_read']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM::Property::EventTriggerRule952EventTriggerRule(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				((not self.getAppliedStereotype('eastLight::AnalysisFunctionPrototype')->isEmpty())
					and
				(not self.type.oclAsType(Class).ownedAttribute->select(o | o.oclIsKindOf(Port)
								and o.getValue(o.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN
								).oclAsType(Port)->isEmpty())
			) 
				
}
		{
		 	name := self.name+"Coincides_EventTriggerRule";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
						bindable := self -> map doIt2Expression()->asSequence()->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_start']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM::Port::portCausalities192portCausalities(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.getValue(self.getAppliedStereotype('eastLight::FlowPort'),'direction').oclAsType(eastLight::PortDirection) = eastLight::PortDirection::IN) 
				
}
		{
		 	name := self.name+"Precedes_portCausalities";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Precedes")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_write']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_read']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM::Connector::instantaneousCommunication12instantaneousCommunication(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := self.name+"Coincides_instantaneousCommunication";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self._end->at(1).role.oclAsType(Port).name+'_write']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self._end->at(2).role.oclAsType(Port).name+'_write']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

