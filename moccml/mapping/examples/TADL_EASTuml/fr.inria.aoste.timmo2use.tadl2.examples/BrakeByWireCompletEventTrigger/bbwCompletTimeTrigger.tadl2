TimingSpecification BBW {

import "platform:/resource/fr.inria.aoste.timmo2use.tadl2.examples/BrakeByWireCompletEventTrigger/model.uml" as "model";
   
 Dimension physicalTime {
   Units { micros{factor 1.0 offset 0.0},
           ms{factor 100.0 offset 0.0 reference micros},
 	     second{factor 1000000.0 offset 0.0 reference micros}    
   }
 		
 }
	
 TimeBase universal_time {
	dimension physicalTime 
	precisionFactor 1.0
	precisionUnit micros
 }
	

 /**************
  *   Sensors  *
  *************/
 var SensingPeriod ms on universal_time := 10.0
 var SensingExecTime ms on universal_time := 10.0
 var WheelSensingExecTime ms on universal_time := 7.0
 
 //Front left
 Event doSampleFrontLeftWheelSpeed {"model->Model::FunctionalArchitecture::frontLeftWheelSpeedSensor"}
 PeriodicConstraint PeriodSensingFL{
	event doSampleFrontLeftWheelSpeed
	period = SensingPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event FLspeed_rpm{"model->Model::FunctionalArchitecture::frontLeftWheelSpeedSensor::FLspeed_rpm"}
 DelayConstraint FLWheelSensingExecTime{
 	source doSampleFrontLeftWheelSpeed
 	target FLspeed_rpm
 	lower = WheelSensingExecTime
 	upper = WheelSensingExecTime //not used
 }
 
 //Front right
 Event doSampleFrontRightWheelSpeed {"model->Model::FunctionalArchitecture::frontRightWheelSpeedSensor"}
 PeriodicConstraint PeriodSensingFR{
	event doSampleFrontRightWheelSpeed
	period = SensingPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event FRspeed_rpm{"model->Model::FunctionalArchitecture::frontRightWheelSpeedSensor::FRspeed_rpm"}
 DelayConstraint FRWheelSensingExecTime{
 	source doSampleFrontRightWheelSpeed
 	target FRspeed_rpm
 	lower = WheelSensingExecTime
 	upper = WheelSensingExecTime //not used
 }

 //rear left
 Event doSampleRearLeftWheelSpeed {"model->Model::FunctionalArchitecture::rearLeftWheelSpeedSensor"}
 PeriodicConstraint PeriodSensingRL{
	event doSampleRearLeftWheelSpeed
	period = SensingPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event RLspeed_rpm{"model->Model::FunctionalArchitecture::rearLeftWheelSpeedSensor::RLspeed_rpm"}
 DelayConstraint RLWheelSensingExecTime{
 	source doSampleRearLeftWheelSpeed
 	target RLspeed_rpm
 	lower = WheelSensingExecTime
 	upper = WheelSensingExecTime //not used
 }

 //rear right
 Event doSampleRearRightWheelSpeed {"model->Model::FunctionalArchitecture::rearRightWheelSpeedSensor"}
 PeriodicConstraint PeriodSensingRR{
	event doSampleRearRightWheelSpeed
	period = SensingPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event RRspeed_rpm{"model->Model::FunctionalArchitecture::rearRightWheelSpeedSensor::RRspeed_rpm"}
 DelayConstraint RRWheelSensingExecTime{
 	source doSampleRearRightWheelSpeed
 	target RRspeed_rpm
 	lower = WheelSensingExecTime
 	upper = WheelSensingExecTime //not used
 }

//pedal brake
 Event brakePedalPosition{"model->Model::FunctionalArchitecture::brakePedalSensor::pedalPosition"} 
 Event doPedalBrakeSensing{"model->Model::FunctionalArchitecture::brakePedalSensor"}
 PeriodicConstraint PeriodSensingPD{
	event doPedalBrakeSensing
	period = SensingPeriod
	minimum = 0.0
	jitter = 0.0	
}
 var PedalBrakeSensingExecTime ms on universal_time := 8.0
 DelayConstraint pedalBrakeExecTime{
 	source doPedalBrakeSensing
 	target brakePedalPosition
 	lower = PedalBrakeSensingExecTime
 	upper = PedalBrakeSensingExecTime //not used
 }

 /************************
  *  Torque Calculator   *
  ************************/
 Event doBrakeTorqueCalculatorTriggering {"model->Model::FunctionalArchitecture::brakeTorqueCalculator"}
 var BrakeTorqueCalculatorPeriod ms on universal_time := 10.0
 PeriodicConstraint PeriodBrakeCalculator{
	event doBrakeTorqueCalculatorTriggering
	period = BrakeTorqueCalculatorPeriod
	minimum = 0.0
	jitter = 0.0	
}
 
 Event requestedTorque{"model->Model::FunctionalArchitecture::brakeTorqueCalculator::requestedTorq"}
 var BrakeTorqueCalculatorExecTime ms on universal_time := 12.0
 DelayConstraint BrakeTorqueCalculatorExecTime{
 	source doBrakeTorqueCalculatorTriggering
 	target requestedTorque
 	lower = BrakeTorqueCalculatorExecTime
 	upper = BrakeTorqueCalculatorExecTime //not used
 }
 
/**************************
 *  Global brake control  *
 **************************/
 Event doGlobalBrakeControl{"model->Model::FunctionalArchitecture::globalBrakeController"}
 var globalBrakePeriod ms on universal_time := 10.0
 PeriodicConstraint GlobalBrakeTriggering{
	event doGlobalBrakeControl
	period = globalBrakePeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event vehicleSpeed{"model->Model::FunctionalArchitecture::globalBrakeController::VehicleSpeed"}
 var GlobalBrakeControlExecTime ms on universal_time := 12.0
 DelayConstraint GlobalBrakeControlExecTime{
 	source doGlobalBrakeControl
 	target vehicleSpeed
 	lower = GlobalBrakeControlExecTime
 	upper = GlobalBrakeControlExecTime //not used
 }


 /***********
 *  ABSSat  *
 ***********/

 var ABSSatPeriod ms on universal_time := 20.0
 var ABSSatExecTime ms on universal_time := 12.0

 Event doABSSatTriggeringFL {"model->Model::FunctionalArchitecture::frontLeftABSSat"}
 PeriodicConstraint ABSSatTriggeringFL{
	event doABSSatTriggeringFL
	period = ABSSatPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event ABSBrakeTorqFL{"model->Model::FunctionalArchitecture::frontLeftABSSat::FLABSBrakeTorq"}
 DelayConstraint ABSSatExecTimeFL{
 	source doABSSatTriggeringFL
 	target ABSBrakeTorqFL
 	lower = ABSSatExecTime
 	upper = ABSSatExecTime //not used
 }


 Event doABSSatTriggeringFR {"model->Model::FunctionalArchitecture::frontRightABSSat"}
 PeriodicConstraint ABSSatTriggeringFR{
	event doABSSatTriggeringFR
	period = ABSSatPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event ABSBrakeTorqFR{"model->Model::FunctionalArchitecture::frontRightABSSat::FRABSBrakeTorq"}
 DelayConstraint ABSSatExecTimeFR{
 	source doABSSatTriggeringFR
 	target ABSBrakeTorqFR
 	lower = ABSSatExecTime
 	upper = ABSSatExecTime //not used
 }

 Event doABSSatTriggeringRL {"model->Model::FunctionalArchitecture::rearLeftABSSat"}
 PeriodicConstraint ABSSatTriggeringRL{
	event doABSSatTriggeringRL
	period = ABSSatPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event ABSBrakeTorqRL{"model->Model::FunctionalArchitecture::rearLeftABSSat::RLABSBrakeTorq"}
 DelayConstraint ABSSatExecTimeRL{
 	source doABSSatTriggeringRL
 	target ABSBrakeTorqRL
 	lower = ABSSatExecTime
 	upper = ABSSatExecTime //not used
 }

 Event doABSSatTriggeringRR {"model->Model::FunctionalArchitecture::rearRightABSSat"}
 PeriodicConstraint ABSSatTriggeringRR{
	event doABSSatTriggeringRR
	period = ABSSatPeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event ABSBrakeTorqRR{"model->Model::FunctionalArchitecture::rearRightABSSat::RRABSBrakeTorq"}
 DelayConstraint ABSSatExecTimeRR{
 	source doABSSatTriggeringRR
 	target ABSBrakeTorqRR
 	lower = ABSSatExecTime
 	upper = ABSSatExecTime //not used
 }
 
 
 /**********
 *  Brake  *
 **********/
  var BrakePeriod ms on universal_time := 15.0
  var BrakeExecTime ms on universal_time := 4.0
 

 Event doBrakeTriggeringFL {"model->Model::FunctionalArchitecture::frontLeftBrake"}
 PeriodicConstraint PeriodBrakeTriggeringFL{
	event doBrakeTriggeringFL
	period = BrakePeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event BrakeActuatorSigFL{"model->Model::FunctionalArchitecture::frontLeftBrake::FLActuatorSignal"}
 DelayConstraint BrakeExecTimeFL{
 	source doBrakeTriggeringFL
 	target BrakeActuatorSigFL
 	lower = BrakeExecTime
 	upper = BrakeExecTime //not used
 }


 Event doBrakeTriggeringFR {"model->Model::FunctionalArchitecture::frontRightBrake"}
 PeriodicConstraint PeriodBrakeTriggeringFR{
	event doBrakeTriggeringFR
	period = BrakePeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event BrakeActuatorSigFR{"model->Model::FunctionalArchitecture::frontRightBrake::FRActuatorSignal"}
 DelayConstraint BrakeExecTimeFR{
 	source doBrakeTriggeringFR
 	target BrakeActuatorSigFR
 	lower = BrakeExecTime
 	upper = BrakeExecTime //not used
 }

 Event doBrakeTriggeringRL {"model->Model::FunctionalArchitecture::rearLeftBrake"}
 PeriodicConstraint PeriodBrakeTriggeringRL{
	event doBrakeTriggeringRL
	period = BrakePeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event BrakeActuatorSigRL{"model->Model::FunctionalArchitecture::rearLeftBrake::RLActuatorSignal"}
 DelayConstraint BrakeExecTimeRL{
 	source doBrakeTriggeringRL
 	target BrakeActuatorSigRL
 	lower = BrakeExecTime
 	upper = BrakeExecTime //not used
 }

 Event doBrakeTriggeringRR {"model->Model::FunctionalArchitecture::rearRightBrake"}
 PeriodicConstraint PeriodBrakeTriggeringRR{
	event doBrakeTriggeringRR
	period = BrakePeriod
	minimum = 0.0
	jitter = 0.0	
}
 Event BrakeActuatorSigRR{"model->Model::FunctionalArchitecture::rearRightBrake::RRActuatorSignal"}
 DelayConstraint BrakeExecTimeRR{
 	source doBrakeTriggeringRR
 	target BrakeActuatorSigRR
 	lower = BrakeExecTime
 	upper = BrakeExecTime //not used
 }



 /***********************************
 *  end to end reaction constraint  *
 ***********************************/

 Event brakePedalActionning {"model->Model::FunctionalArchitecture::brakePedalSensor::BrakePedalActionning"}
 Event pedalPercent_in {"model->Model::FunctionalArchitecture::brakeTorqueCalculator::requestedTorq"} 
 Event pedalPercent_out {"model->Model::FunctionalArchitecture::brakeTorqueCalculator::pedalPosition"}
 Event globalTorque {"model->Model::FunctionalArchitecture::globalBrakeController::globalTorque"} 
 Event torqFrontLeftWheel{"model->Model::FunctionalArchitecture::globalBrakeController::torqFrontLeftWheel"} 
 Event FLrequestedTorq{"model->Model::FunctionalArchitecture::frontLeftABSSat::FLRequestedTorq"}
 Event FLtorqCmd{"model->Model::FunctionalArchitecture::frontLeftBrake::FLtorqCmd"}  

 EventChain chainPedalActionning2frontLeftWheelBrakeActuator {
  stimulus brakePedalActionning
  response BrakeActuatorSigFL 
  eventChains brakePedalActionning, brakePedalPosition, pedalPercent_out, pedalPercent_in,
  		     globalTorque,
  			  torqFrontLeftWheel,FLrequestedTorq,ABSBrakeTorqFL,FLtorqCmd, BrakeActuatorSigFL
 }
 var endToEnd_min ms on universal_time := 1.0
 var endToEnd_max ms on universal_time := 100.0
 ReactionConstraint endToEndDeadline {
	scope chainPedalActionning2frontLeftWheelBrakeActuator 
	maximum = endToEnd_max
	minimum = endToEnd_min
}




//var syncTolerance ms on universal_time := 2.0
//SynchronizationConstraint syncConstraint1{
//	events frontLeftWheelSpeed, frontRightWheelSpeed
//	tolerance = syncTolerance
//} 
    
}//end of TimingSpecification BBW
