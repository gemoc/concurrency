// automatically generated by Xtext
grammar fr.inria.aoste.timmo2use.tadl2.Tadl2 with org.eclipse.xtext.common.Terminals 

import "platform:/resource/fr.inria.aoste.timmo2use.tadl2.model/metamodel/tadl2.ecore" 
import "platform:/resource/fr.inria.aoste.timmo2use.tadl2.model/metamodel/tadl2.ecore#//TimingExpressions" as TE 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TimingExpressionSpecification returns TE::Timing:
	"TimingSpecification" name=EString "{" 
	(
	 ( /* 'TimingExpression'*/ '{' (timingExpressions+=SymbolicTimingExpression) '}' )|
	  
	  (importStatements+=ImportStatement) | 
	  (events+=Event)| 
	 (eventChains+=EventChain)|
	 (constraints+=TimingConstraint)| 	
	 (timingExpressions+=VariableTimingExpression)|
	 (timeBases+=TimeBase)|
	 (dimensions+=Dimension)|
	 (timeBaseRelations+=TimeBaseRelation)  	   
	)+
	"}"
;

ImportStatement returns TE::ImportStatement:
	'import' importURI=STRING 'as' alias=STRING ';'
;


Event returns TE::Event:
    'Event'
       name=EString
    '{'(triggerableElements+=[ecore::EObject|EString])? (',' triggerableElements+=[ecore::EObject|EString])* '}'   
;

EventChain returns TE::EventChain:
	'EventChain'
	   name=EString '{'
	   'stimulus' stimulus=[TE::Event|EString]
	   'response' response=[TE::Event|EString]
	   ('eventChains' segment+=[TE::Event|EString] ( "," segment+=[TE::Event|EString])*)? //[TE::EventChain|EString] ( "," segment+=[TE::EventChain|EString])* )
	 '}'  
;


TimingConstraint returns TE::TimingConstraint:
    (DelayConstraint | RepetitionConstraint | SynchronizationConstraint | OrderConstraint | PatternConstraint | SporadicConstraint | PeriodicConstraint | ArbitraryConstraint | BurstConstraint | ReactionConstraint | AgeConstraint);


DelayConstraint returns TE::DelayConstraint:
	'DelayConstraint'
	    name=EString '{'
	    'source' source=[TE::Event|EString]
	    'target' target=[TE::Event|EString]
	    'lower' '=' ((lower=SymbolicTimingExpression) | (lower=ValueTimingExpression))
	    'upper' '=' ((upper=SymbolicTimingExpression) | (upper=ValueTimingExpression))
	'}'    
; 


RepetitionConstraint returns TE::RepetitionConstraint:
	'RepetitionConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'span' '=' span=INT
	    'lower' '=' ((lower=SymbolicTimingExpression) | (lower=ValueTimingExpression))
	    'upper' '=' ((upper=SymbolicTimingExpression) | (upper=ValueTimingExpression))
	    'jitter' '=' ((jitter=SymbolicTimingExpression) | (jitter=ValueTimingExpression))
	 '}'   
;


SynchronizationConstraint returns TE::SynchronizationConstraint:
	'SynchronizationConstraint'
	    name=EString '{'
	    'events' events+=[TE::Event|EString] "," events+=[TE::Event|EString] ( "," events+=[TE::Event|EString])* 
	    'tolerance' '=' ((tolerance=SymbolicTimingExpression) | (tolerance=ValueTimingExpression))
	'}'
;


OrderConstraint returns TE::OrderConstraint:
	'OrderConstraint'
	    name=EString '{'
	    'left' ((left=SymbolicTimingExpression) | (left=ValueTimingExpression))
	    'right' ((right=SymbolicTimingExpression) | (right=ValueTimingExpression))
	'}'
;


PatternConstraint returns TE::PatternConstraint:
	'PatternConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'ref' ref=[TE::Event|EString]
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	    'jitter' '=' ((jitter=SymbolicTimingExpression) | (jitter=ValueTimingExpression))
	    'offset' '=' (offset+=SymbolicTimingExpression) | (offset+=ValueTimingExpression) ( "," (offset+=SymbolicTimingExpression) | (offset+=ValueTimingExpression))*
	'}'
;


SporadicConstraint returns TE::SporadicConstraint:
	'SporadicConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'lower' '=' ((lower=SymbolicTimingExpression) | (lower=ValueTimingExpression))
	    'upper' '=' ((upper=SymbolicTimingExpression) | (upper=ValueTimingExpression))
	    'jitter' '=' ((jitter=SymbolicTimingExpression) | (jitter=ValueTimingExpression))
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	'}'
;


PeriodicConstraint returns TE::PeriodicConstraint:
	'PeriodicConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'period' '=' ((period=SymbolicTimingExpression) | (period=ValueTimingExpression))
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	    'jitter' '=' ((jitter=SymbolicTimingExpression) | (jitter=ValueTimingExpression))
	'}'
;


ArbitraryConstraint returns TE::ArbitraryConstraint:
	'ArbitraryConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'minimum' '=' (minimum+=SymbolicTimingExpression) | (minimum+=ValueTimingExpression) ( "," (minimum+=SymbolicTimingExpression) | (minimum+=ValueTimingExpression))*
	    'maximum' '=' (maximum+=SymbolicTimingExpression) | (maximum+=ValueTimingExpression) ( "," (maximum+=SymbolicTimingExpression) | (maximum+=ValueTimingExpression))*
	'}'
;


BurstConstraint returns TE::BurstConstraint:
	'BurstConstraint'
	    name=EString '{'
	    'event' event=[TE::Event|EString]
	    'maxOccurrence' '=' maxOccurrence=INT
	    'length' '=' ((length=SymbolicTimingExpression) | (length=ValueTimingExpression))
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	'}'
;


ReactionConstraint returns TE::ReactionConstraint:
	'ReactionConstraint'
	    name=EString '{'
	    'scope' scope=[TE::EventChain|EString]
	    'maximum' '=' ((maximum=SymbolicTimingExpression) | (maximum=ValueTimingExpression))
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	'}'
;


AgeConstraint returns TE::AgeConstraint:
	'AgeConstraint'
	    name=EString '{'
	    'scope' scope=[TE::EventChain|EString]
	    'maximum' '=' ((maximum=SymbolicTimingExpression) | (maximum=ValueTimingExpression))
	    'minimum' '=' ((minimum=SymbolicTimingExpression) | (minimum=ValueTimingExpression))
	'}'
	    
;




TimingExpression returns TE::TimingExpression:
	SymbolicTimingExpression | VariableTimingExpression | ValueTimingExpression;
	
	
Addition returns TE::Addition:
	'('
		leftOperand=TimingExpression '+' rightOperand=TimingExpression
    ')';


Operator returns TE::Operator:
	Addition | Subtraction | Multiplication | Division | Assignment | GreaterThan | LessThan | GreaterThanOrEqual | LessThanOrEqual;

SymbolicTimingExpression returns TE::SymbolicTimingExpression:
	{TE::SymbolicTimingExpression}
	
		(variable=[TE::VariableTimingExpression|EString]) | 
		(operator=Operator) 
    ;

VariableTimingExpression returns TE::VariableTimingExpression:
	'var'
	    name=EString
		unit=[TE::Unit|EString]
		'on' timeBase=[TE::TimeBase|EString]
		(':=' ((value=SymbolicTimingExpression) | (value=ValueTimingExpression))) ?
    ;

ValueTimingExpression returns TE::ValueTimingExpression:
	('('
		value=EDouble
		(unit=[TE::Unit|EString])
		('on' timeBase=[TE::TimeBase|EString])		
    ')') | (value=EDouble) ;

Subtraction returns TE::Subtraction:
	'('
		leftOperand=TimingExpression '-' rightOperand=TimingExpression
    ')'; 

Multiplication returns TE::Multiplication:
	'('
		leftOperand=TimingExpression '*' rightOperand=TimingExpression
    ')';

Division returns TE::Division:
	'('
		leftOperand=TimingExpression '/' rightOperand=TimingExpression
    ')';

Assignment returns TE::Assignment:
	'('
		leftOperand=TimingExpression ':=' rightOperand=TimingExpression
    ')';

GreaterThan returns TE::GreaterThan:
	'('
		leftOperand=TimingExpression '>' rightOperand=TimingExpression
    ')';

LessThan returns TE::LessThan:
	'('
		leftOperand=TimingExpression '<' rightOperand=TimingExpression
    ')';

GreaterThanOrEqual returns TE::GreaterThanOrEqual:
	'('
		leftOperand=TimingExpression '=>' rightOperand=TimingExpression
    ')';

LessThanOrEqual returns TE::LessThanOrEqual:
	'('
		leftOperand=TimingExpression '<=' rightOperand=TimingExpression
    ')';

EString returns ecore::EString:
	STRING | ID;

TimeBase returns TE::TimeBase:
	'TimeBase'
	name=EString
	'{'
		'dimension' type=[TE::Dimension|EString]
		('precisionFactor' precisionFactor=EDouble)?
		('precisionUnit' precisionUnit=[TE::Unit|EString])?
	//	('timeBaseRelation' timeBaseRelation=TimeBaseRelation)?
    '}';

Unit returns TE::Unit:
	{TE::Unit}
	name=EString
	'{'
		('factor' factor=EDouble)?
		('offset' offset=EDouble)?
		('reference' reference=[TE::Unit|EString])?
    '}';

Dimension returns TE::Dimension:
	'Dimension'
	name=EString
	'{'
		('kind' kind=DimensionKind)?
		'Units' '{' units+=Unit ( "," units+=Unit)* '}' 
    '}';

TimeBaseRelation returns TE::TimeBaseRelation:
	'TimeBaseRelation'
	name=EString
	'{'
		((left=SymbolicTimingExpression) | '(' left=VariableTimingExpression ')' | (left=ValueTimingExpression)) '=' ((right=SymbolicTimingExpression) | ('(' right=VariableTimingExpression ')') | (right=ValueTimingExpression))
    '}';

enum DimensionKind returns TE::DimensionKind:
	other = 'other' | Time = 'Time' | Angle = 'Angle' | Distance = 'Distance';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
