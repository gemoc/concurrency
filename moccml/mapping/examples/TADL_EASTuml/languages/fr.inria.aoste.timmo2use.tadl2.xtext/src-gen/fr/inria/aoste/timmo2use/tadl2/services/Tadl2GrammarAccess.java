/*
* generated by Xtext
*/

package fr.inria.aoste.timmo2use.tadl2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Tadl2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TimingExpressionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimingExpressionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimingSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTimingExpressionsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTimingExpressionsSymbolicTimingExpressionParserRuleCall_3_0_1_0 = (RuleCall)cTimingExpressionsAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cImportStatementsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementParserRuleCall_3_1_0 = (RuleCall)cImportStatementsAssignment_3_1.eContents().get(0);
		private final Assignment cEventsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_3_2_0 = (RuleCall)cEventsAssignment_3_2.eContents().get(0);
		private final Assignment cEventChainsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cEventChainsEventChainParserRuleCall_3_3_0 = (RuleCall)cEventChainsAssignment_3_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cConstraintsTimingConstraintParserRuleCall_3_4_0 = (RuleCall)cConstraintsAssignment_3_4.eContents().get(0);
		private final Assignment cTimingExpressionsAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cTimingExpressionsVariableTimingExpressionParserRuleCall_3_5_0 = (RuleCall)cTimingExpressionsAssignment_3_5.eContents().get(0);
		private final Assignment cTimeBasesAssignment_3_6 = (Assignment)cAlternatives_3.eContents().get(6);
		private final RuleCall cTimeBasesTimeBaseParserRuleCall_3_6_0 = (RuleCall)cTimeBasesAssignment_3_6.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_7 = (Assignment)cAlternatives_3.eContents().get(7);
		private final RuleCall cDimensionsDimensionParserRuleCall_3_7_0 = (RuleCall)cDimensionsAssignment_3_7.eContents().get(0);
		private final Assignment cTimeBaseRelationsAssignment_3_8 = (Assignment)cAlternatives_3.eContents().get(8);
		private final RuleCall cTimeBaseRelationsTimeBaseRelationParserRuleCall_3_8_0 = (RuleCall)cTimeBaseRelationsAssignment_3_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimingExpressionSpecification returns TE::Timing:
		//	"TimingSpecification" name=EString "{" / * 'TimingExpression'* / ("{" timingExpressions+=SymbolicTimingExpression "}" |
		//	importStatements+=ImportStatement | events+=Event | eventChains+=EventChain | constraints+=TimingConstraint |
		//	timingExpressions+=VariableTimingExpression | timeBases+=TimeBase | dimensions+=Dimension |
		//	timeBaseRelations+=TimeBaseRelation)+ "}";
		public ParserRule getRule() { return rule; }

		//"TimingSpecification" name=EString "{" / * 'TimingExpression'* / ("{" timingExpressions+=SymbolicTimingExpression "}" |
		//importStatements+=ImportStatement | events+=Event | eventChains+=EventChain | constraints+=TimingConstraint |
		//timingExpressions+=VariableTimingExpression | timeBases+=TimeBase | dimensions+=Dimension |
		//timeBaseRelations+=TimeBaseRelation)+ "}"
		public Group getGroup() { return cGroup; }

		//"TimingSpecification"
		public Keyword getTimingSpecificationKeyword_0() { return cTimingSpecificationKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		/// * 'TimingExpression'* / ("{" timingExpressions+=SymbolicTimingExpression "}" | importStatements+=ImportStatement |
		//events+=Event | eventChains+=EventChain | constraints+=TimingConstraint | timingExpressions+=VariableTimingExpression |
		//timeBases+=TimeBase | dimensions+=Dimension | timeBaseRelations+=TimeBaseRelation)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		/// * 'TimingExpression'* / "{" timingExpressions+=SymbolicTimingExpression "}"
		public Group getGroup_3_0() { return cGroup_3_0; }

		/// * 'TimingExpression'* / "{"
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }

		//timingExpressions+=SymbolicTimingExpression
		public Assignment getTimingExpressionsAssignment_3_0_1() { return cTimingExpressionsAssignment_3_0_1; }

		//SymbolicTimingExpression
		public RuleCall getTimingExpressionsSymbolicTimingExpressionParserRuleCall_3_0_1_0() { return cTimingExpressionsSymbolicTimingExpressionParserRuleCall_3_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//importStatements+=ImportStatement
		public Assignment getImportStatementsAssignment_3_1() { return cImportStatementsAssignment_3_1; }

		//ImportStatement
		public RuleCall getImportStatementsImportStatementParserRuleCall_3_1_0() { return cImportStatementsImportStatementParserRuleCall_3_1_0; }

		//events+=Event
		public Assignment getEventsAssignment_3_2() { return cEventsAssignment_3_2; }

		//Event
		public RuleCall getEventsEventParserRuleCall_3_2_0() { return cEventsEventParserRuleCall_3_2_0; }

		//eventChains+=EventChain
		public Assignment getEventChainsAssignment_3_3() { return cEventChainsAssignment_3_3; }

		//EventChain
		public RuleCall getEventChainsEventChainParserRuleCall_3_3_0() { return cEventChainsEventChainParserRuleCall_3_3_0; }

		//constraints+=TimingConstraint
		public Assignment getConstraintsAssignment_3_4() { return cConstraintsAssignment_3_4; }

		//TimingConstraint
		public RuleCall getConstraintsTimingConstraintParserRuleCall_3_4_0() { return cConstraintsTimingConstraintParserRuleCall_3_4_0; }

		//timingExpressions+=VariableTimingExpression
		public Assignment getTimingExpressionsAssignment_3_5() { return cTimingExpressionsAssignment_3_5; }

		//VariableTimingExpression
		public RuleCall getTimingExpressionsVariableTimingExpressionParserRuleCall_3_5_0() { return cTimingExpressionsVariableTimingExpressionParserRuleCall_3_5_0; }

		//timeBases+=TimeBase
		public Assignment getTimeBasesAssignment_3_6() { return cTimeBasesAssignment_3_6; }

		//TimeBase
		public RuleCall getTimeBasesTimeBaseParserRuleCall_3_6_0() { return cTimeBasesTimeBaseParserRuleCall_3_6_0; }

		//dimensions+=Dimension
		public Assignment getDimensionsAssignment_3_7() { return cDimensionsAssignment_3_7; }

		//Dimension
		public RuleCall getDimensionsDimensionParserRuleCall_3_7_0() { return cDimensionsDimensionParserRuleCall_3_7_0; }

		//timeBaseRelations+=TimeBaseRelation
		public Assignment getTimeBaseRelationsAssignment_3_8() { return cTimeBaseRelationsAssignment_3_8; }

		//TimeBaseRelation
		public RuleCall getTimeBaseRelationsTimeBaseRelationParserRuleCall_3_8_0() { return cTimeBaseRelationsTimeBaseRelationParserRuleCall_3_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasSTRINGTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ImportStatement returns TE::ImportStatement:
		//	"import" importURI=STRING "as" alias=STRING ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING "as" alias=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//alias=STRING
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }

		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_3_0() { return cAliasSTRINGTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerableElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTriggerableElementsEObjectCrossReference_3_0 = (CrossReference)cTriggerableElementsAssignment_3.eContents().get(0);
		private final RuleCall cTriggerableElementsEObjectEStringParserRuleCall_3_0_1 = (RuleCall)cTriggerableElementsEObjectCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerableElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTriggerableElementsEObjectCrossReference_4_1_0 = (CrossReference)cTriggerableElementsAssignment_4_1.eContents().get(0);
		private final RuleCall cTriggerableElementsEObjectEStringParserRuleCall_4_1_0_1 = (RuleCall)cTriggerableElementsEObjectCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Event returns TE::Event:
		//	"Event" name=EString "{" triggerableElements+=[ecore::EObject|EString]? (","
		//	triggerableElements+=[ecore::EObject|EString])* "}";
		public ParserRule getRule() { return rule; }

		//"Event" name=EString "{" triggerableElements+=[ecore::EObject|EString]? (","
		//triggerableElements+=[ecore::EObject|EString])* "}"
		public Group getGroup() { return cGroup; }

		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//triggerableElements+=[ecore::EObject|EString]?
		public Assignment getTriggerableElementsAssignment_3() { return cTriggerableElementsAssignment_3; }

		//[ecore::EObject|EString]
		public CrossReference getTriggerableElementsEObjectCrossReference_3_0() { return cTriggerableElementsEObjectCrossReference_3_0; }

		//EString
		public RuleCall getTriggerableElementsEObjectEStringParserRuleCall_3_0_1() { return cTriggerableElementsEObjectEStringParserRuleCall_3_0_1; }

		//("," triggerableElements+=[ecore::EObject|EString])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//triggerableElements+=[ecore::EObject|EString]
		public Assignment getTriggerableElementsAssignment_4_1() { return cTriggerableElementsAssignment_4_1; }

		//[ecore::EObject|EString]
		public CrossReference getTriggerableElementsEObjectCrossReference_4_1_0() { return cTriggerableElementsEObjectCrossReference_4_1_0; }

		//EString
		public RuleCall getTriggerableElementsEObjectEStringParserRuleCall_4_1_0_1() { return cTriggerableElementsEObjectEStringParserRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EventChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventChainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStimulusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStimulusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStimulusEventCrossReference_4_0 = (CrossReference)cStimulusAssignment_4.eContents().get(0);
		private final RuleCall cStimulusEventEStringParserRuleCall_4_0_1 = (RuleCall)cStimulusEventCrossReference_4_0.eContents().get(1);
		private final Keyword cResponseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResponseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cResponseEventCrossReference_6_0 = (CrossReference)cResponseAssignment_6.eContents().get(0);
		private final RuleCall cResponseEventEStringParserRuleCall_6_0_1 = (RuleCall)cResponseEventCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEventChainsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSegmentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSegmentEventCrossReference_7_1_0 = (CrossReference)cSegmentAssignment_7_1.eContents().get(0);
		private final RuleCall cSegmentEventEStringParserRuleCall_7_1_0_1 = (RuleCall)cSegmentEventCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSegmentAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cSegmentEventCrossReference_7_2_1_0 = (CrossReference)cSegmentAssignment_7_2_1.eContents().get(0);
		private final RuleCall cSegmentEventEStringParserRuleCall_7_2_1_0_1 = (RuleCall)cSegmentEventCrossReference_7_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EventChain returns TE::EventChain:
		//	"EventChain" name=EString "{" "stimulus" stimulus=[TE::Event|EString] "response" response=[TE::Event|EString]
		//	("eventChains" segment+=[TE::Event|EString] ("," segment+=[TE::Event|EString])*)? //[TE::EventChain|EString] ( "," segment+=[TE::EventChain|EString])* )
		//	"}";
		public ParserRule getRule() { return rule; }

		//"EventChain" name=EString "{" "stimulus" stimulus=[TE::Event|EString] "response" response=[TE::Event|EString]
		//("eventChains" segment+=[TE::Event|EString] ("," segment+=[TE::Event|EString])*)? //[TE::EventChain|EString] ( "," segment+=[TE::EventChain|EString])* )
		//"}"
		public Group getGroup() { return cGroup; }

		//"EventChain"
		public Keyword getEventChainKeyword_0() { return cEventChainKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"stimulus"
		public Keyword getStimulusKeyword_3() { return cStimulusKeyword_3; }

		//stimulus=[TE::Event|EString]
		public Assignment getStimulusAssignment_4() { return cStimulusAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getStimulusEventCrossReference_4_0() { return cStimulusEventCrossReference_4_0; }

		//EString
		public RuleCall getStimulusEventEStringParserRuleCall_4_0_1() { return cStimulusEventEStringParserRuleCall_4_0_1; }

		//"response"
		public Keyword getResponseKeyword_5() { return cResponseKeyword_5; }

		//response=[TE::Event|EString]
		public Assignment getResponseAssignment_6() { return cResponseAssignment_6; }

		//[TE::Event|EString]
		public CrossReference getResponseEventCrossReference_6_0() { return cResponseEventCrossReference_6_0; }

		//EString
		public RuleCall getResponseEventEStringParserRuleCall_6_0_1() { return cResponseEventEStringParserRuleCall_6_0_1; }

		//("eventChains" segment+=[TE::Event|EString] ("," segment+=[TE::Event|EString])*)?
		public Group getGroup_7() { return cGroup_7; }

		//"eventChains"
		public Keyword getEventChainsKeyword_7_0() { return cEventChainsKeyword_7_0; }

		//segment+=[TE::Event|EString]
		public Assignment getSegmentAssignment_7_1() { return cSegmentAssignment_7_1; }

		//[TE::Event|EString]
		public CrossReference getSegmentEventCrossReference_7_1_0() { return cSegmentEventCrossReference_7_1_0; }

		//EString
		public RuleCall getSegmentEventEStringParserRuleCall_7_1_0_1() { return cSegmentEventEStringParserRuleCall_7_1_0_1; }

		//("," segment+=[TE::Event|EString])*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//segment+=[TE::Event|EString]
		public Assignment getSegmentAssignment_7_2_1() { return cSegmentAssignment_7_2_1; }

		//[TE::Event|EString]
		public CrossReference getSegmentEventCrossReference_7_2_1_0() { return cSegmentEventCrossReference_7_2_1_0; }

		//EString
		public RuleCall getSegmentEventEStringParserRuleCall_7_2_1_0_1() { return cSegmentEventEStringParserRuleCall_7_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TimingConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimingConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDelayConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepetitionConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSynchronizationConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrderConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPatternConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSporadicConstraintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPeriodicConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cArbitraryConstraintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBurstConstraintParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReactionConstraintParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAgeConstraintParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//TimingConstraint returns TE::TimingConstraint:
		//	DelayConstraint | RepetitionConstraint | SynchronizationConstraint | OrderConstraint | PatternConstraint |
		//	SporadicConstraint | PeriodicConstraint | ArbitraryConstraint | BurstConstraint | ReactionConstraint | AgeConstraint;
		public ParserRule getRule() { return rule; }

		//DelayConstraint | RepetitionConstraint | SynchronizationConstraint | OrderConstraint | PatternConstraint |
		//SporadicConstraint | PeriodicConstraint | ArbitraryConstraint | BurstConstraint | ReactionConstraint | AgeConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//DelayConstraint
		public RuleCall getDelayConstraintParserRuleCall_0() { return cDelayConstraintParserRuleCall_0; }

		//RepetitionConstraint
		public RuleCall getRepetitionConstraintParserRuleCall_1() { return cRepetitionConstraintParserRuleCall_1; }

		//SynchronizationConstraint
		public RuleCall getSynchronizationConstraintParserRuleCall_2() { return cSynchronizationConstraintParserRuleCall_2; }

		//OrderConstraint
		public RuleCall getOrderConstraintParserRuleCall_3() { return cOrderConstraintParserRuleCall_3; }

		//PatternConstraint
		public RuleCall getPatternConstraintParserRuleCall_4() { return cPatternConstraintParserRuleCall_4; }

		//SporadicConstraint
		public RuleCall getSporadicConstraintParserRuleCall_5() { return cSporadicConstraintParserRuleCall_5; }

		//PeriodicConstraint
		public RuleCall getPeriodicConstraintParserRuleCall_6() { return cPeriodicConstraintParserRuleCall_6; }

		//ArbitraryConstraint
		public RuleCall getArbitraryConstraintParserRuleCall_7() { return cArbitraryConstraintParserRuleCall_7; }

		//BurstConstraint
		public RuleCall getBurstConstraintParserRuleCall_8() { return cBurstConstraintParserRuleCall_8; }

		//ReactionConstraint
		public RuleCall getReactionConstraintParserRuleCall_9() { return cReactionConstraintParserRuleCall_9; }

		//AgeConstraint
		public RuleCall getAgeConstraintParserRuleCall_10() { return cAgeConstraintParserRuleCall_10; }
	}

	public class DelayConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelayConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceEventCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceEventEStringParserRuleCall_4_0_1 = (RuleCall)cSourceEventCrossReference_4_0.eContents().get(1);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetEventCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetEventEStringParserRuleCall_6_0_1 = (RuleCall)cTargetEventCrossReference_6_0.eContents().get(1);
		private final Keyword cLowerKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cLowerAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cLowerSymbolicTimingExpressionParserRuleCall_9_0_0 = (RuleCall)cLowerAssignment_9_0.eContents().get(0);
		private final Assignment cLowerAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cLowerValueTimingExpressionParserRuleCall_9_1_0 = (RuleCall)cLowerAssignment_9_1.eContents().get(0);
		private final Keyword cUpperKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Assignment cUpperAssignment_12_0 = (Assignment)cAlternatives_12.eContents().get(0);
		private final RuleCall cUpperSymbolicTimingExpressionParserRuleCall_12_0_0 = (RuleCall)cUpperAssignment_12_0.eContents().get(0);
		private final Assignment cUpperAssignment_12_1 = (Assignment)cAlternatives_12.eContents().get(1);
		private final RuleCall cUpperValueTimingExpressionParserRuleCall_12_1_0 = (RuleCall)cUpperAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//DelayConstraint returns TE::DelayConstraint:
		//	"DelayConstraint" name=EString "{" "source" source=[TE::Event|EString] "target" target=[TE::Event|EString] "lower" "="
		//	(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
		//	upper=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"DelayConstraint" name=EString "{" "source" source=[TE::Event|EString] "target" target=[TE::Event|EString] "lower" "="
		//(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
		//upper=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"DelayConstraint"
		public Keyword getDelayConstraintKeyword_0() { return cDelayConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"source"
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }

		//source=[TE::Event|EString]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getSourceEventCrossReference_4_0() { return cSourceEventCrossReference_4_0; }

		//EString
		public RuleCall getSourceEventEStringParserRuleCall_4_0_1() { return cSourceEventEStringParserRuleCall_4_0_1; }

		//"target"
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }

		//target=[TE::Event|EString]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }

		//[TE::Event|EString]
		public CrossReference getTargetEventCrossReference_6_0() { return cTargetEventCrossReference_6_0; }

		//EString
		public RuleCall getTargetEventEStringParserRuleCall_6_0_1() { return cTargetEventEStringParserRuleCall_6_0_1; }

		//"lower"
		public Keyword getLowerKeyword_7() { return cLowerKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//lower=SymbolicTimingExpression | lower=ValueTimingExpression
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//lower=SymbolicTimingExpression
		public Assignment getLowerAssignment_9_0() { return cLowerAssignment_9_0; }

		//SymbolicTimingExpression
		public RuleCall getLowerSymbolicTimingExpressionParserRuleCall_9_0_0() { return cLowerSymbolicTimingExpressionParserRuleCall_9_0_0; }

		//lower=ValueTimingExpression
		public Assignment getLowerAssignment_9_1() { return cLowerAssignment_9_1; }

		//ValueTimingExpression
		public RuleCall getLowerValueTimingExpressionParserRuleCall_9_1_0() { return cLowerValueTimingExpressionParserRuleCall_9_1_0; }

		//"upper"
		public Keyword getUpperKeyword_10() { return cUpperKeyword_10; }

		//"="
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }

		//upper=SymbolicTimingExpression | upper=ValueTimingExpression
		public Alternatives getAlternatives_12() { return cAlternatives_12; }

		//upper=SymbolicTimingExpression
		public Assignment getUpperAssignment_12_0() { return cUpperAssignment_12_0; }

		//SymbolicTimingExpression
		public RuleCall getUpperSymbolicTimingExpressionParserRuleCall_12_0_0() { return cUpperSymbolicTimingExpressionParserRuleCall_12_0_0; }

		//upper=ValueTimingExpression
		public Assignment getUpperAssignment_12_1() { return cUpperAssignment_12_1; }

		//ValueTimingExpression
		public RuleCall getUpperValueTimingExpressionParserRuleCall_12_1_0() { return cUpperValueTimingExpressionParserRuleCall_12_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class RepetitionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepetitionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetitionConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_4_0_1 = (RuleCall)cEventEventCrossReference_4_0.eContents().get(1);
		private final Keyword cSpanKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSpanAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSpanINTTerminalRuleCall_7_0 = (RuleCall)cSpanAssignment_7.eContents().get(0);
		private final Keyword cLowerKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cLowerAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cLowerSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cLowerAssignment_10_0.eContents().get(0);
		private final Assignment cLowerAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cLowerValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cLowerAssignment_10_1.eContents().get(0);
		private final Keyword cUpperKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cUpperAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cUpperSymbolicTimingExpressionParserRuleCall_13_0_0 = (RuleCall)cUpperAssignment_13_0.eContents().get(0);
		private final Assignment cUpperAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cUpperValueTimingExpressionParserRuleCall_13_1_0 = (RuleCall)cUpperAssignment_13_1.eContents().get(0);
		private final Keyword cJitterKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Alternatives cAlternatives_16 = (Alternatives)cGroup.eContents().get(16);
		private final Assignment cJitterAssignment_16_0 = (Assignment)cAlternatives_16.eContents().get(0);
		private final RuleCall cJitterSymbolicTimingExpressionParserRuleCall_16_0_0 = (RuleCall)cJitterAssignment_16_0.eContents().get(0);
		private final Assignment cJitterAssignment_16_1 = (Assignment)cAlternatives_16.eContents().get(1);
		private final RuleCall cJitterValueTimingExpressionParserRuleCall_16_1_0 = (RuleCall)cJitterAssignment_16_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//RepetitionConstraint returns TE::RepetitionConstraint:
		//	"RepetitionConstraint" name=EString "{" "event" event=[TE::Event|EString] "span" "=" span=INT "lower" "="
		//	(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
		//	upper=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"RepetitionConstraint" name=EString "{" "event" event=[TE::Event|EString] "span" "=" span=INT "lower" "="
		//(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
		//upper=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"RepetitionConstraint"
		public Keyword getRepetitionConstraintKeyword_0() { return cRepetitionConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_4_0() { return cEventEventCrossReference_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_4_0_1() { return cEventEventEStringParserRuleCall_4_0_1; }

		//"span"
		public Keyword getSpanKeyword_5() { return cSpanKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//span=INT
		public Assignment getSpanAssignment_7() { return cSpanAssignment_7; }

		//INT
		public RuleCall getSpanINTTerminalRuleCall_7_0() { return cSpanINTTerminalRuleCall_7_0; }

		//"lower"
		public Keyword getLowerKeyword_8() { return cLowerKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//lower=SymbolicTimingExpression | lower=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//lower=SymbolicTimingExpression
		public Assignment getLowerAssignment_10_0() { return cLowerAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getLowerSymbolicTimingExpressionParserRuleCall_10_0_0() { return cLowerSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//lower=ValueTimingExpression
		public Assignment getLowerAssignment_10_1() { return cLowerAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getLowerValueTimingExpressionParserRuleCall_10_1_0() { return cLowerValueTimingExpressionParserRuleCall_10_1_0; }

		//"upper"
		public Keyword getUpperKeyword_11() { return cUpperKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//upper=SymbolicTimingExpression | upper=ValueTimingExpression
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//upper=SymbolicTimingExpression
		public Assignment getUpperAssignment_13_0() { return cUpperAssignment_13_0; }

		//SymbolicTimingExpression
		public RuleCall getUpperSymbolicTimingExpressionParserRuleCall_13_0_0() { return cUpperSymbolicTimingExpressionParserRuleCall_13_0_0; }

		//upper=ValueTimingExpression
		public Assignment getUpperAssignment_13_1() { return cUpperAssignment_13_1; }

		//ValueTimingExpression
		public RuleCall getUpperValueTimingExpressionParserRuleCall_13_1_0() { return cUpperValueTimingExpressionParserRuleCall_13_1_0; }

		//"jitter"
		public Keyword getJitterKeyword_14() { return cJitterKeyword_14; }

		//"="
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }

		//jitter=SymbolicTimingExpression | jitter=ValueTimingExpression
		public Alternatives getAlternatives_16() { return cAlternatives_16; }

		//jitter=SymbolicTimingExpression
		public Assignment getJitterAssignment_16_0() { return cJitterAssignment_16_0; }

		//SymbolicTimingExpression
		public RuleCall getJitterSymbolicTimingExpressionParserRuleCall_16_0_0() { return cJitterSymbolicTimingExpressionParserRuleCall_16_0_0; }

		//jitter=ValueTimingExpression
		public Assignment getJitterAssignment_16_1() { return cJitterAssignment_16_1; }

		//ValueTimingExpression
		public RuleCall getJitterValueTimingExpressionParserRuleCall_16_1_0() { return cJitterValueTimingExpressionParserRuleCall_16_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class SynchronizationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronizationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynchronizationConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventsEventCrossReference_4_0 = (CrossReference)cEventsAssignment_4.eContents().get(0);
		private final RuleCall cEventsEventEStringParserRuleCall_4_0_1 = (RuleCall)cEventsEventCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEventsEventCrossReference_6_0 = (CrossReference)cEventsAssignment_6.eContents().get(0);
		private final RuleCall cEventsEventEStringParserRuleCall_6_0_1 = (RuleCall)cEventsEventCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEventsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_7_1_0 = (CrossReference)cEventsAssignment_7_1.eContents().get(0);
		private final RuleCall cEventsEventEStringParserRuleCall_7_1_0_1 = (RuleCall)cEventsEventCrossReference_7_1_0.eContents().get(1);
		private final Keyword cToleranceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cToleranceAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cToleranceSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cToleranceAssignment_10_0.eContents().get(0);
		private final Assignment cToleranceAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cToleranceValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cToleranceAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//SynchronizationConstraint returns TE::SynchronizationConstraint:
		//	"SynchronizationConstraint" name=EString "{" "events" events+=[TE::Event|EString] "," events+=[TE::Event|EString] (","
		//	events+=[TE::Event|EString])* "tolerance" "=" (tolerance=SymbolicTimingExpression | tolerance=ValueTimingExpression)
		//	"}";
		public ParserRule getRule() { return rule; }

		//"SynchronizationConstraint" name=EString "{" "events" events+=[TE::Event|EString] "," events+=[TE::Event|EString] (","
		//events+=[TE::Event|EString])* "tolerance" "=" (tolerance=SymbolicTimingExpression | tolerance=ValueTimingExpression)
		//"}"
		public Group getGroup() { return cGroup; }

		//"SynchronizationConstraint"
		public Keyword getSynchronizationConstraintKeyword_0() { return cSynchronizationConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"events"
		public Keyword getEventsKeyword_3() { return cEventsKeyword_3; }

		//events+=[TE::Event|EString]
		public Assignment getEventsAssignment_4() { return cEventsAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getEventsEventCrossReference_4_0() { return cEventsEventCrossReference_4_0; }

		//EString
		public RuleCall getEventsEventEStringParserRuleCall_4_0_1() { return cEventsEventEStringParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//events+=[TE::Event|EString]
		public Assignment getEventsAssignment_6() { return cEventsAssignment_6; }

		//[TE::Event|EString]
		public CrossReference getEventsEventCrossReference_6_0() { return cEventsEventCrossReference_6_0; }

		//EString
		public RuleCall getEventsEventEStringParserRuleCall_6_0_1() { return cEventsEventEStringParserRuleCall_6_0_1; }

		//("," events+=[TE::Event|EString])*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//events+=[TE::Event|EString]
		public Assignment getEventsAssignment_7_1() { return cEventsAssignment_7_1; }

		//[TE::Event|EString]
		public CrossReference getEventsEventCrossReference_7_1_0() { return cEventsEventCrossReference_7_1_0; }

		//EString
		public RuleCall getEventsEventEStringParserRuleCall_7_1_0_1() { return cEventsEventEStringParserRuleCall_7_1_0_1; }

		//"tolerance"
		public Keyword getToleranceKeyword_8() { return cToleranceKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//tolerance=SymbolicTimingExpression | tolerance=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//tolerance=SymbolicTimingExpression
		public Assignment getToleranceAssignment_10_0() { return cToleranceAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getToleranceSymbolicTimingExpressionParserRuleCall_10_0_0() { return cToleranceSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//tolerance=ValueTimingExpression
		public Assignment getToleranceAssignment_10_1() { return cToleranceAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getToleranceValueTimingExpressionParserRuleCall_10_1_0() { return cToleranceValueTimingExpressionParserRuleCall_10_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class OrderConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cLeftAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cLeftSymbolicTimingExpressionParserRuleCall_4_0_0 = (RuleCall)cLeftAssignment_4_0.eContents().get(0);
		private final Assignment cLeftAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cLeftValueTimingExpressionParserRuleCall_4_1_0 = (RuleCall)cLeftAssignment_4_1.eContents().get(0);
		private final Keyword cRightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cRightAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cRightSymbolicTimingExpressionParserRuleCall_6_0_0 = (RuleCall)cRightAssignment_6_0.eContents().get(0);
		private final Assignment cRightAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cRightValueTimingExpressionParserRuleCall_6_1_0 = (RuleCall)cRightAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OrderConstraint returns TE::OrderConstraint:
		//	"OrderConstraint" name=EString "{" "left" (left=SymbolicTimingExpression | left=ValueTimingExpression) "right"
		//	(right=SymbolicTimingExpression | right=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"OrderConstraint" name=EString "{" "left" (left=SymbolicTimingExpression | left=ValueTimingExpression) "right"
		//(right=SymbolicTimingExpression | right=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"OrderConstraint"
		public Keyword getOrderConstraintKeyword_0() { return cOrderConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"left"
		public Keyword getLeftKeyword_3() { return cLeftKeyword_3; }

		//left=SymbolicTimingExpression | left=ValueTimingExpression
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//left=SymbolicTimingExpression
		public Assignment getLeftAssignment_4_0() { return cLeftAssignment_4_0; }

		//SymbolicTimingExpression
		public RuleCall getLeftSymbolicTimingExpressionParserRuleCall_4_0_0() { return cLeftSymbolicTimingExpressionParserRuleCall_4_0_0; }

		//left=ValueTimingExpression
		public Assignment getLeftAssignment_4_1() { return cLeftAssignment_4_1; }

		//ValueTimingExpression
		public RuleCall getLeftValueTimingExpressionParserRuleCall_4_1_0() { return cLeftValueTimingExpressionParserRuleCall_4_1_0; }

		//"right"
		public Keyword getRightKeyword_5() { return cRightKeyword_5; }

		//right=SymbolicTimingExpression | right=ValueTimingExpression
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//right=SymbolicTimingExpression
		public Assignment getRightAssignment_6_0() { return cRightAssignment_6_0; }

		//SymbolicTimingExpression
		public RuleCall getRightSymbolicTimingExpressionParserRuleCall_6_0_0() { return cRightSymbolicTimingExpressionParserRuleCall_6_0_0; }

		//right=ValueTimingExpression
		public Assignment getRightAssignment_6_1() { return cRightAssignment_6_1; }

		//ValueTimingExpression
		public RuleCall getRightValueTimingExpressionParserRuleCall_6_1_0() { return cRightValueTimingExpressionParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PatternConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPatternConstraintKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cEventKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEventAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cEventEventCrossReference_0_4_0 = (CrossReference)cEventAssignment_0_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_0_4_0_1 = (RuleCall)cEventEventCrossReference_0_4_0.eContents().get(1);
		private final Keyword cRefKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cRefAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final CrossReference cRefEventCrossReference_0_6_0 = (CrossReference)cRefAssignment_0_6.eContents().get(0);
		private final RuleCall cRefEventEStringParserRuleCall_0_6_0_1 = (RuleCall)cRefEventCrossReference_0_6_0.eContents().get(1);
		private final Keyword cMinimumKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Keyword cEqualsSignKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Alternatives cAlternatives_0_9 = (Alternatives)cGroup_0.eContents().get(9);
		private final Assignment cMinimumAssignment_0_9_0 = (Assignment)cAlternatives_0_9.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_0_9_0_0 = (RuleCall)cMinimumAssignment_0_9_0.eContents().get(0);
		private final Assignment cMinimumAssignment_0_9_1 = (Assignment)cAlternatives_0_9.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_0_9_1_0 = (RuleCall)cMinimumAssignment_0_9_1.eContents().get(0);
		private final Keyword cJitterKeyword_0_10 = (Keyword)cGroup_0.eContents().get(10);
		private final Keyword cEqualsSignKeyword_0_11 = (Keyword)cGroup_0.eContents().get(11);
		private final Alternatives cAlternatives_0_12 = (Alternatives)cGroup_0.eContents().get(12);
		private final Assignment cJitterAssignment_0_12_0 = (Assignment)cAlternatives_0_12.eContents().get(0);
		private final RuleCall cJitterSymbolicTimingExpressionParserRuleCall_0_12_0_0 = (RuleCall)cJitterAssignment_0_12_0.eContents().get(0);
		private final Assignment cJitterAssignment_0_12_1 = (Assignment)cAlternatives_0_12.eContents().get(1);
		private final RuleCall cJitterValueTimingExpressionParserRuleCall_0_12_1_0 = (RuleCall)cJitterAssignment_0_12_1.eContents().get(0);
		private final Keyword cOffsetKeyword_0_13 = (Keyword)cGroup_0.eContents().get(13);
		private final Keyword cEqualsSignKeyword_0_14 = (Keyword)cGroup_0.eContents().get(14);
		private final Assignment cOffsetAssignment_0_15 = (Assignment)cGroup_0.eContents().get(15);
		private final RuleCall cOffsetSymbolicTimingExpressionParserRuleCall_0_15_0 = (RuleCall)cOffsetAssignment_0_15.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOffsetAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOffsetValueTimingExpressionParserRuleCall_1_0_0 = (RuleCall)cOffsetAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cOffsetAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cOffsetSymbolicTimingExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cOffsetAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cOffsetAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cOffsetValueTimingExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOffsetAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PatternConstraint returns TE::PatternConstraint:
		//	"PatternConstraint" name=EString "{" "event" event=[TE::Event|EString] "ref" ref=[TE::Event|EString] "minimum" "="
		//	(minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression |
		//	jitter=ValueTimingExpression) "offset" "=" offset+=SymbolicTimingExpression | offset+=ValueTimingExpression (","
		//	offset+=SymbolicTimingExpression | offset+=ValueTimingExpression)* "}";
		public ParserRule getRule() { return rule; }

		//"PatternConstraint" name=EString "{" "event" event=[TE::Event|EString] "ref" ref=[TE::Event|EString] "minimum" "="
		//(minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression |
		//jitter=ValueTimingExpression) "offset" "=" offset+=SymbolicTimingExpression | offset+=ValueTimingExpression (","
		//offset+=SymbolicTimingExpression | offset+=ValueTimingExpression)* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"PatternConstraint" name=EString "{" "event" event=[TE::Event|EString] "ref" ref=[TE::Event|EString] "minimum" "="
		//(minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression |
		//jitter=ValueTimingExpression) "offset" "=" offset+=SymbolicTimingExpression
		public Group getGroup_0() { return cGroup_0; }

		//"PatternConstraint"
		public Keyword getPatternConstraintKeyword_0_0() { return cPatternConstraintKeyword_0_0; }

		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//"event"
		public Keyword getEventKeyword_0_3() { return cEventKeyword_0_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_0_4() { return cEventAssignment_0_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_0_4_0() { return cEventEventCrossReference_0_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_0_4_0_1() { return cEventEventEStringParserRuleCall_0_4_0_1; }

		//"ref"
		public Keyword getRefKeyword_0_5() { return cRefKeyword_0_5; }

		//ref=[TE::Event|EString]
		public Assignment getRefAssignment_0_6() { return cRefAssignment_0_6; }

		//[TE::Event|EString]
		public CrossReference getRefEventCrossReference_0_6_0() { return cRefEventCrossReference_0_6_0; }

		//EString
		public RuleCall getRefEventEStringParserRuleCall_0_6_0_1() { return cRefEventEStringParserRuleCall_0_6_0_1; }

		//"minimum"
		public Keyword getMinimumKeyword_0_7() { return cMinimumKeyword_0_7; }

		//"="
		public Keyword getEqualsSignKeyword_0_8() { return cEqualsSignKeyword_0_8; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_0_9() { return cAlternatives_0_9; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_0_9_0() { return cMinimumAssignment_0_9_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_0_9_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_0_9_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_0_9_1() { return cMinimumAssignment_0_9_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_0_9_1_0() { return cMinimumValueTimingExpressionParserRuleCall_0_9_1_0; }

		//"jitter"
		public Keyword getJitterKeyword_0_10() { return cJitterKeyword_0_10; }

		//"="
		public Keyword getEqualsSignKeyword_0_11() { return cEqualsSignKeyword_0_11; }

		//jitter=SymbolicTimingExpression | jitter=ValueTimingExpression
		public Alternatives getAlternatives_0_12() { return cAlternatives_0_12; }

		//jitter=SymbolicTimingExpression
		public Assignment getJitterAssignment_0_12_0() { return cJitterAssignment_0_12_0; }

		//SymbolicTimingExpression
		public RuleCall getJitterSymbolicTimingExpressionParserRuleCall_0_12_0_0() { return cJitterSymbolicTimingExpressionParserRuleCall_0_12_0_0; }

		//jitter=ValueTimingExpression
		public Assignment getJitterAssignment_0_12_1() { return cJitterAssignment_0_12_1; }

		//ValueTimingExpression
		public RuleCall getJitterValueTimingExpressionParserRuleCall_0_12_1_0() { return cJitterValueTimingExpressionParserRuleCall_0_12_1_0; }

		//"offset"
		public Keyword getOffsetKeyword_0_13() { return cOffsetKeyword_0_13; }

		//"="
		public Keyword getEqualsSignKeyword_0_14() { return cEqualsSignKeyword_0_14; }

		//offset+=SymbolicTimingExpression
		public Assignment getOffsetAssignment_0_15() { return cOffsetAssignment_0_15; }

		//SymbolicTimingExpression
		public RuleCall getOffsetSymbolicTimingExpressionParserRuleCall_0_15_0() { return cOffsetSymbolicTimingExpressionParserRuleCall_0_15_0; }

		//offset+=ValueTimingExpression ("," offset+=SymbolicTimingExpression | offset+=ValueTimingExpression)* "}"
		public Group getGroup_1() { return cGroup_1; }

		//offset+=ValueTimingExpression
		public Assignment getOffsetAssignment_1_0() { return cOffsetAssignment_1_0; }

		//ValueTimingExpression
		public RuleCall getOffsetValueTimingExpressionParserRuleCall_1_0_0() { return cOffsetValueTimingExpressionParserRuleCall_1_0_0; }

		//("," offset+=SymbolicTimingExpression | offset+=ValueTimingExpression)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"," offset+=SymbolicTimingExpression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//offset+=SymbolicTimingExpression
		public Assignment getOffsetAssignment_1_1_0_1() { return cOffsetAssignment_1_1_0_1; }

		//SymbolicTimingExpression
		public RuleCall getOffsetSymbolicTimingExpressionParserRuleCall_1_1_0_1_0() { return cOffsetSymbolicTimingExpressionParserRuleCall_1_1_0_1_0; }

		//offset+=ValueTimingExpression
		public Assignment getOffsetAssignment_1_1_1() { return cOffsetAssignment_1_1_1; }

		//ValueTimingExpression
		public RuleCall getOffsetValueTimingExpressionParserRuleCall_1_1_1_0() { return cOffsetValueTimingExpressionParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class SporadicConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SporadicConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSporadicConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_4_0_1 = (RuleCall)cEventEventCrossReference_4_0.eContents().get(1);
		private final Keyword cLowerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cLowerAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cLowerSymbolicTimingExpressionParserRuleCall_7_0_0 = (RuleCall)cLowerAssignment_7_0.eContents().get(0);
		private final Assignment cLowerAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cLowerValueTimingExpressionParserRuleCall_7_1_0 = (RuleCall)cLowerAssignment_7_1.eContents().get(0);
		private final Keyword cUpperKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cUpperAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cUpperSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cUpperAssignment_10_0.eContents().get(0);
		private final Assignment cUpperAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cUpperValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cUpperAssignment_10_1.eContents().get(0);
		private final Keyword cJitterKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cJitterAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cJitterSymbolicTimingExpressionParserRuleCall_13_0_0 = (RuleCall)cJitterAssignment_13_0.eContents().get(0);
		private final Assignment cJitterAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cJitterValueTimingExpressionParserRuleCall_13_1_0 = (RuleCall)cJitterAssignment_13_1.eContents().get(0);
		private final Keyword cMinimumKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Alternatives cAlternatives_16 = (Alternatives)cGroup.eContents().get(16);
		private final Assignment cMinimumAssignment_16_0 = (Assignment)cAlternatives_16.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_16_0_0 = (RuleCall)cMinimumAssignment_16_0.eContents().get(0);
		private final Assignment cMinimumAssignment_16_1 = (Assignment)cAlternatives_16.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_16_1_0 = (RuleCall)cMinimumAssignment_16_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//SporadicConstraint returns TE::SporadicConstraint:
		//	"SporadicConstraint" name=EString "{" "event" event=[TE::Event|EString] "lower" "=" (lower=SymbolicTimingExpression |
		//	lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression | upper=ValueTimingExpression) "jitter" "="
		//	(jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//	minimum=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"SporadicConstraint" name=EString "{" "event" event=[TE::Event|EString] "lower" "=" (lower=SymbolicTimingExpression |
		//lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression | upper=ValueTimingExpression) "jitter" "="
		//(jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//minimum=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"SporadicConstraint"
		public Keyword getSporadicConstraintKeyword_0() { return cSporadicConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_4_0() { return cEventEventCrossReference_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_4_0_1() { return cEventEventEStringParserRuleCall_4_0_1; }

		//"lower"
		public Keyword getLowerKeyword_5() { return cLowerKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//lower=SymbolicTimingExpression | lower=ValueTimingExpression
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//lower=SymbolicTimingExpression
		public Assignment getLowerAssignment_7_0() { return cLowerAssignment_7_0; }

		//SymbolicTimingExpression
		public RuleCall getLowerSymbolicTimingExpressionParserRuleCall_7_0_0() { return cLowerSymbolicTimingExpressionParserRuleCall_7_0_0; }

		//lower=ValueTimingExpression
		public Assignment getLowerAssignment_7_1() { return cLowerAssignment_7_1; }

		//ValueTimingExpression
		public RuleCall getLowerValueTimingExpressionParserRuleCall_7_1_0() { return cLowerValueTimingExpressionParserRuleCall_7_1_0; }

		//"upper"
		public Keyword getUpperKeyword_8() { return cUpperKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//upper=SymbolicTimingExpression | upper=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//upper=SymbolicTimingExpression
		public Assignment getUpperAssignment_10_0() { return cUpperAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getUpperSymbolicTimingExpressionParserRuleCall_10_0_0() { return cUpperSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//upper=ValueTimingExpression
		public Assignment getUpperAssignment_10_1() { return cUpperAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getUpperValueTimingExpressionParserRuleCall_10_1_0() { return cUpperValueTimingExpressionParserRuleCall_10_1_0; }

		//"jitter"
		public Keyword getJitterKeyword_11() { return cJitterKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//jitter=SymbolicTimingExpression | jitter=ValueTimingExpression
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//jitter=SymbolicTimingExpression
		public Assignment getJitterAssignment_13_0() { return cJitterAssignment_13_0; }

		//SymbolicTimingExpression
		public RuleCall getJitterSymbolicTimingExpressionParserRuleCall_13_0_0() { return cJitterSymbolicTimingExpressionParserRuleCall_13_0_0; }

		//jitter=ValueTimingExpression
		public Assignment getJitterAssignment_13_1() { return cJitterAssignment_13_1; }

		//ValueTimingExpression
		public RuleCall getJitterValueTimingExpressionParserRuleCall_13_1_0() { return cJitterValueTimingExpressionParserRuleCall_13_1_0; }

		//"minimum"
		public Keyword getMinimumKeyword_14() { return cMinimumKeyword_14; }

		//"="
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_16() { return cAlternatives_16; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_16_0() { return cMinimumAssignment_16_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_16_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_16_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_16_1() { return cMinimumAssignment_16_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_16_1_0() { return cMinimumValueTimingExpressionParserRuleCall_16_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class PeriodicConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PeriodicConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodicConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_4_0_1 = (RuleCall)cEventEventCrossReference_4_0.eContents().get(1);
		private final Keyword cPeriodKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPeriodAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPeriodSymbolicTimingExpressionParserRuleCall_7_0_0 = (RuleCall)cPeriodAssignment_7_0.eContents().get(0);
		private final Assignment cPeriodAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cPeriodValueTimingExpressionParserRuleCall_7_1_0 = (RuleCall)cPeriodAssignment_7_1.eContents().get(0);
		private final Keyword cMinimumKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cMinimumAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cMinimumAssignment_10_0.eContents().get(0);
		private final Assignment cMinimumAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cMinimumAssignment_10_1.eContents().get(0);
		private final Keyword cJitterKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cJitterAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cJitterSymbolicTimingExpressionParserRuleCall_13_0_0 = (RuleCall)cJitterAssignment_13_0.eContents().get(0);
		private final Assignment cJitterAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cJitterValueTimingExpressionParserRuleCall_13_1_0 = (RuleCall)cJitterAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//PeriodicConstraint returns TE::PeriodicConstraint:
		//	"PeriodicConstraint" name=EString "{" "event" event=[TE::Event|EString] "period" "=" (period=SymbolicTimingExpression
		//	| period=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression | minimum=ValueTimingExpression)
		//	"jitter" "=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"PeriodicConstraint" name=EString "{" "event" event=[TE::Event|EString] "period" "=" (period=SymbolicTimingExpression |
		//period=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "jitter"
		//"=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"PeriodicConstraint"
		public Keyword getPeriodicConstraintKeyword_0() { return cPeriodicConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_4_0() { return cEventEventCrossReference_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_4_0_1() { return cEventEventEStringParserRuleCall_4_0_1; }

		//"period"
		public Keyword getPeriodKeyword_5() { return cPeriodKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//period=SymbolicTimingExpression | period=ValueTimingExpression
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//period=SymbolicTimingExpression
		public Assignment getPeriodAssignment_7_0() { return cPeriodAssignment_7_0; }

		//SymbolicTimingExpression
		public RuleCall getPeriodSymbolicTimingExpressionParserRuleCall_7_0_0() { return cPeriodSymbolicTimingExpressionParserRuleCall_7_0_0; }

		//period=ValueTimingExpression
		public Assignment getPeriodAssignment_7_1() { return cPeriodAssignment_7_1; }

		//ValueTimingExpression
		public RuleCall getPeriodValueTimingExpressionParserRuleCall_7_1_0() { return cPeriodValueTimingExpressionParserRuleCall_7_1_0; }

		//"minimum"
		public Keyword getMinimumKeyword_8() { return cMinimumKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_10_0() { return cMinimumAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_10_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_10_1() { return cMinimumAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_10_1_0() { return cMinimumValueTimingExpressionParserRuleCall_10_1_0; }

		//"jitter"
		public Keyword getJitterKeyword_11() { return cJitterKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//jitter=SymbolicTimingExpression | jitter=ValueTimingExpression
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//jitter=SymbolicTimingExpression
		public Assignment getJitterAssignment_13_0() { return cJitterAssignment_13_0; }

		//SymbolicTimingExpression
		public RuleCall getJitterSymbolicTimingExpressionParserRuleCall_13_0_0() { return cJitterSymbolicTimingExpressionParserRuleCall_13_0_0; }

		//jitter=ValueTimingExpression
		public Assignment getJitterAssignment_13_1() { return cJitterAssignment_13_1; }

		//ValueTimingExpression
		public RuleCall getJitterValueTimingExpressionParserRuleCall_13_1_0() { return cJitterValueTimingExpressionParserRuleCall_13_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class ArbitraryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitraryConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cArbitraryConstraintKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cEventKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEventAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cEventEventCrossReference_0_4_0 = (CrossReference)cEventAssignment_0_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_0_4_0_1 = (RuleCall)cEventEventCrossReference_0_4_0.eContents().get(1);
		private final Keyword cMinimumKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cEqualsSignKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cMinimumAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_0_7_0 = (RuleCall)cMinimumAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMinimumAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_1_0_0 = (RuleCall)cMinimumAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cMinimumAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cMinimumAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cMinimumAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_1_1_1_0 = (RuleCall)cMinimumAssignment_1_1_1.eContents().get(0);
		private final Keyword cMaximumKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cMaximumAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cMaximumSymbolicTimingExpressionParserRuleCall_1_4_0 = (RuleCall)cMaximumAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMaximumAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMaximumValueTimingExpressionParserRuleCall_2_0_0 = (RuleCall)cMaximumAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cMaximumAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cMaximumSymbolicTimingExpressionParserRuleCall_2_1_0_1_0 = (RuleCall)cMaximumAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cMaximumAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cMaximumValueTimingExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMaximumAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ArbitraryConstraint returns TE::ArbitraryConstraint:
		//	"ArbitraryConstraint" name=EString "{" "event" event=[TE::Event|EString] "minimum" "="
		//	minimum+=SymbolicTimingExpression | minimum+=ValueTimingExpression ("," minimum+=SymbolicTimingExpression |
		//	minimum+=ValueTimingExpression)* "maximum" "=" maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression (","
		//	maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression)* "}";
		public ParserRule getRule() { return rule; }

		//"ArbitraryConstraint" name=EString "{" "event" event=[TE::Event|EString] "minimum" "=" minimum+=SymbolicTimingExpression
		//| minimum+=ValueTimingExpression ("," minimum+=SymbolicTimingExpression | minimum+=ValueTimingExpression)* "maximum"
		//"=" maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression ("," maximum+=SymbolicTimingExpression |
		//maximum+=ValueTimingExpression)* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ArbitraryConstraint" name=EString "{" "event" event=[TE::Event|EString] "minimum" "=" minimum+=SymbolicTimingExpression
		public Group getGroup_0() { return cGroup_0; }

		//"ArbitraryConstraint"
		public Keyword getArbitraryConstraintKeyword_0_0() { return cArbitraryConstraintKeyword_0_0; }

		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//"event"
		public Keyword getEventKeyword_0_3() { return cEventKeyword_0_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_0_4() { return cEventAssignment_0_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_0_4_0() { return cEventEventCrossReference_0_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_0_4_0_1() { return cEventEventEStringParserRuleCall_0_4_0_1; }

		//"minimum"
		public Keyword getMinimumKeyword_0_5() { return cMinimumKeyword_0_5; }

		//"="
		public Keyword getEqualsSignKeyword_0_6() { return cEqualsSignKeyword_0_6; }

		//minimum+=SymbolicTimingExpression
		public Assignment getMinimumAssignment_0_7() { return cMinimumAssignment_0_7; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_0_7_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_0_7_0; }

		//minimum+=ValueTimingExpression ("," minimum+=SymbolicTimingExpression | minimum+=ValueTimingExpression)* "maximum" "="
		//maximum+=SymbolicTimingExpression
		public Group getGroup_1() { return cGroup_1; }

		//minimum+=ValueTimingExpression
		public Assignment getMinimumAssignment_1_0() { return cMinimumAssignment_1_0; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_1_0_0() { return cMinimumValueTimingExpressionParserRuleCall_1_0_0; }

		//("," minimum+=SymbolicTimingExpression | minimum+=ValueTimingExpression)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"," minimum+=SymbolicTimingExpression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//minimum+=SymbolicTimingExpression
		public Assignment getMinimumAssignment_1_1_0_1() { return cMinimumAssignment_1_1_0_1; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_1_1_0_1_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_1_1_0_1_0; }

		//minimum+=ValueTimingExpression
		public Assignment getMinimumAssignment_1_1_1() { return cMinimumAssignment_1_1_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_1_1_1_0() { return cMinimumValueTimingExpressionParserRuleCall_1_1_1_0; }

		//"maximum"
		public Keyword getMaximumKeyword_1_2() { return cMaximumKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//maximum+=SymbolicTimingExpression
		public Assignment getMaximumAssignment_1_4() { return cMaximumAssignment_1_4; }

		//SymbolicTimingExpression
		public RuleCall getMaximumSymbolicTimingExpressionParserRuleCall_1_4_0() { return cMaximumSymbolicTimingExpressionParserRuleCall_1_4_0; }

		//maximum+=ValueTimingExpression ("," maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression)* "}"
		public Group getGroup_2() { return cGroup_2; }

		//maximum+=ValueTimingExpression
		public Assignment getMaximumAssignment_2_0() { return cMaximumAssignment_2_0; }

		//ValueTimingExpression
		public RuleCall getMaximumValueTimingExpressionParserRuleCall_2_0_0() { return cMaximumValueTimingExpressionParserRuleCall_2_0_0; }

		//("," maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression)*
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"," maximum+=SymbolicTimingExpression
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//","
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }

		//maximum+=SymbolicTimingExpression
		public Assignment getMaximumAssignment_2_1_0_1() { return cMaximumAssignment_2_1_0_1; }

		//SymbolicTimingExpression
		public RuleCall getMaximumSymbolicTimingExpressionParserRuleCall_2_1_0_1_0() { return cMaximumSymbolicTimingExpressionParserRuleCall_2_1_0_1_0; }

		//maximum+=ValueTimingExpression
		public Assignment getMaximumAssignment_2_1_1() { return cMaximumAssignment_2_1_1; }

		//ValueTimingExpression
		public RuleCall getMaximumValueTimingExpressionParserRuleCall_2_1_1_0() { return cMaximumValueTimingExpressionParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class BurstConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BurstConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBurstConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_4_0_1 = (RuleCall)cEventEventCrossReference_4_0.eContents().get(1);
		private final Keyword cMaxOccurrenceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxOccurrenceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxOccurrenceINTTerminalRuleCall_7_0 = (RuleCall)cMaxOccurrenceAssignment_7.eContents().get(0);
		private final Keyword cLengthKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cLengthAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cLengthSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cLengthAssignment_10_0.eContents().get(0);
		private final Assignment cLengthAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cLengthValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cLengthAssignment_10_1.eContents().get(0);
		private final Keyword cMinimumKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cMinimumAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_13_0_0 = (RuleCall)cMinimumAssignment_13_0.eContents().get(0);
		private final Assignment cMinimumAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_13_1_0 = (RuleCall)cMinimumAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//BurstConstraint returns TE::BurstConstraint:
		//	"BurstConstraint" name=EString "{" "event" event=[TE::Event|EString] "maxOccurrence" "=" maxOccurrence=INT "length"
		//	"=" (length=SymbolicTimingExpression | length=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//	minimum=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"BurstConstraint" name=EString "{" "event" event=[TE::Event|EString] "maxOccurrence" "=" maxOccurrence=INT "length" "="
		//(length=SymbolicTimingExpression | length=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//minimum=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"BurstConstraint"
		public Keyword getBurstConstraintKeyword_0() { return cBurstConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"event"
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }

		//event=[TE::Event|EString]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//[TE::Event|EString]
		public CrossReference getEventEventCrossReference_4_0() { return cEventEventCrossReference_4_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_4_0_1() { return cEventEventEStringParserRuleCall_4_0_1; }

		//"maxOccurrence"
		public Keyword getMaxOccurrenceKeyword_5() { return cMaxOccurrenceKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//maxOccurrence=INT
		public Assignment getMaxOccurrenceAssignment_7() { return cMaxOccurrenceAssignment_7; }

		//INT
		public RuleCall getMaxOccurrenceINTTerminalRuleCall_7_0() { return cMaxOccurrenceINTTerminalRuleCall_7_0; }

		//"length"
		public Keyword getLengthKeyword_8() { return cLengthKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//length=SymbolicTimingExpression | length=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//length=SymbolicTimingExpression
		public Assignment getLengthAssignment_10_0() { return cLengthAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getLengthSymbolicTimingExpressionParserRuleCall_10_0_0() { return cLengthSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//length=ValueTimingExpression
		public Assignment getLengthAssignment_10_1() { return cLengthAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getLengthValueTimingExpressionParserRuleCall_10_1_0() { return cLengthValueTimingExpressionParserRuleCall_10_1_0; }

		//"minimum"
		public Keyword getMinimumKeyword_11() { return cMinimumKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_13_0() { return cMinimumAssignment_13_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_13_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_13_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_13_1() { return cMinimumAssignment_13_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_13_1_0() { return cMinimumValueTimingExpressionParserRuleCall_13_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class ReactionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactionConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScopeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScopeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cScopeEventChainCrossReference_4_0 = (CrossReference)cScopeAssignment_4.eContents().get(0);
		private final RuleCall cScopeEventChainEStringParserRuleCall_4_0_1 = (RuleCall)cScopeEventChainCrossReference_4_0.eContents().get(1);
		private final Keyword cMaximumKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cMaximumAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cMaximumSymbolicTimingExpressionParserRuleCall_7_0_0 = (RuleCall)cMaximumAssignment_7_0.eContents().get(0);
		private final Assignment cMaximumAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cMaximumValueTimingExpressionParserRuleCall_7_1_0 = (RuleCall)cMaximumAssignment_7_1.eContents().get(0);
		private final Keyword cMinimumKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cMinimumAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cMinimumAssignment_10_0.eContents().get(0);
		private final Assignment cMinimumAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cMinimumAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ReactionConstraint returns TE::ReactionConstraint:
		//	"ReactionConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "="
		//	(maximum=SymbolicTimingExpression | maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//	minimum=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"ReactionConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "="
		//(maximum=SymbolicTimingExpression | maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//minimum=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"ReactionConstraint"
		public Keyword getReactionConstraintKeyword_0() { return cReactionConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"scope"
		public Keyword getScopeKeyword_3() { return cScopeKeyword_3; }

		//scope=[TE::EventChain|EString]
		public Assignment getScopeAssignment_4() { return cScopeAssignment_4; }

		//[TE::EventChain|EString]
		public CrossReference getScopeEventChainCrossReference_4_0() { return cScopeEventChainCrossReference_4_0; }

		//EString
		public RuleCall getScopeEventChainEStringParserRuleCall_4_0_1() { return cScopeEventChainEStringParserRuleCall_4_0_1; }

		//"maximum"
		public Keyword getMaximumKeyword_5() { return cMaximumKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//maximum=SymbolicTimingExpression | maximum=ValueTimingExpression
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//maximum=SymbolicTimingExpression
		public Assignment getMaximumAssignment_7_0() { return cMaximumAssignment_7_0; }

		//SymbolicTimingExpression
		public RuleCall getMaximumSymbolicTimingExpressionParserRuleCall_7_0_0() { return cMaximumSymbolicTimingExpressionParserRuleCall_7_0_0; }

		//maximum=ValueTimingExpression
		public Assignment getMaximumAssignment_7_1() { return cMaximumAssignment_7_1; }

		//ValueTimingExpression
		public RuleCall getMaximumValueTimingExpressionParserRuleCall_7_1_0() { return cMaximumValueTimingExpressionParserRuleCall_7_1_0; }

		//"minimum"
		public Keyword getMinimumKeyword_8() { return cMinimumKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_10_0() { return cMinimumAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_10_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_10_1() { return cMinimumAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_10_1_0() { return cMinimumValueTimingExpressionParserRuleCall_10_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class AgeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgeConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScopeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScopeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cScopeEventChainCrossReference_4_0 = (CrossReference)cScopeAssignment_4.eContents().get(0);
		private final RuleCall cScopeEventChainEStringParserRuleCall_4_0_1 = (RuleCall)cScopeEventChainCrossReference_4_0.eContents().get(1);
		private final Keyword cMaximumKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cMaximumAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cMaximumSymbolicTimingExpressionParserRuleCall_7_0_0 = (RuleCall)cMaximumAssignment_7_0.eContents().get(0);
		private final Assignment cMaximumAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cMaximumValueTimingExpressionParserRuleCall_7_1_0 = (RuleCall)cMaximumAssignment_7_1.eContents().get(0);
		private final Keyword cMinimumKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cMinimumAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0 = (RuleCall)cMinimumAssignment_10_0.eContents().get(0);
		private final Assignment cMinimumAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cMinimumValueTimingExpressionParserRuleCall_10_1_0 = (RuleCall)cMinimumAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//AgeConstraint returns TE::AgeConstraint:
		//	"AgeConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "="
		//	(maximum=SymbolicTimingExpression | maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
		//	minimum=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"AgeConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "=" (maximum=SymbolicTimingExpression
		//| maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"AgeConstraint"
		public Keyword getAgeConstraintKeyword_0() { return cAgeConstraintKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"scope"
		public Keyword getScopeKeyword_3() { return cScopeKeyword_3; }

		//scope=[TE::EventChain|EString]
		public Assignment getScopeAssignment_4() { return cScopeAssignment_4; }

		//[TE::EventChain|EString]
		public CrossReference getScopeEventChainCrossReference_4_0() { return cScopeEventChainCrossReference_4_0; }

		//EString
		public RuleCall getScopeEventChainEStringParserRuleCall_4_0_1() { return cScopeEventChainEStringParserRuleCall_4_0_1; }

		//"maximum"
		public Keyword getMaximumKeyword_5() { return cMaximumKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//maximum=SymbolicTimingExpression | maximum=ValueTimingExpression
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//maximum=SymbolicTimingExpression
		public Assignment getMaximumAssignment_7_0() { return cMaximumAssignment_7_0; }

		//SymbolicTimingExpression
		public RuleCall getMaximumSymbolicTimingExpressionParserRuleCall_7_0_0() { return cMaximumSymbolicTimingExpressionParserRuleCall_7_0_0; }

		//maximum=ValueTimingExpression
		public Assignment getMaximumAssignment_7_1() { return cMaximumAssignment_7_1; }

		//ValueTimingExpression
		public RuleCall getMaximumValueTimingExpressionParserRuleCall_7_1_0() { return cMaximumValueTimingExpressionParserRuleCall_7_1_0; }

		//"minimum"
		public Keyword getMinimumKeyword_8() { return cMinimumKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//minimum=SymbolicTimingExpression | minimum=ValueTimingExpression
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//minimum=SymbolicTimingExpression
		public Assignment getMinimumAssignment_10_0() { return cMinimumAssignment_10_0; }

		//SymbolicTimingExpression
		public RuleCall getMinimumSymbolicTimingExpressionParserRuleCall_10_0_0() { return cMinimumSymbolicTimingExpressionParserRuleCall_10_0_0; }

		//minimum=ValueTimingExpression
		public Assignment getMinimumAssignment_10_1() { return cMinimumAssignment_10_1; }

		//ValueTimingExpression
		public RuleCall getMinimumValueTimingExpressionParserRuleCall_10_1_0() { return cMinimumValueTimingExpressionParserRuleCall_10_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class TimingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolicTimingExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableTimingExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueTimingExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimingExpression returns TE::TimingExpression:
		//	SymbolicTimingExpression | VariableTimingExpression | ValueTimingExpression;
		public ParserRule getRule() { return rule; }

		//SymbolicTimingExpression | VariableTimingExpression | ValueTimingExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SymbolicTimingExpression
		public RuleCall getSymbolicTimingExpressionParserRuleCall_0() { return cSymbolicTimingExpressionParserRuleCall_0; }

		//VariableTimingExpression
		public RuleCall getVariableTimingExpressionParserRuleCall_1() { return cVariableTimingExpressionParserRuleCall_1; }

		//ValueTimingExpression
		public RuleCall getValueTimingExpressionParserRuleCall_2() { return cValueTimingExpressionParserRuleCall_2; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns TE::Addition:
		//	"(" leftOperand=TimingExpression "+" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "+" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGreaterThanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLessThanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGreaterThanOrEqualParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLessThanOrEqualParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Operator returns TE::Operator:
		//	Addition | Subtraction | Multiplication | Division | Assignment | GreaterThan | LessThan | GreaterThanOrEqual |
		//	LessThanOrEqual;
		public ParserRule getRule() { return rule; }

		//Addition | Subtraction | Multiplication | Division | Assignment | GreaterThan | LessThan | GreaterThanOrEqual |
		//LessThanOrEqual
		public Alternatives getAlternatives() { return cAlternatives; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//Subtraction
		public RuleCall getSubtractionParserRuleCall_1() { return cSubtractionParserRuleCall_1; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_2() { return cMultiplicationParserRuleCall_2; }

		//Division
		public RuleCall getDivisionParserRuleCall_3() { return cDivisionParserRuleCall_3; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_4() { return cAssignmentParserRuleCall_4; }

		//GreaterThan
		public RuleCall getGreaterThanParserRuleCall_5() { return cGreaterThanParserRuleCall_5; }

		//LessThan
		public RuleCall getLessThanParserRuleCall_6() { return cLessThanParserRuleCall_6; }

		//GreaterThanOrEqual
		public RuleCall getGreaterThanOrEqualParserRuleCall_7() { return cGreaterThanOrEqualParserRuleCall_7; }

		//LessThanOrEqual
		public RuleCall getLessThanOrEqualParserRuleCall_8() { return cLessThanOrEqualParserRuleCall_8; }
	}

	public class SymbolicTimingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolicTimingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSymbolicTimingExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cVariableVariableTimingExpressionCrossReference_0_1_0 = (CrossReference)cVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cVariableVariableTimingExpressionEStringParserRuleCall_0_1_0_1 = (RuleCall)cVariableVariableTimingExpressionCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		
		//SymbolicTimingExpression returns TE::SymbolicTimingExpression:
		//	{TE::SymbolicTimingExpression} variable=[TE::VariableTimingExpression|EString] | operator=Operator;
		public ParserRule getRule() { return rule; }

		//{TE::SymbolicTimingExpression} variable=[TE::VariableTimingExpression|EString] | operator=Operator
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TE::SymbolicTimingExpression} variable=[TE::VariableTimingExpression|EString]
		public Group getGroup_0() { return cGroup_0; }

		//{TE::SymbolicTimingExpression}
		public Action getSymbolicTimingExpressionAction_0_0() { return cSymbolicTimingExpressionAction_0_0; }

		//variable=[TE::VariableTimingExpression|EString]
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }

		//[TE::VariableTimingExpression|EString]
		public CrossReference getVariableVariableTimingExpressionCrossReference_0_1_0() { return cVariableVariableTimingExpressionCrossReference_0_1_0; }

		//EString
		public RuleCall getVariableVariableTimingExpressionEStringParserRuleCall_0_1_0_1() { return cVariableVariableTimingExpressionEStringParserRuleCall_0_1_0_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0() { return cOperatorOperatorParserRuleCall_1_0; }
	}

	public class VariableTimingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableTimingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUnitUnitCrossReference_2_0 = (CrossReference)cUnitAssignment_2.eContents().get(0);
		private final RuleCall cUnitUnitEStringParserRuleCall_2_0_1 = (RuleCall)cUnitUnitCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeBaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTimeBaseTimeBaseCrossReference_4_0 = (CrossReference)cTimeBaseAssignment_4.eContents().get(0);
		private final RuleCall cTimeBaseTimeBaseEStringParserRuleCall_4_0_1 = (RuleCall)cTimeBaseTimeBaseCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cValueAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cValueSymbolicTimingExpressionParserRuleCall_5_1_0_0 = (RuleCall)cValueAssignment_5_1_0.eContents().get(0);
		private final Assignment cValueAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cValueValueTimingExpressionParserRuleCall_5_1_1_0 = (RuleCall)cValueAssignment_5_1_1.eContents().get(0);
		
		//VariableTimingExpression returns TE::VariableTimingExpression:
		//	"var" name=EString unit=[TE::Unit|EString] "on" timeBase=[TE::TimeBase|EString] (":=" (value=SymbolicTimingExpression
		//	| value=ValueTimingExpression))?;
		public ParserRule getRule() { return rule; }

		//"var" name=EString unit=[TE::Unit|EString] "on" timeBase=[TE::TimeBase|EString] (":=" (value=SymbolicTimingExpression |
		//value=ValueTimingExpression))?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//unit=[TE::Unit|EString]
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//[TE::Unit|EString]
		public CrossReference getUnitUnitCrossReference_2_0() { return cUnitUnitCrossReference_2_0; }

		//EString
		public RuleCall getUnitUnitEStringParserRuleCall_2_0_1() { return cUnitUnitEStringParserRuleCall_2_0_1; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//timeBase=[TE::TimeBase|EString]
		public Assignment getTimeBaseAssignment_4() { return cTimeBaseAssignment_4; }

		//[TE::TimeBase|EString]
		public CrossReference getTimeBaseTimeBaseCrossReference_4_0() { return cTimeBaseTimeBaseCrossReference_4_0; }

		//EString
		public RuleCall getTimeBaseTimeBaseEStringParserRuleCall_4_0_1() { return cTimeBaseTimeBaseEStringParserRuleCall_4_0_1; }

		//(":=" (value=SymbolicTimingExpression | value=ValueTimingExpression))?
		public Group getGroup_5() { return cGroup_5; }

		//":="
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }

		//value=SymbolicTimingExpression | value=ValueTimingExpression
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//value=SymbolicTimingExpression
		public Assignment getValueAssignment_5_1_0() { return cValueAssignment_5_1_0; }

		//SymbolicTimingExpression
		public RuleCall getValueSymbolicTimingExpressionParserRuleCall_5_1_0_0() { return cValueSymbolicTimingExpressionParserRuleCall_5_1_0_0; }

		//value=ValueTimingExpression
		public Assignment getValueAssignment_5_1_1() { return cValueAssignment_5_1_1; }

		//ValueTimingExpression
		public RuleCall getValueValueTimingExpressionParserRuleCall_5_1_1_0() { return cValueValueTimingExpressionParserRuleCall_5_1_1_0; }
	}

	public class ValueTimingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueTimingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cUnitAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cUnitUnitCrossReference_0_2_0 = (CrossReference)cUnitAssignment_0_2.eContents().get(0);
		private final RuleCall cUnitUnitEStringParserRuleCall_0_2_0_1 = (RuleCall)cUnitUnitCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cOnKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cTimeBaseAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final CrossReference cTimeBaseTimeBaseCrossReference_0_3_1_0 = (CrossReference)cTimeBaseAssignment_0_3_1.eContents().get(0);
		private final RuleCall cTimeBaseTimeBaseEStringParserRuleCall_0_3_1_0_1 = (RuleCall)cTimeBaseTimeBaseCrossReference_0_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ValueTimingExpression returns TE::ValueTimingExpression:
		//	"(" value=EDouble unit=[TE::Unit|EString] ("on" timeBase=[TE::TimeBase|EString]) ")" | value=EDouble;
		public ParserRule getRule() { return rule; }

		//"(" value=EDouble unit=[TE::Unit|EString] ("on" timeBase=[TE::TimeBase|EString]) ")" | value=EDouble
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" value=EDouble unit=[TE::Unit|EString] ("on" timeBase=[TE::TimeBase|EString]) ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//value=EDouble
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0_1_0() { return cValueEDoubleParserRuleCall_0_1_0; }

		//unit=[TE::Unit|EString]
		public Assignment getUnitAssignment_0_2() { return cUnitAssignment_0_2; }

		//[TE::Unit|EString]
		public CrossReference getUnitUnitCrossReference_0_2_0() { return cUnitUnitCrossReference_0_2_0; }

		//EString
		public RuleCall getUnitUnitEStringParserRuleCall_0_2_0_1() { return cUnitUnitEStringParserRuleCall_0_2_0_1; }

		//"on" timeBase=[TE::TimeBase|EString]
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"on"
		public Keyword getOnKeyword_0_3_0() { return cOnKeyword_0_3_0; }

		//timeBase=[TE::TimeBase|EString]
		public Assignment getTimeBaseAssignment_0_3_1() { return cTimeBaseAssignment_0_3_1; }

		//[TE::TimeBase|EString]
		public CrossReference getTimeBaseTimeBaseCrossReference_0_3_1_0() { return cTimeBaseTimeBaseCrossReference_0_3_1_0; }

		//EString
		public RuleCall getTimeBaseTimeBaseEStringParserRuleCall_0_3_1_0_1() { return cTimeBaseTimeBaseEStringParserRuleCall_0_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}

	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subtraction returns TE::Subtraction:
		//	"(" leftOperand=TimingExpression "-" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "-" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns TE::Multiplication:
		//	"(" leftOperand=TimingExpression "*" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "*" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns TE::Division:
		//	"(" leftOperand=TimingExpression "/" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "/" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assignment returns TE::Assignment:
		//	"(" leftOperand=TimingExpression ":=" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression ":=" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class GreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GreaterThan returns TE::GreaterThan:
		//	"(" leftOperand=TimingExpression ">" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression ">" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LessThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LessThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LessThan returns TE::LessThan:
		//	"(" leftOperand=TimingExpression "<" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "<" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class GreaterThanOrEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GreaterThanOrEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GreaterThanOrEqual returns TE::GreaterThanOrEqual:
		//	"(" leftOperand=TimingExpression "=>" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "=>" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LessThanOrEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LessThanOrEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandTimingExpressionParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandTimingExpressionParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LessThanOrEqual returns TE::LessThanOrEqual:
		//	"(" leftOperand=TimingExpression "<=" rightOperand=TimingExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" leftOperand=TimingExpression "<=" rightOperand=TimingExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//leftOperand=TimingExpression
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//TimingExpression
		public RuleCall getLeftOperandTimingExpressionParserRuleCall_1_0() { return cLeftOperandTimingExpressionParserRuleCall_1_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//rightOperand=TimingExpression
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//TimingExpression
		public RuleCall getRightOperandTimingExpressionParserRuleCall_3_0() { return cRightOperandTimingExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class TimeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDimensionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeDimensionCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeDimensionEStringParserRuleCall_4_0_1 = (RuleCall)cTypeDimensionCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPrecisionFactorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPrecisionFactorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPrecisionFactorEDoubleParserRuleCall_5_1_0 = (RuleCall)cPrecisionFactorAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPrecisionUnitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPrecisionUnitAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cPrecisionUnitUnitCrossReference_6_1_0 = (CrossReference)cPrecisionUnitAssignment_6_1.eContents().get(0);
		private final RuleCall cPrecisionUnitUnitEStringParserRuleCall_6_1_0_1 = (RuleCall)cPrecisionUnitUnitCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TimeBase returns TE::TimeBase:
		//	"TimeBase" name=EString "{" "dimension" type=[TE::Dimension|EString] ("precisionFactor" precisionFactor=EDouble)?
		//	("precisionUnit" precisionUnit=[TE::Unit|EString])? //	('timeBaseRelation' timeBaseRelation=TimeBaseRelation)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"TimeBase" name=EString "{" "dimension" type=[TE::Dimension|EString] ("precisionFactor" precisionFactor=EDouble)?
		//("precisionUnit" precisionUnit=[TE::Unit|EString])? //	('timeBaseRelation' timeBaseRelation=TimeBaseRelation)?
		//"}"
		public Group getGroup() { return cGroup; }

		//"TimeBase"
		public Keyword getTimeBaseKeyword_0() { return cTimeBaseKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"dimension"
		public Keyword getDimensionKeyword_3() { return cDimensionKeyword_3; }

		//type=[TE::Dimension|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[TE::Dimension|EString]
		public CrossReference getTypeDimensionCrossReference_4_0() { return cTypeDimensionCrossReference_4_0; }

		//EString
		public RuleCall getTypeDimensionEStringParserRuleCall_4_0_1() { return cTypeDimensionEStringParserRuleCall_4_0_1; }

		//("precisionFactor" precisionFactor=EDouble)?
		public Group getGroup_5() { return cGroup_5; }

		//"precisionFactor"
		public Keyword getPrecisionFactorKeyword_5_0() { return cPrecisionFactorKeyword_5_0; }

		//precisionFactor=EDouble
		public Assignment getPrecisionFactorAssignment_5_1() { return cPrecisionFactorAssignment_5_1; }

		//EDouble
		public RuleCall getPrecisionFactorEDoubleParserRuleCall_5_1_0() { return cPrecisionFactorEDoubleParserRuleCall_5_1_0; }

		//("precisionUnit" precisionUnit=[TE::Unit|EString])?
		public Group getGroup_6() { return cGroup_6; }

		//"precisionUnit"
		public Keyword getPrecisionUnitKeyword_6_0() { return cPrecisionUnitKeyword_6_0; }

		//precisionUnit=[TE::Unit|EString]
		public Assignment getPrecisionUnitAssignment_6_1() { return cPrecisionUnitAssignment_6_1; }

		//[TE::Unit|EString]
		public CrossReference getPrecisionUnitUnitCrossReference_6_1_0() { return cPrecisionUnitUnitCrossReference_6_1_0; }

		//EString
		public RuleCall getPrecisionUnitUnitEStringParserRuleCall_6_1_0_1() { return cPrecisionUnitUnitEStringParserRuleCall_6_1_0_1; }

		////	('timeBaseRelation' timeBaseRelation=TimeBaseRelation)?
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFactorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFactorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFactorEDoubleParserRuleCall_3_1_0 = (RuleCall)cFactorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOffsetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOffsetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOffsetEDoubleParserRuleCall_4_1_0 = (RuleCall)cOffsetAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReferenceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReferenceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cReferenceUnitCrossReference_5_1_0 = (CrossReference)cReferenceAssignment_5_1.eContents().get(0);
		private final RuleCall cReferenceUnitEStringParserRuleCall_5_1_0_1 = (RuleCall)cReferenceUnitCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Unit returns TE::Unit:
		//	{TE::Unit} name=EString "{" ("factor" factor=EDouble)? ("offset" offset=EDouble)? ("reference"
		//	reference=[TE::Unit|EString])? "}";
		public ParserRule getRule() { return rule; }

		//{TE::Unit} name=EString "{" ("factor" factor=EDouble)? ("offset" offset=EDouble)? ("reference"
		//reference=[TE::Unit|EString])? "}"
		public Group getGroup() { return cGroup; }

		//{TE::Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("factor" factor=EDouble)?
		public Group getGroup_3() { return cGroup_3; }

		//"factor"
		public Keyword getFactorKeyword_3_0() { return cFactorKeyword_3_0; }

		//factor=EDouble
		public Assignment getFactorAssignment_3_1() { return cFactorAssignment_3_1; }

		//EDouble
		public RuleCall getFactorEDoubleParserRuleCall_3_1_0() { return cFactorEDoubleParserRuleCall_3_1_0; }

		//("offset" offset=EDouble)?
		public Group getGroup_4() { return cGroup_4; }

		//"offset"
		public Keyword getOffsetKeyword_4_0() { return cOffsetKeyword_4_0; }

		//offset=EDouble
		public Assignment getOffsetAssignment_4_1() { return cOffsetAssignment_4_1; }

		//EDouble
		public RuleCall getOffsetEDoubleParserRuleCall_4_1_0() { return cOffsetEDoubleParserRuleCall_4_1_0; }

		//("reference" reference=[TE::Unit|EString])?
		public Group getGroup_5() { return cGroup_5; }

		//"reference"
		public Keyword getReferenceKeyword_5_0() { return cReferenceKeyword_5_0; }

		//reference=[TE::Unit|EString]
		public Assignment getReferenceAssignment_5_1() { return cReferenceAssignment_5_1; }

		//[TE::Unit|EString]
		public CrossReference getReferenceUnitCrossReference_5_1_0() { return cReferenceUnitCrossReference_5_1_0; }

		//EString
		public RuleCall getReferenceUnitEStringParserRuleCall_5_1_0_1() { return cReferenceUnitEStringParserRuleCall_5_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDimensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKindKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKindAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKindDimensionKindEnumRuleCall_3_1_0 = (RuleCall)cKindAssignment_3_1.eContents().get(0);
		private final Keyword cUnitsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUnitsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUnitsUnitParserRuleCall_6_0 = (RuleCall)cUnitsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUnitsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUnitsUnitParserRuleCall_7_1_0 = (RuleCall)cUnitsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Dimension returns TE::Dimension:
		//	"Dimension" name=EString "{" ("kind" kind=DimensionKind)? "Units" "{" units+=Unit ("," units+=Unit)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Dimension" name=EString "{" ("kind" kind=DimensionKind)? "Units" "{" units+=Unit ("," units+=Unit)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Dimension"
		public Keyword getDimensionKeyword_0() { return cDimensionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("kind" kind=DimensionKind)?
		public Group getGroup_3() { return cGroup_3; }

		//"kind"
		public Keyword getKindKeyword_3_0() { return cKindKeyword_3_0; }

		//kind=DimensionKind
		public Assignment getKindAssignment_3_1() { return cKindAssignment_3_1; }

		//DimensionKind
		public RuleCall getKindDimensionKindEnumRuleCall_3_1_0() { return cKindDimensionKindEnumRuleCall_3_1_0; }

		//"Units"
		public Keyword getUnitsKeyword_4() { return cUnitsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//units+=Unit
		public Assignment getUnitsAssignment_6() { return cUnitsAssignment_6; }

		//Unit
		public RuleCall getUnitsUnitParserRuleCall_6_0() { return cUnitsUnitParserRuleCall_6_0; }

		//("," units+=Unit)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//units+=Unit
		public Assignment getUnitsAssignment_7_1() { return cUnitsAssignment_7_1; }

		//Unit
		public RuleCall getUnitsUnitParserRuleCall_7_1_0() { return cUnitsUnitParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TimeBaseRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeBaseRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeBaseRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cLeftSymbolicTimingExpressionParserRuleCall_3_0_0 = (RuleCall)cLeftAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLeftVariableTimingExpressionParserRuleCall_3_1_1_0 = (RuleCall)cLeftAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cLeftAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cLeftValueTimingExpressionParserRuleCall_3_2_0 = (RuleCall)cLeftAssignment_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cRightSymbolicTimingExpressionParserRuleCall_5_0_0 = (RuleCall)cRightAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cRightAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cRightVariableTimingExpressionParserRuleCall_5_1_1_0 = (RuleCall)cRightAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cRightAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cRightValueTimingExpressionParserRuleCall_5_2_0 = (RuleCall)cRightAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TimeBaseRelation returns TE::TimeBaseRelation:
		//	"TimeBaseRelation" name=EString "{" (left=SymbolicTimingExpression | "(" left=VariableTimingExpression ")" |
		//	left=ValueTimingExpression) "=" (right=SymbolicTimingExpression | "(" right=VariableTimingExpression ")" |
		//	right=ValueTimingExpression) "}";
		public ParserRule getRule() { return rule; }

		//"TimeBaseRelation" name=EString "{" (left=SymbolicTimingExpression | "(" left=VariableTimingExpression ")" |
		//left=ValueTimingExpression) "=" (right=SymbolicTimingExpression | "(" right=VariableTimingExpression ")" |
		//right=ValueTimingExpression) "}"
		public Group getGroup() { return cGroup; }

		//"TimeBaseRelation"
		public Keyword getTimeBaseRelationKeyword_0() { return cTimeBaseRelationKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//left=SymbolicTimingExpression | "(" left=VariableTimingExpression ")" | left=ValueTimingExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//left=SymbolicTimingExpression
		public Assignment getLeftAssignment_3_0() { return cLeftAssignment_3_0; }

		//SymbolicTimingExpression
		public RuleCall getLeftSymbolicTimingExpressionParserRuleCall_3_0_0() { return cLeftSymbolicTimingExpressionParserRuleCall_3_0_0; }

		//"(" left=VariableTimingExpression ")"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }

		//left=VariableTimingExpression
		public Assignment getLeftAssignment_3_1_1() { return cLeftAssignment_3_1_1; }

		//VariableTimingExpression
		public RuleCall getLeftVariableTimingExpressionParserRuleCall_3_1_1_0() { return cLeftVariableTimingExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }

		//left=ValueTimingExpression
		public Assignment getLeftAssignment_3_2() { return cLeftAssignment_3_2; }

		//ValueTimingExpression
		public RuleCall getLeftValueTimingExpressionParserRuleCall_3_2_0() { return cLeftValueTimingExpressionParserRuleCall_3_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//right=SymbolicTimingExpression | "(" right=VariableTimingExpression ")" | right=ValueTimingExpression
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//right=SymbolicTimingExpression
		public Assignment getRightAssignment_5_0() { return cRightAssignment_5_0; }

		//SymbolicTimingExpression
		public RuleCall getRightSymbolicTimingExpressionParserRuleCall_5_0_0() { return cRightSymbolicTimingExpressionParserRuleCall_5_0_0; }

		//"(" right=VariableTimingExpression ")"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1_0() { return cLeftParenthesisKeyword_5_1_0; }

		//right=VariableTimingExpression
		public Assignment getRightAssignment_5_1_1() { return cRightAssignment_5_1_1; }

		//VariableTimingExpression
		public RuleCall getRightVariableTimingExpressionParserRuleCall_5_1_1_0() { return cRightVariableTimingExpressionParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_1_2() { return cRightParenthesisKeyword_5_1_2; }

		//right=ValueTimingExpression
		public Assignment getRightAssignment_5_2() { return cRightAssignment_5_2; }

		//ValueTimingExpression
		public RuleCall getRightValueTimingExpressionParserRuleCall_5_2_0() { return cRightValueTimingExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	public class DimensionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DimensionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOtherEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOtherOtherKeyword_0_0 = (Keyword)cOtherEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTimeTimeKeyword_1_0 = (Keyword)cTimeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAngleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAngleAngleKeyword_2_0 = (Keyword)cAngleEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDistanceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDistanceDistanceKeyword_3_0 = (Keyword)cDistanceEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DimensionKind returns TE::DimensionKind:
		//	other | Time | Angle | Distance;
		public EnumRule getRule() { return rule; }

		//other | Time | Angle | Distance
		public Alternatives getAlternatives() { return cAlternatives; }

		//other
		public EnumLiteralDeclaration getOtherEnumLiteralDeclaration_0() { return cOtherEnumLiteralDeclaration_0; }

		//"other"
		public Keyword getOtherOtherKeyword_0_0() { return cOtherOtherKeyword_0_0; }

		//Time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_1() { return cTimeEnumLiteralDeclaration_1; }

		//"Time"
		public Keyword getTimeTimeKeyword_1_0() { return cTimeTimeKeyword_1_0; }

		//Angle
		public EnumLiteralDeclaration getAngleEnumLiteralDeclaration_2() { return cAngleEnumLiteralDeclaration_2; }

		//"Angle"
		public Keyword getAngleAngleKeyword_2_0() { return cAngleAngleKeyword_2_0; }

		//Distance
		public EnumLiteralDeclaration getDistanceEnumLiteralDeclaration_3() { return cDistanceEnumLiteralDeclaration_3; }

		//"Distance"
		public Keyword getDistanceDistanceKeyword_3_0() { return cDistanceDistanceKeyword_3_0; }
	}
	
	private TimingExpressionSpecificationElements pTimingExpressionSpecification;
	private ImportStatementElements pImportStatement;
	private EventElements pEvent;
	private EventChainElements pEventChain;
	private TimingConstraintElements pTimingConstraint;
	private DelayConstraintElements pDelayConstraint;
	private RepetitionConstraintElements pRepetitionConstraint;
	private SynchronizationConstraintElements pSynchronizationConstraint;
	private OrderConstraintElements pOrderConstraint;
	private PatternConstraintElements pPatternConstraint;
	private SporadicConstraintElements pSporadicConstraint;
	private PeriodicConstraintElements pPeriodicConstraint;
	private ArbitraryConstraintElements pArbitraryConstraint;
	private BurstConstraintElements pBurstConstraint;
	private ReactionConstraintElements pReactionConstraint;
	private AgeConstraintElements pAgeConstraint;
	private TimingExpressionElements pTimingExpression;
	private AdditionElements pAddition;
	private OperatorElements pOperator;
	private SymbolicTimingExpressionElements pSymbolicTimingExpression;
	private VariableTimingExpressionElements pVariableTimingExpression;
	private ValueTimingExpressionElements pValueTimingExpression;
	private SubtractionElements pSubtraction;
	private MultiplicationElements pMultiplication;
	private DivisionElements pDivision;
	private AssignmentElements pAssignment;
	private GreaterThanElements pGreaterThan;
	private LessThanElements pLessThan;
	private GreaterThanOrEqualElements pGreaterThanOrEqual;
	private LessThanOrEqualElements pLessThanOrEqual;
	private EStringElements pEString;
	private TimeBaseElements pTimeBase;
	private UnitElements pUnit;
	private DimensionElements pDimension;
	private TimeBaseRelationElements pTimeBaseRelation;
	private DimensionKindElements unknownRuleDimensionKind;
	private EDoubleElements pEDouble;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Tadl2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.aoste.timmo2use.tadl2.Tadl2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TimingExpressionSpecification returns TE::Timing:
	//	"TimingSpecification" name=EString "{" / * 'TimingExpression'* / ("{" timingExpressions+=SymbolicTimingExpression "}" |
	//	importStatements+=ImportStatement | events+=Event | eventChains+=EventChain | constraints+=TimingConstraint |
	//	timingExpressions+=VariableTimingExpression | timeBases+=TimeBase | dimensions+=Dimension |
	//	timeBaseRelations+=TimeBaseRelation)+ "}";
	public TimingExpressionSpecificationElements getTimingExpressionSpecificationAccess() {
		return (pTimingExpressionSpecification != null) ? pTimingExpressionSpecification : (pTimingExpressionSpecification = new TimingExpressionSpecificationElements());
	}
	
	public ParserRule getTimingExpressionSpecificationRule() {
		return getTimingExpressionSpecificationAccess().getRule();
	}

	//ImportStatement returns TE::ImportStatement:
	//	"import" importURI=STRING "as" alias=STRING ";";
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//Event returns TE::Event:
	//	"Event" name=EString "{" triggerableElements+=[ecore::EObject|EString]? (","
	//	triggerableElements+=[ecore::EObject|EString])* "}";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//EventChain returns TE::EventChain:
	//	"EventChain" name=EString "{" "stimulus" stimulus=[TE::Event|EString] "response" response=[TE::Event|EString]
	//	("eventChains" segment+=[TE::Event|EString] ("," segment+=[TE::Event|EString])*)? //[TE::EventChain|EString] ( "," segment+=[TE::EventChain|EString])* )
	//	"}";
	public EventChainElements getEventChainAccess() {
		return (pEventChain != null) ? pEventChain : (pEventChain = new EventChainElements());
	}
	
	public ParserRule getEventChainRule() {
		return getEventChainAccess().getRule();
	}

	//TimingConstraint returns TE::TimingConstraint:
	//	DelayConstraint | RepetitionConstraint | SynchronizationConstraint | OrderConstraint | PatternConstraint |
	//	SporadicConstraint | PeriodicConstraint | ArbitraryConstraint | BurstConstraint | ReactionConstraint | AgeConstraint;
	public TimingConstraintElements getTimingConstraintAccess() {
		return (pTimingConstraint != null) ? pTimingConstraint : (pTimingConstraint = new TimingConstraintElements());
	}
	
	public ParserRule getTimingConstraintRule() {
		return getTimingConstraintAccess().getRule();
	}

	//DelayConstraint returns TE::DelayConstraint:
	//	"DelayConstraint" name=EString "{" "source" source=[TE::Event|EString] "target" target=[TE::Event|EString] "lower" "="
	//	(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
	//	upper=ValueTimingExpression) "}";
	public DelayConstraintElements getDelayConstraintAccess() {
		return (pDelayConstraint != null) ? pDelayConstraint : (pDelayConstraint = new DelayConstraintElements());
	}
	
	public ParserRule getDelayConstraintRule() {
		return getDelayConstraintAccess().getRule();
	}

	//RepetitionConstraint returns TE::RepetitionConstraint:
	//	"RepetitionConstraint" name=EString "{" "event" event=[TE::Event|EString] "span" "=" span=INT "lower" "="
	//	(lower=SymbolicTimingExpression | lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression |
	//	upper=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}";
	public RepetitionConstraintElements getRepetitionConstraintAccess() {
		return (pRepetitionConstraint != null) ? pRepetitionConstraint : (pRepetitionConstraint = new RepetitionConstraintElements());
	}
	
	public ParserRule getRepetitionConstraintRule() {
		return getRepetitionConstraintAccess().getRule();
	}

	//SynchronizationConstraint returns TE::SynchronizationConstraint:
	//	"SynchronizationConstraint" name=EString "{" "events" events+=[TE::Event|EString] "," events+=[TE::Event|EString] (","
	//	events+=[TE::Event|EString])* "tolerance" "=" (tolerance=SymbolicTimingExpression | tolerance=ValueTimingExpression)
	//	"}";
	public SynchronizationConstraintElements getSynchronizationConstraintAccess() {
		return (pSynchronizationConstraint != null) ? pSynchronizationConstraint : (pSynchronizationConstraint = new SynchronizationConstraintElements());
	}
	
	public ParserRule getSynchronizationConstraintRule() {
		return getSynchronizationConstraintAccess().getRule();
	}

	//OrderConstraint returns TE::OrderConstraint:
	//	"OrderConstraint" name=EString "{" "left" (left=SymbolicTimingExpression | left=ValueTimingExpression) "right"
	//	(right=SymbolicTimingExpression | right=ValueTimingExpression) "}";
	public OrderConstraintElements getOrderConstraintAccess() {
		return (pOrderConstraint != null) ? pOrderConstraint : (pOrderConstraint = new OrderConstraintElements());
	}
	
	public ParserRule getOrderConstraintRule() {
		return getOrderConstraintAccess().getRule();
	}

	//PatternConstraint returns TE::PatternConstraint:
	//	"PatternConstraint" name=EString "{" "event" event=[TE::Event|EString] "ref" ref=[TE::Event|EString] "minimum" "="
	//	(minimum=SymbolicTimingExpression | minimum=ValueTimingExpression) "jitter" "=" (jitter=SymbolicTimingExpression |
	//	jitter=ValueTimingExpression) "offset" "=" offset+=SymbolicTimingExpression | offset+=ValueTimingExpression (","
	//	offset+=SymbolicTimingExpression | offset+=ValueTimingExpression)* "}";
	public PatternConstraintElements getPatternConstraintAccess() {
		return (pPatternConstraint != null) ? pPatternConstraint : (pPatternConstraint = new PatternConstraintElements());
	}
	
	public ParserRule getPatternConstraintRule() {
		return getPatternConstraintAccess().getRule();
	}

	//SporadicConstraint returns TE::SporadicConstraint:
	//	"SporadicConstraint" name=EString "{" "event" event=[TE::Event|EString] "lower" "=" (lower=SymbolicTimingExpression |
	//	lower=ValueTimingExpression) "upper" "=" (upper=SymbolicTimingExpression | upper=ValueTimingExpression) "jitter" "="
	//	(jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
	//	minimum=ValueTimingExpression) "}";
	public SporadicConstraintElements getSporadicConstraintAccess() {
		return (pSporadicConstraint != null) ? pSporadicConstraint : (pSporadicConstraint = new SporadicConstraintElements());
	}
	
	public ParserRule getSporadicConstraintRule() {
		return getSporadicConstraintAccess().getRule();
	}

	//PeriodicConstraint returns TE::PeriodicConstraint:
	//	"PeriodicConstraint" name=EString "{" "event" event=[TE::Event|EString] "period" "=" (period=SymbolicTimingExpression
	//	| period=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression | minimum=ValueTimingExpression)
	//	"jitter" "=" (jitter=SymbolicTimingExpression | jitter=ValueTimingExpression) "}";
	public PeriodicConstraintElements getPeriodicConstraintAccess() {
		return (pPeriodicConstraint != null) ? pPeriodicConstraint : (pPeriodicConstraint = new PeriodicConstraintElements());
	}
	
	public ParserRule getPeriodicConstraintRule() {
		return getPeriodicConstraintAccess().getRule();
	}

	//ArbitraryConstraint returns TE::ArbitraryConstraint:
	//	"ArbitraryConstraint" name=EString "{" "event" event=[TE::Event|EString] "minimum" "="
	//	minimum+=SymbolicTimingExpression | minimum+=ValueTimingExpression ("," minimum+=SymbolicTimingExpression |
	//	minimum+=ValueTimingExpression)* "maximum" "=" maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression (","
	//	maximum+=SymbolicTimingExpression | maximum+=ValueTimingExpression)* "}";
	public ArbitraryConstraintElements getArbitraryConstraintAccess() {
		return (pArbitraryConstraint != null) ? pArbitraryConstraint : (pArbitraryConstraint = new ArbitraryConstraintElements());
	}
	
	public ParserRule getArbitraryConstraintRule() {
		return getArbitraryConstraintAccess().getRule();
	}

	//BurstConstraint returns TE::BurstConstraint:
	//	"BurstConstraint" name=EString "{" "event" event=[TE::Event|EString] "maxOccurrence" "=" maxOccurrence=INT "length"
	//	"=" (length=SymbolicTimingExpression | length=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
	//	minimum=ValueTimingExpression) "}";
	public BurstConstraintElements getBurstConstraintAccess() {
		return (pBurstConstraint != null) ? pBurstConstraint : (pBurstConstraint = new BurstConstraintElements());
	}
	
	public ParserRule getBurstConstraintRule() {
		return getBurstConstraintAccess().getRule();
	}

	//ReactionConstraint returns TE::ReactionConstraint:
	//	"ReactionConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "="
	//	(maximum=SymbolicTimingExpression | maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
	//	minimum=ValueTimingExpression) "}";
	public ReactionConstraintElements getReactionConstraintAccess() {
		return (pReactionConstraint != null) ? pReactionConstraint : (pReactionConstraint = new ReactionConstraintElements());
	}
	
	public ParserRule getReactionConstraintRule() {
		return getReactionConstraintAccess().getRule();
	}

	//AgeConstraint returns TE::AgeConstraint:
	//	"AgeConstraint" name=EString "{" "scope" scope=[TE::EventChain|EString] "maximum" "="
	//	(maximum=SymbolicTimingExpression | maximum=ValueTimingExpression) "minimum" "=" (minimum=SymbolicTimingExpression |
	//	minimum=ValueTimingExpression) "}";
	public AgeConstraintElements getAgeConstraintAccess() {
		return (pAgeConstraint != null) ? pAgeConstraint : (pAgeConstraint = new AgeConstraintElements());
	}
	
	public ParserRule getAgeConstraintRule() {
		return getAgeConstraintAccess().getRule();
	}

	//TimingExpression returns TE::TimingExpression:
	//	SymbolicTimingExpression | VariableTimingExpression | ValueTimingExpression;
	public TimingExpressionElements getTimingExpressionAccess() {
		return (pTimingExpression != null) ? pTimingExpression : (pTimingExpression = new TimingExpressionElements());
	}
	
	public ParserRule getTimingExpressionRule() {
		return getTimingExpressionAccess().getRule();
	}

	//Addition returns TE::Addition:
	//	"(" leftOperand=TimingExpression "+" rightOperand=TimingExpression ")";
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Operator returns TE::Operator:
	//	Addition | Subtraction | Multiplication | Division | Assignment | GreaterThan | LessThan | GreaterThanOrEqual |
	//	LessThanOrEqual;
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//SymbolicTimingExpression returns TE::SymbolicTimingExpression:
	//	{TE::SymbolicTimingExpression} variable=[TE::VariableTimingExpression|EString] | operator=Operator;
	public SymbolicTimingExpressionElements getSymbolicTimingExpressionAccess() {
		return (pSymbolicTimingExpression != null) ? pSymbolicTimingExpression : (pSymbolicTimingExpression = new SymbolicTimingExpressionElements());
	}
	
	public ParserRule getSymbolicTimingExpressionRule() {
		return getSymbolicTimingExpressionAccess().getRule();
	}

	//VariableTimingExpression returns TE::VariableTimingExpression:
	//	"var" name=EString unit=[TE::Unit|EString] "on" timeBase=[TE::TimeBase|EString] (":=" (value=SymbolicTimingExpression
	//	| value=ValueTimingExpression))?;
	public VariableTimingExpressionElements getVariableTimingExpressionAccess() {
		return (pVariableTimingExpression != null) ? pVariableTimingExpression : (pVariableTimingExpression = new VariableTimingExpressionElements());
	}
	
	public ParserRule getVariableTimingExpressionRule() {
		return getVariableTimingExpressionAccess().getRule();
	}

	//ValueTimingExpression returns TE::ValueTimingExpression:
	//	"(" value=EDouble unit=[TE::Unit|EString] ("on" timeBase=[TE::TimeBase|EString]) ")" | value=EDouble;
	public ValueTimingExpressionElements getValueTimingExpressionAccess() {
		return (pValueTimingExpression != null) ? pValueTimingExpression : (pValueTimingExpression = new ValueTimingExpressionElements());
	}
	
	public ParserRule getValueTimingExpressionRule() {
		return getValueTimingExpressionAccess().getRule();
	}

	//Subtraction returns TE::Subtraction:
	//	"(" leftOperand=TimingExpression "-" rightOperand=TimingExpression ")";
	public SubtractionElements getSubtractionAccess() {
		return (pSubtraction != null) ? pSubtraction : (pSubtraction = new SubtractionElements());
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}

	//Multiplication returns TE::Multiplication:
	//	"(" leftOperand=TimingExpression "*" rightOperand=TimingExpression ")";
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns TE::Division:
	//	"(" leftOperand=TimingExpression "/" rightOperand=TimingExpression ")";
	public DivisionElements getDivisionAccess() {
		return (pDivision != null) ? pDivision : (pDivision = new DivisionElements());
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Assignment returns TE::Assignment:
	//	"(" leftOperand=TimingExpression ":=" rightOperand=TimingExpression ")";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//GreaterThan returns TE::GreaterThan:
	//	"(" leftOperand=TimingExpression ">" rightOperand=TimingExpression ")";
	public GreaterThanElements getGreaterThanAccess() {
		return (pGreaterThan != null) ? pGreaterThan : (pGreaterThan = new GreaterThanElements());
	}
	
	public ParserRule getGreaterThanRule() {
		return getGreaterThanAccess().getRule();
	}

	//LessThan returns TE::LessThan:
	//	"(" leftOperand=TimingExpression "<" rightOperand=TimingExpression ")";
	public LessThanElements getLessThanAccess() {
		return (pLessThan != null) ? pLessThan : (pLessThan = new LessThanElements());
	}
	
	public ParserRule getLessThanRule() {
		return getLessThanAccess().getRule();
	}

	//GreaterThanOrEqual returns TE::GreaterThanOrEqual:
	//	"(" leftOperand=TimingExpression "=>" rightOperand=TimingExpression ")";
	public GreaterThanOrEqualElements getGreaterThanOrEqualAccess() {
		return (pGreaterThanOrEqual != null) ? pGreaterThanOrEqual : (pGreaterThanOrEqual = new GreaterThanOrEqualElements());
	}
	
	public ParserRule getGreaterThanOrEqualRule() {
		return getGreaterThanOrEqualAccess().getRule();
	}

	//LessThanOrEqual returns TE::LessThanOrEqual:
	//	"(" leftOperand=TimingExpression "<=" rightOperand=TimingExpression ")";
	public LessThanOrEqualElements getLessThanOrEqualAccess() {
		return (pLessThanOrEqual != null) ? pLessThanOrEqual : (pLessThanOrEqual = new LessThanOrEqualElements());
	}
	
	public ParserRule getLessThanOrEqualRule() {
		return getLessThanOrEqualAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//TimeBase returns TE::TimeBase:
	//	"TimeBase" name=EString "{" "dimension" type=[TE::Dimension|EString] ("precisionFactor" precisionFactor=EDouble)?
	//	("precisionUnit" precisionUnit=[TE::Unit|EString])? //	('timeBaseRelation' timeBaseRelation=TimeBaseRelation)?
	//	"}";
	public TimeBaseElements getTimeBaseAccess() {
		return (pTimeBase != null) ? pTimeBase : (pTimeBase = new TimeBaseElements());
	}
	
	public ParserRule getTimeBaseRule() {
		return getTimeBaseAccess().getRule();
	}

	//Unit returns TE::Unit:
	//	{TE::Unit} name=EString "{" ("factor" factor=EDouble)? ("offset" offset=EDouble)? ("reference"
	//	reference=[TE::Unit|EString])? "}";
	public UnitElements getUnitAccess() {
		return (pUnit != null) ? pUnit : (pUnit = new UnitElements());
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//Dimension returns TE::Dimension:
	//	"Dimension" name=EString "{" ("kind" kind=DimensionKind)? "Units" "{" units+=Unit ("," units+=Unit)* "}" "}";
	public DimensionElements getDimensionAccess() {
		return (pDimension != null) ? pDimension : (pDimension = new DimensionElements());
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}

	//TimeBaseRelation returns TE::TimeBaseRelation:
	//	"TimeBaseRelation" name=EString "{" (left=SymbolicTimingExpression | "(" left=VariableTimingExpression ")" |
	//	left=ValueTimingExpression) "=" (right=SymbolicTimingExpression | "(" right=VariableTimingExpression ")" |
	//	right=ValueTimingExpression) "}";
	public TimeBaseRelationElements getTimeBaseRelationAccess() {
		return (pTimeBaseRelation != null) ? pTimeBaseRelation : (pTimeBaseRelation = new TimeBaseRelationElements());
	}
	
	public ParserRule getTimeBaseRelationRule() {
		return getTimeBaseRelationAccess().getRule();
	}

	//enum DimensionKind returns TE::DimensionKind:
	//	other | Time | Angle | Distance;
	public DimensionKindElements getDimensionKindAccess() {
		return (unknownRuleDimensionKind != null) ? unknownRuleDimensionKind : (unknownRuleDimensionKind = new DimensionKindElements());
	}
	
	public EnumRule getDimensionKindRule() {
		return getDimensionKindAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
