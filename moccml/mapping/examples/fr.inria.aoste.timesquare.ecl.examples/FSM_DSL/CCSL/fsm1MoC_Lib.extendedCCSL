/*
 * CCSL specification
 * @author:  jdeanton
 * date :  Fri June 29 2012  08:38:48 CEST 
 */
ClockConstraintSystem MySpec {
    imports {
        // import statements
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as lib0; 
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as lib1; 
		import "./FSM.ccslLib" as FSMLib;
		import "../ecore/fsm1.xmi" as model;
    }
    entryBlock main
     
        Block main {
        	Clock s1enter->enterS1("model->s1::onEnter()")
        	Clock s1leave->leaveS1("model->s1::onLeave()")
        	
        	Clock s2enter->enterS2("model->s2::onEnter()")
        	Clock s2leave->leaveS2("model->s2::onLeave()")
        	
        	Clock s1tos2Fire->fireT1("model->s1tos2::fire()")
        	Clock s1tos2Guard->checkT1Guard("model->s1tos2::evaluateGuard()")
//        	Clock s1tos2ResFalse
//			Clock s1tos2ResTrue
        	Clock s1tos2Action->runT1action("model->s1tos2::callEffect()")
        	
        	Clock s2tos1Fire->fireT2("model->s2tos1::fire()")
			Clock s2tos1Guard->checkT2Guard("model->s2tos1::evaluateGuard()")
//			Clock s2tos1ResFalse
//			Clock s2tos1ResTrue
        	Clock s2tos1Action->runT2action("model->s2tos1::callEffect()")
        	
        	//init stuff
        	Clock init
        	Expression oneInit=Wait(WaitingClock-> init, WaitingValue->one)
			Relation relation_0[Coincides](Clock2-> init, Clock1-> oneInit)


        	Expression s2tos1FireOrInit=Union(Clock1-> s2tos1Fire, Clock2-> init)

        	Relation s2tos1FireOrIinit_Prec_s1enter[Precedes](LeftClock-> s2tos1FireOrInit, RightClock-> s1enter)        	
        	Expression noMoreS1=SampledOn( SampledOnSampledClock-> s1enter, SampledOnTrigger-> s1tos2Fire )
			Relation s1leave_Coinc_noMoreS1[Coincides](Clock2-> s1leave, Clock1-> noMoreS1 )
			
			Relation s1Enter_Prec_s1tos2Guard[Precedes](   LeftClock-> s1enter ,	RightClock-> s1tos2Guard  )
			Clock s1tos2ResTrue
			Relation s1tos2[TransitionRule](  evaluateGuard-> s1tos2Guard ,	fire-> s1tos2Fire ,	action-> s1tos2Action , resTrue->s1tos2ResTrue )
						
			
//			Relation s1tos2True_Excl_s1tos2False[Exclusion](   Clock2-> s1tos2ResFalse ,	Clock1-> s1tos2ResTrue)
//			Expression s1tos2Res=Union( Clock1-> s1tos2ResFalse 	,Clock2-> s1tos2ResTrue  )
//			Relation s1tos2Guard_Prec_s1tos2Res[Precedes](LeftClock-> s1tos2Guard, RightClock-> s1tos2Res)
//			Relation s1tos2ResTrue_Causes_s1tos2Fire[Causes](LeftClock-> s1tos2ResTrue, RightClock-> s1tos2Fire)
//			Relation s1tos2Fire_Coinc_s1Tos2Action[Coincides](Clock2-> s1tos2Fire, Clock1-> s1tos2Action)

			Relation s1tos2Fire_Prec_s2enter[Precedes](LeftClock-> s1tos2Fire, RightClock-> s2enter  )

			Expression noMoreS2=SampledOn( SampledOnSampledClock-> s2enter, SampledOnTrigger-> s2tos1Fire )
			Relation s2leave_Coinc_noMoreS2[Coincides](Clock2-> s2leave, Clock1-> noMoreS2 )
			
			Relation s2Enter_Prec_s2tos1Guard[Precedes](LeftClock-> s2enter, RightClock-> s2tos1Guard  )
			Clock s2tos1ResTrue
			Relation s2tos1[TransitionRule](  evaluateGuard-> s2tos1Guard ,	fire-> s2tos1Fire ,	action-> s2tos1Action, resTrue->s2tos1ResTrue)

			
//			Relation s2tos1True_Excl_s2tos1False[Exclusion](Clock2-> s2tos1ResFalse ,	Clock1-> s2tos1ResTrue)
//			Expression s2tos1Res=Union( Clock1-> s2tos1ResFalse 	,Clock2-> s2tos1ResTrue  )
//			Relation s2tos1Guard_Prec_s2tos1Res[Precedes](LeftClock-> s2tos1Guard, RightClock-> s2tos1Res)
//			Relation s2tos1ResTrue_Causes_s2tos1Fire[Causes](LeftClock-> s2tos1ResTrue, RightClock-> s2tos1Fire)
//			Relation s2tos1Fire_Coinc_s2Tos1Action[Coincides](Clock2-> s2tos1Fire, Clock1-> s2tos1Action)
//						

	}
}
