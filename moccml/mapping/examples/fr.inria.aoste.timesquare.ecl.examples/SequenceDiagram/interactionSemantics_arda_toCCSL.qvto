import fr.inria.aoste.timesquare.ecl.EclQVToHelper;

	
modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
//modeltype pivot uses 'http://www.eclipse.org/ocl/3.1.0/Pivot';
	   
modeltype inMM uses 'http://www.eclipse.org/uml2/4.0.0/UML';
modeltype QVT uses 'http://www.eclipse.org/QVT/1.0.0/Operational';//http://www.eclipse.org/m2m/qvt/oml/1.0.0/Stdlib';//http://www.eclipse.org/qvt/1.0/ImperativeOCL'; 
modeltype TimeModel uses 'http://fr.inria.aoste.timemodel';

	

transformation doUML_To_CCSL(in inM : inMM, out TimeModel);

property theCCSLSpec			:TimeModel::CCSLModel::ClockConstraintSystem = null;
property theMainBlock			:TimeModel::CCSLModel::Block				 = null;

property Kernel_Integer 	: TimeModel::BasicType::Type		= null;
property Kernel_Clock_Type 	: TimeModel::BasicType::Type		= null;

property seqOfRelationDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration)    = Sequence{};
property seqOfAbstractEntity :		Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)    = Sequence{};
property seqOfExpressionDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration)    = Sequence{};


query identifyUserRelations() {
	var kernelTypes :  	Sequence(TimeModel::BasicType::Type) := Sequence{};
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("./lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("./lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("./lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("./lib4RT.ccslLib")[TimeModel::BasicType::Type];

	Kernel_Integer 					:= kernelTypes[name='int']->asSequence()->first();
	Kernel_Clock_Type				:= kernelTypes[name='clock']->asSequence()->first();	
	return;
}


//usefull function :)
	mapping Real::Real2Integer(n: String) :TimeModel::BasicType::IntegerElement {
		name:= n;
		type:= Kernel_Integer;
		value := self.round();

		end{
			theMainBlock.elements += result;
		}
	}

main() {
	identifyUserRelations();
	inM.rootObjects()[inMM::Package]->asSequence()->first()-> map uml2CCSL();
	}

			
			

	mapping inMM::Package::uml2CCSL() : TimeModel::CCSLModel::ClockConstraintSystem {
	    theCCSLSpec := result;
	    name := self.name;
	    theMainBlock :=object TimeModel::CCSLModel::Block{
	    	name := "mainBlock";
	    };
	    subBlock += theMainBlock;
	    result.superBlock := theMainBlock;

		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'kernel';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'CCSL';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := './lib4RT.ccslLib';
			alias := 'lib4RT';
			
		}; 
	
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};

		

		inM.rootObjects().allSubobjects()->including(self)[ Interaction ]->map interactionEvent2Clock();
		


		

		inM.rootObjects().allSubobjects()->including(self)[ OccurrenceSpecification ]->map occurrence2Clock();
		


		
		inM.rootObjects().allSubobjects()->including(self)[ OccurrenceSpecification ]->map notInCombinedFragment1812notInCombinedFragment();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ OccurrenceSpecification ]->map inNegCombinedFragment1852inNegCombinedFragment();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ Message ]->map sendReceiveCause12sendReceiveCause();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ GeneralOrdering ]->map beforeAfterCause12beforeAfterCause();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ Lifeline ]->map firstLastAlternate1142firstLastAlternate();
		
		
		inM.rootObjects().allSubobjects()->including(self)[ Lifeline ]->map lifelineordering12lifelineordering();
		
		

		


		
		inM.rootObjects().allSubobjects()->including(self)[ DurationConstraint ]->map durationCns922durationCns();
		
	}





//create the expressions...




	 	mapping inMM::Interaction::interactionEvent2Clock() :TimeModel::Clock 
		{
			name:= self.name+'_interactionEvent';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_interactionEvent';
				kind := TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM::OccurrenceSpecification::occurrence2Clock() :TimeModel::Clock 
		{
			name:= self.name+'_occurrence';
			
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				name := 'evt_'+self.name+'_occurrence';
				kind := TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	
		mapping inMM::OccurrenceSpecification::notInCombinedFragment1812notInCombinedFragment(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
			  let lifeline : Lifeline = self.covered->asSequence()->first().oclAsType(Lifeline) in
			  let fragments : OrderedSet(uml::InteractionFragment) = lifeline.interaction.fragment in
			  let someFragments : OrderedSet(uml::InteractionFragment) = fragments->select(n|n.oclIsKindOf(InteractionFragment) and not n.oclIsKindOf(BehaviorExecutionSpecification) and n.covered->includes(self.covered->asSequence()->first().oclAsType(Lifeline))) in
				(
       			(fragments->includes(self)) 
           and
           		(not (fragments->select(n|n.oclIsKindOf(OccurrenceSpecification) and n.covered->asSequence()->first() = self.covered->asSequence()->first().oclAsType(Lifeline))->asSequence()->last() = self))
	       and
	       		(someFragments->at(fragments->select(n|n.oclIsKindOf(InteractionFragment) and not n.oclIsKindOf(BehaviorExecutionSpecification) and n.covered->includes(lifeline))->asSequence()->indexOf(self)+1).oclIsKindOf(OccurrenceSpecification))
          ) 
				
}
		{
		 	name := self.name+"Precedes_notInCombinedFragment";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Precedes")->first();
					var lifeline : Lifeline := self.covered->asSequence()->first().oclAsType(Lifeline);
					var fragments : OrderedSet(uml::InteractionFragment) := lifeline.interaction.fragment;
					var someFragments : OrderedSet(uml::InteractionFragment) := fragments->select(n|n.oclIsKindOf(InteractionFragment) and not n.oclIsKindOf(BehaviorExecutionSpecification) and n.covered->includes(self.covered->asSequence()->first().oclAsType(Lifeline)));
					var i : Integer := fragments->select(n|n.oclIsKindOf(InteractionFragment) and not n.oclIsKindOf(BehaviorExecutionSpecification) and n.covered->asSequence()->first() = lifeline)->asSequence()->indexOf(self);
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = someFragments->at(i+1).oclAsType(OccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM::OccurrenceSpecification::inNegCombinedFragment1852inNegCombinedFragment(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
			  let lifeline : uml::Lifeline = self.covered->asSequence()->first() in
			  let someFragments : OrderedSet(uml::InteractionFragment) = lifeline.interaction.fragment->
                       select(n|n.oclIsKindOf(InteractionFragment) 
                 	          and not n.oclIsKindOf(BehaviorExecutionSpecification) 
                 	          and n.covered->includes(lifeline)
                       ) in
			  let someOtherFragments : OrderedSet(uml::InteractionFragment)= lifeline.coveredBy->select(cf|cf.oclIsKindOf(CombinedFragment))->
          	              select(cf|(cf.oclAsType(CombinedFragment).interactionOperator = InteractionOperatorKind::neg) 
          		                 and cf.oclAsType(CombinedFragment).operand->asSequence()->first().fragment->includes(self)
          		       )->asOrderedSet() in
				( 
         	(lifeline.coveredBy->select(cf|cf.oclIsKindOf(CombinedFragment))->select(cf|(cf.oclAsType(CombinedFragment).interactionOperator = InteractionOperatorKind::neg) 
             							and 
             							cf.oclAsType(CombinedFragment).operand->asSequence()->first().fragment->includes(self)
             							)->size() = 1)
            and
               not (someFragments->first() = someOtherFragments->first())
		    and
		  	   not (someFragments->last() = someOtherFragments->first())
		    and
               (someFragments->at(lifeline.interaction.fragment->indexOf(someOtherFragments->first())-1).oclIsKindOf(OccurrenceSpecification))                                  
          ) 
				
}
		{
		 	name := self.name+"Precedes_inNegCombinedFragment";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Precedes")->first();
					var lifeline : uml::Lifeline := self.covered->asSequence()->first();
					var someFragments : OrderedSet(uml::InteractionFragment) := lifeline.interaction.fragment->
                       select(n|n.oclIsKindOf(InteractionFragment) 
                 	          and not n.oclIsKindOf(BehaviorExecutionSpecification) 
                 	          and n.covered->includes(lifeline)
                       );
					var someOtherFragments : OrderedSet(uml::InteractionFragment) := lifeline.coveredBy->select(cf|cf.oclIsKindOf(CombinedFragment))->
          	              select(cf|(cf.oclAsType(CombinedFragment).interactionOperator = InteractionOperatorKind::neg) 
          		                 and cf.oclAsType(CombinedFragment).operand->asSequence()->first().fragment->includes(self)
          		       )->asOrderedSet();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM::Message::sendReceiveCause12sendReceiveCause(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := self.name+"Causes_sendReceiveCause";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self._'sendEvent'.oclAsType(MessageOccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self._'receiveEvent'.oclAsType(MessageOccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM::GeneralOrdering::beforeAfterCause12beforeAfterCause(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := self.name+"Causes_beforeAfterCause";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.before.name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.after.name+'_occurrence']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM::Lifeline::firstLastAlternate1142firstLastAlternate(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				((not (self.interaction.fragment->select(n|n.oclIsKindOf(OccurrenceSpecification) and n.covered->includes(self))->size() < 2))
          and
          (self.interaction.fragment->select(n|n.oclIsKindOf(InteractionFragment) and n.covered->asSequence()->select(lf| lf=self)->size()>0)->asSequence()->first().oclIsKindOf(OccurrenceSpecification))
          and
          (self.interaction.fragment->select(n|n.oclIsKindOf(InteractionFragment) and n.covered->asSequence()->select(lf| lf=self)->size()>0)->asSequence()->last().oclIsKindOf(OccurrenceSpecification)) 
          ) 
				
}
		{
		 	name := self.name+"Alternates_firstLastAlternate";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Alternates")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.interaction.fragment->select(n|n.oclIsKindOf(OccurrenceSpecification) and n.covered->includes(self))->asSequence()->first().oclAsType(OccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfAbstractEntity[name = 'AlternatesLeftClock']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = self.interaction.fragment->select(n|n.oclIsKindOf(OccurrenceSpecification) and n.covered->includes(self))->asSequence()->last().oclAsType(OccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfAbstractEntity[name = 'AlternatesRightClock']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	

//Create an intermediate relation
	mapping inMM::Lifeline::intermediate_lifelineordering12lifelineordering(an1 : uml::OccurrenceSpecification, an2 : uml::OccurrenceSpecification, nbi : Integer, nbj : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
	{
		name := self.name+'intermediate_lifelineordering'+nbi.toString()+"_"+nbj.toString();
		var seqAbstract : Sequence(Stdlib::Element) := seqOfRelationDeclaration[name = 'Precedes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::Precedence).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence();
		type := seqOfRelationDeclaration->select(rd | rd.name = "Precedes")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an1.name+'_occurrence']->first();
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = an2.name+'_occurrence']->first();
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.relations += result;
		}
	}
	
	mapping inMM::Lifeline::lifelineordering12lifelineordering()
	{
		init{
			var sources : Sequence(uml::OccurrenceSpecification) := self.interaction.fragment->select(n|n.oclIsKindOf(OccurrenceSpecification) and n.covered->asSequence()->first() = self).oclAsType(OccurrenceSpecification)->asSequence();
			var i : Integer := 1;
			var j : Integer := 1;
			var size : Integer = sources->size(); 
			while (i <= size){
				j := i+1;
				while (j <= size){
					theMainBlock.relations +=  self.map intermediate_lifelineordering12lifelineordering(sources->at(i),sources->at(j), i, j);
					j := j + 1;
				};
				i := i + 1;
			};
		}
	}

		

//relation stuff		
	
		mapping inMM::DurationConstraint::durationCns922durationCns(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := self.name+"Duration_durationCns";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Duration")->first();
					var minValue : Integer := self.specification.oclAsType(DurationInterval).min.oclAsType(Duration).expr->asSequence()->first().oclAsType(LiteralInteger).value;
					var maxValue : Integer := self.specification.oclAsType(DurationInterval).max.oclAsType(Duration).expr->asSequence()->first().oclAsType(LiteralInteger).value;
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
						bindable := theMainBlock.elements[name = self.constrainedElement->asSequence()->first().oclAsType(OccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfAbstractEntity[name = 'Start']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
						bindable := theMainBlock.elements[name = self.constrainedElement->asSequence()->last().oclAsType(OccurrenceSpecification).name+'_occurrence']->first();
					_abstract := seqOfAbstractEntity[name = 'End']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
						bindable := theMainBlock.elements[name = self.owner.oclAsType(Interaction).name+'_interactionEvent']->first();
					_abstract := seqOfAbstractEntity[name = 'Base']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
					_abstract := seqOfAbstractEntity[name = 'MinValue']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
				
					_abstract := seqOfAbstractEntity[name = 'MaxValue']->first();
				};
		
		theMainBlock.relations += result;
		}
		

