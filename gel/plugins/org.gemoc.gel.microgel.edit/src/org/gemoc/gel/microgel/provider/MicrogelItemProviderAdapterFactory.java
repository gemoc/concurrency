/**
 */
package org.gemoc.gel.microgel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gemoc.gel.microgel.util.MicrogelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MicrogelItemProviderAdapterFactory extends MicrogelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MicrogelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.ModelSpecificEventsSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelSpecificEventsSpecificationItemProvider modelSpecificEventsSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.ModelSpecificEventsSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelSpecificEventsSpecificationAdapter() {
		if (modelSpecificEventsSpecificationItemProvider == null) {
			modelSpecificEventsSpecificationItemProvider = new ModelSpecificEventsSpecificationItemProvider(this);
		}

		return modelSpecificEventsSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.ImportStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportStatementItemProvider importStatementItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.ImportStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportStatementAdapter() {
		if (importStatementItemProvider == null) {
			importStatementItemProvider = new ImportStatementItemProvider(this);
		}

		return importStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.AtomicModelSpecificEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicModelSpecificEventItemProvider atomicModelSpecificEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.AtomicModelSpecificEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicModelSpecificEventAdapter() {
		if (atomicModelSpecificEventItemProvider == null) {
			atomicModelSpecificEventItemProvider = new AtomicModelSpecificEventItemProvider(this);
		}

		return atomicModelSpecificEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.CompositeModelSpecificEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeModelSpecificEventItemProvider compositeModelSpecificEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.CompositeModelSpecificEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeModelSpecificEventAdapter() {
		if (compositeModelSpecificEventItemProvider == null) {
			compositeModelSpecificEventItemProvider = new CompositeModelSpecificEventItemProvider(this);
		}

		return compositeModelSpecificEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.CoincidencePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoincidencePatternItemProvider coincidencePatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.CoincidencePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoincidencePatternAdapter() {
		if (coincidencePatternItemProvider == null) {
			coincidencePatternItemProvider = new CoincidencePatternItemProvider(this);
		}

		return coincidencePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.LogicalSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalSequenceItemProvider logicalSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.LogicalSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalSequenceAdapter() {
		if (logicalSequenceItemProvider == null) {
			logicalSequenceItemProvider = new LogicalSequenceItemProvider(this);
		}

		return logicalSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.OrPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrPatternItemProvider orPatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.OrPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrPatternAdapter() {
		if (orPatternItemProvider == null) {
			orPatternItemProvider = new OrPatternItemProvider(this);
		}

		return orPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.XorPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XorPatternItemProvider xorPatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.XorPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXorPatternAdapter() {
		if (xorPatternItemProvider == null) {
			xorPatternItemProvider = new XorPatternItemProvider(this);
		}

		return xorPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.PlusPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlusPatternItemProvider plusPatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.PlusPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlusPatternAdapter() {
		if (plusPatternItemProvider == null) {
			plusPatternItemProvider = new PlusPatternItemProvider(this);
		}

		return plusPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.IterationPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IterationPatternItemProvider iterationPatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.IterationPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIterationPatternAdapter() {
		if (iterationPatternItemProvider == null) {
			iterationPatternItemProvider = new IterationPatternItemProvider(this);
		}

		return iterationPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.ModelSpecificEventReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelSpecificEventReferenceItemProvider modelSpecificEventReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.ModelSpecificEventReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelSpecificEventReferenceAdapter() {
		if (modelSpecificEventReferenceItemProvider == null) {
			modelSpecificEventReferenceItemProvider = new ModelSpecificEventReferenceItemProvider(this);
		}

		return modelSpecificEventReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.FeedbackPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeedbackPolicyItemProvider feedbackPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.FeedbackPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeedbackPolicyAdapter() {
		if (feedbackPolicyItemProvider == null) {
			feedbackPolicyItemProvider = new FeedbackPolicyItemProvider(this);
		}

		return feedbackPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.FeedbackRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeedbackRuleItemProvider feedbackRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.FeedbackRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeedbackRuleAdapter() {
		if (feedbackRuleItemProvider == null) {
			feedbackRuleItemProvider = new FeedbackRuleItemProvider(this);
		}

		return feedbackRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.FeedbackFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeedbackFilterItemProvider feedbackFilterItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.FeedbackFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeedbackFilterAdapter() {
		if (feedbackFilterItemProvider == null) {
			feedbackFilterItemProvider = new FeedbackFilterItemProvider(this);
		}

		return feedbackFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.FeedbackConsequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeedbackConsequenceItemProvider feedbackConsequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.FeedbackConsequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeedbackConsequenceAdapter() {
		if (feedbackConsequenceItemProvider == null) {
			feedbackConsequenceItemProvider = new FeedbackConsequenceItemProvider(this);
		}

		return feedbackConsequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.CcslClock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CcslClockItemProvider ccslClockItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.CcslClock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCcslClockAdapter() {
		if (ccslClockItemProvider == null) {
			ccslClockItemProvider = new CcslClockItemProvider(this);
		}

		return ccslClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.ExecutionFunctionResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionFunctionResultItemProvider executionFunctionResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.ExecutionFunctionResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionFunctionResultAdapter() {
		if (executionFunctionResultItemProvider == null) {
			executionFunctionResultItemProvider = new ExecutionFunctionResultItemProvider(this);
		}

		return executionFunctionResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.gel.microgel.Kermeta3ExecutionFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Kermeta3ExecutionFunctionItemProvider kermeta3ExecutionFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.gel.microgel.Kermeta3ExecutionFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKermeta3ExecutionFunctionAdapter() {
		if (kermeta3ExecutionFunctionItemProvider == null) {
			kermeta3ExecutionFunctionItemProvider = new Kermeta3ExecutionFunctionItemProvider(this);
		}

		return kermeta3ExecutionFunctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelSpecificEventsSpecificationItemProvider != null) modelSpecificEventsSpecificationItemProvider.dispose();
		if (importStatementItemProvider != null) importStatementItemProvider.dispose();
		if (atomicModelSpecificEventItemProvider != null) atomicModelSpecificEventItemProvider.dispose();
		if (compositeModelSpecificEventItemProvider != null) compositeModelSpecificEventItemProvider.dispose();
		if (coincidencePatternItemProvider != null) coincidencePatternItemProvider.dispose();
		if (logicalSequenceItemProvider != null) logicalSequenceItemProvider.dispose();
		if (orPatternItemProvider != null) orPatternItemProvider.dispose();
		if (xorPatternItemProvider != null) xorPatternItemProvider.dispose();
		if (plusPatternItemProvider != null) plusPatternItemProvider.dispose();
		if (iterationPatternItemProvider != null) iterationPatternItemProvider.dispose();
		if (modelSpecificEventReferenceItemProvider != null) modelSpecificEventReferenceItemProvider.dispose();
		if (feedbackPolicyItemProvider != null) feedbackPolicyItemProvider.dispose();
		if (feedbackRuleItemProvider != null) feedbackRuleItemProvider.dispose();
		if (feedbackFilterItemProvider != null) feedbackFilterItemProvider.dispose();
		if (feedbackConsequenceItemProvider != null) feedbackConsequenceItemProvider.dispose();
		if (ccslClockItemProvider != null) ccslClockItemProvider.dispose();
		if (executionFunctionResultItemProvider != null) executionFunctionResultItemProvider.dispose();
		if (kermeta3ExecutionFunctionItemProvider != null) kermeta3ExecutionFunctionItemProvider.dispose();
	}

}
