/*
* generated by Xtext
*/
grammar InternalGEL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.gemoc.gel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.gel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.gel.services.GELGrammarAccess;

}

@parser::members {

 	private GELGrammarAccess grammarAccess;
 	
    public InternalGELParser(TokenStream input, GELGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainSpecificEventsSpecification";	
   	}
   	
   	@Override
   	protected GELGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainSpecificEventsSpecification
entryRuleDomainSpecificEventsSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventsSpecificationRule()); }
	 iv_ruleDomainSpecificEventsSpecification=ruleDomainSpecificEventsSpecification 
	 { $current=$iv_ruleDomainSpecificEventsSpecification.current; } 
	 EOF 
;

// Rule DomainSpecificEventsSpecification
ruleDomainSpecificEventsSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainSpecificEventsSpecificationAccess().getDomainSpecificEventsSpecificationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainSpecificEventsSpecificationAccess().getImportsImportStatementParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImportStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainSpecificEventsSpecificationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"ImportStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainSpecificEventsSpecificationAccess().getEventsDomainSpecificEventParserRuleCall_2_0()); 
	    }
		lv_events_2_0=ruleDomainSpecificEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainSpecificEventsSpecificationRule());
	        }
       		add(
       			$current, 
       			"events",
        		lv_events_2_0, 
        		"DomainSpecificEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImportStatement
entryRuleImportStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportStatementRule()); }
	 iv_ruleImportStatement=ruleImportStatement 
	 { $current=$iv_ruleImportStatement.current; } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportStatementAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDomainSpecificEvent
entryRuleDomainSpecificEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventRule()); }
	 iv_ruleDomainSpecificEvent=ruleDomainSpecificEvent 
	 { $current=$iv_ruleDomainSpecificEvent.current; } 
	 EOF 
;

// Rule DomainSpecificEvent
ruleDomainSpecificEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventAccess().getAtomicDomainSpecificEventParserRuleCall_0()); 
    }
    this_AtomicDomainSpecificEvent_0=ruleAtomicDomainSpecificEvent
    { 
        $current = $this_AtomicDomainSpecificEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventAccess().getCompositeDomainSpecificEventParserRuleCall_1()); 
    }
    this_CompositeDomainSpecificEvent_1=ruleCompositeDomainSpecificEvent
    { 
        $current = $this_CompositeDomainSpecificEvent_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicDomainSpecificEvent
entryRuleAtomicDomainSpecificEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicDomainSpecificEventRule()); }
	 iv_ruleAtomicDomainSpecificEvent=ruleAtomicDomainSpecificEvent 
	 { $current=$iv_ruleAtomicDomainSpecificEvent.current; } 
	 EOF 
;

// Rule AtomicDomainSpecificEvent
ruleAtomicDomainSpecificEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicDomainSpecificEventAccess().getAtomicDomainSpecificEventAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getVisibilityVisibilityEnumRuleCall_1_0()); 
	    }
		lv_visibility_1_0=ruleVisibility		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"visibility",
        		lv_visibility_1_0, 
        		"Visibility");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='DSE' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicDomainSpecificEventAccess().getDSEKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAtomicDomainSpecificEventAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicDomainSpecificEventAccess().getColonKeyword_4());
    }
	otherlv_5='upon' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicDomainSpecificEventAccess().getUponKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getUponMoccEventMoccEventParserRuleCall_6_0()); 
	    }
		lv_uponMoccEvent_6_0=ruleMoccEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"uponMoccEvent",
        		lv_uponMoccEvent_6_0, 
        		"MoccEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getExecutionKindExecutionKindEnumRuleCall_7_0_0()); 
	    }
		lv_executionKind_7_0=ruleExecutionKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"executionKind",
        		lv_executionKind_7_0, 
        		"ExecutionKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getExecutionFunctionExecutionFunctionParserRuleCall_7_1_0()); 
	    }
		lv_executionFunction_8_0=ruleExecutionFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"executionFunction",
        		lv_executionFunction_8_0, 
        		"ExecutionFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9='feedback' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomicDomainSpecificEventAccess().getFeedbackKeyword_7_2_0());
    }
	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAtomicDomainSpecificEventAccess().getColonKeyword_7_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getFeedbackPolicyFeedbackPolicyParserRuleCall_7_2_2_0()); 
	    }
		lv_feedbackPolicy_11_0=ruleFeedbackPolicy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"feedbackPolicy",
        		lv_feedbackPolicy_11_0, 
        		"FeedbackPolicy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='end' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAtomicDomainSpecificEventAccess().getEndKeyword_7_2_3());
    }
)?)?(	otherlv_13='raises' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAtomicDomainSpecificEventAccess().getRaisesKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicDomainSpecificEventAccess().getRaisedMoccEventMoccEventParserRuleCall_8_1_0()); 
	    }
		lv_raisedMoccEvent_14_0=ruleMoccEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"raisedMoccEvent",
        		lv_raisedMoccEvent_14_0, 
        		"MoccEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_15='end' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getAtomicDomainSpecificEventAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleCompositeDomainSpecificEvent
entryRuleCompositeDomainSpecificEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeDomainSpecificEventRule()); }
	 iv_ruleCompositeDomainSpecificEvent=ruleCompositeDomainSpecificEvent 
	 { $current=$iv_ruleCompositeDomainSpecificEvent.current; } 
	 EOF 
;

// Rule CompositeDomainSpecificEvent
ruleCompositeDomainSpecificEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompositeDomainSpecificEventAccess().getCompositeDomainSpecificEventAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeDomainSpecificEventAccess().getVisibilityVisibilityEnumRuleCall_1_0()); 
	    }
		lv_visibility_1_0=ruleVisibility		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"visibility",
        		lv_visibility_1_0, 
        		"Visibility");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='Composite' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCompositeDomainSpecificEventAccess().getCompositeKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getCompositeDomainSpecificEventAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompositeDomainSpecificEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompositeDomainSpecificEventAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeDomainSpecificEventAccess().getUnfoldingStrategyUnfoldingStrategyParserRuleCall_5_0()); 
	    }
		lv_unfoldingStrategy_5_0=ruleUnfoldingStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"unfoldingStrategy",
        		lv_unfoldingStrategy_5_0, 
        		"UnfoldingStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeDomainSpecificEventAccess().getBodyDomainSpecificEventsPatternParserRuleCall_6_0()); 
	    }
		lv_body_6_0=ruleDomainSpecificEventsPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeDomainSpecificEventRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"DomainSpecificEventsPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCompositeDomainSpecificEventAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleUnfoldingStrategy
entryRuleUnfoldingStrategy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnfoldingStrategyRule()); }
	 iv_ruleUnfoldingStrategy=ruleUnfoldingStrategy 
	 { $current=$iv_ruleUnfoldingStrategy.current; } 
	 EOF 
;

// Rule UnfoldingStrategy
ruleUnfoldingStrategy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnfoldingStrategyAccess().getUnfoldingStrategyAction_0(),
            $current);
    }
)	otherlv_1='forall' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnfoldingStrategyAccess().getForallKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnfoldingStrategyAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnfoldingStrategyAccess().getLocalVariablesLocalVariableParserRuleCall_3_0()); 
	    }
		lv_localVariables_3_0=ruleLocalVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnfoldingStrategyRule());
	        }
       		add(
       			$current, 
       			"localVariables",
        		lv_localVariables_3_0, 
        		"LocalVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnfoldingStrategyAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_5='where' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnfoldingStrategyAccess().getWhereKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnfoldingStrategyAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnfoldingStrategyAccess().getInstantiationPredicatesInstantiationPredicateParserRuleCall_7_0()); 
	    }
		lv_instantiationPredicates_7_0=ruleInstantiationPredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnfoldingStrategyRule());
	        }
       		add(
       			$current, 
       			"instantiationPredicates",
        		lv_instantiationPredicates_7_0, 
        		"InstantiationPredicate");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnfoldingStrategyAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	 iv_ruleLocalVariable=ruleLocalVariable 
	 { $current=$iv_ruleLocalVariable.current; } 
	 EOF 
;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLocalVariableAccess().getLocalVariableAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getTypeEClassifierCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInstantiationPredicate
entryRuleInstantiationPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstantiationPredicateRule()); }
	 iv_ruleInstantiationPredicate=ruleInstantiationPredicate 
	 { $current=$iv_ruleInstantiationPredicate.current; } 
	 EOF 
;

// Rule InstantiationPredicate
ruleInstantiationPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInstantiationPredicateAccess().getInstantiationPredicateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiationPredicateAccess().getBodyGExpressionParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiationPredicateRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDomainSpecificEventsPattern
entryRuleDomainSpecificEventsPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventsPatternRule()); }
	 iv_ruleDomainSpecificEventsPattern=ruleDomainSpecificEventsPattern 
	 { $current=$iv_ruleDomainSpecificEventsPattern.current; } 
	 EOF 
;

// Rule DomainSpecificEventsPattern
ruleDomainSpecificEventsPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventsPatternAccess().getLogicalSequenceParserRuleCall()); 
    }
    this_LogicalSequence_0=ruleLogicalSequence
    { 
        $current = $this_LogicalSequence_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalSequence
entryRuleLogicalSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalSequenceRule()); }
	 iv_ruleLogicalSequence=ruleLogicalSequence 
	 { $current=$iv_ruleLogicalSequence.current; } 
	 EOF 
;

// Rule LogicalSequence
ruleLogicalSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalSequenceAccess().getCoincidencePatternParserRuleCall_0()); 
    }
    this_CoincidencePattern_0=ruleCoincidencePattern
    { 
        $current = $this_CoincidencePattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalSequenceAccess().getLogicalSequenceLeftOperandAction_1_0(),
            $current);
    }
)((	'--->' 
)=>	otherlv_2='--->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalSequenceAccess().getHyphenMinusHyphenMinusHyphenMinusGreaterThanSignKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalSequenceAccess().getRightOperandCoincidencePatternParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleCoincidencePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalSequenceRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"CoincidencePattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCoincidencePattern
entryRuleCoincidencePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoincidencePatternRule()); }
	 iv_ruleCoincidencePattern=ruleCoincidencePattern 
	 { $current=$iv_ruleCoincidencePattern.current; } 
	 EOF 
;

// Rule CoincidencePattern
ruleCoincidencePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCoincidencePatternAccess().getOrPatternParserRuleCall_0()); 
    }
    this_OrPattern_0=ruleOrPattern
    { 
        $current = $this_OrPattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCoincidencePatternAccess().getCoincidencePatternLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCoincidencePatternAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoincidencePatternAccess().getRightOperandOrPatternParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleOrPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoincidencePatternRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"OrPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrPattern
entryRuleOrPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrPatternRule()); }
	 iv_ruleOrPattern=ruleOrPattern 
	 { $current=$iv_ruleOrPattern.current; } 
	 EOF 
;

// Rule OrPattern
ruleOrPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrPatternAccess().getXorPatternParserRuleCall_0()); 
    }
    this_XorPattern_0=ruleXorPattern
    { 
        $current = $this_XorPattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrPatternAccess().getOrPatternLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrPatternAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrPatternAccess().getRightOperandXorPatternParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleXorPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrPatternRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XorPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXorPattern
entryRuleXorPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorPatternRule()); }
	 iv_ruleXorPattern=ruleXorPattern 
	 { $current=$iv_ruleXorPattern.current; } 
	 EOF 
;

// Rule XorPattern
ruleXorPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXorPatternAccess().getPlusPatternParserRuleCall_0()); 
    }
    this_PlusPattern_0=rulePlusPattern
    { 
        $current = $this_PlusPattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXorPatternAccess().getXorPatternLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='><' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXorPatternAccess().getGreaterThanSignLessThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorPatternAccess().getRightOperandPlusPatternParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=rulePlusPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorPatternRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"PlusPattern");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePlusPattern
entryRulePlusPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusPatternRule()); }
	 iv_rulePlusPattern=rulePlusPattern 
	 { $current=$iv_rulePlusPattern.current; } 
	 EOF 
;

// Rule PlusPattern
rulePlusPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusPatternAccess().getIterationPatternParserRuleCall_0()); 
    }
    this_IterationPattern_0=ruleIterationPattern
    { 
        $current = $this_IterationPattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusPatternAccess().getPlusPatternOperandAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlusPatternAccess().getPlusSignKeyword_1_1());
    }
)?)
;





// Entry rule entryRuleIterationPattern
entryRuleIterationPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationPatternRule()); }
	 iv_ruleIterationPattern=ruleIterationPattern 
	 { $current=$iv_ruleIterationPattern.current; } 
	 EOF 
;

// Rule IterationPattern
ruleIterationPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIterationPatternAccess().getDomainSpecificEventReferenceOrPatternParserRuleCall_0()); 
    }
    this_DomainSpecificEventReferenceOrPattern_0=ruleDomainSpecificEventReferenceOrPattern
    { 
        $current = $this_DomainSpecificEventReferenceOrPattern_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIterationPatternAccess().getIterationPatternOperandAction_1_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIterationPatternAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		lv_numberOfIterations_3_0=RULE_INT
		{
			newLeafNode(lv_numberOfIterations_3_0, grammarAccess.getIterationPatternAccess().getNumberOfIterationsINTTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIterationPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numberOfIterations",
        		lv_numberOfIterations_3_0, 
        		"INT");
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIterationPatternAccess().getRightSquareBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleDomainSpecificEventReferenceOrPattern
entryRuleDomainSpecificEventReferenceOrPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventReferenceOrPatternRule()); }
	 iv_ruleDomainSpecificEventReferenceOrPattern=ruleDomainSpecificEventReferenceOrPattern 
	 { $current=$iv_ruleDomainSpecificEventReferenceOrPattern.current; } 
	 EOF 
;

// Rule DomainSpecificEventReferenceOrPattern
ruleDomainSpecificEventReferenceOrPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventReferenceOrPatternAccess().getDomainSpecificEventReferenceWithOrWithoutTargetParserRuleCall_0()); 
    }
    this_DomainSpecificEventReferenceWithOrWithoutTarget_0=ruleDomainSpecificEventReferenceWithOrWithoutTarget
    { 
        $current = $this_DomainSpecificEventReferenceWithOrWithoutTarget_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDomainSpecificEventReferenceOrPatternAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventReferenceOrPatternAccess().getDomainSpecificEventsPatternParserRuleCall_1_1()); 
    }
    this_DomainSpecificEventsPattern_2=ruleDomainSpecificEventsPattern
    { 
        $current = $this_DomainSpecificEventsPattern_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDomainSpecificEventReferenceOrPatternAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleDomainSpecificEventReferenceWithOrWithoutTarget
entryRuleDomainSpecificEventReferenceWithOrWithoutTarget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventReferenceWithOrWithoutTargetRule()); }
	 iv_ruleDomainSpecificEventReferenceWithOrWithoutTarget=ruleDomainSpecificEventReferenceWithOrWithoutTarget 
	 { $current=$iv_ruleDomainSpecificEventReferenceWithOrWithoutTarget.current; } 
	 EOF 
;

// Rule DomainSpecificEventReferenceWithOrWithoutTarget
ruleDomainSpecificEventReferenceWithOrWithoutTarget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventReferenceWithOrWithoutTargetAccess().getDomainSpecificEventReferenceParserRuleCall_0()); 
    }
    this_DomainSpecificEventReference_0=ruleDomainSpecificEventReference
    { 
        $current = $this_DomainSpecificEventReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDomainSpecificEventReferenceWithOrWithoutTargetAccess().getDomainSpecificEventReferenceWithArgumentsParserRuleCall_1()); 
    }
    this_DomainSpecificEventReferenceWithArguments_1=ruleDomainSpecificEventReferenceWithArguments
    { 
        $current = $this_DomainSpecificEventReferenceWithArguments_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDomainSpecificEventReference
entryRuleDomainSpecificEventReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventReferenceRule()); }
	 iv_ruleDomainSpecificEventReference=ruleDomainSpecificEventReference 
	 { $current=$iv_ruleDomainSpecificEventReference.current; } 
	 EOF 
;

// Rule DomainSpecificEventReference
ruleDomainSpecificEventReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainSpecificEventReferenceAccess().getDomainSpecificEventReferenceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainSpecificEventReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDomainSpecificEventReferenceAccess().getReferencedDseDomainSpecificEventCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleDomainSpecificEventReferenceWithArguments
entryRuleDomainSpecificEventReferenceWithArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainSpecificEventReferenceWithArgumentsRule()); }
	 iv_ruleDomainSpecificEventReferenceWithArguments=ruleDomainSpecificEventReferenceWithArguments 
	 { $current=$iv_ruleDomainSpecificEventReferenceWithArguments.current; } 
	 EOF 
;

// Rule DomainSpecificEventReferenceWithArguments
ruleDomainSpecificEventReferenceWithArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainSpecificEventReferenceWithArgumentsAccess().getDomainSpecificEventReferenceWithArgumentsAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainSpecificEventReferenceWithArgumentsRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDomainSpecificEventReferenceWithArgumentsAccess().getReferencedDseDomainSpecificEventCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDomainSpecificEventReferenceWithArgumentsAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainSpecificEventReferenceWithArgumentsAccess().getArgumentsListOfArgumentsParserRuleCall_3_0()); 
	    }
		lv_arguments_3_0=ruleListOfArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainSpecificEventReferenceWithArgumentsRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"ListOfArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDomainSpecificEventReferenceWithArgumentsAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleListOfArguments
entryRuleListOfArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListOfArgumentsRule()); }
	 iv_ruleListOfArguments=ruleListOfArguments 
	 { $current=$iv_ruleListOfArguments.current; } 
	 EOF 
;

// Rule ListOfArguments
ruleListOfArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getListOfArgumentsAccess().getSingleArgumentParserRuleCall_0()); 
    }
    this_SingleArgument_0=ruleSingleArgument
    { 
        $current = $this_SingleArgument_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getListOfArgumentsAccess().getMultipleArgumentsParserRuleCall_1()); 
    }
    this_MultipleArguments_1=ruleMultipleArguments
    { 
        $current = $this_MultipleArguments_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSingleArgument
entryRuleSingleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleArgumentRule()); }
	 iv_ruleSingleArgument=ruleSingleArgument 
	 { $current=$iv_ruleSingleArgument.current; } 
	 EOF 
;

// Rule SingleArgument
ruleSingleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleArgumentAccess().getSingleArgumentAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleArgumentRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSingleArgumentAccess().getArgumentLocalVariableCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleMultipleArguments
entryRuleMultipleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleArgumentsRule()); }
	 iv_ruleMultipleArguments=ruleMultipleArguments 
	 { $current=$iv_ruleMultipleArguments.current; } 
	 EOF 
;

// Rule MultipleArguments
ruleMultipleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultipleArgumentsAccess().getMultipleArgumentsAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleArgumentsRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMultipleArgumentsAccess().getHeadLocalVariableCrossReference_1_0()); 
	}

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleArgumentsAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleArgumentsAccess().getTailListOfArgumentsParserRuleCall_3_0()); 
	    }
		lv_tail_3_0=ruleListOfArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleArgumentsRule());
	        }
       		set(
       			$current, 
       			"tail",
        		lv_tail_3_0, 
        		"ListOfArguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeedbackPolicy
entryRuleFeedbackPolicy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackPolicyRule()); }
	 iv_ruleFeedbackPolicy=ruleFeedbackPolicy 
	 { $current=$iv_ruleFeedbackPolicy.current; } 
	 EOF 
;

// Rule FeedbackPolicy
ruleFeedbackPolicy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeedbackPolicyAccess().getFeedbackPolicyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackPolicyAccess().getRulesFeedbackRuleParserRuleCall_1_0()); 
	    }
		lv_rules_1_0=ruleFeedbackRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackPolicyRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_1_0, 
        		"FeedbackRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackPolicyAccess().getDefaultRuleDefaultFeedbackRuleParserRuleCall_2_0()); 
	    }
		lv_defaultRule_2_0=ruleDefaultFeedbackRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackPolicyRule());
	        }
       		set(
       			$current, 
       			"defaultRule",
        		lv_defaultRule_2_0, 
        		"DefaultFeedbackRule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeedbackRule
entryRuleFeedbackRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackRuleRule()); }
	 iv_ruleFeedbackRule=ruleFeedbackRule 
	 { $current=$iv_ruleFeedbackRule.current; } 
	 EOF 
;

// Rule FeedbackRule
ruleFeedbackRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeedbackRuleAccess().getFeedbackRuleAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeedbackRuleAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackRuleAccess().getFilterFeedbackFilterParserRuleCall_2_0()); 
	    }
		lv_filter_2_0=ruleFeedbackFilter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackRuleRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_2_0, 
        		"FeedbackFilter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeedbackRuleAccess().getRightSquareBracketKeyword_3());
    }
	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFeedbackRuleAccess().getEqualsSignGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackRuleAccess().getConsequenceFeedbackConsequenceParserRuleCall_5_0()); 
	    }
		lv_consequence_5_0=ruleFeedbackConsequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackRuleRule());
	        }
       		set(
       			$current, 
       			"consequence",
        		lv_consequence_5_0, 
        		"FeedbackConsequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefaultFeedbackRule
entryRuleDefaultFeedbackRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultFeedbackRuleRule()); }
	 iv_ruleDefaultFeedbackRule=ruleDefaultFeedbackRule 
	 { $current=$iv_ruleDefaultFeedbackRule.current; } 
	 EOF 
;

// Rule DefaultFeedbackRule
ruleDefaultFeedbackRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultFeedbackRuleAccess().getFeedbackRuleAction_0(),
            $current);
    }
)	otherlv_1='default' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultFeedbackRuleAccess().getDefaultKeyword_1());
    }
	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefaultFeedbackRuleAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultFeedbackRuleAccess().getConsequenceFeedbackConsequenceParserRuleCall_3_0()); 
	    }
		lv_consequence_3_0=ruleFeedbackConsequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultFeedbackRuleRule());
	        }
       		set(
       			$current, 
       			"consequence",
        		lv_consequence_3_0, 
        		"FeedbackConsequence");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeedbackFilter
entryRuleFeedbackFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackFilterRule()); }
	 iv_ruleFeedbackFilter=ruleFeedbackFilter 
	 { $current=$iv_ruleFeedbackFilter.current; } 
	 EOF 
;

// Rule FeedbackFilter
ruleFeedbackFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeedbackFilterAccess().getFeedbackFilterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackFilterAccess().getBodyGExpressionParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackFilterRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeedbackConsequence
entryRuleFeedbackConsequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackConsequenceRule()); }
	 iv_ruleFeedbackConsequence=ruleFeedbackConsequence 
	 { $current=$iv_ruleFeedbackConsequence.current; } 
	 EOF 
;

// Rule FeedbackConsequence
ruleFeedbackConsequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeedbackConsequenceAccess().getFeedbackConsequenceAction_0(),
            $current);
    }
)	otherlv_1='allow' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeedbackConsequenceAccess().getAllowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackConsequenceAccess().getNavigationPathToMoccEventGExpressionParserRuleCall_2_0()); 
	    }
		lv_navigationPathToMoccEvent_2_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackConsequenceRule());
	        }
       		set(
       			$current, 
       			"navigationPathToMoccEvent",
        		lv_navigationPathToMoccEvent_2_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMoccEvent
entryRuleMoccEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoccEventRule()); }
	 iv_ruleMoccEvent=ruleMoccEvent 
	 { $current=$iv_ruleMoccEvent.current; } 
	 EOF 
;

// Rule MoccEvent
ruleMoccEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getMoccEventAccess().getEclEventParserRuleCall()); 
    }
    this_EclEvent_0=ruleEclEvent
    { 
        $current = $this_EclEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleEclEvent
entryRuleEclEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEclEventRule()); }
	 iv_ruleEclEvent=ruleEclEvent 
	 { $current=$iv_ruleEclEvent.current; } 
	 EOF 
;

// Rule EclEvent
ruleEclEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEclEventAccess().getEclEventAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEclEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEclEventAccess().getEventReferenceECLDefCSCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExecutionFunction
entryRuleExecutionFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecutionFunctionRule()); }
	 iv_ruleExecutionFunction=ruleExecutionFunction 
	 { $current=$iv_ruleExecutionFunction.current; } 
	 EOF 
;

// Rule ExecutionFunction
ruleExecutionFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExecutionFunctionAccess().getKermeta3ExecutionFunctionParserRuleCall()); 
    }
    this_Kermeta3ExecutionFunction_0=ruleKermeta3ExecutionFunction
    { 
        $current = $this_Kermeta3ExecutionFunction_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleKermeta3ExecutionFunction
entryRuleKermeta3ExecutionFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKermeta3ExecutionFunctionRule()); }
	 iv_ruleKermeta3ExecutionFunction=ruleKermeta3ExecutionFunction 
	 { $current=$iv_ruleKermeta3ExecutionFunction.current; } 
	 EOF 
;

// Rule Kermeta3ExecutionFunction
ruleKermeta3ExecutionFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKermeta3ExecutionFunctionAccess().getKermeta3ExecutionFunctionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKermeta3ExecutionFunctionAccess().getNavigationPathToOperationGExpressionParserRuleCall_1_0()); 
	    }
		lv_navigationPathToOperation_1_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKermeta3ExecutionFunctionRule());
	        }
       		set(
       			$current, 
       			"navigationPathToOperation",
        		lv_navigationPathToOperation_1_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKermeta3ExecutionFunctionAccess().getCallKindCallKindEnumRuleCall_2_0()); 
	    }
		lv_callKind_2_0=ruleCallKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKermeta3ExecutionFunctionRule());
	        }
       		set(
       			$current, 
       			"callKind",
        		lv_callKind_2_0, 
        		"CallKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='returning' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKermeta3ExecutionFunctionAccess().getReturningKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKermeta3ExecutionFunctionAccess().getResultExecutionFunctionResultParserRuleCall_3_1_0()); 
	    }
		lv_result_4_0=ruleExecutionFunctionResult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKermeta3ExecutionFunctionRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_4_0, 
        		"ExecutionFunctionResult");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExecutionFunctionResult
entryRuleExecutionFunctionResult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecutionFunctionResultRule()); }
	 iv_ruleExecutionFunctionResult=ruleExecutionFunctionResult 
	 { $current=$iv_ruleExecutionFunctionResult.current; } 
	 EOF 
;

// Rule ExecutionFunctionResult
ruleExecutionFunctionResult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExecutionFunctionResultAccess().getExecutionFunctionResultAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExecutionFunctionResultAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecutionFunctionResultRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleGImportStatement
entryRuleGImportStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGImportStatementRule()); }
	 iv_ruleGImportStatement=ruleGImportStatement 
	 { $current=$iv_ruleGImportStatement.current; } 
	 EOF 
;

// Rule GImportStatement
ruleGImportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGImportStatementAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getGImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGImportStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleGExpression
entryRuleGExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGExpressionRule()); }
	 iv_ruleGExpression=ruleGExpression 
	 { $current=$iv_ruleGExpression.current; } 
	 EOF 
;

// Rule GExpression
ruleGExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGExpressionAccess().getGOrExpressionParserRuleCall()); 
    }
    this_GOrExpression_0=ruleGOrExpression
    { 
        $current = $this_GOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleGOrExpression
entryRuleGOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGOrExpressionRule()); }
	 iv_ruleGOrExpression=ruleGOrExpression 
	 { $current=$iv_ruleGOrExpression.current; } 
	 EOF 
;

// Rule GOrExpression
ruleGOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGOrExpressionAccess().getGXorExpressionParserRuleCall_0()); 
    }
    this_GXorExpression_0=ruleGXorExpression
    { 
        $current = $this_GXorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGOrExpressionAccess().getGOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGOrExpressionAccess().getOperatorGOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGOrExpressionAccess().getRightOperandGXorExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGXorExpression
entryRuleGXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGXorExpressionRule()); }
	 iv_ruleGXorExpression=ruleGXorExpression 
	 { $current=$iv_ruleGXorExpression.current; } 
	 EOF 
;

// Rule GXorExpression
ruleGXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGXorExpressionAccess().getGAndExpressionParserRuleCall_0()); 
    }
    this_GAndExpression_0=ruleGAndExpression
    { 
        $current = $this_GAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGXorExpressionAccess().getGXorExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGXorExpressionAccess().getOperatorGXorOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGXorOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGXorExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GXorOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGXorExpressionAccess().getRightOperandGAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGXorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGAndExpression
entryRuleGAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGAndExpressionRule()); }
	 iv_ruleGAndExpression=ruleGAndExpression 
	 { $current=$iv_ruleGAndExpression.current; } 
	 EOF 
;

// Rule GAndExpression
ruleGAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGAndExpressionAccess().getGEqualityExpressionParserRuleCall_0()); 
    }
    this_GEqualityExpression_0=ruleGEqualityExpression
    { 
        $current = $this_GEqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGAndExpressionAccess().getGAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAndExpressionAccess().getOperatorGAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAndExpressionAccess().getRightOperandGEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGEqualityExpression
entryRuleGEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGEqualityExpressionRule()); }
	 iv_ruleGEqualityExpression=ruleGEqualityExpression 
	 { $current=$iv_ruleGEqualityExpression.current; } 
	 EOF 
;

// Rule GEqualityExpression
ruleGEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getGRelationExpressionParserRuleCall_0()); 
    }
    this_GRelationExpression_0=ruleGRelationExpression
    { 
        $current = $this_GRelationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGEqualityExpressionAccess().getGEqualityExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getOperatorGEqualityOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GEqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getRightOperandGRelationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGRelationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GRelationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGRelationExpression
entryRuleGRelationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGRelationExpressionRule()); }
	 iv_ruleGRelationExpression=ruleGRelationExpression 
	 { $current=$iv_ruleGRelationExpression.current; } 
	 EOF 
;

// Rule GRelationExpression
ruleGRelationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getGAdditionExpressionParserRuleCall_0()); 
    }
    this_GAdditionExpression_0=ruleGAdditionExpression
    { 
        $current = $this_GAdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGRelationExpressionAccess().getGRelationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getOperatorGRelationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGRelationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GRelationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getRightOperandGAdditionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGAdditionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GAdditionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGAdditionExpression
entryRuleGAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGAdditionExpressionRule()); }
	 iv_ruleGAdditionExpression=ruleGAdditionExpression 
	 { $current=$iv_ruleGAdditionExpression.current; } 
	 EOF 
;

// Rule GAdditionExpression
ruleGAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getGMultiplicationExpressionParserRuleCall_0()); 
    }
    this_GMultiplicationExpression_0=ruleGMultiplicationExpression
    { 
        $current = $this_GMultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGAdditionExpressionAccess().getGAdditionExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getOperatorGAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GAdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getRightOperandGMultiplicationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGMultiplicationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GMultiplicationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGMultiplicationExpression
entryRuleGMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGMultiplicationExpressionRule()); }
	 iv_ruleGMultiplicationExpression=ruleGMultiplicationExpression 
	 { $current=$iv_ruleGMultiplicationExpression.current; } 
	 EOF 
;

// Rule GMultiplicationExpression
ruleGMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getGNegationExpressionParserRuleCall_0()); 
    }
    this_GNegationExpression_0=ruleGNegationExpression
    { 
        $current = $this_GNegationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGMultiplicationExpressionAccess().getGMultiplicationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getOperatorGMultiplicationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GMultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getRightOperandGNegationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGNegationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"GNegationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGNegationExpression
entryRuleGNegationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNegationExpressionRule()); }
	 iv_ruleGNegationExpression=ruleGNegationExpression 
	 { $current=$iv_ruleGNegationExpression.current; } 
	 EOF 
;

// Rule GNegationExpression
ruleGNegationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getGNavigationExpressionParserRuleCall_0()); 
    }
    this_GNavigationExpression_0=ruleGNavigationExpression
    { 
        $current = $this_GNavigationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGNegationExpressionAccess().getGNegationExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getOperatorGNegationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGNegationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"GNegationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getOperandGNavigationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=ruleGNavigationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"GNavigationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleGNavigationExpression
entryRuleGNavigationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNavigationExpressionRule()); }
	 iv_ruleGNavigationExpression=ruleGNavigationExpression 
	 { $current=$iv_ruleGNavigationExpression.current; } 
	 EOF 
;

// Rule GNavigationExpression
ruleGNavigationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNavigationExpressionAccess().getGReferenceExpressionParserRuleCall_0()); 
    }
    this_GReferenceExpression_0=ruleGReferenceExpression
    { 
        $current = $this_GReferenceExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGNavigationExpressionAccess().getGNavigationExpressionBodyAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getGNavigationExpressionAccess().getNavigationOperatorParserRuleCall_1_1()); 
    }
ruleNavigationOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGNavigationExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getGNavigationExpressionAccess().getReferencedEObjectEObjectCrossReference_1_2_0()); 
	}

)
))*)
;





// Entry rule entryRuleGReferenceExpression
entryRuleGReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGReferenceExpressionRule()); }
	 iv_ruleGReferenceExpression=ruleGReferenceExpression 
	 { $current=$iv_ruleGReferenceExpression.current; } 
	 EOF 
;

// Rule GReferenceExpression
ruleGReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGReferenceExpressionAccess().getGPrimaryExpressionParserRuleCall_0()); 
    }
    this_GPrimaryExpression_0=ruleGPrimaryExpression
    { 
        $current = $this_GPrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGReferenceExpressionAccess().getGReferenceExpressionAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGReferenceExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGReferenceExpressionAccess().getReferencedEObjectEObjectCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleGPrimaryExpression
entryRuleGPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGPrimaryExpressionRule()); }
	 iv_ruleGPrimaryExpression=ruleGPrimaryExpression 
	 { $current=$iv_ruleGPrimaryExpression.current; } 
	 EOF 
;

// Rule GPrimaryExpression
ruleGPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGStringExpressionParserRuleCall_0()); 
    }
    this_GStringExpression_0=ruleGStringExpression
    { 
        $current = $this_GStringExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGBooleanExpressionParserRuleCall_1()); 
    }
    this_GBooleanExpression_1=ruleGBooleanExpression
    { 
        $current = $this_GBooleanExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGNumericExpressionParserRuleCall_2()); 
    }
    this_GNumericExpression_2=ruleGNumericExpression
    { 
        $current = $this_GNumericExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGEnumLiteralExpressionParserRuleCall_3()); 
    }
    this_GEnumLiteralExpression_3=ruleGEnumLiteralExpression
    { 
        $current = $this_GEnumLiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGIfExpressionParserRuleCall_4()); 
    }
    this_GIfExpression_4=ruleGIfExpression
    { 
        $current = $this_GIfExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGBraceExpressionParserRuleCall_5()); 
    }
    this_GBraceExpression_5=ruleGBraceExpression
    { 
        $current = $this_GBraceExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGStringExpression
entryRuleGStringExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGStringExpressionRule()); }
	 iv_ruleGStringExpression=ruleGStringExpression 
	 { $current=$iv_ruleGStringExpression.current; } 
	 EOF 
;

// Rule GStringExpression
ruleGStringExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGStringExpressionAccess().getGStringExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGStringExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGStringExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleGBooleanExpression
entryRuleGBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGBooleanExpressionRule()); }
	 iv_ruleGBooleanExpression=ruleGBooleanExpression 
	 { $current=$iv_ruleGBooleanExpression.current; } 
	 EOF 
;

// Rule GBooleanExpression
ruleGBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGBooleanExpressionAccess().getGBooleanExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGBooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGBooleanExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BOOLEAN");
	    }

)
))
;





// Entry rule entryRuleGNumericExpression
entryRuleGNumericExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNumericExpressionRule()); }
	 iv_ruleGNumericExpression=ruleGNumericExpression 
	 { $current=$iv_ruleGNumericExpression.current; } 
	 EOF 
;

// Rule GNumericExpression
ruleGNumericExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNumericExpressionAccess().getGIntegerExpressionParserRuleCall_0()); 
    }
    this_GIntegerExpression_0=ruleGIntegerExpression
    { 
        $current = $this_GIntegerExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGNumericExpressionAccess().getGDoubleExpressionParserRuleCall_1()); 
    }
    this_GDoubleExpression_1=ruleGDoubleExpression
    { 
        $current = $this_GDoubleExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGIntegerExpression
entryRuleGIntegerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGIntegerExpressionRule()); }
	 iv_ruleGIntegerExpression=ruleGIntegerExpression 
	 { $current=$iv_ruleGIntegerExpression.current; } 
	 EOF 
;

// Rule GIntegerExpression
ruleGIntegerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGIntegerExpressionAccess().getGIntegerExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGIntegerExpressionAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGIntegerExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleGDoubleExpression
entryRuleGDoubleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDoubleExpressionRule()); }
	 iv_ruleGDoubleExpression=ruleGDoubleExpression 
	 { $current=$iv_ruleGDoubleExpression.current; } 
	 EOF 
;

// Rule GDoubleExpression
ruleGDoubleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGDoubleExpressionAccess().getGDoubleExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGDoubleExpressionAccess().getValueDOUBLETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDoubleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"DOUBLE");
	    }

)
))
;





// Entry rule entryRuleGEnumLiteralExpression
entryRuleGEnumLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGEnumLiteralExpressionRule()); }
	 iv_ruleGEnumLiteralExpression=ruleGEnumLiteralExpression 
	 { $current=$iv_ruleGEnumLiteralExpression.current; } 
	 EOF 
;

// Rule GEnumLiteralExpression
ruleGEnumLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGEnumLiteralExpressionAccess().getGEnumLiteralExpressionAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGEnumLiteralExpressionAccess().getNumberSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGEnumLiteralExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getGEnumLiteralExpressionAccess().getValueEEnumLiteralCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGIfExpression
entryRuleGIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGIfExpressionRule()); }
	 iv_ruleGIfExpression=ruleGIfExpression 
	 { $current=$iv_ruleGIfExpression.current; } 
	 EOF 
;

// Rule GIfExpression
ruleGIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGIfExpressionAccess().getGIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGIfExpressionAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getConditionGExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGIfExpressionAccess().getThenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getThenExpressionGExpressionParserRuleCall_4_0()); 
	    }
		lv_thenExpression_4_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"thenExpression",
        		lv_thenExpression_4_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGIfExpressionAccess().getElseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getElseExpressionGExpressionParserRuleCall_6_0()); 
	    }
		lv_elseExpression_6_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_6_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='endif' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGIfExpressionAccess().getEndifKeyword_7());
    }
)
;





// Entry rule entryRuleGBraceExpression
entryRuleGBraceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGBraceExpressionRule()); }
	 iv_ruleGBraceExpression=ruleGBraceExpression 
	 { $current=$iv_ruleGBraceExpression.current; } 
	 EOF 
;

// Rule GBraceExpression
ruleGBraceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGBraceExpressionAccess().getGBraceExpressionAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGBraceExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGBraceExpressionAccess().getInnerExpressionGExpressionParserRuleCall_2_0()); 
	    }
		lv_innerExpression_2_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGBraceExpressionRule());
	        }
       		set(
       			$current, 
       			"innerExpression",
        		lv_innerExpression_2_0, 
        		"GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGBraceExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNavigationOperatorRule()); } 
	 iv_ruleNavigationOperator=ruleNavigationOperator 
	 { $current=$iv_ruleNavigationOperator.current.getText(); }  
	 EOF 
;

// Rule NavigationOperator
ruleNavigationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getFullStopKeyword_0()); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1()); 
    }
)
    ;





// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='private' 
	{
        $current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1()); 
    }
));



// Rule ExecutionKind
ruleExecutionKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='triggers' 
	{
        $current = grammarAccess.getExecutionKindAccess().getSubmissionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getExecutionKindAccess().getSubmissionEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='interrupts' 
	{
        $current = grammarAccess.getExecutionKindAccess().getInterruptionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getExecutionKindAccess().getInterruptionEnumLiteralDeclaration_1()); 
    }
));



// Rule CallKind
ruleCallKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='blocking' 
	{
        $current = grammarAccess.getCallKindAccess().getBlockingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCallKindAccess().getBlockingEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='nonblocking' 
	{
        $current = grammarAccess.getCallKindAccess().getNonBlockingEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCallKindAccess().getNonBlockingEnumLiteralDeclaration_1()); 
    }
));



// Rule GAndOperator
ruleGAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getGAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule GXorOperator
ruleGXorOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='xor' 
	{
        $current = grammarAccess.getGXorOperatorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGXorOperatorAccess().getXOREnumLiteralDeclaration()); 
    }
);



// Rule GOrOperator
ruleGOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getGOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule GEqualityOperator
ruleGEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getGEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getGEqualityOperatorAccess().getNOTEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGEqualityOperatorAccess().getNOTEQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule GRelationOperator
ruleGRelationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGRelationOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGRelationOperatorAccess().getGREATEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getLESSEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGRelationOperatorAccess().getLESSEQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGRelationOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3()); 
    }
));



// Rule GAdditionOperator
ruleGAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getGAdditionOperatorAccess().getADDITIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGAdditionOperatorAccess().getADDITIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getGAdditionOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGAdditionOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1()); 
    }
));



// Rule GMultiplicationOperator
ruleGMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getGMultiplicationOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGMultiplicationOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getGMultiplicationOperatorAccess().getDIVISIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGMultiplicationOperatorAccess().getDIVISIONEnumLiteralDeclaration_1()); 
    }
));



// Rule GNegationOperator
ruleGNegationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getGNegationOperatorAccess().getNEGATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGNegationOperatorAccess().getNEGATIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='~' 
	{
        $current = grammarAccess.getGNegationOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGNegationOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : ('-'|'+')? (RULE_INT '.' RULE_INT|'.' RULE_INT|RULE_INT '.') ('e' ('-'|'+') RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


