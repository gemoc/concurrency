/*
 * generated by Xtext
 */
package org.gemoc.gel.formatting

import com.google.inject.Inject
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.gemoc.gel.services.GELGrammarAccess

// import com.google.inject.Inject;
// import org.gemoc.gel.services.GELGrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class GELFormatter extends AbstractDeclarativeFormatter {

	@Inject extension GELGrammarAccess ga

	override protected void configureFormatting(FormattingConfig cfg) {

		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		cfg.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		cfg.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		cfg.setLinewrap(0, 1, 1).after(ML_COMMENTRule)

		cfg.setAutoLinewrap(120);

		for (Keyword comma : ga.findKeywords(",")) {
			cfg.setNoSpace().before(comma)
		}

		for (pair : ga.findKeywordPairs(":", "end")) {
			cfg.setNoSpace().before(pair.getFirst())
			cfg.setLinewrap(1).after(pair.getFirst())
			cfg.setIndentation(pair.getFirst(), pair.getSecond())
			cfg.setLinewrap(1).after(pair.getSecond())
			cfg.setLinewrap(1).before(pair.getSecond())
		}

		for (pair : ga.findKeywordPairs("{", "}")) {
			cfg.setNoSpace().before(pair.getFirst())
			cfg.setLinewrap(1).after(pair.getFirst())
			cfg.setIndentation(pair.getFirst(), pair.getSecond())
			cfg.setLinewrap(1).before(pair.getSecond())
		}

		for (pair : ga.findKeywordPairs("(", ")")) {
			cfg.setNoSpace().before(pair.getFirst())
			cfg.setNoSpace().after(pair.getFirst())
			cfg.setNoSpace().before(pair.getSecond())
		}

		val dseSpecAccess = ga.domainSpecificEventsSpecificationAccess
		cfg.setLinewrap().after(dseSpecAccess.importsAssignment_1)
		cfg.setLinewrap(2).between(dseSpecAccess.importsAssignment_1, dseSpecAccess.eventsAssignment_2)

		val atomicDseAccess = ga.atomicDomainSpecificEventAccess
		cfg.setLinewrap(2).before(atomicDseAccess.visibilityAssignment_1)
		cfg.setLinewrap(0).after(atomicDseAccess.visibilityAssignment_1)
		cfg.setLinewrap(2).before(atomicDseAccess.DSEKeyword_2)
		cfg.setLinewrap(1).before(executionKindAccess.submissionTriggersKeyword_0_0)
		cfg.setLinewrap(1).before(executionKindAccess.interruptionInterruptsKeyword_1_0)
		cfg.setLinewrap(1).before(atomicDseAccess.feedbackKeyword_7_2_0)

		val compositeDseAccess = ga.compositeDomainSpecificEventAccess
		cfg.setLinewrap(2).before(compositeDseAccess.visibilityAssignment_1)
		cfg.setLinewrap(0).after(compositeDseAccess.visibilityAssignment_1)
		cfg.setLinewrap(2).before(compositeDseAccess.compositeKeyword_2)
		cfg.setLinewrap(1).before(compositeDseAccess.bodyAssignment_6)

		val feedbackPolicyAccess = ga.feedbackPolicyAccess
		cfg.setLinewrap(1).after(feedbackPolicyAccess.rulesAssignment_1)

		val unfoldingStrategyAccess = ga.unfoldingStrategyAccess
		cfg.setLinewrap(1).after(unfoldingStrategyAccess.instantiationPredicatesAssignment_7)
		cfg.setLinewrap(1).after(unfoldingStrategyAccess.localVariablesAssignment_3)

		val localVariableAccess = ga.localVariableAccess
		cfg.setNoSpace().before(localVariableAccess.colonKeyword_2)

		val navigationExpressionAccess = ga.GNavigationExpressionAccess
		cfg.setNoSpace().before(navigationExpressionAccess.navigationOperatorParserRuleCall_1_1)
		cfg.setNoSpace().after(navigationExpressionAccess.navigationOperatorParserRuleCall_1_1)
	}
}
