module org.gemoc.gel.GenerateGEL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/gemoc/gel/GEL.xtext"
var fileExtensions = "GEL"
var projectName = "org.gemoc.gel.xtext"
var runtimeProject = "../${projectName}"
var generateXtendStub = true
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}

		uriMap = {
			from = "platform:/plugin/org.gemoc.gel/model/GEL.genmodel"
			to = "platform:/resource/org.gemoc.gel/model/GEL.genmodel"
		}

		uriMap = {
			from = "platform:/plugin/fr.inria.aoste.timesquare.ecl/model/ecl.genmodel"
			to = "platform:/resource/fr.inria.aoste.timesquare.ecl/model/ecl.genmodel"
		}

		registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ECL.ECLPackage"
		registerGenModelFile = "platform:/resource/fr.inria.aoste.timesquare.ecl/model/ecl.genmodel"
		registerGeneratedEPackage = "org.gemoc.gel.GelPackage"
		registerGenModelFile = "platform:/resource/org.gemoc.gel/model/GEL.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding
		language = {
			uri = grammarURI
			fileExtensions = fileExtensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// Generate java classes for Ecore models
			//			fragment = ecore.EMFGeneratorFragment {
			//				emfRuntimeVersion = "2.10"
			//			}

			// the serialization component
			fragment = serializer.SerializerFragment auto-inject {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = fileExtensions
			}

			// the following fragment generates an Antlr parser 
			fragment = parser.antlr.XtextAntlrGeneratorFragment {}

			// java-based API for validation 
			fragment = validation.ValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping API 
			//			fragment = scoping.ImportNamespacesScopingFragment {
			//				generateStub = false
			//			}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = scoping.ImportURIScopingFragment auto-inject {}
			//			fragment = exporting.SimpleNamesFragment auto-inject {}

			// testing API
			fragment = junit.Junit4Fragment {}

			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// java-based API for content assistance 
			fragment = contentAssist.ContentAssistFragment auto-inject {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}

			// provides a compare view
			fragment = compare.CompareFragment {
				fileExtensions = fileExtensions
			}

			//			Code
			//			generator 
			fragment = generator.GeneratorFragment auto-inject {}

			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
		}
	}
}

