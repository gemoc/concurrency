[31mMessageNotUnderstood: StandardFileStream class>>nextPutAll:
[0mStandardFileStream class(Object)>>doesNotUnderstand: #nextPutAll:
[ :stream | 
stream
	nextPutAll: 'system ' , sysName;
	cr;
	nextPutAll: 'ERROR' ] in [ 
resultFile := resultsPath , sysName , '_csys.results'.
FileStream
	forceNewFileNamed: resultFile
	do: [ :stream | 
		stream
			nextPutAll: 'system ' , sysName;
			cr;
			nextPutAll: 'ERROR' ] ] in ClockSystem4GeMoC class>>explore:resultIn: in Block: [ :stream | ...
[ anotherBlock value: file ] in FileStream class>>detectFile:do: in Block: [ anotherBlock value: file ]
BlockClosure>>ensure:
FileStream class>>detectFile:do:
FileStream class>>forceNewFileNamed:do:
[ 
resultFile := resultsPath , sysName , '_csys.results'.
FileStream
	forceNewFileNamed: resultFile
	do: [ :stream | 
		stream
			nextPutAll: 'system ' , sysName;
			cr;
			nextPutAll: 'ERROR' ] ] in ClockSystem4GeMoC class>>explore:resultIn: in Block: [ ...
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>forceNewFileNamed:
FileStream class>>forceNewFileNamed:
[ self forceNewFileNamed: fileName ] in FileStream class>>forceNewFileNamed:do: in Block: [ self forceNewFileNamed: fileName ]
FileStream class>>detectFile:do:
FileStream class>>forceNewFileNamed:do:
[ 
runtime := Time millisecondsToRun: [ result := ClockCartesianProductExploration exploreModel: aClockSystem ].
resultsPath := '/Users/ciprian/Playfield/GeMOC/gemoc-obp-bridge/'.
sysName := aClockSystem systemName.	"export MTX"
mtxFile := resultsPath , sysName , '.mtx'.
FileStream forceNewFileNamed: mtxFile do: [ :stream | TraConfigurationGraph2MatrixMarket mtx: result in: stream ].
rccg := TraConfigurationGraph2LTS runOn: result.
TraRemoveInternalClocks runOn: rccg.
TraRemoveInternalEvents runOn: rccg.
fiacreGraph := TraConfigurationGraph2FiacreGraph runOn: rccg.	"export LTS"
ltsFile := resultsPath , sysName , '.lts'.
FileStream forceNewFileNamed: ltsFile do: [ :stream | TraFiacreGraph2Lts lts: fiacreGraph prefix: '{sys}1' in: stream ].	"export GML with coincidence expanded"
fcrGmlFile := resultsPath , sysName , '_fcr.gml'.
FileStream forceNewFileNamed: fcrGmlFile do: [ :stream | TraFiacreGraph2GML gml: fiacreGraph in: stream ].	"export GML without coincidence expanded"
gmlFile := resultsPath , sysName , '.gml'.
FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: rccg in: stream ].	"export GML full"
gmlFile := resultsPath , sysName , '_full.gml'.
FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: result in: stream ].
resultFile := resultsPath , sysName , '_csys.results'.
FileStream
	forceNewFileNamed: resultFile
	do: [ :stream | 
		stream
			nextPutAll: 'system ' , sysName;
			cr.
		stream
			nextPutAll: 'states: ' , result configurations size printString;
			cr.
		stream
			nextPutAll: 'transitions: ' , result graph size printString;
			cr.
		stream
			nextPutAll: 'time: ' , runtime printString , ' ms';
			cr ] ] in ClockSystem4GeMoC class>>explore:resultIn: in Block: [ ...
BlockClosure>>on:do:
ClockSystem4GeMoC class>>explore:resultIn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
SmalltalkImage>>evaluate:
[ 
result := Smalltalk evaluate: aStream.
self hasSessionChanged
	ifFalse: [ 
		self stdout
			<< result asString;
			lf ] ] in EvaluateCommandLineHandler>>evaluate: in Block: [ ...
BlockClosure>>on:do:
EvaluateCommandLineHandler>>evaluate:
EvaluateCommandLineHandler>>evaluateArguments
EvaluateCommandLineHandler>>activate
EvaluateCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand: in Block: [ aCommandLinehandler activateWith: commandLine ]
[0m[31mUnwind error during termination
[0mStandardFileStream class(Object)>>doesNotUnderstand: #close
[ file close ] in FileStream class>>detectFile:do: in Block: [ file close ]
Context>>resume:through:
BlockClosure>>ensure:
FileStream class>>detectFile:do:
FileStream class>>forceNewFileNamed:do:
[ 
resultFile := resultsPath , sysName , '_csys.results'.
FileStream
	forceNewFileNamed: resultFile
	do: [ :stream | 
		stream
			nextPutAll: 'system ' , sysName;
			cr;
			nextPutAll: 'ERROR' ] ] in ClockSystem4GeMoC class>>explore:resultIn: in Block: [ ...
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>forceNewFileNamed:
FileStream class>>forceNewFileNamed:
[ self forceNewFileNamed: fileName ] in FileStream class>>forceNewFileNamed:do: in Block: [ self forceNewFileNamed: fileName ]
FileStream class>>detectFile:do:
FileStream class>>forceNewFileNamed:do:
[ 
runtime := Time millisecondsToRun: [ result := ClockCartesianProductExploration exploreModel: aClockSystem ].
resultsPath := '/Users/ciprian/Playfield/GeMOC/gemoc-obp-bridge/'.
sysName := aClockSystem systemName.	"export MTX"
mtxFile := resultsPath , sysName , '.mtx'.
FileStream forceNewFileNamed: mtxFile do: [ :stream | TraConfigurationGraph2MatrixMarket mtx: result in: stream ].
rccg := TraConfigurationGraph2LTS runOn: result.
TraRemoveInternalClocks runOn: rccg.
TraRemoveInternalEvents runOn: rccg.
fiacreGraph := TraConfigurationGraph2FiacreGraph runOn: rccg.	"export LTS"
ltsFile := resultsPath , sysName , '.lts'.
FileStream forceNewFileNamed: ltsFile do: [ :stream | TraFiacreGraph2Lts lts: fiacreGraph prefix: '{sys}1' in: stream ].	"export GML with coincidence expanded"
fcrGmlFile := resultsPath , sysName , '_fcr.gml'.
FileStream forceNewFileNamed: fcrGmlFile do: [ :stream | TraFiacreGraph2GML gml: fiacreGraph in: stream ].	"export GML without coincidence expanded"
gmlFile := resultsPath , sysName , '.gml'.
FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: rccg in: stream ].	"export GML full"
gmlFile := resultsPath , sysName , '_full.gml'.
FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: result in: stream ].
resultFile := resultsPath , sysName , '_csys.results'.
FileStream
	forceNewFileNamed: resultFile
	do: [ :stream | 
		stream
			nextPutAll: 'system ' , sysName;
			cr.
		stream
			nextPutAll: 'states: ' , result configurations size printString;
			cr.
		stream
			nextPutAll: 'transitions: ' , result graph size printString;
			cr.
		stream
			nextPutAll: 'time: ' , runtime printString , ' ms';
			cr ] ] in ClockSystem4GeMoC class>>explore:resultIn: in Block: [ ...
BlockClosure>>on:do:
ClockSystem4GeMoC class>>explore:resultIn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
SmalltalkImage>>evaluate:
[ 
result := Smalltalk evaluate: aStream.
self hasSessionChanged
	ifFalse: [ 
		self stdout
			<< result asString;
			lf ] ] in EvaluateCommandLineHandler>>evaluate: in Block: [ ...
BlockClosure>>on:do:
EvaluateCommandLineHandler>>evaluate:
EvaluateCommandLineHandler>>evaluateArguments
EvaluateCommandLineHandler>>activate
EvaluateCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand: in Block: [ aCommandLinehandler activateWith: commandLine ]
[0m