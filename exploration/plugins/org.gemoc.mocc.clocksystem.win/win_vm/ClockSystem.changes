'From Pharo4.0 of 18 March 2013 [Latest update: #40607] on 14 April 2015 at 9:52:49.547808 am'!----STARTUP----2015-04-14T09:52:16.024237+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:52:53.433201+02:00 Pharo-40607.image priorSource: 0!----STARTUP----2015-04-14T09:53:10.503839+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:53:23.786467+02:00 Pharo-40607.image priorSource: 196!----STARTUP----2015-04-14T12:27:52.175891+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/14/2015 12:25' prior: 55184883!commentForCurrentUpdate ^ 'new .sources'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/14/2015 12:25'!script608	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-StephaneDucasse.35.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-StephaneDucasse.1091.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/14/2015 12:25'!update40608	"self new update40608"	self withUpdateLog: 'new .sources'.	self loadTogether: self script608 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40607!ScriptLoader removeSelector: #script607!"ScriptLoader40"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.786.mcz') load.ScriptLoader new update40608.!----End fileIn----!----QUIT----2015-04-14T12:27:53.326572+02:00 Pharo.image priorSource: 376!----STARTUP----2015-04-14T12:27:53.4798+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-14T12:27:57.217802+02:00 Pharo.image priorSource: 15532!----STARTUP----2015-04-14T12:42:49.686617+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-14T12:42:49.754863+02:00 Pharo-40608.image priorSource: 15722!----STARTUP----2015-04-15T17:06:01.522135+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 4/15/2015 17:02' prior: 33555098!commentForCurrentUpdate ^ '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 4/15/2015 17:02'!script609	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 4/15/2015 17:02'!update40609	"self new update40609"	Smalltalk allClasses do: [ :each | each class organization comment: nil; commentStamp: nil ].	self withUpdateLog: '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'.	self loadTogether: self script609 merge: false.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 4.0=========Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 4.0 already comes pre-loaded with a rich set of packages that you can use to explore the system and develop your own applications. However there is also a huge library of user contributed projects that you can also load using the ''Configurations Browser'' by executing:"MetacelloConfigurationBrowser open."This browser is also accessible from the World | Tools menu (just click the desktop, select Tools, and then Configuration Browser).You can find information about Pharo on http://www.pharo.org. Some useful starting points are:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 1600 issues treated in this release. Sumarized issues for 4.0:=========================New stuff---------- GTools (Playground, Inspector, Spotter)- Slots model instance variables as first class enities and enable meta-programming on this level.- ShoreLine reporter: submit information automatically when errors happen- TxModel, a modern text model who works with Athens (Preview)- OSWindow, a new way to handle windows and input events (Preview)- Glamour, a mature declarative browser builder- Dark themeUpdated stuff-------------- Zinc/Zodiac- Fuel- VersionnerAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo40ChangeLogs.md"'	label: 'Welcome to Pharo 4.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 4.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40608!ScriptLoader removeSelector: #script608!"ScriptLoader40"!!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 55982943!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !!SystemSystemSettings class methodsFor: 'settings' stamp: 'EstebanLorenzano 4/15/2015 15:03' prior: 58207175!systemSettingOn: aBuilder	<systemsettings>	(aBuilder group: #pharoSystem) 		label: 'System';		description: 'General system settings' ;		with: [			(aBuilder setting: #serverMode)				label: 'Server mode';				target: WorldState;				description: 'If enabled, then each main rendering loop will always wait a complete delay of 50ms' .			(aBuilder setting: #useLocale)				label: 'Use locale';				target: Locale;				selector: #activated;				description: 'Use the system locale to set the system language at startup.']! !!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 33587555!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !SmalltalkImage removeSelector: #shouldDownloadSourcesFile!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile:!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile!"Settings-System"!"System-Support"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-EstebanLorenzano.789.mcz') load.ScriptLoader new update40609.!----End fileIn----!----QUIT----2015-04-15T17:06:04.321261+02:00 Pharo.image priorSource: 15916!----STARTUP----2015-04-15T17:06:04.475077+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-15T17:06:08.61668+02:00 Pharo.image priorSource: 36763!----STARTUP----2015-04-15T17:17:40.057035+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-15T17:17:40.126384+02:00 Pharo-40609.image priorSource: 36957!----STARTUP----2015-04-23T13:55:03.41202+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/23/2015 13:52' prior: 33570647!commentForCurrentUpdate ^ '15349 The menu in the PharoTutorial has an erroneous label	https://pharo.fogbugz.com/f/cases/1534915375 backport pharo4: 15332 [Spec Help] protocol and protocol-events dont exist anymore	https://pharo.fogbugz.com/f/cases/15375'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/23/2015 13:52'!script610	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/23/2015 13:52'!update40610	"self new update40610"	self withUpdateLog: '15349 The menu in the PharoTutorial has an erroneous label	https://pharo.fogbugz.com/f/cases/1534915375 backport pharo4: 15332 [Spec Help] protocol and protocol-events dont exist anymore	https://pharo.fogbugz.com/f/cases/15375'.	self loadTogether: self script610 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40609!ScriptLoader removeSelector: #script609!"ScriptLoader40"!!HelpBrowser methodsFor: 'ui' stamp: 'SvenVanCaekenberghe 4/16/2015 21:29' prior: 26430124!menu	^ MenuMorph new		add: 'do it (d)' selector: #doIt;		add: 'print it (p)' selector: #printIt;		add: 'inspect it (i)' selector: #inspectIt;		yourself! !!SpecExamples class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:20' prior: 57222476!firstExample	^HelpTopic 		title: 'A first example: ModelList'		contents: 'Creating a specific UI always starts with the subclassing of Composable-Model. Each sub widget is stored into an instance variable of the newly created class. All the code presented here is already in the image so you can simply do: 			ModelList browseAnd follow the tutorial while browsing the code. So let''s subclass ComposableModel.	ComposableModel subclass: #ModelList	instanceVariableNames: ''list''	classVariableNames: ''	category: ''Spec-Examples''				The first required step then is to instantiate and define the sub widgets. This step is done in the method initializeWidgets. It creates the list and populates it with the required classes, in alphabetical order.	ModelList>>initializeWidgets	list := self newList.	list items: (AbstractWidgetModel allSubclasses	sorted: [:a :b | a name < b name ]).	self focusOrder add: list	The second required step is to define a layout, which is done on the class side. Since there is here only one sub widget, the layout is quite simple. It simply returns a layout that contains only the list:	ModelList class>>#defaultSpec	<spec: #default>	^ SpecLayout composed	add: #list;	yourself	The three last methods to define on ModelList are a getter, a method to display the UI title and a method to register to list selection changes.	"accessing"	ModelList>>list		^ list	"api"	ModelList>>title		^ ''Widgets''	"api-events"	ModelList>>whenSelectedItemChanged: aBlock		list whenSelectedItemChanged: aBlockThe first UI is now done. The result can be seen by executing the following snippet of code: 	ModelList new openWithSpec.'! !!SpecExamples class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:25' prior: 57224262!secondExample	^HelpTopic 		title: 'A second example: Protocol List'		contents: 'The next user interface is the protocol list. This UI combines two sub widgets: 		a list		a label.So again, we start by subclassing ComposableModel:	ComposableModel subclass: #ProtocolList	instanceVariableNames: ''label protocols''	classVariableNames: ''	category: ''Spec-Examples''	The initializeWidgets method for this UI is quite similar to the method in ModelList:	ProtocolList>>initializeWidgets		protocols := self newList.		label := self newLabel.		label text: ''Protocol''.		protocols displayBlock: [ :m | m selector ].		self focusOrder add: protocols	The layout method is quite different though. Now the sub widgets need to be placed more specifically than in the previous example, we have to build a layout that has a column with the label on top and the list taking all the space that is left.	ProtocolList class>>defaultSpec		<spec: #default>		^ SpecLayout composed		newColumn: [ :column |			column				add: #label					height: self toolbarHeight;					add: #protocols ];		yourself			The remaining methods are getters, sub widget delegation methods, a method to display the title, and a method to register to list selection changes: 	"accessing"	ProtocolList>>label		^ label	"accessing"	ProtocolList>>protocols		^ protocols	"api"	ProtocolList>>items: aCollection		protocols items: aCollection	"api"	ProtocolList>>label: aText		label label: aText	"api"	ProtocolList>>resetSelection		protocols resetSelection	"api"	ProtocolList>>title		^ ''Protocol widget''	"api-events"	ProtocolList>>whenSelectedItemChanged: aBlock		protocols whenSelectedItemChanged: aBlockThe ProtocolList UI can be seen by evaluating: ProtocolList new openWithSpec.'! !!LessonView methodsFor: 'gui' stamp: 'SvenVanCaekenberghe 4/16/2015 21:29' prior: 27700877!menu	^ MenuMorph new		add: 'do it (d)' selector: #doIt;		add: 'print it (p)' selector: #printIt;		add: 'inspect it (i)' selector: #inspectIt;		yourself! !!SpecHelpTopics class methodsFor: 'pages' stamp: 'BernardoContreras 4/17/2015 15:19' prior: 57227371!introduction	^HelpTopic 			title: 'About Spec'		contents: 'Spec has been originally developed by B. Van Ryseghem based on an idea of S. Ducasse. It is now maintained by the community and the pharo core team.. Spec is an attempt to support UI logic reuse. Spec is influenced by VisualWorks and Dolphin MVP in the sense that it recognizes the need for a Presenter or Application-Model class, in Spec called ComposableModel that manages the logic and the link between widgets and domain objects. Spec, following the tradition, uses value holders, simple object raising announcements when their values, often domain objects, change.'! !"HelpSystem-Core"!"ProfStef-Core"!"Spec-Help"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.790.mcz') load.ScriptLoader new update40610.!----End fileIn----!----QUIT----2015-04-23T13:55:05.772768+02:00 Pharo.image priorSource: 37150!----STARTUP----2015-04-23T13:55:05.929678+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-23T13:55:09.820052+02:00 Pharo.image priorSource: 57709!----STARTUP----2015-04-23T14:06:29.625404+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-23T14:06:29.693694+02:00 Pharo-40610.image priorSource: 57903!----STARTUP----2015-04-24T11:30:58.269253+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/24/2015 11:28' prior: 33591877!commentForCurrentUpdate ^ '15338 OrderedDictionary changes to merge	https://pharo.fogbugz.com/f/cases/1533815339 Monticello with spotter extension methods throws MNU errors when browsing packages in repos that dont contain every package	https://pharo.fogbugz.com/f/cases/15339'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/24/2015 11:28'!script611	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/24/2015 11:28'!update40611	"self new update40611"	self withUpdateLog: '15338 OrderedDictionary changes to merge	https://pharo.fogbugz.com/f/cases/1533815339 Monticello with spotter extension methods throws MNU errors when browsing packages in repos that dont contain every package	https://pharo.fogbugz.com/f/cases/15339'.	self loadTogether: self script611 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40610!ScriptLoader removeSelector: #script610!"ScriptLoader40"!!MCFileRepositoryInspector methodsFor: 'accessing' stamp: 'ThierryGoubier 4/15/2015 11:22' prior: 28331243!selectedPackageAncestors	selectedPackageAncestors		ifNil: [ 			selectedPackage				ifNotNil: [ 					(MCWorkingCopy registry at: (MCPackage named: selectedPackage) ifAbsent: [  ])						ifNotNil: [ :aWorkingCopy | selectedPackageAncestors := aWorkingCopy ancestry breadthFirstAncestors collect: #name ] ] ].	^ selectedPackageAncestors! !!OrderedIdentityDictionaryTest methodsFor: 'testing' stamp: 'monty 12/15/2014 16:44'!isTestingIdentityDictionary	^ true! !!MCVersionInfo methodsFor: 'initialization' stamp: 'ThierryGoubier 4/15/2015 09:41' prior: 28762933!initializeWithName: vName id: aUUID message: aString date: aDate time: aTime author: initials ancestors: aCollection stepChildren: stepCollection	name := vName.	id := aUUID.	message := aString.	date := aDate ifNil: [ Date today ].	time := aTime.	author := initials.	ancestors := aCollection.	stepChildren := stepCollection! !!OrderedDictionary methodsFor: 'adding' stamp: 'monty 4/14/2015 03:37' prior: 50556679!add: anAssociation	| oldSize |	oldSize := dictionary size.	dictionary add: anAssociation.	dictionary size > oldSize		ifTrue: [			orderedKeys size > oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: anAssociation key].	^ anAssociation.! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 03:13' prior: 50552150!associationAt: aKey ifPresent: aBlock	^ dictionary associationAt: aKey ifPresent: aBlock! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 03:38' prior: 50552686!at: aKey put: aValue	| oldSize |	oldSize := dictionary size.	dictionary at: aKey put: aValue.	dictionary size > oldSize		ifTrue: [			orderedKeys size > oldSize				ifFalse: [self growOrderedKeys].			orderedKeys at: oldSize + 1 put: aKey].	^ aValue.! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 03:12' prior: 50557786!errorInvalidIndex: anIndex	SubscriptOutOfBounds signalFor: anIndex! !!OrderedDictionary methodsFor: 'accessing' stamp: 'monty 4/14/2015 02:20'!identityIndexOfKey: aKey	^ self identityIndexOfKey: aKey ifAbsent: [0]! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 02:19'!orderedKeysIndexOf: aKey	^ orderedKeys indexOf: aKey! !!OrderedDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 03:36'!orderedKeysRemove: aRemovedKey	| index |	index := self orderedKeysIndexOf: aRemovedKey.	"shift every remaining key after to the left by one"	orderedKeys		replaceFrom: index		to: self size		with: orderedKeys		startingAt: index + 1.	"one key was removed and the rest shifted, so nil what was the last	key slot before removing and shifting"	orderedKeys		at: self size + 1		put: nil.! !!OrderedDictionary methodsFor: 'removing' stamp: 'monty 4/14/2015 01:26' prior: 50552529!removeKey: aKey	| value |	value := dictionary removeKey: aKey.	self orderedKeysRemove: aKey.	^ value.! !!OrderedDictionary methodsFor: 'removing' stamp: 'monty 4/14/2015 01:26' prior: 50549581!removeKey: aKey ifAbsent: aBlock	| oldSize value |	oldSize := dictionary size.	value := dictionary removeKey: aKey ifAbsent: aBlock.	dictionary size < oldSize		ifTrue: [self orderedKeysRemove: aKey].	^ value.! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50576809!absentKey	self isTestingIdentityDictionary		ifTrue: [^ self identityAbsentKey]		ifFalse: [^ self nonIdentityAbsentKey]! !!OrderedDictionaryTest methodsFor: 'assertions' stamp: 'monty 12/15/2014 16:50'!assertRemovedKey: aKey from: aDictionary	self deny: (aDictionary includesKey: aKey).	aDictionary keys asArray, aDictionary orderedKeys asArray do: [:each |		self deny:			(self isTestingIdentityDictionary				ifTrue: [each == aKey]				ifFalse: [each = aKey])].! !!OrderedDictionaryTest methodsFor: 'assertions' stamp: 'monty 12/14/2014 16:35' prior: 50579258!assertSelector: aSelector collects: aCollection from: aDictionary	self		assert: (self emptyDictionary perform: aSelector) asArray = #();		assert: (aDictionary perform: aSelector) asArray = aCollection asArray! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:36' prior: 50586042!defaultCapacity	^ self emptyInternalDictionary capacity! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50584960!dictionaryAssociations	self isTestingIdentityDictionary		ifTrue: [^ self identityDictionaryAssociations]		ifFalse: [^ self nonIdentityDictionaryAssociations]! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:34'!emptyInternalDictionary	^ self internalDictionaryClass new! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:44' prior: 50579135!internalDictionaryClass	self isTestingIdentityDictionary		ifTrue: [^ IdentityDictionary]		ifFalse: [^ Dictionary]! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:37'!internalDictionaryWithSingleAssociation	^ self internalDictionaryClass with: self singleAssociation! !!OrderedDictionaryTest methodsFor: 'testing' stamp: 'monty 12/15/2014 16:44'!isTestingIdentityDictionary	^ false! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:08'!nonIdentityAbsentKey	^ 'absentKey'! !!OrderedDictionaryTest methodsFor: 'accessing' stamp: 'monty 12/15/2014 16:08'!nonIdentityDictionaryAssociations	"Associations are grouped out of their natural sort order and	are copied so can be modified in one test without affecting others,	but the keys and values are identical each time for identity tests."	dictionaryAssociations ifNil: [		dictionaryAssociations :=		Array			with: 'testKey'->'testValue'			with: 'testKey3'->'testValue3'			with: 'testKey2'->'testValue2'			with: 'testKey4'->'testValue4'].	^ dictionaryAssociations collect: [:each | each copy].! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:43'!testDictionary	| dictionary |	dictionary := self emptyDictionary.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self emptyInternalDictionary.	dictionary := self dictionaryWithSingleAssociation.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self internalDictionaryWithSingleAssociation.	dictionary := self dictionaryWithAssociations.	self		assert: dictionary dictionary class == self internalDictionaryClass;		assert: dictionary dictionary = self internalDictionaryWithAssociations.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:36' prior: 50574882!testEqualsDictionary	| orderedDictionary unorderedDictionary |	"only works on Pharo"	orderedDictionary := self emptyDictionary.	unorderedDictionary := self emptyInternalDictionary.	unorderedDictionary = orderedDictionary		ifFalse: [^ self].	self assertDictionary: orderedDictionary equals: unorderedDictionary.	orderedDictionary addAll: self dictionaryAssociations.	self assertDictionary: orderedDictionary doesNotEqual: unorderedDictionary.		"Dictionary>>addAll: can only accept keyed collections as an argument, so newFrom: is	used instead."	unorderedDictionary := self internalDictionaryWithAssociations.	self assertDictionary: orderedDictionary equals: unorderedDictionary.	unorderedDictionary := self internalDictionaryClass newFrom: self dictionaryAssociations reversed.	self assertDictionary: orderedDictionary equals: unorderedDictionary.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 16:41' prior: 50564184!testHash	| dictionary |	dictionary := self emptyDictionary.	self assert: dictionary hash = self emptyDictionary hash.	self emptyInternalDictionary hash =		self internalDictionaryWithSingleAssociation hash		ifFalse: [			self deny:				dictionary hash = self dictionaryWithSingleAssociation hash].	self emptyInternalDictionary hash = self internalDictionaryWithAssociations hash		ifFalse: [self deny: dictionary hash = self dictionaryWithAssociations hash].	dictionary := self dictionaryWithSingleAssociation.	self assert: dictionary hash = self dictionaryWithSingleAssociation hash.	(self internalDictionaryWithSingleAssociation hash =		self internalDictionaryWithAssociations hash)		ifFalse: [self deny: dictionary hash = self dictionaryWithAssociations hash].	dictionary := self dictionaryWithAssociations.	self assert: dictionary hash = self dictionaryWithAssociations hash.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:30'!testIdentityIndexOfKey	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self			assert: (dictionary identityIndexOfKey: each) = i;			assert: (dictionary identityIndexOfKey: each copy) isZero].	self assert: (dictionary identityIndexOfKey: self absentKey) isZero.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:29'!testIdentityIndexOfKeyIfAbsent	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self			assert: (dictionary identityIndexOfKey: each ifAbsent: [self absentValue]) = i;			assert:				(dictionary					identityIndexOfKey: each copy					ifAbsent: [self absentValue]) = self absentValue].	self assert:		(dictionary			identityIndexOfKey: self absentKey			ifAbsent: [self absentValue]) = self absentValue.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 02:27' prior: 50589911!testIndexOfKeyIfAbsent	| dictionary |	dictionary := self dictionaryWithAssociations.	dictionary keys withIndexDo: [:each :i |		self assert: (dictionary indexOfKey: each ifAbsent: [self absentValue]) = i].	self assert:		(dictionary			indexOfKey: self absentKey			ifAbsent: [self absentValue]) = self absentValue.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 03:21' prior: 50591000!testKeyAtIdentityValue	| dictionary singleValue |	dictionary := self dictionaryWithSingleAssociation.	singleValue := dictionary at: self singleKey.	self		should: [dictionary keyAtIdentityValue: self absentValue] raise: Error;		should: [dictionary keyAtIdentityValue: singleValue copy] raise: Error;		assert: (dictionary keyAtIdentityValue: singleValue) = self singleKey.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 4/14/2015 03:20' prior: 50586183!testKeyAtIdentityValueIfAbsent	| dictionary singleValue |	dictionary := self dictionaryWithSingleAssociation.	singleValue := dictionary at: self singleKey.	self assert:		(dictionary			keyAtIdentityValue: self absentValue			ifAbsent: [self absentKey]) = self absentKey.	self assert:		(dictionary			keyAtIdentityValue: singleValue copy			ifAbsent: [self absentKey]) = self absentKey.	self assert:		(dictionary			keyAtValue: singleValue			ifAbsent: [self absentKey]) = self singleKey.! !!OrderedDictionaryTest methodsFor: 'tests' stamp: 'monty 12/15/2014 15:58' prior: 50569249!testRemoveKey	| dictionary associationsToRemove |	dictionary := self dictionaryWithAssociations.	self should: [dictionary removeKey: self absentKey] raise: Error.	associationsToRemove := self dictionaryAssociations asOrderedCollection.	[associationsToRemove notEmpty]		whileTrue: [ | removed |			removed := associationsToRemove removeFirst.			self				assert: (dictionary removeKey: removed key) = removed value;				should: [dictionary removeKey: removed key] raise: Error;				assertRemovedKey: removed key from: dictionary;				assert: dictionary keys = (associationsToRemove collect: [:each | each key]) asArray].! !!OrderedIdentityDictionary methodsFor: 'private' stamp: 'monty 4/14/2015 02:20'!orderedKeysIndexOf: aKey	^ orderedKeys identityIndexOf: aKey! !!MCLazyVersionInfo methodsFor: 'initialization' stamp: 'ThierryGoubier 4/15/2015 09:41' prior: 28471913!initializeWithName: vName id: aUUID message: aString date: aDate time: aTime author: initials ancestors: aCollection stepChildren: stepCollection	name := vName.	id := aUUID.	message := aString.	date := aDate ifNil: [ Date today ].	time := aTime.	author := initials.	ancestors := WeakArray withAll: aCollection.	stepChildren := WeakArray withAll: stepCollection! !OrderedDictionary removeSelector: #deleteOrderedKey:!OrderedIdentityDictionaryTest removeSelector: #internalDictionaryClass!OrderedIdentityDictionaryTest removeSelector: #dictionaryAssociations!OrderedIdentityDictionaryTest removeSelector: #absentKey!"Collections-Sequenceable"!"CollectionsTests"!"Monticello"!"MonticelloGUI"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.791.mcz') load.ScriptLoader new update40611.!----End fileIn----!----QUIT----2015-04-24T11:31:04.158257+02:00 Pharo.image priorSource: 58097!----STARTUP----2015-04-24T11:31:04.314727+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-24T11:31:08.184451+02:00 Pharo.image priorSource: 86474!----STARTUP----2015-04-24T11:41:04.485005+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-24T11:41:04.561394+02:00 Pharo-40611.image priorSource: 86668!----STARTUP----2015-05-04T10:36:15.561429+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/4/2015 10:33' prior: 33612825!commentForCurrentUpdate ^ '15417 TestRunner does not offer the RunCoverage functionality 	https://pharo.fogbugz.com/f/cases/1541715322 "Save As" does not properly save filenames with dots in them	https://pharo.fogbugz.com/f/cases/15322'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/4/2015 10:33'!script612	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/4/2015 10:33'!update40612	"self new update40612"	self withUpdateLog: '15417 TestRunner does not offer the RunCoverage functionality 	https://pharo.fogbugz.com/f/cases/1541715322 "Save As" does not properly save filenames with dots in them	https://pharo.fogbugz.com/f/cases/15322'.	self loadTogether: self script612 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40611!ScriptLoader removeSelector: #script611!"ScriptLoader40"!!FileReferenceTest methodsFor: 'tests' stamp: 'monty 4/9/2015 23:34' prior: 23421577!testBasenameWithoutExtension	"self debug: #testBasenameWithoutExtension"		| ref |		ref := filesystem root.	self assert: ref basename equals: '/'.		ref := filesystem * 'plonk' / 'griffle'.	self assert: ref basenameWithoutExtension equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle'.		ref := filesystem * 'plonk' / 'griffle.taz'.	self assert: ref basenameWithoutExtension equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle.taz') equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'zork') equals: 'griffle.taz'.		ref := filesystem * 'plonk' / 'griffle.taz.zork'.	self assert: ref basenameWithoutExtension equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'zork') equals: 'griffle.taz'.	self assert: (ref basenameWithoutExtension: 'taz.zork') equals: 'griffle'.	self assert: (ref basenameWithoutExtension: 'griffle.taz.zork') equals: 'griffle.taz.zork'.	self assert: (ref basenameWithoutExtension: 'taz') equals: 'griffle.taz.zork'.! !!AbstractFileReference methodsFor: 'accessing' stamp: 'monty 4/9/2015 23:28'!basenameWithoutExtension: anExtension	"Returns the basename without specified extension (if any)	('/foo/gloops.taz' asFileReference basenameWithoutExtension: 'taz') = 'gloops'	"	^ self fullPath basenameWithoutExtension: anExtension! !!PathTest methodsFor: 'tests' stamp: 'monty 4/9/2015 23:33' prior: 50992571!testBasenameWithoutExtension	"self debug: #testBasenameWithoutExtension"	| path |	path := Path * 'plonk' / 'griffle'.	self assert: path basenameWithoutExtension equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'griffle') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle'.		path := Path * 'plonk' / 'griffle.taz'.	self assert: path basenameWithoutExtension equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'griffle.taz') equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'zork') equals: 'griffle.taz'.		path := Path * 'plonk' / 'griffle.taz.zork'.	self assert: path basenameWithoutExtension equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'zork') equals: 'griffle.taz'.	self assert: (path basenameWithoutExtension: 'taz.zork') equals: 'griffle'.	self assert: (path basenameWithoutExtension: 'girffle.taz.zork') equals: 'griffle.taz.zork'.	self assert: (path basenameWithoutExtension: 'taz') equals: 'griffle.taz.zork'.! !!TestRunner methodsFor: 'accessing-ui' stamp: 'SergioFedi 4/27/2015 21:47' prior: 58630987!buttons	^ #(( 'Run Selected' #runAll 'Run all selected tests' #hasRunnable )		( 'Run Profiled' #runProfiled 'Run tests and profile' #hasRunnable )		( 'Run Coverage' #runCoverage 'Run test and check code coverage' #hasRunnable )		( 'Run Failures' #runFailures 'Run all failures' #hasFailures )		( 'Run Errors' #runErrors 'Run all errors' #hasErrors )		( 'File out results' #fileOutResults 'File out test results' #hasFailuresOrErrors))! !!TestRunner methodsFor: 'actions' stamp: 'SergioFedi 4/27/2015 21:48' prior: 58614643!collectCoverageFor: methods	| wrappers suite |	wrappers := methods collect: [ :each | TestCoverage on: each ].	suite := self		resetResult;		suiteForAllSelected.		[ wrappers do: [ :each | each install ].	[ self runSuite: suite ] ensure: [ wrappers do: [ :each | each uninstall ] ] ] valueUnpreemptively.	wrappers := wrappers reject: [:each | each hasRun].	wrappers := wrappers collect: [:each | each reference].	wrappers isEmpty 		ifTrue:  [ UIManager default inform: 'Congratulations. Your tests cover all code under analysis.' ]		ifFalse: [ 			Smalltalk tools messageList 				browse: wrappers				title: 'Not Covered Code (' , (100 - (100 * wrappers size // methods size)) printString , '% Code Coverage)'].	self saveResultInHistory! !!Path methodsFor: 'accessing' stamp: 'monty 4/9/2015 23:28'!basenameWithoutExtension: anExtension	"Returns the basename without specified extension (if any)	('/foo/gloops.taz' asPath basenameWithoutExtension: 'taz') = 'gloops'	"	| extensionWihtDelimiter |	extensionWihtDelimiter := anExtension copyWithFirst: self extensionDelimiter.	(self basename endsWith: extensionWihtDelimiter)		ifTrue: [^ self basename allButLast: extensionWihtDelimiter size]		ifFalse: [ ^ self basename ]! !!WorldState class methodsFor: 'world menu items' stamp: 'monty 4/9/2015 23:29' prior: 61812197!saveAs	| reference |	reference := UIManager default fileSave: 'New File Name?' extensions: #('image') path: Smalltalk imageDirectory.	reference ifNotNil: [ Smalltalk saveAs: reference parent / (reference basenameWithoutExtension: 'image') ]! !"FileSystem-Core"!"FileSystem-Tests-Core"!"Morphic-Core"!"SUnit-UI"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.792.mcz') load.ScriptLoader new update40612.!----End fileIn----!----QUIT----2015-05-04T10:36:19.183664+02:00 Pharo.image priorSource: 86862!----STARTUP----2015-05-04T10:36:19.338418+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-04T10:36:23.139051+02:00 Pharo.image priorSource: 107478!----STARTUP----2015-05-04T10:45:08.078705+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-04T10:45:08.150291+02:00 Pharo-40612.image priorSource: 107672!----STARTUP----2015-05-05T15:47:04.643301+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/5/2015 15:45' prior: 33641589!commentForCurrentUpdate ^ '15423 Backport Pharo4: 15422 SHTextStyler>>#styleInBackgroundProcess: should not set the text if styling process was terminated	https://pharo.fogbugz.com/f/cases/1542315492 Backport Nautilus MergeGroups + sourceNodeForPC should use #methodNode	https://pharo.fogbugz.com/f/cases/15492'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/5/2015 15:45'!script613	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2013.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/5/2015 15:45'!update40613	"self new update40613"	self withUpdateLog: '15423 Backport Pharo4: 15422 SHTextStyler>>#styleInBackgroundProcess: should not set the text if styling process was terminated	https://pharo.fogbugz.com/f/cases/1542315492 Backport Nautilus MergeGroups + sourceNodeForPC should use #methodNode	https://pharo.fogbugz.com/f/cases/15492'.	self loadTogether: self script613 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40612!ScriptLoader removeSelector: #script612!"ScriptLoader40"!!SHTextStyler methodsFor: 'styling' stamp: 'AndreiChis 5/4/2015 13:31' prior: 54999964!styleInBackgroundProcess: aText	self terminateBackgroundStylingProcess.	stylingEnabled		ifFalse: [ ^ self ].	text := aText copy.	self monitor		critical: [ 			sem := Semaphore new.			[ 				sem notNil					ifTrue: [ 						sem 							waitTimeoutSeconds: 5							onCompletion: [ view ifNotNil: [ view stylerStyledInBackground: text ] ]							onTimeout: [ "do nothing if the styling has not finished or the process turned into a zombie." ] ] 			] forkAt: Processor activePriority.			backgroundProcess := [ 			self privateStyle: text.			sem signal ] forkAt: Processor userBackgroundPriority ]! !!DelayWaitTimeout methodsFor: 'waiting' stamp: 'AndreiChis 5/4/2015 13:30'!waitOnCompletion: completionBlock onTimeout: timeoutBlock	"Wait until either the semaphore is signaled or the delay times out.	If the delay times out execute timeoutBlock, otherwise if the semaphore is signaled execute completionBlock.	Return the value returned by the executed block."	^ self wait		ifTrue: [ timeoutBlock value ]		ifFalse: [ completionBlock value]! !!SemaphoreTest methodsFor: 'tests' stamp: 'AndreiChis 5/4/2015 13:31'!testWaitTimeoutSecondsOnCompletionOnTimeout	"Ensure that waitTimeoutSeconds:onCompletion:onTimeout: behaves properly"	"Ensure that a timed out waitTimeoutSeconds:onCompletion:onTimeout: returns the value of the timeout block"	self assert: (Semaphore new 		waitTimeoutSeconds: 0.05		onCompletion: [ #completed ]		onTimeout: [ #timeout ] ) == #timeout.	"Ensure that a signaled waitTimeoutSeconds:onCompletion:onTimeout: returns the value of the completed block"	self assert: (Semaphore new signal		waitTimeoutSeconds: 0.05		onCompletion: [ #completed ]		onTimeout: [ #timeout ]) == #completed.! !!AbstractTool methodsFor: 'group' stamp: 'MarcusDenker 5/5/2015 15:10' prior: 17544396!mergeGroups: aCollection	aCollection		ifNotEmpty: [:groups || group |			group := groups reduce: [:a :b | a or: b].			groups do: [:gp | 				gp removable					ifTrue: [self groupsManager removeAGroupSilently: gp]].				^ group].	^ nil! !!RBBlockNode methodsFor: '*OpalCompiler-Core' stamp: 'MarcusDenker 5/5/2015 15:10' prior: 52182722!sourceNodeForPC: anInteger 	^ self methodNode sourceNodeForPC: anInteger! !!Semaphore methodsFor: 'communication' stamp: 'AndreiChis 5/4/2015 13:31'!waitTimeoutSeconds: anInteger onCompletion: completionBlock onTimeout: timeoutBlock	"Wait on this semaphore for up to the given number of seconds, then timeout.	If the deadline expired execute timeoutBlock, otherwise execute completionBlock.	Return the value returned by the executed block."	| d |	d := DelayWaitTimeout new setDelay: (anInteger * 1000 max: 0) forSemaphore: self.	^d waitOnCompletion: completionBlock onTimeout: timeoutBlock! !"Kernel"!"KernelTests"!"OpalCompiler-Core"!"Shout"!"Tool-Base"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.793.mcz') load.ScriptLoader new update40613.!----End fileIn----!----QUIT----2015-05-05T15:47:10.552244+02:00 Pharo.image priorSource: 107867!----STARTUP----2015-05-05T15:47:10.712169+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-05T15:47:14.435205+02:00 Pharo.image priorSource: 126487!----STARTUP----2015-05-05T15:56:45.728351+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-05T15:56:45.798918+02:00 Pharo-40613.image priorSource: 126682!----STARTUP----2015-05-26T16:27:18.934807+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 5/26/2015 16:25' prior: 33662595!commentForCurrentUpdate ^ '15284 [Backport 4.0]: 15384 kommiter throws DNU when browsing remotes	https://pharo.fogbugz.com/f/cases/15284'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 5/26/2015 16:25'!script614	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2013.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 5/26/2015 16:25'!update40614	"self new update40614"	self withUpdateLog: '15284 [Backport 4.0]: 15384 kommiter throws DNU when browsing remotes	https://pharo.fogbugz.com/f/cases/15284'.	self loadTogether: self script614 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40613!ScriptLoader removeSelector: #script613!"ScriptLoader40"!!RemotesManager methodsFor: 'private' stamp: 'SeanDeNigris 4/4/2015 09:32' prior: 54039491!buildRoots	^ MCRepositoryGroup default repositories		select: [ :each | each isCache not ]		thenCollect: [ :each || remote  |						remote := each koRemote.			TreeNodeModel new				content: remote;				hasContentToShow: true;				selected: ( self selectedRemotes includes: each );				whenSelectedChanged: [ :bool | self selected: each changed: bool ] ;				yourself ]! !!RemotesManager methodsFor: 'private' stamp: 'SeanDeNigris 4/4/2015 09:32' prior: 54039163!selected: aRepository changed: selected	selected		ifTrue: [ self selectedRemotes add: aRepository ]		ifFalse: [ self selectedRemotes remove: aRepository ].	selectedChangedBlock ifNotNil: 		[ selectedChangedBlock cull: aRepository cull: selected ] ! !!RemotesManager methodsFor: 'api' stamp: 'SeanDeNigris 4/4/2015 09:34' prior: 54040083!selectedRemotes: aRemoteList	selectedRemotes := aRemoteList asSet! !"Komitter"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.794.mcz') load.ScriptLoader new update40614.!----End fileIn----!----QUIT----2015-05-26T16:27:20.757246+02:00 Pharo.image priorSource: 126877!----STARTUP----2015-05-26T16:27:20.912563+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-05-26T16:27:24.898441+02:00 Pharo.image priorSource: 143201!----STARTUP----2015-05-26T16:36:46.010192+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-05-26T16:36:46.084005+02:00 Pharo-40614.image priorSource: 143396!----STARTUP----2015-06-23T10:43:18.96833+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/23/2015 10:41' prior: 33681606!commentForCurrentUpdate ^ '15797 Backport 4.0: New PackageManifests should be classes, not instances	https://pharo.fogbugz.com/f/cases/15797'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/23/2015 10:41'!script615	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/23/2015 10:41'!update40615	"self new update40615"	self withUpdateLog: '15797 Backport 4.0: New PackageManifests should be classes, not instances	https://pharo.fogbugz.com/f/cases/15797'.	self loadTogether: self script615 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40614!ScriptLoader removeSelector: #script614!"ScriptLoader40"!!TheManifestBuilder commentStamp: 'StephaneDucasse 1/6/2014 20:52' prior: 59049974!I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*.!!PackageTreeNautilusTest methodsFor: 'tests' stamp: 'ChristopheDemarey 6/18/2015 15:08' prior: 50747168!testPackagePatternStringRootPackageTag	lastValue := SharedPackageFilterPatternsHolder instance lastValue.	SharedPackageFilterPatternsHolder instance lastValue: ''.	self compiledMethod: (Object>>#=).	nautilus := PackageTreeNautilus openOnMethod: compiledMethod.	self assertSelectedCompiledMethod.	nautilus packagePatternString: 'H'.	self assertSelectedCompiledMethod.	nautilus packagePatternString: 'anything long'.	self assertSelectedCompiledMethod.	nautilus packagePatternString: ''.	self assertSelectedCompiledMethod.! !!PackageManifest class methodsFor: 'code-critics' stamp: 'ChristopheDemarey 6/18/2015 13:46'!rejectClasses	^ #()! !!PackageManifest class methodsFor: 'code-critics' stamp: 'ChristopheDemarey 6/18/2015 13:46'!rejectRules	^ #()! !!RPackage methodsFor: '*Manifest-Core' stamp: 'ChristopheDemarey 6/18/2015 13:48' prior: 53582145!packageManifest	^ self classes		detect: [ :each | each isManifest ]		ifNone: [ TheManifestBuilder new createManifestNamed: name]! !!TheManifestBuilder commentStamp: 'StephaneDucasse 1/6/2014 20:52' prior: 33712864!I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*.!!TheManifestBuilder methodsFor: 'private' stamp: 'ChristopheDemarey 6/18/2015 13:54' prior: 59064401!compileSelector: selector returnValue: arrayString	manifestClass class		compile: selector asString , Character cr asString , '^ ' , arrayString 		classified: 'code-critics'! !!TheManifestBuilder methodsFor: 'accessing' stamp: 'ChristopheDemarey 6/18/2015 13:53' prior: 59064957!manifest	^ manifestClass! !PackageManifest removeSelector: #rejectRules!PackageManifest removeSelector: #rejectClasses!PackageManifest removeSelector: #hash!PackageManifest removeSelector: #=!"Kernel"!"Manifest-Core"!"Nautilus-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.795.mcz') load.ScriptLoader new update40615.!----End fileIn----!----QUIT----2015-06-23T10:43:23.558445+02:00 Pharo.image priorSource: 143591!----STARTUP----2015-06-23T10:43:23.717223+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-23T10:43:27.497364+02:00 Pharo.image priorSource: 161284!----STARTUP----2015-06-23T10:52:11.21743+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-23T10:52:11.293573+02:00 Pharo-40615.image priorSource: 161479!----STARTUP----2015-06-29T10:38:16.525934+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/29/2015 10:36' prior: 33698319!commentForCurrentUpdate ^ '15680 Backport 4.0: Class rename does not update references in class-side methods	https://pharo.fogbugz.com/f/cases/15680'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/29/2015 10:36'!script616	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.238.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/29/2015 10:36'!update40616	"self new update40616"	self withUpdateLog: '15680 Backport 4.0: Class rename does not update references in class-side methods	https://pharo.fogbugz.com/f/cases/15680'.	self loadTogether: self script616 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40615!ScriptLoader removeSelector: #script615!"ScriptLoader40"!!RBNamespace methodsFor: 'accessing' stamp: 'ThomasHeniart 6/12/2015 10:08' prior: 52664882!allReferencesToClass: aRBClass do: aBlock	self		allClassesDo: [ :each | 			(each whichSelectorsReferToClass: aRBClass) do: [ :sel | aBlock value: (each methodFor: sel) ].			(each theMetaClass whichSelectorsReferToClass: aRBClass)				do: [ :sel | aBlock value: (each theMetaClass methodFor: sel) ] ]! !!RBRenameClassRefactoring methodsFor: 'initialize-release' stamp: 'ThomasHeniart 6/12/2015 10:09' prior: 53058623!className: aName newName: aNewName	className := aName asSymbol.	class := self model classNamed: className.	newName := aNewName asSymbol! !"Refactoring-Core"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.796.mcz') load.ScriptLoader new update40616.!----End fileIn----!----QUIT----2015-06-29T10:38:18.397657+02:00 Pharo.image priorSource: 161673!----STARTUP----2015-06-29T10:38:18.576311+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-29T10:38:22.689866+02:00 Pharo.image priorSource: 177713!----STARTUP----2015-06-29T10:51:13.319291+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-29T10:51:13.402172+02:00 Pharo-40616.image priorSource: 177908!----STARTUP----2015-06-30T16:02:18.919025+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 6/30/2015 16:00' prior: 33716402!commentForCurrentUpdate ^ '14387 ressurrect format on accept and format on display	https://pharo.fogbugz.com/f/cases/14387'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 6/30/2015 16:00'!script617	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 6/30/2015 16:00'!update40617	"self new update40617"	self withUpdateLog: '14387 ressurrect format on accept and format on display	https://pharo.fogbugz.com/f/cases/14387'.	self loadTogether: self script617 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40616!ScriptLoader removeSelector: #script616!"ScriptLoader40"!!RBConfigurableFormatter commentStamp: '<historical>' prior: 52318551!RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute "RBProgramNode formatterClass: RBConfigurableFormatter". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.!!MethodDefinitionAcceptor methodsFor: 'protocol' stamp: 'PaulDeBruicker 6/10/2015 13:47' prior: 30708185!accept: source notifying: aController	| protocol method |	RBConfigurableFormatter formatOnAccept		ifTrue: [ self model sourceTextArea formatSourceCode ].	protocol := self model selectedCategory.	method := self model selectedMethod.	protocol ifNil: [ protocol := method ifNil: [ Protocol unclassified ] ifNotNil: [ method protocol ] ].	self model compileAMethodFromCategory: protocol withSource: source notifying: aController! !!SHTextStyler methodsFor: 'formatting' stamp: 'PaulDeBruicker 6/10/2015 13:47' prior: 54998777!format: aText 	| tree |	self terminateBackgroundStylingProcess.	RBConfigurableFormatter formatOnDisplay		ifTrue: [ 			tree := RBParser parseMethod: aText onError: [ :msg :pos | ^ aText ].			^ tree formattedCode ]		ifFalse: [ ^ aText ]! !!RubSHTextStylerST80 methodsFor: 'private' stamp: 'PaulDeBruicker 6/11/2015 17:14'!format: aText	self terminateBackgroundStylingProcess.	^ aText! !!RBConfigurableFormatter commentStamp: '<historical>' prior: 33747331!RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute "RBProgramNode formatterClass: RBConfigurableFormatter". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.!!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnAccept	^FormatOnAccept ifNil:[false]! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:45'!formatOnAccept:aBoolean	FormatOnAccept :=aBoolean! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnDisplay	^FormatOnDisplay ifNil:[false]! !!RBConfigurableFormatter class methodsFor: 'accessing' stamp: 'PaulDeBruicker 6/10/2015 13:44'!formatOnDisplay:aBoolean	FormatOnDisplay :=aBoolean! !!RBConfigurableFormatter class methodsFor: 'initialization' stamp: 'PaulDeBruicker 6/10/2015 13:45' prior: 52338947!initialize	CascadedMessageInsideParentheses := false.	FormatCommentWithStatements := true.	IndentString := String with: Character tab.	IndentsForKeywords := 1.	KeepBlockInMessage := true.	LineUpBlockBrackets := false.	MaxLineLength := 120.	MethodSignatureOnMultipleLines := false.	MinimumNewLinesBetweenStatements := 1.	MultiLineMessages := #(#ifTrue:ifFalse: #ifFalse:ifTrue: #ifTrue: #ifFalse: #on:do: #ensure: #ifCurtailed:).	NewLineAfterCascade := true.	NewLineBeforeFirstCascade := true.	NewLineBeforeFirstKeyword := false.	NewLinesAfterMethodComment := 2.	NewLinesAfterMethodPattern := 1.	NewLinesAfterTemporaries := 1.	NumberOfArgumentsForMultiLine := 4.	OneLineMessages := #(#to: #to:do: #to:by: #to:by:do:).	PeriodsAtEndOfBlock := false.	PeriodsAtEndOfMethod := false.	RetainBlankLinesBetweenStatements := false.	RetainBlankLinesBeforeComments := false.	StringFollowingReturn := ' '.	StringInsideBlocks := ' '.	StringInsideParentheses := ''.	TraditionalBinaryPrecedence := #(#($| $& $?) #($= $~ $< $>) #($- $+) #($* $/ $% $\) #($@)).	UseTraditionalBinaryPrecedenceForParentheses := true.	FormatOnAccept := false.	FormatOnDisplay := false! !!RBConfigurableFormatter class methodsFor: 'settings' stamp: 'PaulDeBruicker 6/10/2015 13:46' prior: 52344181!settingsOn: aBuilder	<systemsettings>	(aBuilder group: #configurableFormatter)		target: self;		parent: #codeBrowsing;		label: 'Pretty Printing';		description: 'Settings related to the formatter';		with: [ 					(aBuilder setting: #cascadedMessageInsideParentheses) label: 'Cascaded message inside parentheses'.					(aBuilder setting: #formatCommentWithStatements) label: 'Format comment with statements'.					(aBuilder setting: #indentString) label: 'Indent string'.					(aBuilder setting: #indentsForKeywords) label: 'Indents for keywords'.					(aBuilder setting: #keepBlockInMessage) label: 'Keep block in message'.					(aBuilder setting: #lineUpBlockBrackets) label: 'Line up block brackets'.					(aBuilder setting: #methodSignatureOnMultipleLines) label: 'Method signature on multiple lines'.					(aBuilder setting: #maxLineLength) label: 'Max line length'.					(aBuilder setting: #oneLineMessages) label: 'One line messages'.					(aBuilder setting: #multiLineMessages) label: 'Multi line messages'.					(aBuilder setting: #minimumNewLinesBetweenStatements) label: 'Minimum new lines between statements'.					(aBuilder setting: #newLineAfterCascade) label: 'New line after cascade'.					(aBuilder setting: #newLineBeforeFirstCascade) label: 'New line before first cascade'.					(aBuilder setting: #newLineBeforeFirstKeyword) label: 'New line before first keyword'.					(aBuilder setting: #newLinesAfterMethodComment) label: 'New lines after method comment'.					(aBuilder setting: #newLinesAfterMethodPattern) label: 'New lines after method pattern'.					(aBuilder setting: #newLinesAfterTemporaries) label: 'New lines after temporaries'.					(aBuilder setting: #numberOfArgumentsForMultiLine) label: 'Number of arguments for multi line'.					(aBuilder setting: #periodsAsTerminators) label: 'Periods as terminators'.					(aBuilder setting: #periodsAtEndOfBlock) label: 'Periods at end of block'.					(aBuilder setting: #periodsAtEndOfMethod) label: 'Periods at end of method'.					(aBuilder setting: #retainBlankLinesBetweenStatements) label: 'Retain blank lines between statements'.					(aBuilder setting: #retainBlankLinesBeforeComments) label: 'Retain blank lines before comments'.					(aBuilder setting: #stringFollowingReturn) label: 'String following return'.					(aBuilder setting: #stringInsideBlocks) label: 'String inside blocks'.					(aBuilder setting: #stringInsideParentheses) label: 'String inside parentheses'.					(aBuilder setting: #traditionalBinaryPrecedence) label: 'Traditional binary precedence'.					(aBuilder setting: #useTraditionalBinaryPrecedenceForParentheses)						label: 'Use traditional binary precedence for parentheses'.					(aBuilder setting: #formatOnDisplay) label: 'Format methods on display'.					(aBuilder setting: #formatOnAccept) label: 'Format methods on accept' ]! !"AST-Core"!"Nautilus"!"Rubric"!"Shout"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.797.mcz') load.ScriptLoader new update40617.!----End fileIn----!----QUIT----2015-06-30T16:02:24.097036+02:00 Pharo.image priorSource: 178103!----STARTUP----2015-06-30T16:02:24.277047+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-06-30T16:02:28.318556+02:00 Pharo.image priorSource: 201621!----STARTUP----2015-06-30T16:12:15.384368+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-06-30T16:12:15.466014+02:00 Pharo-40617.image priorSource: 201816!----STARTUP----2015-07-06T10:10:06.66953+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-06T10:10:06.762223+02:00 Pharo.image priorSource: 202011!----STARTUP----2015-07-06T10:10:06.947275+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-06T10:10:11.173128+02:00 Pharo.image priorSource: 202215!----STARTUP----2015-07-06T10:55:35.529342+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-06T10:55:35.68924+02:00 Pharo-40617.image priorSource: 202410!----STARTUP----2015-07-10T14:54:33.894643+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 7/10/2015 14:51' prior: 33732832!commentForCurrentUpdate ^ '15929 backport Pharo4: Revisiting RBUnpackagedCodeRule	https://pharo.fogbugz.com/f/cases/15929'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 7/10/2015 14:52'!script618	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.57.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.162.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 7/10/2015 14:52'!update40618	"self new update40618"	self withUpdateLog: '15929 backport Pharo4: Revisiting RBUnpackagedCodeRule	https://pharo.fogbugz.com/f/cases/15929'.	self loadTogether: self script618 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40617!ScriptLoader removeSelector: #script617!"ScriptLoader40"!!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 23:21' prior: 53274944!checkClass: aClass 	(self isUnpackaged: aClass) ifTrue: [		self result addClass: aClass ]! !!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 23:22' prior: 53274679!checkMethod: aMethod	(self isUnpackaged: aMethod) ifTrue: [		self result addMethod: aMethod ]! !!RBUnpackagedCodeRule methodsFor: 'running' stamp: 'YuriyTymchuk 7/8/2015 22:20'!isUnpackaged: anEntity	^ anEntity package isDefault! !"Refactoring-Critics"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.798.mcz') load.ScriptLoader new update40618.!----End fileIn----!----QUIT----2015-07-10T14:54:36.260693+02:00 Pharo.image priorSource: 202605!----STARTUP----2015-07-10T14:54:36.60957+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-10T14:54:40.758699+02:00 Pharo.image priorSource: 218468!----STARTUP----2015-07-10T15:04:42.067356+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-10T15:04:42.144693+02:00 Pharo-40618.image priorSource: 218662!----STARTUP----2015-07-31T10:06:18.832287+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-31T10:06:18.906559+02:00 Pharo.image priorSource: 218857!----STARTUP----2015-07-31T10:06:19.075251+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-07-31T10:06:22.858108+02:00 Pharo.image priorSource: 219062!----STARTUP----2015-07-31T10:26:48.632214+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-07-31T10:26:48.709608+02:00 Pharo-40618.image priorSource: 219257!----STARTUP----2015-08-26T17:19:17.276651+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 8/26/2015 17:16' prior: 33757333!commentForCurrentUpdate ^ '16362 Backport Pharo4: 16131 RBModifiesCollectionRule breaks methods AST when checking	https://pharo.fogbugz.com/f/cases/1636216069 backport Pharo4: 16067 remove #prepareDebuggerExample	https://pharo.fogbugz.com/f/cases/1606916081 Backport Pharo: 16080 RBImplementedButNotSent always true	https://pharo.fogbugz.com/f/cases/16081'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 8/26/2015 17:16'!script619	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 8/26/2015 17:16'!update40619	"self new update40619"	self withUpdateLog: '16362 Backport Pharo4: 16131 RBModifiesCollectionRule breaks methods AST when checking	https://pharo.fogbugz.com/f/cases/1636216069 backport Pharo4: 16067 remove #prepareDebuggerExample	https://pharo.fogbugz.com/f/cases/1606916081 Backport Pharo: 16080 RBImplementedButNotSent always true	https://pharo.fogbugz.com/f/cases/16081'.	self loadTogether: self script619 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40618!ScriptLoader removeSelector: #script618!"ScriptLoader40"!!RBImplementedNotSentRule methodsFor: 'cache' stamp: 'MarcusDenker 8/25/2015 08:16' prior: 52474310!literals    "return all 'message sends' in the systed and cache them"    literals ifNil: [        literals := IdentitySet new.        Smalltalk specialSelectors do: [:sel |            sel isSymbol ifTrue: [ literals add: sel ] ].        result rootEnvironment methodsDo: [ :meth |            meth literals do: [ :lit | (meth hasLiteral: lit) ifTrue: [self addLiteral: lit]]]].            "here we do a second check as #literals returns all literals even the one storing             method name"    ^ literals! !!RBModifiesCollectionRule methodsFor: 'private' stamp: 'MarcusDenker 8/25/2015 08:29' prior: 52627713!modifiesTree: aCollectionTree in: aParseTree 	| notifier args |	notifier := RBParseTreeSearcher new.	args := Array with: (RBPatternVariableNode named: '`@object').	notifier 		matchesAnyTreeOf: (#(add: addAll: remove: removeAll:) collect: 					[:each | 					RBMessageNode 						receiver: aCollectionTree copy						selector: each						arguments: args])		do: [:aNode :answer | true].	^notifier executeTree: aParseTree initialAnswer: false! !PharoSyntaxTutorial removeSelector: #prepareDebuggerExample!PharoSyntaxTutorial removeSelector: #initialize!"ProfStef-Core"!"Refactoring-Critics"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.802.mcz') load.ScriptLoader new update40619.!----End fileIn----!----QUIT----2015-08-26T17:19:20.432137+02:00 Pharo.image priorSource: 219452!----STARTUP----2015-08-26T17:19:20.598586+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-08-26T17:19:24.761874+02:00 Pharo.image priorSource: 236604!----STARTUP----2015-08-26T17:59:14.8342+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-08-26T17:59:15.018924+02:00 Pharo-40619.image priorSource: 236799!----STARTUP----2015-08-28T15:17:16.060902+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 8/28/2015 15:15' prior: 33774181!commentForCurrentUpdate ^ '16388 Backport Pharo4: 16387 remove Cursor read showWhile: from ImageReadWriter>>#formFromStream:	https://pharo.fogbugz.com/f/cases/16388'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 8/28/2015 15:15'!script620	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 8/28/2015 15:15'!update40620	"self new update40620"	self withUpdateLog: '16388 Backport Pharo4: 16387 remove Cursor read showWhile: from ImageReadWriter>>#formFromStream:	https://pharo.fogbugz.com/f/cases/16388'.	self loadTogether: self script620 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40619!ScriptLoader removeSelector: #script619!"ScriptLoader40"!!ImageReadWriter class methodsFor: 'image reading/writing' stamp: 'MarcusDenker 8/28/2015 09:43' prior: 26775261!formFromStream: aBinaryStream 	"Answer a ColorForm stored on the given stream.  closes the stream"	| reader readerClass form |	readerClass := self withAllSubclasses 		detect: [ :subclass | subclass understandsImageFormat: aBinaryStream ]		ifNone: 			[ aBinaryStream close.			^ self error: 'image format not recognized' ].	reader := readerClass new on: aBinaryStream reset.	form := reader nextImage.	reader close.	^ form! !"Graphics-Files"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.803.mcz') load.ScriptLoader new update40620.!----End fileIn----!----QUIT----2015-08-28T15:17:17.767005+02:00 Pharo.image priorSource: 236992!----STARTUP----2015-08-28T15:17:17.93146+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-08-28T15:17:21.845199+02:00 Pharo.image priorSource: 252956!----STARTUP----2015-08-28T15:30:44.029635+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-08-28T15:30:44.119378+02:00 Pharo-40620.image priorSource: 253150!----STARTUP----2015-09-01T15:36:15.989708+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/1/2015 15:33' prior: 33791721!commentForCurrentUpdate ^ '15935 Backport 4.0: Renaming a package just by changing upper/lowercase removes the package	https://pharo.fogbugz.com/f/cases/15935'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/1/2015 15:33'!script621	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/1/2015 15:33'!update40621	"self new update40621"	self withUpdateLog: '15935 Backport 4.0: Renaming a package just by changing upper/lowercase removes the package	https://pharo.fogbugz.com/f/cases/15935'.	self loadTogether: self script621 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40620!ScriptLoader removeSelector: #script620!"ScriptLoader40"!!RPackageOrganizer methodsFor: 'accessing' stamp: 'NicolaiHess 7/8/2015 22:53' prior: 53738151!packageNamed: aSymbol  ifAbsent: errorBlock	^ packages 		at: aSymbol asSymbol 		ifAbsent: errorBlock		! !"RPackage-Core"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.804.mcz') load.ScriptLoader new update40621.!----End fileIn----!----QUIT----2015-09-01T15:36:17.836289+02:00 Pharo.image priorSource: 253345!----STARTUP----2015-09-01T15:36:18.050775+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-09-01T15:36:22.50955+02:00 Pharo.image priorSource: 268952!----STARTUP----2015-09-01T15:46:55.85832+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-09-01T15:46:55.944457+02:00 Pharo-40621.image priorSource: 269147!----STARTUP----2015-09-21T13:48:16.999597+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/21/2015 13:46' prior: 33808073!commentForCurrentUpdate ^ '10235 StandardFileStream>>compressFile cant create new compressed file	https://pharo.fogbugz.com/f/cases/10235'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/21/2015 13:46'!script622	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.912.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.643.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/21/2015 13:46'!update40622	"self new update40622"	self withUpdateLog: '10235 StandardFileStream>>compressFile cant create new compressed file	https://pharo.fogbugz.com/f/cases/10235'.	self loadTogether: self script622 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40621!ScriptLoader removeSelector: #script621!"ScriptLoader40"!!StandardFileStream methodsFor: '*compression' stamp: 'CarloTeixeira 9/12/2015 23:47' prior: 57331934!compressFile	"Write a new file that has the data in me compressed in GZip format."	| zipStream rawWriteStream |	self		readOnly;		binary.	rawWriteStream := (self name asFileReference, 'gz') writeStream		binary;		setFileTypeToObject.	zipStream := GZipWriteStream on: rawWriteStream.	[ 	| buffer |	buffer := ByteArray new: 50000.	[ self atEnd ] whileFalse: [ zipStream nextPutAll: (self nextInto: buffer) ] ]		ensure: [ 			zipStream close.			self close ].	^ zipStream! !"Compression"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.805.mcz') load.ScriptLoader new update40622.!----End fileIn----!----QUIT----2015-09-21T13:48:19.000693+02:00 Pharo.image priorSource: 269340!----STARTUP----2015-09-21T13:48:19.175441+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-09-21T13:48:23.252075+02:00 Pharo.image priorSource: 285288!----STARTUP----2015-09-21T14:00:30.612233+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-09-21T14:00:30.694533+02:00 Pharo-40622.image priorSource: 285483!----STARTUP----2015-10-18T00:20:52.37862+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/18/2015 00:17' prior: 33824069!commentForCurrentUpdate ^ '16736 Fix Nautilus #openOnClass: for Pharo4	https://pharo.fogbugz.com/f/cases/1673616777 Querying block with many temps fails	https://pharo.fogbugz.com/f/cases/16777'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/18/2015 00:17'!script623	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.645.mczOpalCompiler-Tests-TheIntegrator.285.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/18/2015 00:17'!update40623	"self new update40623"	self withUpdateLog: '16736 Fix Nautilus #openOnClass: for Pharo4	https://pharo.fogbugz.com/f/cases/1673616777 Querying block with many temps fails	https://pharo.fogbugz.com/f/cases/16777'.	self loadTogether: self script623 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40622!ScriptLoader removeSelector: #script622!"ScriptLoader40"!!OCClosureTests methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 11:27'!testBlockTemps		| block block1 block2 |	"Regression test: Bytecode offset of IR was to last byte of IR node, which for blocks include temp initialization bytes. This caused scan for block creation bytecode to fail when there were many block temps, and no source node to be found."	block := [ :arg | | a b c d e f g | a:=b:=c:=d:=e:=f:=g := arg. [ a ] ].	self assert: block sourceNode isBlock.	self assert: block argumentNames equals: (OrderedCollection with:#arg).	block1 := block value: 1.	block2 := block value: 2.	self assert: block1 value = 1.	self assert: block2 value = 2! !!IRPushClosureCopy methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:11'!isGoto	^ 	false! !!IRPushClosureCopy methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:11'!isJump	^ 	false! !!IRBuilder methodsFor: 'private' stamp: 'HenrikSperreJohansen 10/13/2015 15:09' prior: 26498935!startNewSequence	"End current instruction sequence and start a new sequence to add instructions to.  If ending block just falls through to new block then add an explicit jump to it so they stay linked"	| newSequence | 	currentSequence ifEmpty: [^ self].	"block is still empty, continue using it"	newSequence := IRSequence orderNumber: currentSequence orderNumber + 1.	newSequence method: ir.	currentSequence last transitionsToNextSequence		ifFalse: [ self add: (IRJump new destination: newSequence)].	self currentScope isPushClosureCopy ifTrue: [self currentScope lastBlockSequence: currentSequence].	currentSequence := newSequence.! !!IRInstruction methodsFor: 'testing' stamp: 'HenrikSperreJohansen 10/13/2015 15:08'!transitionsToNextSequence	"Does the current instruction intrinsically know how to transition to the next sequence?"	^ self isJump or: [self isReturn or: [self isPushClosureCopy ]]! !!IRMethod methodsFor: 'debugging' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26591128!instructionForPC: aPC"generates the compiledMethod and optimize the ir. 	Removes the side-effect of optimizing the IR while looking for instruction, 	which results in incorrect found instruction"	self compiledMethod.	"For a given PC, the actual instruction may start N bytes ahead, specifically startPC of blocks is *after* the bytecode that creates the block. N = 3 must be revisited when bytecode sets are extended"	0 to: 3 do: [ :off |		(self firstInstructionMatching: [:ir | ir bytecodeOffset = (aPC - off) ]) ifNotNil: [:it |^it]]	! !!MustBeBooleanTests methodsFor: 'tests' stamp: 'HenrikSperreJohansen 10/13/2015 15:40'!testIfTrueWithClosureAfterJump	"A closure is a multibyte instruction, that should not be	1) confused for an ending jump in ifTrue/ifFalse structure	2) set as jumptarget, or have PC manually set to, none but its first byte."	| myBooleanObject |	myBooleanObject := MyBooleanObject new.	myBooleanObject		ifTrue: [ 4 + 3 ].	[ :string | 	self assert: 'a ' , string equals: 'a 5' ] value: '5'! !!IRBytecodeGenerator methodsFor: 'mapping' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26557903!mapBytesTo: instr	"Record the current byte offset in instruction sequence as start of instr. 	This is later used to calculate the total byte offset of instruction in generated code,	see #bytecodes"	instrMap add: instr -> (bytes size + 1)! !!NautilusUI methodsFor: 'package filter' stamp: 'MarcusDeneker 10/18/2015 00:10'!useLastPackagePatternStringForClass: aClass    ^ self ! !!IRJumpIf methodsFor: 'acessing' stamp: 'HenrikSperreJohansen 10/13/2015 15:37' prior: 26583734!nextBytecodeOffsetAfterJump	"check if we are in ifTrue:ifFalse: / ifFalse:ifTrue: or in ifTrue: / ifFalse: and answers the next byte code offset"	^destination last isJump 		ifTrue: [ destination last destination first bytecodeOffset ]		ifFalse: [ 			(destination sequence at: ((destination size - 1) max: 1)) bytecodeOffset ]! !!IRTranslatorV2 methodsFor: 'visiting' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26658704!visitInstruction: instr	gen mapBytesTo: instr.	self visitNode: instr.! !!IRTranslatorV2 methodsFor: 'visiting' stamp: 'HenrikSperreJohansen 10/12/2015 16:33' prior: 26655377!visitPushClosureCopy: closure	closure copiedValues do: [:name | 			gen pushTemp: (self currentScope indexForVarNamed: name).	].	gen mapBytesTo: closure.	gen pushClosureCopyNumCopiedValues: closure copiedValues size 			numArgs: closure arguments size 			to: closure destination orderNumber.	self pushScope: closure.	gen pushNClosureTemps: closure definedTemps size! !IRInstruction removeSelector: #isJumpOrReturn!"Nautilus"!"OpalCompiler-Core"!"OpalCompiler-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.806.mcz') load.ScriptLoader new update40623.!----End fileIn----!----QUIT----2015-10-18T00:20:57.091294+02:00 Pharo.image priorSource: 285678!----STARTUP----2015-10-18T00:20:57.287183+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-10-18T00:21:02.531129+02:00 Pharo.image priorSource: 305874!----STARTUP----2015-10-18T00:31:30.417885+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-10-18T00:31:30.58539+02:00 Pharo-40623.image priorSource: 306069!----STARTUP----2015-10-26T12:45:27.296246+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/26/2015 12:43' prior: 33840407!commentForCurrentUpdate ^ '16813 Unclosed file streams	https://pharo.fogbugz.com/f/cases/16813'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/26/2015 12:43'!script624	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.645.mczOpalCompiler-Tests-TheIntegrator.285.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-TheIntegrator.31.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/26/2015 12:43'!update40624	"self new update40624"	self withUpdateLog: '16813 Unclosed file streams	https://pharo.fogbugz.com/f/cases/16813'.	self loadTogether: self script624 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40623!ScriptLoader removeSelector: #script623!"ScriptLoader40"!!RGMethodDefinition methodsFor: '*Ring-Monticello' stamp: 'HenrikSperreJohansen 10/19/2015 14:26' prior: 53462522!basicAsMCMethodDefinition   "Creates a MCMethodDefinition from the receiver"   self isActive ifTrue: [ 		self compiledMethod sourceFileStream ifNotNil: [ :file|			[^ self asMCMethodDefinitionFromFile: file] ensure: [file close]]].	   ^ MCMethodDefinition		className: self theNonMetaParentName 	   	classIsMeta: self isMetaSide		selector: self selector		category: self protocol		timeStamp: self stamp		source: self sourceCode ! !"Ring-Monticello"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.807.mcz') load.ScriptLoader new update40624.!----End fileIn----!----QUIT----2015-10-26T12:45:29.012453+01:00 Pharo.image priorSource: 306264!----STARTUP----2015-10-26T12:45:29.208516+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-10-26T12:45:33.670786+01:00 Pharo.image priorSource: 322100!----STARTUP----2015-10-26T12:59:16.201816+01:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-10-26T12:59:16.283083+01:00 Pharo-40624.image priorSource: 322295!----STARTUP----2015-11-11T20:43:20.423212+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 11/11/2015 16:39' prior: 33860993!commentForCurrentUpdate ^ '16908 wrong source node for pc in mustBeBooleanInMagic	https://pharo.fogbugz.com/f/cases/16908'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 11/11/2015 16:40'!script625	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.647.mczOpalCompiler-Tests-TheIntegrator.287.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-TheIntegrator.31.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 11/11/2015 16:40'!update40625	"self new update40625"	self withUpdateLog: '16908 wrong source node for pc in mustBeBooleanInMagic	https://pharo.fogbugz.com/f/cases/16908'.	self loadTogether: self script625 merge: false.	self flushCaches.! !ScriptLoader removeSelector: #update40624!ScriptLoader removeSelector: #script624!"ScriptLoader40"!!MustBeBooleanTests methodsFor: 'tests' stamp: 'HenrikSperreJohansen 11/6/2015 11:10'!testDNU	| code |	code := [ (true ifFalse:[]) ifTrue:[] ].	self should: code raise: MessageNotUnderstood .	code on: MessageNotUnderstood do: [ :error | self assert: error receiver isNil. 			self assert: error message selector equals: #ifTrue:]! !!IRBytecodeGenerator methodsFor: 'results' stamp: 'HenrikSperreJohansen 11/6/2015 10:56' prior: 26546286!bytecodes	| stream |	self updateJumpOffsets.	stream := (ByteArray new: 100) writeStream.  	orderSeq do: [ :seqId | |lastInstr|			"If the instruction will emit bytes, record the first byte emitted as the instructions bytecode index"			lastInstr := IRInstruction new -> 1.			(instrMaps at: seqId) do: [ :assoc | |nextInstr|				nextInstr := assoc.				lastInstr key bytecodeIndex: ((nextInstr value - lastInstr value) > 0 ifTrue: [ 					stream position + lastInstr value]).				lastInstr := assoc.				  ].			lastInstr key bytecodeIndex: ((seqBytes at: seqId) size < lastInstr value ifFalse: [  stream position + lastInstr value]).			stream nextPutAll: (seqBytes at: seqId) ].	^ stream contents! !!Object methodsFor: '*OpalCompiler-Core' stamp: 'HenrikSperreJohansen 11/6/2015 11:18' prior: 33518946!mustBeBooleanInMagic: context	"Permits to redefine methods inlined by compiler.	Take the ast node corresponding to the mustBeBoolean error, compile it on the with Opal fly and executes it as a DoIt. Then resume the execution of the context."	| sendNode methodNode method |	"get the message send node that triggered mustBeBoolean"	sendNode := context sourceNode sourceNodeForPC: context pc - 1.	"Build node to perform send unoptimized"	methodNode := RBMethodNode 		selector: #ExecuteUnOptimizedIn: 		arguments: { RBVariableNode named:'ThisContext' } 		body: sendNode copy asSequenceNode.	"Rewrite temps to access the values in context"	methodNode rewriteTempsForContext: context.	"Rewrite non-local returns to return to the correct context from send"	RBParseTreeRewriter new 		replace: '^ ``@value' with: 'ThisContext home return: ``@value';		executeTree: methodNode.	"Add a return to the method body"	methodNode body transformLastToReturn.		"Keep same compilation context as the sender node's"	methodNode compilationContext: sendNode methodNode compilationContext copy.	"Disable inlining so the message send will be unoptimized"	methodNode compilationContext compilerOptions: #(- optionInlineIf optionInlineAndOr optionInlineWhile).	"Generate the method"		method := methodNode generate.	"resume the context at the instruction following the send when returning from deoptimized code"	context pc: sendNode irInstruction nextBytecodeOffsetAfterJump.	"Execute the generated method"	^ context receiver withArgs: {context} executeMethod: method! !"OpalCompiler-Core"!"OpalCompiler-Tests"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.808.mcz') load.ScriptLoader new update40625.!----End fileIn----!----QUIT----2015-11-11T20:43:23.195059+01:00 Pharo.image priorSource: 322490!----STARTUP----2015-11-11T20:43:23.372928+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-11-11T20:43:27.49757+01:00 Pharo.image priorSource: 340677!----STARTUP----2015-11-11T20:54:29.975887+01:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-11-11T20:54:30.056243+01:00 Pharo-40625.image priorSource: 340872!----STARTUP----2015-12-07T11:28:36.922327+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 12/7/2015 11:25' prior: 33877220!commentForCurrentUpdate ^ '17057 BackPort Pharo4: 13854 frameSize calculated wrongly for #lineSegmentsDo:	https://pharo.fogbugz.com/f/cases/1705717047 Backport pharo4: 17040 Morph HalosEnabled variable is not use.	https://pharo.fogbugz.com/f/cases/17047'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 12/7/2015 11:25'!script626	^ 'AST-Core-TheIntegrator.286.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.192.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.685.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.151.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.175.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.92.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.60.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.122.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2016.mczKernelTests-TheIntegrator.769.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.117.mczManifest-Core-TheIntegrator.217.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1011.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.343.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.443.mczMorphic-Core-TheIntegrator.170.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.101.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.914.mczNautilus-Tests-TheIntegrator.14.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.649.mczOpalCompiler-Tests-TheIntegrator.287.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.60.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.386.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.272.mczRefactoring-Critics-TheIntegrator.165.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-TheIntegrator.31.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-TheIntegrator.189.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.113.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.241.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.11.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.68.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 12/7/2015 11:25'!update40626	"self new update40626"	SmalltalkImage compilerClass: Compiler.	self withUpdateLog: '17057 BackPort Pharo4: 13854 frameSize calculated wrongly for #lineSegmentsDo:	https://pharo.fogbugz.com/f/cases/1705717047 Backport pharo4: 17040 Morph HalosEnabled variable is not use.	https://pharo.fogbugz.com/f/cases/17047'.	self loadTogether: self script626 merge: false.	SmalltalkImage compilerClass: OpalCompiler.	self flushCaches.! !ScriptLoader removeSelector: #update40625!ScriptLoader removeSelector: #script625!"ScriptLoader40"!!IRClosureStackCount commentStamp: 'NicolaiHess 11/17/2015 23:57' prior: 0!IRClosureStackCount is used to distinguish between a stack in the method scope and a stack within a closure block. Theclosure stack size is independent of the number of tempvars from the compiled method, therefore that number is subtractedfrom this stack size length.!!IRClosureStackCount commentStamp: 'NicolaiHess 11/17/2015 23:57' prior: 33910657!IRClosureStackCount is used to distinguish between a stack in the method scope and a stack within a closure block. Theclosure stack size is independent of the number of tempvars from the compiled method, therefore that number is subtractedfrom this stack size length.!!IRClosureStackCount class methodsFor: 'instance creation' stamp: 'NicolaiHess 11/17/2015 23:58'!newOn: stack	^ (self startAt: stack position)		numMethodTempVars: stack numMethodTempVars;		yourself! !!IRClosureStackCount methodsFor: 'initialization' stamp: 'NicolaiHess 11/17/2015 23:59'!initialize	super initialize.	numMethodTempVars := 0.! !!IRClosureStackCount methodsFor: 'accessing' stamp: 'NicolaiHess 11/17/2015 23:59'!length	^ super length - self numMethodTempVars! !!IRClosureStackCount methodsFor: 'accessing' stamp: 'NicolaiHess 11/17/2015 23:59'!numMethodTempVars	^ numMethodTempVars! !!IRClosureStackCount methodsFor: 'accessing' stamp: 'NicolaiHess 11/17/2015 23:59'!numMethodTempVars: nilOrNumber	numMethodTempVars := nilOrNumber ifNil:[0]! !!IRStackCount class methodsFor: 'instance creation' stamp: 'NicolaiHess 11/18/2015 00:00'!newOn: stack	^ self startAt: stack position! !!IRStackCount methodsFor: 'results' stamp: 'NicolaiHess 11/18/2015 00:00' prior: 26641625!linkTo: stackOrNil	stackOrNil ifNil: [^  self class newOn: self].	^ self position = stackOrNil start		ifTrue: [stackOrNil]		ifFalse: [self error: 'stack out of sync in bytecode generator']! !!Morph methodsFor: '*Morphic-Base' stamp: 'CyrilFerlicot 11/24/2015 14:00' prior: 30963823!addHalo: evt	| halo |		(UserManager default canShowMorphHalo and: [ self halosEnabled ])		ifFalse: [ ^ self ].			halo := (Smalltalk globals at: self haloClass ifAbsent: [ HaloMorph ]) new.	halo bounds: (halo worldBoundsForMorph: self).	halo popUpFor: self event: evt.	^ halo! !!MorphTest methodsFor: 'test' stamp: 'CyrilFerlicot 11/24/2015 13:59'!testHaloIsDisable	| isHaloEnable |	isHaloEnable := Morph halosEnabled.	Morph halosEnabled: false.	self assert: (Morph new addHalo: nil) ~= (Smalltalk globals at: #HaloMorph).	Morph halosEnabled: isHaloEnable! !!IRBytecodeGenerator methodsFor: 'instructions' stamp: 'NicolaiHess 11/18/2015 00:01' prior: 26549711!label: seqId	lastSpecialReturn := nil.	currentSeqId := seqId.	currentSeqNum := currentSeqNum + 1.	seqOrder at: seqId put: currentSeqNum.	orderSeq at: currentSeqNum ifAbsentPut: [seqId].	bytes := seqBytes at: seqId ifAbsentPut: [OrderedCollection new].	jumps at: seqId ifAbsentPut: [nil].	instrMap := instrMaps at: seqId ifAbsentPut: [OrderedCollection new].	stack		ifNil: [ stack := stacks at: currentSeqId ifAbsentPut: [ IRStackCount new ] ]		ifNotNil: [stack := stacks at: currentSeqId ifAbsentPut: [ stack class newOn:stack ] ]	! !!IRBytecodeGenerator methodsFor: 'instructions' stamp: 'NicolaiHess 11/18/2015 00:02' prior: 26564410!pushClosureCopyNumCopiedValues: numCopied numArgs: numArgs2 to: toSeqId	| blockSeqId |	blockSeqId := self newDummySeqId.	stack pop: numCopied.	stacks at: blockSeqId put: ((IRClosureStackCount new numMethodTempVars:(numberOfTemps)) startAt: (numArgs2+numCopied)).	stack push.	stacks at: toSeqId put: (stack linkTo: (stacks at: toSeqId ifAbsentPut: [ nil ])).	self		saveLastJump:			(Message				selector: #closureFrom:to:copyNumCopiedValues:numArgs:				arguments:					{currentSeqId.					toSeqId.					numCopied.					numArgs2}).	self		closureFrom: currentSeqId		to: toSeqId		copyNumCopiedValues: numCopied		numArgs: numArgs2.	self label: blockSeqId! !!IRBytecodeGenerator methodsFor: 'instructions' stamp: 'NicolaiHess 11/18/2015 00:02' prior: 26554059!pushNClosureTemps: n	n = 0 ifTrue: [ ^ self ].	n timesRepeat:[ stack push].	encoder genPushNClosureTemps: n.! !"Morphic-Base"!"MorphicTests"!"OpalCompiler-Core"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.809.mcz') load.ScriptLoader new update40626.!----End fileIn----!----QUIT----2015-12-07T11:28:40.621932+01:00 Pharo.image priorSource: 341066!----STARTUP----2015-12-07T11:28:40.78897+01:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-12-07T11:28:44.770934+01:00 Pharo.image priorSource: 361007!----STARTUP----2015-12-07T11:46:21.054722+01:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-12-07T11:46:21.13342+01:00 Pharo-40626.image priorSource: 361201!----STARTUP----2016-01-05T15:12:17.102376+01:00 as /var/lib/jenkins/jobs/ClockSystemP4/workspace/ClockSystem.image!----QUIT----2016-01-05T15:12:17.20845+01:00 ClockSystem.image priorSource: 361396!----STARTUP----2016-01-05T15:12:17.432084+01:00 as /var/lib/jenkins/jobs/ClockSystemP4/workspace/ClockSystem.image!!ConfigurationOfClockSystem class methodsFor: 'development support' stamp: 'CiprianTeodorov 10/21/2014 21:39'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfClockSystem class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 21:39'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfClockSystem class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 21:39'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfClockSystem class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 21:39'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfClockSystem class methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/16/2015 17:51'!gitRepoPath: aFullPathString	GitRepoPath := aFullPathString asFileReference exists ifTrue: [ aFullPathString ].! !!ConfigurationOfClockSystem class methodsFor: 'metacello tool support' stamp: 'CiprianTeodorov 10/21/2014 21:39'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfClockSystem class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 21:39'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfClockSystem class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 21:39'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfClockSystem class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 21:39'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfClockSystem class methodsFor: 'loading' stamp: 'CiprianTeodorov 4/18/2015 22:28'!loadStable	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfClockSystem class methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 21:39'!project	^self new project! !!ConfigurationOfClockSystem class methodsFor: 'development support' stamp: 'CiprianTeodorov 10/21/2014 21:39'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfClockSystem methodsFor: 'baselines' stamp: 'CiprianTeodorov 4/18/2015 18:00'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'bitbucket://CipT/clocksystem.git'.				spec project: 'CartesianProduct' with: [				spec					className: 'ConfigurationOfCartesianProduct';					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/CipT/CartesianProduct/main' ].				spec project: 'BuDDy' with: [				spec					className: 'ConfigurationOfBuDDy';					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/CipT/BuDDy/main' ].		spec project: 'Glamour' with: [				spec					className: 'ConfigurationOfGlamour';					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main' ].							spec 			package: #'ClockSystem-Core';			package: #'ClockSystem-Language' with: [ 				spec requires: #('ClockSystem-Core') ];			package: #'ClockSystem-Lib-Kernel' with: [				spec requires: #('ClockSystem-Language')];			package: #'ClockSystem-Composition' with: [				spec requires: #('ClockSystem-Language' 'CartesianProduct')];			package: #'ClockSystem-Simulation' with: [				spec requires: #('ClockSystem-Composition')];			package: #'ClockSystem-TraceExtraction' with: [				spec requires: #('ClockSystem-Composition')];			package: #'ClockSystem-Transformations' with: [				spec requires: #('ClockSystem-Composition')];			package: #'ClockSystem-Tristate';			package: #'ClockSystem-BDD-Composition' with: [				spec requires: #('ClockSystem-Composition' BuDDy 'ClockSystem-Tristate')];			package: #'ClockSystem-Tristate-Composition' with: [				spec requires: #('ClockSystem-Composition' 'ClockSystem-Tristate')];			package: #'ClockSystem-Tests' with: [				spec requires: #('ClockSystem-Composition')];			package: #'ClockSystem-Lib-DATE14' with: [				spec requires: #('ClockSystem-Language')];			package: #'ClockSystem-Lib-MoCML' with: [				spec requires: #('ClockSystem-Language')];			package: #'ClockSystem-UI-Simulator' with: [				spec requires: #('ClockSystem-Composition' 'Glamour')];			package: #'ClockSystem-UI' with: [				spec requires: #('ClockSystem-Composition' 'Glamour')].				spec 			group: 'default' with: #('Core' 'BDD' 'UI' 'Tests' 'Gemoc');			group: 'Core' with: #('ClockSystem-Core' 'ClockSystem-Language' 				'ClockSystem-Lib-Kernel' 'ClockSystem-Composition' 				'ClockSystem-Simulation' 'ClockSystem-TraceExtraction' 				'ClockSystem-Transformations' 'ClockSystem-Tristate' 				'ClockSystem-Tristate-Composition');			group: 'BDD' with: #('ClockSystem-BDD-Composition');			group: 'UI' with: #('ClockSystem-UI-Simulator' 'ClockSystem-UI');			group: 'Tests' with: #('Core' 'ClockSystem-Tests');			group: 'Gemoc' with: #('Core' 'ClockSystem-Lib-DATE14' 'ClockSystem-Lib-MoCML'  ) ].! !!ConfigurationOfClockSystem methodsFor: 'baselines' stamp: 'CiprianTeodorov 4/19/2015 16:06'!baseline20: spec	<version: '2.0-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			GitRepoPath				ifNotNil: [ spec repository: 'filetree://' , GitRepoPath ]				ifNil: [ spec repository: 'bitbucket://CipT/clocksystem.git' ].			spec				project: 'CartesianProduct'				with: [ 					spec						className: 'ConfigurationOfCartesianProduct';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/CartesianProduct/main' ].			spec				project: 'BuDDy'				with: [ 					spec						className: 'ConfigurationOfBuDDy';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/BuDDy/main' ].			spec				project: 'SMark'				with: [ 					spec						className: 'ConfigurationOfSMark';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/StefanMarr/SMark/main/' ].			spec				project: 'ClassicBench'				with: [ 					spec						className: #ConfigurationOfClassicBench;						versionString: #bleedingEdge;						repository: 'http://smalltalkhub.com/mc/ClementBera/classic-bench/main/' ].			spec				package: #'ClockSystem-Core';				package: #'ClockSystem-Language' with: [ spec requires: #('ClockSystem-Core') ];				package: #'ClockSystem-Lib-Kernel' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Composition' with: [ spec requires: #('ClockSystem-Language' 'CartesianProduct') ];				package: #'ClockSystem-Simulation' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-TraceExtraction' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Transformations' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Tristate';				package: #'ClockSystem-BDD-Composition'					with: [ spec requires: #('ClockSystem-Composition' #BuDDy 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tristate-Composition'					with: [ spec requires: #('ClockSystem-Composition' 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tests' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Lib-DATE14' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Lib-MoCML' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-UI-Simulator' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-UI' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Benchmark' with: [ spec requires: #('ClockSystem-Lib-Kernel' 'ClockSystem-BDD-Composition' 'SMark' 'ClassicBench') ].			spec				group: 'default' with: #('Core' 'BDD' 'UI' 'Tests' 'Gemoc' 'Benchmark');				group: 'Core'					with:						#('ClockSystem-Core' 'ClockSystem-Language' 'ClockSystem-Lib-Kernel' 'ClockSystem-Composition' 'ClockSystem-Simulation' 'ClockSystem-TraceExtraction' 'ClockSystem-Transformations' 'ClockSystem-Tristate' 'ClockSystem-Tristate-Composition');				group: 'BDD' with: #('ClockSystem-BDD-Composition');				group: 'UI' with: #('ClockSystem-UI-Simulator' 'ClockSystem-UI');				group: 'Tests' with: #('Core' 'ClockSystem-Tests');				group: 'Gemoc' with: #('Core' 'ClockSystem-Lib-DATE14' 'ClockSystem-Lib-MoCML');				group: 'Benchmark' with: #('ClockSystem-Benchmark') ]! !!ConfigurationOfClockSystem methodsFor: 'baselines' stamp: 'CiprianTeodorov 10/27/2015 21:59'!baseline30: spec	<version: '3.0-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			GitRepoPath				ifNotNil: [ spec repository: 'filetree://' , GitRepoPath ]				ifNil: [ spec repository: 'bitbucket://CipT/clocksystem.git' ].			spec				project: 'CartesianProduct'				with: [ 					spec						className: 'ConfigurationOfCartesianProduct';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/CartesianProduct/main' ].			spec				project: 'BuDDy'				with: [ 					spec						className: 'ConfigurationOfBuDDy';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/BuDDy/main' ].			spec				project: 'SMark'				with: [ 					spec						className: 'ConfigurationOfSMark';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/StefanMarr/SMark/main/' ].			spec				project: 'ClassicBench'				with: [ 					spec						className: #ConfigurationOfClassicBench;						versionString: #bleedingEdge;						repository: 'http://smalltalkhub.com/mc/ClementBera/classic-bench/main/' ].			spec				package: #'ClockSystem-Core';				package: #'ClockSystem-Language' with: [ spec requires: #('ClockSystem-Core') ];				package: #'ClockSystem-Lib-Kernel' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Composition' with: [ spec requires: #('ClockSystem-Language' 'CartesianProduct') ];				package: #'ClockSystem-Simulation' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-TraceExtraction' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Transformations' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Tristate';				package: #'ClockSystem-BDD-Composition'					with: [ spec requires: #('ClockSystem-Composition' #BuDDy 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tristate-Composition'					with: [ spec requires: #('ClockSystem-Composition' 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tests' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Lib-DATE14' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Lib-MoCML' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-UI-Simulator' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-UI' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Benchmark' with: [ spec requires: #('ClockSystem-Lib-Kernel' 'ClockSystem-BDD-Composition' 'SMark' 'ClassicBench') ];				package: #'ClockSystem-MocOS' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-RDL-Core' with: [ spec requires: #('ClockSystem-Language') ].			spec				 group: 'default' with: #('Core' 'BDD' 'UI' 'Tests' 'Gemoc' 'Benchmark' 'MocOS' 'RDL');				group: 'Core'					with:						#('ClockSystem-Core' 'ClockSystem-Language' 'ClockSystem-Lib-Kernel' 'ClockSystem-Composition' 'ClockSystem-Simulation' 'ClockSystem-TraceExtraction' 'ClockSystem-Transformations' 'ClockSystem-Tristate' 'ClockSystem-Tristate-Composition');				group: 'BDD' with: #('ClockSystem-BDD-Composition');				group: 'UI' with: #('ClockSystem-UI-Simulator' 'ClockSystem-UI');				group: 'Tests' with: #('Core' 'ClockSystem-Tests');				group: 'Gemoc' with: #('Core' 'ClockSystem-Lib-DATE14' 'ClockSystem-Lib-MoCML');				group: 'Benchmark' with: #('ClockSystem-Benchmark');				group: 'MocOS' with: #('ClockSystem-MocOS');				group: 'RDL' with: #('ClockSystem-RDL-Core')]! !!ConfigurationOfClockSystem methodsFor: 'baselines' stamp: 'CiprianTeodorov 11/3/2015 03:44'!baseline40: spec	<version: '4.0-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			GitRepoPath				ifNotNil: [ spec repository: 'filetree://' , GitRepoPath ]				ifNil: [ spec repository: 'bitbucket://CipT/clocksystem.git' ].			spec				project: 'CartesianProduct'				with: [ 					spec						className: 'ConfigurationOfCartesianProduct';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/CartesianProduct/main' ].			spec				project: 'BuDDy'				with: [ 					spec						className: 'ConfigurationOfBuDDy';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/CipT/BuDDy/main' ].			spec				project: 'SMark'				with: [ 					spec						className: 'ConfigurationOfSMark';						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/StefanMarr/SMark/main/' ].			spec				project: 'ClassicBench'				with: [ 					spec						className: #ConfigurationOfClassicBench;						versionString: #bleedingEdge;						repository: 'http://smalltalkhub.com/mc/ClementBera/classic-bench/main/' ].			spec				project: 'OSProcess'				with: [ 					spec 						className: #ConfigurationOfOSProcess;						versionString: #stable;						repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main/'].			spec				project: 'PetitStyler'				with: [ 					spec						className: 'ConfigurationOfPetitStyler';						versionString: #'stable';						repository: 'http://smalltalkhub.com/mc/CipT/PetitStyler/main'].			spec project: 'PetitParser' with: [				spec					className: 'ConfigurationOfPetitParser';					versionString: #'stable';					loads: #('Core' 'PetitAnalyzer');					repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main/' ].			spec				package: #'ClockSystem-Core';				package: #'ClockSystem-Language' with: [ spec requires: #('ClockSystem-Core') ];				package: #'ClockSystem-Lib-Kernel' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Composition' with: [ spec requires: #('ClockSystem-Language' 'CartesianProduct') ];				package: #'ClockSystem-Simulation' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-TraceExtraction' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Transformations' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Tristate';				package: #'ClockSystem-BDD-Composition'					with: [ spec requires: #('ClockSystem-Composition' #BuDDy 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tristate-Composition'					with: [ spec requires: #('ClockSystem-Composition' 'ClockSystem-Tristate') ];				package: #'ClockSystem-Tests' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Lib-DATE14' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-Lib-MoCML' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-UI-Simulator' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-UI' with: [ spec requires: #('ClockSystem-Composition') ];				package: #'ClockSystem-Benchmark' with: [ spec requires: #('ClockSystem-Lib-Kernel' 'ClockSystem-BDD-Composition' 'SMark' 'ClassicBench') ];				package: #'ClockSystem-MocOS' with: [ spec requires: #('ClockSystem-Language') ];				package: #'ClockSystem-RDL-Core' with: [ spec requires: #('ClockSystem-Language' 'OSProcess' 'PetitParser' 'PetitStyler') ].			spec				 group: 'default' with: #('Core' 'BDD' 'UI' 'Tests' 'Gemoc' 'Benchmark' 'MocOS' 'RDL');				group: 'Core'					with:						#('ClockSystem-Core' 'ClockSystem-Language' 'ClockSystem-Lib-Kernel' 'ClockSystem-Composition' 'ClockSystem-Simulation' 'ClockSystem-TraceExtraction' 'ClockSystem-Transformations' 'ClockSystem-Tristate' 'ClockSystem-Tristate-Composition');				group: 'BDD' with: #('ClockSystem-BDD-Composition');				group: 'UI' with: #('ClockSystem-UI-Simulator' 'ClockSystem-UI');				group: 'Tests' with: #('Core' 'ClockSystem-Tests');				group: 'Gemoc' with: #('Core' 'ClockSystem-Lib-DATE14' 'ClockSystem-Lib-MoCML');				group: 'Benchmark' with: #('ClockSystem-Benchmark');				group: 'MocOS' with: #('ClockSystem-MocOS');				group: 'RDL' with: #('ClockSystem-RDL-Core')]! !!ConfigurationOfClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 21:39'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfClockSystem methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 11/1/2015 19:25'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '2.0'.! !!ConfigurationOfClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 21:39'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfClockSystem methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 11/7/2014 12:02'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.! !!ConfigurationOfClockSystem methodsFor: 'versions' stamp: 'CiprianTeodorov 4/18/2015 18:16'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'initial version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '10/21/2014 22:49'.		spec 			project: 'Glamour' with: '2.6-snapshot';			package: #'ClockSystem-Core' with: 'ClockSystem-Core-CiprianTeodorov.7';			package: #'ClockSystem-Language' with: 'ClockSystem-Language-CiprianTeodorov.17';			package: #'ClockSystem-Lib-Kernel' with: 'ClockSystem-Lib-Kernel-CiprianTeodorov.9';			package: #'ClockSystem-Composition' with: 'ClockSystem-Composition-CiprianTeodorov.20';			package: #'ClockSystem-Simulation' with: 'ClockSystem-Simulation-CiprianTeodorov.11';			package: #'ClockSystem-TraceExtraction' with: 'ClockSystem-TraceExtraction-CiprianTeodorov.3';			package: #'ClockSystem-Transformations' with: 'ClockSystem-Transformations-CiprianTeodorov.5';			package: #'ClockSystem-Tristate' with: 'ClockSystem-Tristate-CiprianTeodorov.1';			package: #'ClockSystem-BDD-Composition' with: 'ClockSystem-BDD-Composition-CiprianTeodorov.6';			package: #'ClockSystem-Tristate-Composition' with: 'ClockSystem-Tristate-Composition-CiprianTeodorov.1';			package: #'ClockSystem-Tests' with: 'ClockSystem-Tests-CiprianTeodorov.9';			package: #'ClockSystem-Lib-DATE14' with: 'ClockSystem-Lib-DATE14-CiprianTeodorov.4';			package: #'ClockSystem-Lib-MoCML' with: 'ClockSystem-Lib-MoCML-CiprianTeodorov.2';			package: #'ClockSystem-UI-Simulator' with: 'ClockSystem-UI-Simulator-CiprianTeodorov.3';			package: #'ClockSystem-UI' with: 'ClockSystem-UI-CiprianTeodorov.2'. ].! !!ConfigurationOfClockSystem methodsFor: 'versions' stamp: 'CiprianTeodorov 4/18/2015 18:16'!version11: spec	<version: '1.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'initial version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '11/7/2014 12:01'.		spec 			project: 'Glamour' with: '2.6-snapshot';			package: #'ClockSystem-Core' with: 'ClockSystem-Core-CiprianTeodorov.7';			package: #'ClockSystem-Language' with: 'ClockSystem-Language-CiprianTeodorov.18';			package: #'ClockSystem-Lib-Kernel' with: 'ClockSystem-Lib-Kernel-CiprianTeodorov.9';			package: #'ClockSystem-Composition' with: 'ClockSystem-Composition-CiprianTeodorov.20';			package: #'ClockSystem-Simulation' with: 'ClockSystem-Simulation-CiprianTeodorov.11';			package: #'ClockSystem-TraceExtraction' with: 'ClockSystem-TraceExtraction-CiprianTeodorov.3';			package: #'ClockSystem-Transformations' with: 'ClockSystem-Transformations-CiprianTeodorov.5';			package: #'ClockSystem-Tristate' with: 'ClockSystem-Tristate-CiprianTeodorov.1';			package: #'ClockSystem-BDD-Composition' with: 'ClockSystem-BDD-Composition-CiprianTeodorov.6';			package: #'ClockSystem-Tristate-Composition' with: 'ClockSystem-Tristate-Composition-CiprianTeodorov.1';			package: #'ClockSystem-Tests' with: 'ClockSystem-Tests-CiprianTeodorov.9';			package: #'ClockSystem-Lib-DATE14' with: 'ClockSystem-Lib-DATE14-CiprianTeodorov.4';			package: #'ClockSystem-Lib-MoCML' with: 'ClockSystem-Lib-MoCML-CiprianTeodorov.4';			package: #'ClockSystem-UI-Simulator' with: 'ClockSystem-UI-Simulator-CiprianTeodorov.3';			package: #'ClockSystem-UI' with: 'ClockSystem-UI-CiprianTeodorov.2';			package: #'ClockSystem-Benchmark' with: 'ClockSystem-Benchmark-CiprianTeodorov.1'. ].! !!ConfigurationOfClockSystem methodsFor: 'versions' stamp: 'CiprianTeodorov 4/19/2015 16:02'!version12: spec	<version: '1.2' imports: #('2.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'filetree repo path support'.		spec author: 'CiprianTeodorov'.		spec timestamp: '16/4/2015 17:39'.		spec 			project: 'Glamour' with: '2.6-snapshot' ].! !!ConfigurationOfClockSystem methodsFor: 'versions' stamp: 'CiprianTeodorov 10/27/2015 22:00'!version13: spec	<version: '1.3' imports: #('3.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'filetree repo path support'.		spec author: 'CiprianTeodorov'.		spec timestamp: '16/4/2015 17:39'. ].! !!ConfigurationOfClockSystem methodsFor: 'versions' stamp: 'CiprianTeodorov 11/1/2015 19:25'!version20: spec	<version: '2.0' imports: #('4.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'ClockRDL integration'.		spec author: 'CiprianTeodorov'.		spec timestamp: '01/11/2015 19:25'. ].! !"ConfigurationOfClockSystem"!----QUIT----2016-01-05T15:12:18.016297+01:00 ClockSystem.image priorSource: 361602!----STARTUP----2016-01-05T15:12:18.23744+01:00 as /var/lib/jenkins/jobs/ClockSystemP4/workspace/ClockSystem.image!!ConfigurationOfBuDDy class methodsFor: 'development support' stamp: 'CiprianTeodorov 3/19/2014 10:30'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfBuDDy class methodsFor: 'private' stamp: 'CiprianTeodorov 3/19/2014 10:30'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfBuDDy class methodsFor: 'private' stamp: 'CiprianTeodorov 3/19/2014 10:30'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfBuDDy class methodsFor: 'private' stamp: 'CiprianTeodorov 3/19/2014 10:30'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfBuDDy class methodsFor: 'metacello tool support' stamp: 'CiprianTeodorov 3/19/2014 10:30'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfBuDDy class methodsFor: 'loading' stamp: 'CiprianTeodorov 3/19/2014 10:30'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfBuDDy class methodsFor: 'loading' stamp: 'CiprianTeodorov 3/19/2014 10:30'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfBuDDy class methodsFor: 'loading' stamp: 'CiprianTeodorov 3/19/2014 10:30'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfBuDDy class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 10:30'!project	^self new project! !!ConfigurationOfBuDDy class methodsFor: 'development support' stamp: 'CiprianTeodorov 3/19/2014 10:30'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfBuDDy methodsFor: 'baselines' stamp: 'CiprianTeodorov 3/19/2014 10:58'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/BuDDy/main'.		spec project: 'TalkFFI' with: [				spec					className: 'ConfigurationOfTalkFFI';					versionString: #'development';					loads: #('Runtime');					repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main' ].		spec package: 'BuDDy' with: [				spec requires: #('TalkFFI' ). ].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('BuDDy' ). ].! !!ConfigurationOfBuDDy methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 10:30'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfBuDDy methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 4/16/2015 18:44'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1'.! !!ConfigurationOfBuDDy methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 10:30'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfBuDDy methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 4/16/2015 18:44'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.1'.! !!ConfigurationOfBuDDy methodsFor: 'versions' stamp: 'CiprianTeodorov 3/19/2014 10:58'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- initial version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '3/19/2014 10:32'.		spec project: 'TalkFFI' with: '1.5'.		spec package: 'BuDDy' with: 'BuDDy-CiprianTeodorov.1'. ].! !!ConfigurationOfBuDDy methodsFor: 'versions' stamp: 'CiprianTeodorov 4/18/2015 11:17'!version11: spec	<version: '1.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'version fixing allsathandler'.		spec author: 'CiprianTeodorov'.		spec timestamp: '3/19/2014 10:32'.		spec project: 'TalkFFI' with: '1.5'.		spec package: 'BuDDy' with: 'BuDDy-CiprianTeodorov.8'. ].! !"ConfigurationOfBuDDy"!!ConfigurationOfSMark class methodsFor: 'development support' stamp: 'StefanMarr 7/5/2013 11:09'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfSMark class methodsFor: 'private' stamp: 'StefanMarr 7/5/2013 11:09'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfSMark class methodsFor: 'catalog' stamp: 'StefanMarr 3/28/2014 14:06'!catalogChangeLog	"Returns a paragraph describing the most important changes in the configuration class."	^ '- 1.0.1 - 3/28/2014 - minor change: SMarkSuite subclasses can specify which variables need to be preserved.- 1.0.0 - 7/05/2013 - first stable version[[[	ConfigurationOfSMark project version: ''1.0.1'' ) load					]]]'! !!ConfigurationOfSMark class methodsFor: 'catalog' stamp: 'StefanMarr 3/12/2014 14:22'!catalogContactInfo	"Returns a paragraph describing contact information such as email, mailing lists and website."	^ 'Stefan Marr <smalltalk@stefan-marr.de>'! !!ConfigurationOfSMark class methodsFor: 'catalog' stamp: 'StefanMarr 3/12/2014 14:28'!catalogDescription	"Returns a paragraph describing the project"	^ '!!SMark - Write Benchmarks like TestsSMark is the attempt to build a common benchmarking framework for Smalltalk.It inspired by unit testing in SUnit and following this idea, a benchmark is implemented by adding ==#benchMyBenchmark== to a subclass of ==SMarkSuite==. This enables performance regression tracking in the same way as unit-testing allows to track functional regressions.The code is originally based on ==PBenchmark==, the benchmark framework used for the PinocchioVM and ==RoarBenchmark==, a framework used for performance regression testing of the *RoarVM>https://github.com/smarr/RoarVM*.Other sources of inspiration are for instance the *Caliper>http://code.google.com/p/caliper/* microbenchmarking framework for Java.The name choice of SMark is deliberately confusable with smark (as defined by the urban dictionary: Noun. A person who is being scamed but is in on the prank. Someone who knows they are being tricked. Its origin is from the term "mark" and is the shortened form of the phrase "smart mark".) freely following the old wisdom: "Lies, Damn Lies, and --Statistics-- Benchmarks"'! !!ConfigurationOfSMark class methodsFor: 'catalog' stamp: 'StefanMarr 3/12/2014 14:30'!catalogKeyClassesAndExample	"Returns a paragraph or more describing the key classes of your project. You can use Pillar/Pier syntax to layout out the text i.e., ==Code== and - for bullet."	^ 'SMark uses ==SMarkSuite== as the base class for benchmark suites. To see examples, have a look at its subclasses.==SMarkHarness== stears the actual execution and reporting. The class comments gives a few more details on the basic usage.'! !!ConfigurationOfSMark class methodsFor: 'catalog' stamp: 'StefanMarr 3/12/2014 14:30'!catalogKeywords	"Returns an array of symbols"	^ #(benchmarking performance measurement reporting) ! !!ConfigurationOfSMark class methodsFor: 'private' stamp: 'StefanMarr 7/5/2013 11:09'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfSMark class methodsFor: 'private' stamp: 'StefanMarr 7/5/2013 11:09'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfSMark class methodsFor: 'metacello tool support' stamp: 'StefanMarr 7/5/2013 11:09'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfSMark class methodsFor: 'loading' stamp: 'StefanMarr 7/5/2013 11:09'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfSMark class methodsFor: 'loading' stamp: 'StefanMarr 7/5/2013 11:09'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfSMark class methodsFor: 'loading' stamp: 'StefanMarr 7/5/2013 11:09'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfSMark class methodsFor: 'accessing' stamp: 'StefanMarr 7/5/2013 11:09'!project	^self new project! !!ConfigurationOfSMark class methodsFor: 'development support' stamp: 'StefanMarr 7/5/2013 11:09'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'StefanMarr 7/5/2013 11:18'!baseline100: spec	<version: '1.0.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/StefanMarr/SMark/main'.				spec package: 'Scripting'.		spec package: 'SMark' with: [ spec requires: #(Scripting) ].	].! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'StefanMarr 7/5/2013 11:19'!baseline110: spec	<version: '1.1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/StefanMarr/SMark/main'.				spec package: 'Scripting'.		spec package: 'SMark' with: [ spec requires: #(Scripting) ].	].! !!ConfigurationOfSMark methodsFor: 'accessing' stamp: 'StefanMarr 7/5/2013 11:09'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'MartinDias 4/11/2014 16:56'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1.0-baseline'.! !!ConfigurationOfSMark methodsFor: 'accessing' stamp: 'StefanMarr 7/5/2013 11:09'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'StefanMarr 7/5/2013 11:19'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0.0'.! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'StefanMarr 7/5/2013 11:24'!version100: spec	<version: '1.0.0' imports: #('1.0.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: ''.		spec author: 'StefanMarr'.		spec timestamp: '7/05/2013 11:30'.				spec			package: 'Scripting'          with: 'Scripting-StefanMarr.23';			package: 'SMark'              with: 'SMark-StefanMarr.51'].! !!ConfigurationOfSMark methodsFor: 'baselines' stamp: 'StefanMarr 3/28/2014 14:49'!version101: spec	<version: '1.0.1' imports: #('1.0.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: ''.		spec author: 'StefanMarr'.		spec timestamp: '3/28/2014 14:04'.				spec			package: 'Scripting'          with: 'Scripting-StefanMarr.23';			package: 'SMark'              with: 'SMark-MartinDias.52'].! !"ConfigurationOfSMark"!!ConfigurationOfOSProcess commentStamp: '<historical>' prior: 0!OSProcess provides access to operating system functions, including pipes and child process creation. It is implemented using pluggable primitives in a shared library for Unix or Linux, and a DLL for Windows. The Smalltalk code, including the classes which implement pluggable primitives for Unix or Win32 operating system functions, may be loaded into any Squeak image, but the primitives are only useful on Unix and Windows systems. Placeholder classes are provided for MacOS, OS/2 and RiscOS, but are not yet implemented.ConfigurationOfOSProcess project stableVersion load.!!ConfigurationOfOSProcess commentStamp: '<historical>' prior: 33955871!OSProcess provides access to operating system functions, including pipes and child process creation. It is implemented using pluggable primitives in a shared library for Unix or Linux, and a DLL for Windows. The Smalltalk code, including the classes which implement pluggable primitives for Unix or Win32 operating system functions, may be loaded into any Squeak image, but the primitives are only useful on Unix and Windows systems. Placeholder classes are provided for MacOS, OS/2 and RiscOS, but are not yet implemented.ConfigurationOfOSProcess project stableVersion load.!!ConfigurationOfOSProcess class methodsFor: 'private' stamp: 'MiguelCoba 1/12/2010 23:39'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfOSProcess class methodsFor: 'private' stamp: 'MiguelCoba 1/12/2010 23:39'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfOSProcess class methodsFor: 'metacello tool support' stamp: 'MiguelCoba 1/12/2010 23:39'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfOSProcess class methodsFor: 'metacello tool support' stamp: 'MiguelCoba 1/12/2010 23:39'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfOSProcess class methodsFor: 'loading' stamp: 'dtl 7/1/2010 21:18'!load	"self load"	| r |	r := self project latestVersion load.	(Smalltalk at: #ThisOSProcess) ifNotNilDo: [ :osp | osp startUp: true ] "initialize"! !!ConfigurationOfOSProcess class methodsFor: 'metacello tool support' stamp: 'MiguelCoba 1/12/2010 23:39'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfOSProcess class methodsFor: 'accessing' stamp: 'MiguelCoba 1/12/2010 23:39'!project	^self new project! !!ConfigurationOfOSProcess methodsFor: 'baselines' stamp: 'MiguelCoba 2/19/2011 01:33'!baseline4312: spec	<version: '4.3.12-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Initial baseline for OSProcess'.		spec repository: 'http://www.squeaksource.com/OSProcess' ].		spec for: #squeakCommon do: [		spec			repository: 'http://www.squeaksource.com/OSProcess';			package: 'OSProcess-Base';   			package: 'OSProcess-AIO' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-Mac' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-OS2' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-RiscOS' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-Unix' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-Win32' with: [ spec requires: 'OSProcess-Base' ];  			package: 'OSProcess-Tests' with: [ spec requires: 'OSProcess-Base' ] ].		spec for: #common do: [		spec			group: 'default' with: #('OSProcess' 'OSProcess-AIO' 'Tests');			group: 'OSProcess' with: #('OSProcess-Base' 'Platforms');			group: 'Platforms' with: 'OSProcess-Mac';			group: 'Platforms' with: 'OSProcess-OS2';			group: 'Platforms' with: 'OSProcess-RiscOS';			group: 'Platforms' with: 'OSProcess-Unix';			group: 'Platforms' with: 'OSProcess-Win32';			group: 'Tests' with: 'OSProcess-Tests' ].! !!ConfigurationOfOSProcess methodsFor: 'baselines' stamp: 'MiguelCoba 1/13/2010 13:10'!baseline43: spec	<version: '4.3-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Initial baseline for OSProcess'.		spec repository: 'http://www.squeaksource.com/OSProcess' ].		spec for: #squeakCommon do: [		spec			repository: 'http://www.squeaksource.com/OSProcess';			package: 'OSProcess';  			package: 'Tests-OSProcess' with: [ spec requires: 'OSProcess' ] ].		spec for: #common do: [		spec			group: 'default' with: 'OSProcess';			group: 'Tests' with: 'Tests-OSProcess' ].! !!ConfigurationOfOSProcess methodsFor: 'baselines' stamp: 'SeanDeNigris 2/12/2013 10:05'!baseline446: spec	<version: '4.4.6-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'Load the OSProcess-* packages instead of the OSProcess all-in-one package.David Lewis has said that these packages will be kept in sync with the al-in-one and this will give us greater flexibility in what to load.For example, we can now optionally load the tests. This seemed possible with the previous version, but actually the tests were always loaded as part of the all-in-one'.		spec repository: 'http://www.squeaksource.com/OSProcess'.		spec project: 'Pipeability' with: [			spec				repository: 'http://www.squeaksource.com/MetacelloRepository';				className: 'ConfigurationOfCommandShell';				loads: #('Piping') ].		spec 			package: 'OSProcess-AIO';			package: 'OSProcess-Base' with: [ spec requires: #('OSProcess-AIO') ];			package: 'OSProcess-OS2' with: [ spec requires: #('OSProcess-Base') ];			package: 'OSProcess-Win32' with: [ spec requires: #('OSProcess-Base') ];			package: 'OSProcess-Unix' with: [ spec requires: #('OSProcess-Base') ];			package: 'OSProcess-Mac' with: [ spec requires: #('OSProcess-Base') ];			package: 'OSProcess-RiscOS' with: [ spec requires: #('OSProcess-Base') ];			package: 'OSProcess-Tests' with: [ spec requires: #('OSProcess-Base') ].		spec			group: 'All OS' with: #('OSProcess-OS2' 'OSProcess-Win32' 'OSProcess-Unix' 'OSProcess-Mac' 'OSProcess-RiscOS');			group: 'Core' with: #('OSProcess-AIO' 'OSProcess-Base' 'All OS');			group: 'Core with Output' with: #('Core' 'Pipeability');			group: 'Tests' with: #('OSProcess-Tests' ). ].! !!ConfigurationOfOSProcess methodsFor: 'baselines' stamp: 'MiguelCoba 2/19/2011 01:53'!baseline44: spec	<version: '4.4-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://www.squeaksource.com/OSProcess'.		spec 			package: 'OSProcess';			package: 'OSProcess-Tests' with: [				spec requires: #('OSProcess' ). ].		spec 			group: 'default' with: #('OSProcess' );			group: 'Tests' with: #('OSProcess-Tests' ). ].! !!ConfigurationOfOSProcess methodsFor: 'private' stamp: 'SeanDeNigris 2/12/2013 10:24'!loadType	self flag: 'OSProcess''s packages are highly interdependent (some circular), so we must load atomically for now. After these issues are resolved, this can be shanged to #linear'.	^ #atomic.! !!ConfigurationOfOSProcess methodsFor: 'accessing' stamp: 'SeanDeNigris 7/6/2012 11:04'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: self loadType.		project ]! !!ConfigurationOfOSProcess methodsFor: 'symbolic versions' stamp: 'ThierryGoubier 6/18/2015 07:22'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '4.6.4'.	spec for: #'pharo1.4.x' version: '4.4.6'.	spec for: #'pharo2.x' version: '4.5.8'.! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'MiguelCoba 1/14/2010 00:31'!version4311: spec	<version: '4.3.11' imports: #('4.3-baseline')>		spec for: #common do: [		spec blessing: #development.		spec description: 'Release 4.3.11'.		spec author: 'MiguelCoba'.		spec timestamp: '01/14/2010 00:30' ].		spec for: #squeakCommon do: [		spec		  	package: 'OSProcess' with: 'OSProcess-dtl.53';			package: 'Tests-OSProcess' with: 'Tests-OSProcess-dtl.20' ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'MiguelCoba 2/19/2011 01:32'!version4312: spec	<version: '4.3.12' imports: #('4.3.12-baseline')>		spec for: #common do: [		spec blessing: #development.		spec description: 'Release 4.3.12'.		spec author: 'dtl'.		spec timestamp: '06/30/2010 19:55' ].		spec for: #squeakCommon do: [		spec		  	package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.4';		  	package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.1';		  	package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.1';		  	package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.1';		  	package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.1';		  	package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.3';		  	package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.2';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.1' ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'mt 6/9/2011 13:25:13.015'!version440: spec	<version: '4.4.0' imports: #('4.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Version 4.4.0'.		spec author: 'MiguelCoba'.		spec timestamp: '2/19/2011 01:59'.		spec 			package: 'OSProcess' with: 'OSProcess-dtl.59';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.4'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'mt 6/9/2011 13:25:09.479'!version442: spec	<version: '4.4.2' imports: #('4.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Version 4.4.2'.		spec author: 'MiguelCoba'.		spec timestamp: '5/29/2011 12:34'.		spec 			package: 'OSProcess' with: 'OSProcess-dtl.61';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.4'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'mt 9/28/2011 14:14:43.783'!version445: spec	<version: '4.4.5' imports: #('4.4-baseline' )>	spec for: #'common' do: [		spec blessing: #release.		spec description: 'Version 4.4.5'.		spec author: 'Marcel Taeumel'.		spec timestamp: '9/28/2011 14:00'.		spec 			package: 'OSProcess' with: 'OSProcess-dtl.65';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.7'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'SeanDeNigris 2/12/2013 10:06'!version446: spec	<version: '4.4.6' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'SeanDeNigris'.		spec timestamp: '7/5/2012 12:57'.		spec project: 'Pipeability' with: [ spec version: '1.0' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.9';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.20';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.1';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.7';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.12';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.1';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.4';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.1'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 10/5/2014 09:34'!version4511: spec	<version: '4.5.11' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '6/18/2014 16:42'.		spec project: 'Pipeability' with: [ spec version: '4.6.8' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.11';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.43';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.11';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.19';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 10/10/2014 16:38'!version4512: spec	<version: '4.5.12' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '6/18/2014 16:42'.		spec project: 'Pipeability' with: [ spec version: '4.6.9' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.11';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.45';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.11';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.20';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 2/1/2015 10:05'!version4513: spec	<version: '4.5.13' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '6/18/2014 16:42'.		spec project: 'Pipeability' with: [ spec version: '4.6.9' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.11';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.45';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.12';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.20';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 9/23/2013 10:36'!version457: spec	<version: '4.5.7' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '9/23/2013 10:36'.		spec project: 'Pipeability' with: [ spec version: '4.6.7' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.11';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.37';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.9';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.17';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 10/24/2013 17:38'!version458: spec	<version: '4.5.8' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '9/23/2013 10:36'.		spec project: 'Pipeability' with: [ spec version: '4.6.7' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.11';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.39';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.9';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.17';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'SeanDeNigris 2/12/2013 10:07'!version45: spec	<version: '4.5' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'StephaneDucasse'.		spec timestamp: '10/02/2013 12:57'.		spec project: 'Pipeability' with: [ spec version: '1.1' ].		spec 			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.10';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.27';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.9';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.15';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.5';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 4/25/2015 18:23'!version462: spec	<version: '4.6.2' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '6/18/2014 16:42'.		spec project: 'Pipeability' with: [ spec version: '4.6.12' ].		spec 			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.49';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.13';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.23';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.14'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 6/18/2015 07:22'!version463: spec	<version: '4.6.3' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Update to latest package versions'.		spec author: 'ThierryGoubier'.		spec timestamp: '6/17/2015 20:06'.		spec project: 'Pipeability' with: [ spec version: '4.6.13' ].		spec 			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.50';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.14';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.24';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.14'. ].! !!ConfigurationOfOSProcess methodsFor: 'versions' stamp: 'ThierryGoubier 7/6/2015 19:14'!version464: spec	<version: '4.6.4' imports: #('4.4.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Updated to CommandShell 4.6.15'.		spec author: 'ThierryGoubier'.		spec timestamp: '7/6/2015 19:13'.		spec project: 'Pipeability' with: [ spec version: '4.6.15' ].		spec 			package: 'OSProcess-AIO' with: 'OSProcess-AIO-dtl.8';			package: 'OSProcess-Base' with: 'OSProcess-Base-dtl.51';			package: 'OSProcess-Mac' with: 'OSProcess-Mac-dtl.2';			package: 'OSProcess-OS2' with: 'OSProcess-OS2-dtl.2';			package: 'OSProcess-RiscOS' with: 'OSProcess-RiscOS-dtl.2';			package: 'OSProcess-Tests' with: 'OSProcess-Tests-dtl.14';			package: 'OSProcess-Unix' with: 'OSProcess-Unix-dtl.24';			package: 'OSProcess-Win32' with: 'OSProcess-Win32-dtl.14'. ].! !"ConfigurationOfOSProcess"!!ConfigurationOfClassicBench class methodsFor: 'development support' stamp: 'ClementBera 9/23/2013 11:28'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfClassicBench class methodsFor: 'private' stamp: 'ClementBera 9/23/2013 11:28'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfClassicBench class methodsFor: 'private' stamp: 'ClementBera 9/23/2013 11:28'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfClassicBench class methodsFor: 'private' stamp: 'ClementBera 9/23/2013 11:28'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfClassicBench class methodsFor: 'metacello tool support' stamp: 'ClementBera 9/23/2013 11:28'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfClassicBench class methodsFor: 'loading' stamp: 'ClementBera 9/23/2013 11:28'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfClassicBench class methodsFor: 'loading' stamp: 'ClementBera 9/23/2013 11:28'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfClassicBench class methodsFor: 'loading' stamp: 'ClementBera 9/23/2013 11:28'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfClassicBench class methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 11:28'!project	^self new project! !!ConfigurationOfClassicBench class methodsFor: 'transporter' stamp: 'ClementBera 9/23/2013 11:28'!saveWithTransporter	"Will save the package in file-out format using the Transporter infrastructure"	self transporters		ifNotNilDo: [:transporters | 			transporters do: [:t | t saveNoPopup ]].! !!ConfigurationOfClassicBench class methodsFor: 'transporter' stamp: 'ClementBera 9/23/2013 11:28'!subPackages	"Specifies the names of all logical subpackages of the Benchmarking package."	"TODO: have a versioning for this, to better comply with the Metacello approach."	^ {	'SMark'.		'Scripting'.		'NPB'.		'CL-Benchmarks-Game'.	}! !!ConfigurationOfClassicBench class methodsFor: 'transporter' stamp: 'ClementBera 9/23/2013 11:28'!transporters	"Returns the transporters that define how to file out the different packages for versioning with Git."	Smalltalk globals at: #Transporter ifPresent: [ :tpCls |		^ self subPackages collect: [:pkg | tpCls forPackage: (PackageInfo named: pkg) ]	].		" Else "	^ nil.! !!ConfigurationOfClassicBench class methodsFor: 'transporter' stamp: 'ClementBera 9/23/2013 11:28'!transportersForFileOutMenu	^ self transporters! !!ConfigurationOfClassicBench class methodsFor: 'development support' stamp: 'ClementBera 9/23/2013 11:28'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfClassicBench methodsFor: 'baselines' stamp: 'ClementBera 9/27/2013 16:32'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/ClementBera/classic-bench/main'.		spec package: 'SMark-DeltaBlue'.		spec package: 'SMark-Richards'.		spec package: 'SMark-Jenkins'.	].! !!ConfigurationOfClassicBench methodsFor: 'symbolic versions' stamp: 'ClementBera 9/23/2013 11:28'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1'.! !!ConfigurationOfClassicBench methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 11:28'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfClassicBench methodsFor: 'symbolic versions' stamp: 'ClementBera 9/23/2013 11:29'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '0.1'.! !"ConfigurationOfClassicBench"!!ConfigurationOfCartesianProduct class methodsFor: 'development support' stamp: 'CiprianTeodorov 10/21/2014 22:25'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfCartesianProduct class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 22:25'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #'ConfigurationOf'		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #'ConfigurationOf' ifAbsent: aBlock ].! !!ConfigurationOfCartesianProduct class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 22:25'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfCartesianProduct class methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 22:25'!ensureMetacelloBaseConfiguration  Smalltalk    at: #'ConfigurationOf'    ifAbsent: [       | repository version |      repository := MCHttpRepository        location: 'http://smalltalkhub.com/mc/dkh/metacello/main'        user: ''        password: ''.      repository        versionReaderForFileNamed: 'Metacello-Base-dkh.107'        do: [ :reader |           version := reader version.          version load.          version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfCartesianProduct class methodsFor: 'metacello tool support' stamp: 'CiprianTeodorov 10/21/2014 22:25'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfCartesianProduct class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 22:25'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfCartesianProduct class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 22:25'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfCartesianProduct class methodsFor: 'loading' stamp: 'CiprianTeodorov 10/21/2014 22:25'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfCartesianProduct class methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 22:25'!project	^self new project! !!ConfigurationOfCartesianProduct class methodsFor: 'development support' stamp: 'CiprianTeodorov 10/21/2014 22:25'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfCartesianProduct methodsFor: 'baselines' stamp: 'CiprianTeodorov 10/21/2014 22:28'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/CartesianProduct/main'.		spec 			package: #'CartesianProduct'.				spec 			group: 'default' with: #('Core');			group: 'Core' with: #('CartesianProduct') ].! !!ConfigurationOfCartesianProduct methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 22:25'!customProjectAttributes    "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes "    ^ #()! !!ConfigurationOfCartesianProduct methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 22:25'!project    ^ project        ifNil: [             "Bootstrap Metacello if it is not already loaded"            self class ensureMetacello.            project := MetacelloMCProject new projectAttributes: self customProjectAttributes.	"Create the Metacello project"            (Smalltalk at: #'MetacelloVersionConstructor') on: self project: project.	"Construct the project"            project loadType: #'linear'.	"change to #atomic if desired"            project ]! !!ConfigurationOfCartesianProduct methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 5/1/2015 15:27'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '2.0'.! !!ConfigurationOfCartesianProduct methodsFor: 'versions' stamp: 'CiprianTeodorov 10/21/2014 22:30'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'initial version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '21/10/2014 22:30'.		spec 			package: 'CartesianProduct' with: 'CartesianProduct-CiprianTeodorov.2'].! !!ConfigurationOfCartesianProduct methodsFor: 'versions' stamp: 'CiprianTeodorov 5/1/2015 15:27'!version20: spec	<version: '2.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'multiple algorithms'.		spec author: 'CiprianTeodorov'.		spec timestamp: '01/05/2015 15:27'.		spec 			package: 'CartesianProduct' with: 'CartesianProduct-CiprianTeodorov.3'].! !"ConfigurationOfCartesianProduct"!!ConfigurationOfPetitStyler class methodsFor: 'development support' stamp: 'CiprianTeodorov 11/3/2015 01:56'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfPetitStyler class methodsFor: 'private' stamp: 'CiprianTeodorov 11/3/2015 01:56'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfPetitStyler class methodsFor: 'private' stamp: 'CiprianTeodorov 11/3/2015 01:56'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfPetitStyler class methodsFor: 'private' stamp: 'CiprianTeodorov 11/3/2015 01:56'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfPetitStyler class methodsFor: 'metacello tool support' stamp: 'CiprianTeodorov 11/3/2015 01:56'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfPetitStyler class methodsFor: 'loading' stamp: 'CiprianTeodorov 11/3/2015 01:56'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfPetitStyler class methodsFor: 'loading' stamp: 'CiprianTeodorov 11/3/2015 01:56'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfPetitStyler class methodsFor: 'loading' stamp: 'CiprianTeodorov 11/3/2015 01:56'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfPetitStyler class methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/3/2015 01:56'!project	^self new project! !!ConfigurationOfPetitStyler class methodsFor: 'development support' stamp: 'CiprianTeodorov 11/3/2015 01:56'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfPetitStyler methodsFor: 'baselines' stamp: 'CiprianTeodorov 11/3/2015 01:56'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/PetitStyler/main'.		spec package: 'PetitStyler'.		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('PetitStyler' ). ].! !!ConfigurationOfPetitStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/3/2015 01:56'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfPetitStyler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 01:59'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfPetitStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/3/2015 01:56'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfPetitStyler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 01:58'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.! !!ConfigurationOfPetitStyler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 01:59'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'initial release'.		spec author: 'CiprianTeodorov'.		spec timestamp: '03/11/2015 19:25'. ].! !"ConfigurationOfPetitStyler"!!ConfigurationOfPetitParser commentStamp: '<historical>' prior: 0!self loadDevelopment!!ConfigurationOfPetitParser commentStamp: '<historical>' prior: 33993981!self loadDevelopment!!ConfigurationOfPetitParser class methodsFor: 'private' stamp: 'FabrizioPerin 4/27/2010 15:04'!ensureMetacello	Smalltalk at: #MetacelloProject ifAbsent: [		Gofer new				url: 'http://seaside.gemstone.com/ss/metacello';				package: 'ConfigurationOfMetacello';				load.		(Smalltalk at: #ConfigurationOfMetacello) loadLatestVersion ]! !!ConfigurationOfPetitParser class methodsFor: 'metacello tool support' stamp: 'tg 4/18/2010 23:51'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfPetitParser class methodsFor: 'loading' stamp: 'JanKurs 4/4/2015 11:47'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfPetitParser class methodsFor: 'loading' stamp: 'TudorGirba 4/21/2013 23:27'!loadDevelopment	(self project version: #development) load! !!ConfigurationOfPetitParser class methodsFor: 'loading' stamp: 'JanKurs 4/1/2015 11:57'!loadPetitParser		(self project version: #development) load: 'Parser'! !!ConfigurationOfPetitParser class methodsFor: 'loading' stamp: 'JanKurs 4/1/2015 11:57'!loadPetitParserIDE		(self project version: #development) load: 'ParserIDE'! !!ConfigurationOfPetitParser class methodsFor: 'loading' stamp: 'JanKurs 4/1/2015 11:17'!loadStable	(self project version: #stable) load! !!ConfigurationOfPetitParser class methodsFor: 'accessing' stamp: 'tg 4/18/2010 23:51'!project	^self new project! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'AlexandreBergel 12/3/2010 09:14'!baseline10: spec 	<version: '1.0-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec author: 'Alexandre Bergel'.		spec description: 'work on Pharo 1.1.1'.		spec repository: 'http://source.lukas-renggli.ch/petit'.		spec 			package: 'PetitParser';			package: 'PetitTests' with: [ spec requires: 'PetitParser'];			package: 'PetitAnalyzer' with: [ spec requires: 'PetitTests'];			package: 'PetitGui' with: [ spec requires: 'Glamour for Petit'].		spec group: 'Core' with: #( 'PetitParser' 'PetitAnalyzer' ).		spec group: 'Tests' with: #( 'PetitTests' 'PetitAnalyzer' ).		spec project: 'Glamour for Petit' with: [				spec					className: 'ConfigurationOfGlamour';					file: 'ConfigurationOfGlamour';					version: '2.0-beta.8';					repository: 'http://www.squeaksource.com/Glamour' ].	]! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'AlexandreBergel 2/18/2011 13:56'!baseline11: spec	<version: '1.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'Preparing Moose 4.3.2'.		spec repository: 'http://source.lukas-renggli.ch/petit'.		spec project: 'Glamour for Petit' with: [				spec					className: 'ConfigurationOfGlamour';					versionString: '2.1';					repository: 'http://www.squeaksource.com/Glamour' ].		spec 			package: 'PetitParser';			package: 'PetitTests' with: [				spec requires: #('PetitParser' ). ];			package: 'PetitAnalyzer' with: [				spec requires: #('PetitTests' ). ];			package: 'PetitGui' with: [				spec requires: #('Glamour for Petit' ). ].		spec 			group: 'Core' with: #('PetitParser' 'PetitAnalyzer' );			group: 'Tests' with: #('PetitTests' 'PetitAnalyzer' ). ].! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'DiegoLont 9/2/2013 11:15'!baseline12: spec	<version: '1.2-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'Describing satellite packages'.		spec repository: 'http://source.lukas-renggli.ch/petit'.		spec project: 'Glamour for Petit' with: [			spec				className: 'ConfigurationOfGlamour';				versionString: '2.1';				repository: 'http://www.squeaksource.com/Glamour' ].				spec project: 'AST-Core' with: [			spec				repository: 'http://www.squeaksource.com/MetacelloRepository';				className: 'ConfigurationOfRefactoringBrowser';				loads: #('AST-Core') ].				spec 			package: 'PetitParser';			package: 'PetitTests' with: [				spec requires: #('PetitParser' ) ];			package: 'PetitAnalyzer' with: [				spec requires: #('PetitTests' ) ];			package: 'PetitGui' with: [				spec requires: #('Glamour for Petit' ) ];			package: 'PetitSmalltalk' with: [				spec requires: #( 'AST-Core' 'PetitParser' 'PetitTests') ].			"todo: declare all other packages & dependencies here"		spec 			group: 'Core' with: #('PetitParser' 'PetitAnalyzer' );			group: 'Tests' with: #('PetitTests' 'PetitAnalyzer' ) ]! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'DiegoLont 9/2/2013 11:16'!baseline13: spec	<version: '1.3-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'Describing all satellite packages'.		spec repository: 'http://source.lukas-renggli.ch/petit'.		spec project: 'Glamour for Petit' with: [			spec				className: 'ConfigurationOfGlamour';				versionString: '2.1';				loads: #(Core Morphic);				repository: 'http://www.squeaksource.com/Glamour' ].				spec 			package: 'PetitParser';			package: 'PetitTests' with: [				spec requires: #('PetitParser' ). ];			package: 'PetitAnalyzer' with: [				spec requires: #('PetitTests' ). ];			package: 'PetitGui' with: [				spec requires: #('PetitParser' 'Glamour for Petit' ). ].				spec			package: 'PrettyPetit'.				spec			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitSQL' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ].		spec 			group: 'Core' with: #('PetitParser' 'PetitAnalyzer' );			group: 'Tests' with: #('PetitTests' 'PetitAnalyzer' ). ].! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'StephanEggermont 3/16/2015 09:04'!baseline151: spec 	<version: '1.5.1-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'petitparser project description that loads the version before the changes regarding integration of the island grammar and context by Jan Kurs'.		spec repository: 'http://www.smalltalkhub.com/mc/Moose/PetitParser/main'.		spec 			package: 'PetitParser';			package: 'PetitTests' with: [ spec requires: 'PetitParser'];			package: 'PetitAnalyzer' with: [ spec requires: 'PetitTests'];			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ].		spec group: 'Core' with: #( 'PetitParser' 'PetitAnalyzer' ).		spec group: 'Tests' with: #( 'PetitTests' 'PetitAnalyzer' ) ].	spec for: #( 'squeakCommon' )  do: [		spec project: 'Glamour' with: [			spec				className: 'ConfigurationOfGlamour';				file: 'ConfigurationOfGlamour';				version: #development;				loads: #('GlamourCore');				repository: 'http://www.smalltalkhub.com/mc/Moose/Glamour/main' ].		spec 			package: 'PetitGui' with: [ spec requires: #('Glamour' 'PetitAnalyzer')].		spec group: 'Gui' with: #( 'PetitGui' ) ]! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'DiegoLont 9/2/2013 11:16'!baseline15: spec	<version: '1.5-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: 'Describing all satellite packages'.		spec repository: 'http://source.lukas-renggli.ch/petit'.		spec project: 'Glamour for Petit' with: [			spec				className: 'ConfigurationOfGlamour';				versionString: #stable;				loads: #(Core Morphic);				repository: 'http://www.squeaksource.com/Glamour' ].				spec 			package: 'PetitParser';			package: 'PetitTests' with: [				spec requires: #('PetitParser' ). ];			package: 'PetitAnalyzer' with: [				spec requires: #('PetitTests' ). ];			package: 'PetitGui' with: [				spec requires: #('PetitParser' 'Glamour for Petit' ). ].				spec			package: 'PrettyPetit'.				spec			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ].		spec 			group: 'default' with: #('UI' 'Tests');			group: 'Core' with: #('PetitParser' 'PetitAnalyzer' );			group: 'UI' with: #('Core' 'PetitGui' );			group: 'Tests' with: #('Core' 'PetitTests'). ].! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'JanKurs 11/12/2014 15:54'!baseline16: spec 	<version: '1.6-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Describing all satellite packages. Loads configuration from new repository on SmalltalkHub'.		spec repository: 'http://www.smalltalkhub.com/mc/Moose/PetitParser/main'.		spec 			package: 'PetitParser';			package: 'PetitTests' with: [ spec requires: 'PetitParser'];			package: 'PetitAnalyzer' with: [ spec requires: 'PetitTests'];			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitIslands' with: [				spec requires: #('PetitParser') ];			package: 'PetitIndent' with: [				spec requires: #('PetitParser') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ].		spec group: 'Core' with: #( 'PetitParser').		spec group: 'Tests' with: #( 'PetitTests') ].	spec for: #( 'squeakCommon' )  do: [		spec project: 'Glamour' with: [			spec				className: 'ConfigurationOfGlamour';				file: 'ConfigurationOfGlamour';				version: #development;				repository: 'http://www.smalltalkhub.com/mc/Moose/Glamour/main' ].		spec 			package: 'PetitGui' with: [ spec requires: #('Glamour' 'PetitAnalyzer')].		spec group: 'Gui' with: #( 'PetitGui' ) ]! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'JanKurs 4/1/2015 12:19'!baseline17: spec 	<version: '1.7-baseline'>		spec for: #common do: [		spec blessing: #'development'.		spec description: 'Describing all satellite packages. Loads configuration from new repository on SmalltalkHub'.		spec repository: 'http://www.smalltalkhub.com/mc/Moose/PetitParser/main'.		spec 			package: 'PetitParser';			package: 'PetitTests' with: [ spec requires: 'PetitParser'];			package: 'PetitAnalyzer' with: [ spec requires: 'PetitTests'];			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitIndent' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitIslands' with: [				spec requires: #('PetitParser' 'PetitIndent' 'PetitTests') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ];			package: 'PetitYAML' with: [				spec requires: #('PetitParser' 'PetitIndent') ].		spec group: 'Core' with: #( 'PetitParser').		spec group: 'Tests' with: #( 'PetitTests').		spec group: 'Parser' with: #('PetitParser' 													'PetitTests' 													'PetitAnalyzer' 													'PetitSmalltalk' 													'PetitCSV' 													'PetitJson' 													'PetitMSE'													'PetitManifestMf' 													'PetitRegex'													'PetitXPath'													'PetitXml'													'PetitIndent'													'PetitIslands'													'Factorial-Language'													'PetitYAML').	].	spec for: #( 'squeakCommon' )  do: [		spec project: 'Glamour' with: [			spec				className: 'ConfigurationOfGlamour';				file: 'ConfigurationOfGlamour';				version: #stable;				repository: 'http://www.smalltalkhub.com/mc/Moose/Glamour/main' ].		spec 			package: 'PetitGui' with: [ spec requires: #('Glamour' 'PetitAnalyzer')].				spec group: 'ParserIDE' with: #( 'PetitGui' ) ] ! !!ConfigurationOfPetitParser methodsFor: 'baselines' stamp: 'AndreiChis 10/5/2015 11:59'!baseline18: spec 	<version: '1.8-baseline'>		spec for: #common do: [		spec blessing: #'development'.		spec description: 'For Pharo 5. Use #development for Glamour'.		spec repository: 'http://www.smalltalkhub.com/mc/Moose/PetitParser/main'.		spec 			package: 'PetitParser';			package: 'PetitTests' with: [ spec requires: 'PetitParser'];			package: 'PetitAnalyzer' with: [ spec requires: 'PetitTests'];			package: 'PetitSmalltalk' with: [				spec requires: #( 'PetitParser' 'PetitTests') ];			package: 'PetitCSV' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitJson' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitMSE' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitManifestMf' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitRegex' with: [				spec requires: #('PetitParser') ];			package: 'PetitXPath' with: [				spec requires: #('PetitParser' 'PetitXml') ];			package: 'PetitXml' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitIndent' with: [				spec requires: #('PetitParser' 'PetitTests') ];			package: 'PetitIslands' with: [				spec requires: #('PetitParser' 'PetitIndent' 'PetitTests') ];			package: 'Factorial-Language' with: [				spec requires: #('PetitParser') ];			package: 'PetitYAML' with: [				spec requires: #('PetitParser' 'PetitIndent') ].		spec group: 'Core' with: #( 'PetitParser').		spec group: 'Tests' with: #( 'PetitTests').		spec group: 'Parser' with: #('PetitParser' 													'PetitTests' 													'PetitAnalyzer' 													'PetitSmalltalk' 													'PetitCSV' 													'PetitJson' 													'PetitMSE'													'PetitManifestMf' 													'PetitRegex'													'PetitXPath'													'PetitXml'													'PetitIndent'													'PetitIslands'													'Factorial-Language'													'PetitYAML').	].	spec for: #( 'squeakCommon' )  do: [		spec project: 'Glamour' with: [			spec				className: 'ConfigurationOfGlamour';				file: 'ConfigurationOfGlamour';				version: #development;				repository: 'http://www.smalltalkhub.com/mc/Moose/Glamour/main' ].		spec 			package: 'PetitGui' with: [ spec requires: #('Glamour' 'PetitAnalyzer')].				spec group: 'ParserIDE' with: #( 'PetitGui' ) ] ! !!ConfigurationOfPetitParser methodsFor: 'symbolic versions' stamp: 'AndreiChis 10/5/2015 11:59'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.8-baseline'.	spec for: #'pharo1.4.x' version: '1.6-baseline'.	spec for: #'pharo2.x' version: '1.6-baseline'.	spec for: #'pharo3.x' version: '1.6-baseline'.	spec for: #'pharo4.x' version: '1.7-baseline'.		spec for: #'pharo5.x' version: '1.8-baseline'.! !!ConfigurationOfPetitParser methodsFor: 'accessing' stamp: 'tg 4/18/2010 23:50'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project]! !!ConfigurationOfPetitParser methodsFor: 'symbolic versions' stamp: 'JanKurs 10/21/2015 10:35'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.10'.	spec for: #'pharo1.3.x' version: '1.5'.	spec for: #'pharo2.x' version: '1.6-baseline'.	spec for: #'pharo3.x' version: '1.10'.	spec for: #'pharo4.x' version: '1.14'.		spec for: #'pharo5.x' version: '1.14'.! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AlexandreBergel 12/10/2010 18:51'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'First release'.		spec author: 'AlexandreBergel'.		spec timestamp: '12/6/2010 16:11'.		spec project: 'Glamour for Petit' with: '2.0-beta.8'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.208';			package: 'PetitTests' with: 'PetitTests-TudorGirba.24';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.31';			package: 'PetitGui' with: 'PetitGui-TudorGirba.58'.].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'TudorGirba 12/23/2014 14:30'!version110: spec	<version: '1.10' imports: #('1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.10'.		spec author: 'TudorGirba'.		spec timestamp: '12/23/2014 14:30'.		spec 			package: 'PetitParser' with: 'PetitParser-JanKurs.262';			package: 'PetitTests' with: 'PetitTests-JanKurs.67';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-JanKurs.78';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-StephanEggermont.30';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.18';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.1';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6'. ].	spec for: #'squeakCommon' do: [		spec project: 'Glamour' with: #stable.		spec package: 'PetitGui' with: 'PetitGui-JanKurs.148'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AndreiChis 4/1/2015 14:52'!version111: spec	<version: '1.11' imports: #('1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.11'.		spec author: 'JanKurs'.		spec timestamp: '4/1/2015 11:27'.		spec 			package: 'PetitParser' with: 'PetitParser-JamesFoster.274';			package: 'PetitTests' with: 'PetitTests-JanKurs.73';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-BernardoContreras.86';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-StephanEggermont.30';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.22';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.7';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6'. ].	spec for: #'squeakCommon' do: [		spec project: 'Glamour' with: #'development'.		spec package: 'PetitGui' with: 'PetitGui-StefanReichhart.150'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AndreiChis 5/5/2015 19:07'!version112: spec	<version: '1.12' imports: #('1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.12'.		spec author: 'AndreiChis'.		spec timestamp: '5/5/2015 19:03'.		spec 			package: 'PetitParser' with: 'PetitParser-JanKurs.278';			package: 'PetitTests' with: 'PetitTests-JanKurs.73';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-BernardoContreras.86';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-JanKurs.31';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.28';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.11';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6'. ].	spec for: #'squeakCommon' do: [		spec project: 'Glamour' with: #'stable'.		spec package: 'PetitGui' with: 'PetitGui-StefanReichhart.150'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AndreiChis 5/27/2015 16:42'!version113: spec	<version: '1.13' imports: #('1.7-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.13'.		spec author: 'AndreiChis'.		spec timestamp: '5/27/2015 16:41'.		spec 			package: 'PetitParser' with: 'PetitParser-JanKurs.278';			package: 'PetitTests' with: 'PetitTests-JanKurs.73';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-BernardoContreras.86';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-JanKurs.31';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.28';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.11';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6';			package: 'PetitYAML' with: 'PetitYAML-JanKurs.6'.].	spec for: #'squeakCommon' do: [		spec project: 'Glamour' with: #'stable'.		spec package: 'PetitGui' with: 'PetitGui-StefanReichhart.150'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'JanKurs 10/21/2015 10:35'!version114: spec	<version: '1.14' imports: #('1.7-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.13'.		spec author: 'JanKurs'.		spec timestamp: '20/10/2015 10:41'.		spec 			package: 'PetitParser' with: 'PetitParser-JanKurs.278';			package: 'PetitTests' with: 'PetitTests-JanKurs.73';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-BernardoContreras.86';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-JanKurs.31';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.32';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.11';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6';			package: 'PetitYAML' with: 'PetitYAML-JanKurs.6'.].	spec for: #'squeakCommon' do: [		spec project: 'Glamour' with: #'stable'.		spec package: 'PetitGui' with: 'PetitGui-StefanReichhart.150'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AlexandreBergel 5/16/2011 16:23'!version11: spec	<version: '1.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'New version'.		spec author: 'AlexandreBergel'.		spec timestamp: '2/18/2011 13:30'.		spec project: 'Glamour for Petit' with: '2.1'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.216';			package: 'PetitTests' with: 'PetitTests-lr.32';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.37';			package: 'PetitGui' with: 'PetitGui-TudorGirba.65'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AlexandreBergel 5/16/2011 16:23'!version12: spec	<version: '1.2' imports: #('1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'New version'.		spec author: 'AlexandreBergel'.		spec timestamp: '2/18/2011 13:56'.		spec project: 'Glamour for Petit' with: '2.1'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.216';			package: 'PetitTests' with: 'PetitTests-lr.32';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.37';			package: 'PetitGui' with: 'PetitGui-TudorGirba.65'.  ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AlexandreBergel 5/16/2011 16:23'!version13: spec	<version: '1.3' imports: #('1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: ''.		spec author: 'AlexandreBergel'.		spec timestamp: '5/16/2011 16:23'.		spec project: 'Glamour for Petit' with: '2.1'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.216';			package: 'PetitTests' with: 'PetitTests-lr.32';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.37';			package: 'PetitGui' with: 'PetitGui-TudorGirba.65'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'DamienPollet 8/11/2011 19:21'!version14: spec	<version: '1.4' imports: #('1.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: ''.		spec author: 'DamienPollet'.		spec timestamp: '8/11/2011 14:00'.		spec project: 'Glamour for Petit' with: '2.1'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.218';			package: 'PetitTests' with: 'PetitTests-DamienPollet.35';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.39';			package: 'PetitGui' with: 'PetitGui-TudorGirba.65';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-lr.47'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'StephanEggermont 3/16/2015 09:04'!version151: spec	<version: '1.5.1' imports: #('1.5.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'releasing a version for petit parser before changes regarding integration of the parsing context and island grammar by Jan Kurs for backward compatibility'.		spec author: 'usmanbhatti'.		spec timestamp: '26/9/2014 18:27'.		spec project: 'Glamour' with: '3.0.7'.		spec 			package: 'PetitParser' with: 'PetitParser-DiegoLont.233';			package: 'PetitTests' with: 'PetitTests-AndreHora.47';			package: 'PetitXml' with: 'PetitXml-lr.35';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-DiegoLont.46';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-DamienCassou.70';			package: 'PetitRegex' with: 'PetitRegex-lr.27';			package: 'PetitGui' with: 'PetitGui-AndreiChis.140'].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'TudorGirba 3/4/2012 20:22'!version15: spec	<version: '1.5' imports: #('1.5-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: ''.		spec author: 'DamienPollet'.		spec timestamp: '8/11/2011 14:00'.		spec project: 'Glamour for Petit' with: '2.2'.		spec 			package: 'PetitParser' with: 'PetitParser-lr.228';			package: 'PetitTests' with: 'PetitTests-lr.43';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-lr.39';			package: 'PetitGui' with: 'PetitGui-TudorGirba.90';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-lr.57'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'AndreiChis 10/29/2014 17:57'!version16: spec	<version: '1.6' imports: #('1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'releasing a version of petitparser for moose 4.7 release'.		spec author: 'usmanbhatti'.		spec timestamp: '3/1/2013 18:01'.		spec project: 'Glamour' with: '2.4'.		spec 			package: 'PetitParser' with: 'PetitParser-YuriyTymchuk.232';			package: 'PetitTests' with: 'PetitTests-AndreHora.47';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-DiegoLont.46';			package: 'PetitGui' with: 'PetitGui-DiegoLont.125'. ].! !!ConfigurationOfPetitParser methodsFor: 'versions' stamp: 'TudorGirba 12/23/2014 14:29'!version19: spec	<version: '1.9' imports: #('1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'releasing a version of petitparser for moose 5 release'.		spec author: 'StephanEggermont'.		spec timestamp: '12/12/2014 11:28'.		spec project: 'Glamour' with: #stable.		spec 			package: 'PetitParser' with: 'PetitParser-JanKurs.261';			package: 'PetitTests' with: 'PetitTests-JanKurs.65';			package: 'PetitAnalyzer' with: 'PetitAnalyzer-JanKurs.48';			package: 'PetitGui' with: 'PetitGui-TudorGirba.147';			package: 'PetitSmalltalk' with: 'PetitSmalltalk-JanKurs.78';			package: 'PetitCSV' with: 'PetitCSV-tg.7';			package: 'PetitJson' with: 'PetitJson-JanKurs.9';			package: 'PetitMSE' with: 'PetitMSE-AndreHora.21';			package: 'PetitManifestMf' with: 'PetitManifestMf-JanKurs.10';			package: 'PetitRegex' with: 'PetitRegex-JanKurs.30';			package: 'PetitXPath' with: 'PetitXPath-EstebanLorenzano.7';			package: 'PetitXml' with: 'PetitXml-JanKurs.36';			package: 'PetitIslands' with: 'PetitIslands-JanKurs.18';			package: 'PetitIndent' with: 'PetitIndent-JanKurs.1';			package: 'Factorial-Language' with: 'Factorial-Language-lr.6'. ].! !"ConfigurationOfPetitParser"!!ConfigurationOfTalkFFI class methodsFor: 'development support' stamp: 'CiprianTeodorov 12/27/2012 14:25'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfTalkFFI class methodsFor: 'private' stamp: 'CiprianTeodorov 12/27/2012 14:25'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfTalkFFI class methodsFor: 'private' stamp: 'CiprianTeodorov 12/27/2012 14:25'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfTalkFFI class methodsFor: 'private' stamp: 'CiprianTeodorov 12/27/2012 14:25'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfTalkFFI class methodsFor: 'metacello tool support' stamp: 'CiprianTeodorov 12/27/2012 14:25'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfTalkFFI class methodsFor: 'loading' stamp: 'CiprianTeodorov 12/27/2012 14:25'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfTalkFFI class methodsFor: 'loading' stamp: 'CiprianTeodorov 12/27/2012 14:25'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfTalkFFI class methodsFor: 'loading' stamp: 'CiprianTeodorov 12/27/2012 14:25'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfTalkFFI class methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/27/2012 14:25'!project	^self new project! !!ConfigurationOfTalkFFI class methodsFor: 'development support' stamp: 'CiprianTeodorov 12/27/2012 14:25'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfTalkFFI methodsFor: 'baselines' stamp: 'CiprianTeodorov 1/6/2013 14:13'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main'.		spec 			project: 'NativeBoost' with: [				spec					className: 'ConfigurationOfNativeBoost';					versionString: #'1.9';					repository: 'http://www.squeaksource.com/NativeBoost' ];			project: 'LibClang' with: [				spec					className: 'ConfigurationOfLibClang';					versionString: #'bleedingEdge';					repository: 'http://smalltalkhub.com/mc/CipT/LibClang/main' ].		spec 			package: 'TalkFFI-Runtime' with: [				spec requires: #('NativeBoost' ). ];			package: 'TalkFFI-AST-Core';			package: 'TalkFFI-AST-Generation' with: [				spec requires: #('LibClang' 'TalkFFI-AST-Core' );				postLoadDoIt: #postloadForASTGeneration ];			package: 'TalkFFI-SmalltalkBinding' with: [				spec requires: #('TalkFFI-AST-Core' ). ];			package: 'TalkFFI-NativeBoostBinding' with: [				spec requires: #('NativeBoost' 'TalkFFI-SmalltalkBinding' ). ].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('TalkFFI-Runtime' 'TalkFFI-AST-Core' 'TalkFFI-AST-Generation' 'TalkFFI-SmalltalkBinding' 'TalkFFI-NativeBoostBinding' );			group: 'Runtime' with: #('TalkFFI-Runtime' ). ].! !!ConfigurationOfTalkFFI methodsFor: 'baselines' stamp: 'CiprianTeodorov 1/31/2013 19:55'!baseline11: spec	<version: '1.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main'.		spec 			project: 'NativeBoost' with: [				spec					className: 'ConfigurationOfNativeBoost';					versionString: #'2.0';					repository: 'http://www.smalltalkhub.com/mc/Pharo/NativeBoost/main' ];			project: 'LibClang' with: [				spec					className: 'ConfigurationOfLibClang';					versionString: #'bleedingEdge';					repository: 'http://smalltalkhub.com/mc/CipT/LibClang/main' ].		spec 			package: 'TalkFFI-Runtime' with: [				spec requires: #('NativeBoost' ). ];			package: 'TalkFFI-AST-Core';			package: 'TalkFFI-AST-Generation' with: [				spec requires: #('LibClang' 'TalkFFI-AST-Core' );				postLoadDoIt: #postloadForASTGeneration ];			package: 'TalkFFI-SmalltalkBinding' with: [				spec requires: #('TalkFFI-AST-Core' ). ];			package: 'TalkFFI-NativeBoostBinding' with: [				spec requires: #('NativeBoost' 'TalkFFI-SmalltalkBinding' ). ];			package: 'TalkFFI-Examples' with: [				spec requires: #('TalkFFI-NativeBoostBinding')];			package: 'TalkFFI-Tests' with: [				spec requires: #('TalkFFI-NativeBoostBinding')].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('TalkFFI-Runtime' 'TalkFFI-AST-Core' 'TalkFFI-AST-Generation' 'TalkFFI-SmalltalkBinding' 'TalkFFI-NativeBoostBinding' 'TalkFFI-Examples' );			group: 'Runtime' with: #('TalkFFI-Runtime' );			group: 'Tests' with: #('TalkFFI-Tests'). ].! !!ConfigurationOfTalkFFI methodsFor: 'baselines' stamp: 'CiprianTeodorov 4/7/2013 17:32'!baseline12: spec	<version: '1.2-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main'.		spec 			project: 'NativeBoost' with: [				spec					className: 'ConfigurationOfNativeBoost';					versionString: #'2.0';					repository: 'http://www.smalltalkhub.com/mc/Pharo/NativeBoost/main' ];			project: 'LibClang' with: [				spec					className: 'ConfigurationOfLibClang';					versionString: #'bleedingEdge';					repository: 'http://smalltalkhub.com/mc/CipT/LibClang/main' ].		spec 			package: 'TalkFFI-Runtime' with: [				spec requires: #('NativeBoost' ). ];			package: 'TalkFFI-Announcements';			package: 'TalkFFI-AST-Core';			package: 'TalkFFI-AST-Generation' with: [				spec requires: #('LibClang' 'TalkFFI-AST-Core' );				postLoadDoIt: #postloadForASTGeneration ];			package: 'TalkFFI-SmalltalkBinding' with: [				spec requires: #('TalkFFI-AST-Core' ). ];			package: 'TalkFFI-NativeBoostBinding' with: [				spec requires: #('NativeBoost' 'TalkFFI-SmalltalkBinding' ). ];			package: 'TalkFFI-Examples' with: [				spec requires: #('TalkFFI-NativeBoostBinding')];			package: 'TalkFFI-Tests' with: [				spec requires: #('TalkFFI-NativeBoostBinding')].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('TalkFFI-Runtime' 'TalkFFI-Announcements' 'TalkFFI-AST-Core' 'TalkFFI-AST-Generation' 'TalkFFI-SmalltalkBinding' 'TalkFFI-NativeBoostBinding' 'TalkFFI-Examples' );			group: 'Runtime' with: #('TalkFFI-Runtime' );			group: 'Tests' with: #('TalkFFI-Tests'). ].! !!ConfigurationOfTalkFFI methodsFor: 'baselines' stamp: 'CiprianTeodorov 3/16/2014 22:20'!baseline13: spec	<version: '1.3-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main'.		spec 			project: 'LibClang' with: [				spec					className: 'ConfigurationOfLibClang';					versionString: #'bleedingEdge';					repository: 'http://smalltalkhub.com/mc/CipT/LibClang/main' ].		spec 			package: 'TalkFFI-Runtime';			package: 'TalkFFI-Announcements';			package: 'TalkFFI-AST-Core';			package: 'TalkFFI-AST-Generation' with: [				spec requires: #('LibClang' 'TalkFFI-AST-Core' );				postLoadDoIt: #postloadForASTGeneration ];			package: 'TalkFFI-SmalltalkBinding' with: [				spec requires: #('TalkFFI-AST-Core' ). ];			package: 'TalkFFI-NativeBoostBinding' with: [				spec requires: #('TalkFFI-SmalltalkBinding' ). ];			package: 'TalkFFI-Examples' with: [				spec requires: #('TalkFFI-NativeBoostBinding')];			package: 'TalkFFI-Tests' with: [				spec requires: #('TalkFFI-NativeBoostBinding')].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('TalkFFI-Runtime' 'TalkFFI-Announcements' 'TalkFFI-AST-Core' 'TalkFFI-AST-Generation' 'TalkFFI-SmalltalkBinding' 'TalkFFI-NativeBoostBinding' 'TalkFFI-Examples' );			group: 'Runtime' with: #('TalkFFI-Runtime' );			group: 'Tests' with: #('TalkFFI-Tests'). ].! !!ConfigurationOfTalkFFI methodsFor: 'baselines' stamp: 'CiprianTeodorov 5/19/2015 23:10'!baseline14: spec	<version: '1.4-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/CipT/TalkFFI/main'.		spec 			project: 'LibClang' with: [				spec					className: 'ConfigurationOfLibClang';					versionString: #'developement';					repository: 'http://smalltalkhub.com/mc/CipT/LibClang/main' ].		spec 			package: 'TalkFFI-Runtime';			package: 'TalkFFI-Announcements';			package: 'TalkFFI-AST-Core';			package: 'TalkFFI-AST-Generation' with: [				spec requires: #('LibClang' 'TalkFFI-AST-Core' );				postLoadDoIt: #postloadForASTGeneration ];			package: 'TalkFFI-SmalltalkBinding' with: [				spec requires: #('TalkFFI-AST-Core' ). ];			package: 'TalkFFI-NativeBoostBinding' with: [				spec requires: #('TalkFFI-SmalltalkBinding' ). ];			package: 'TalkFFI-Examples' with: [				spec requires: #('TalkFFI-NativeBoostBinding')];			package: 'TalkFFI-Tests' with: [				spec requires: #('TalkFFI-NativeBoostBinding')].		spec 			group: 'default' with: #('Core' );			group: 'Core' with: #('TalkFFI-Runtime' 'TalkFFI-Announcements' 'TalkFFI-AST-Core' 'TalkFFI-AST-Generation' 'TalkFFI-SmalltalkBinding' 'TalkFFI-NativeBoostBinding' 'TalkFFI-Examples' );			group: 'Runtime' with: #('TalkFFI-Runtime' );			group: 'Tests' with: #('TalkFFI-Tests'). ].! !!ConfigurationOfTalkFFI methodsFor: 'symbolic versions' stamp: 'CiprianTeodorov 5/19/2015 23:10'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.4-baseline'.	spec for: #'pharo2.x' version: '1.4'.	spec for: #'pharo3.x' version: '1.5'! !!ConfigurationOfTalkFFI methodsFor: 'post load' stamp: 'CiprianTeodorov 3/3/2013 13:27'!postloadForASTGeneration	(Smalltalk at: #CLPrimaryBinding) initialize.! !!ConfigurationOfTalkFFI methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/27/2012 14:25'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfTalkFFI methodsFor: 'symbolic versions' stamp: 'GuillermoPolito 9/1/2013 12:53'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.0'.	spec for: #'pharo2.x' version: '1.3.1'.! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 1/6/2013 15:37'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'initial version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '12/27/2012 14:26'.		spec 			project: 'NativeBoost' with: '1.9';			project: 'LibClang' with: '1.0'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.1';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.1';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.1';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.1';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.4'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 1/6/2013 18:15'!version11: spec	<version: '1.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'initial pharo 2.0 version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '01/06/2013 15:20'.		spec 			project: 'NativeBoost' with: '1.9';			project: 'LibClang' with: '1.0'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.1';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.1';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.1';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.3';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.6'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 1/28/2013 23:03'!version12: spec	<version: '1.2' imports: #('1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'development version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '01/06/2013 15:20'.		spec 			project: 'NativeBoost' with: '1.9';			project: 'LibClang' with: '1.1'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.3';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.3';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.4';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.8';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.11';			package: 'TalkFFI-Examples' with: 'TalkFFI-Examples-CiprianTeodorov.3'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'GuillermoPolito 9/3/2013 09:36'!version131: spec	<version: '1.3.1' imports: #('1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'development version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '06/02/2013'.		spec 			project: 'NativeBoost' with: '2.1';			project: 'LibClang' with: '1.2'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.7';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.6';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.7';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.12';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.16';			package: 'TalkFFI-Examples' with: 'TalkFFI-Examples-CiprianTeodorov.7'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 3/3/2013 13:23'!version13: spec	<version: '1.3' imports: #('1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'development version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '06/02/2013'.		spec 			project: 'NativeBoost' with: '2.1';			project: 'LibClang' with: '1.2'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.5';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.6';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.7';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.12';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.16';			package: 'TalkFFI-Examples' with: 'TalkFFI-Examples-CiprianTeodorov.7'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 4/7/2013 17:48'!version14: spec	<version: '1.4' imports: #('1.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'development version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '07/04/2013'.		spec 			project: 'NativeBoost' with: '2.1';			project: 'LibClang' with: '1.2'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.7';			package: 'TalkFFI-Announcements' with: 'TalkFFI-Announcements-CiprianTeodorov.1';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.6';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.9';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.16';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.23';			package: 'TalkFFI-Examples' with: 'TalkFFI-Examples-CiprianTeodorov.16'. ].! !!ConfigurationOfTalkFFI methodsFor: 'versions' stamp: 'CiprianTeodorov 3/16/2014 22:25'!version15: spec	<version: '1.5' imports: #('1.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'development version'.		spec author: 'CiprianTeodorov'.		spec timestamp: '03/16/2014'.		spec 			project: 'LibClang' with: '1.4'.		spec 			package: 'TalkFFI-Runtime' with: 'TalkFFI-Runtime-CiprianTeodorov.7';			package: 'TalkFFI-Announcements' with: 'TalkFFI-Announcements-CiprianTeodorov.1';			package: 'TalkFFI-AST-Core' with: 'TalkFFI-AST-Core-CiprianTeodorov.6';			package: 'TalkFFI-AST-Generation' with: 'TalkFFI-AST-Generation-CiprianTeodorov.9';			package: 'TalkFFI-SmalltalkBinding' with: 'TalkFFI-SmalltalkBinding-CiprianTeodorov.16';			package: 'TalkFFI-NativeBoostBinding' with: 'TalkFFI-NativeBoostBinding-CiprianTeodorov.24';			package: 'TalkFFI-Examples' with: 'TalkFFI-Examples-CiprianTeodorov.17'. ].! !"ConfigurationOfTalkFFI"!!ConfigurationOfCommandShell commentStamp: '<historical>' prior: 0!ConfigurationOfCommandShell project stableVersion load!!ConfigurationOfCommandShell commentStamp: '<historical>' prior: 34044055!ConfigurationOfCommandShell project stableVersion load!!ConfigurationOfCommandShell class methodsFor: 'development support' stamp: 'SeanDeNigris 7/5/2012 15:51'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfCommandShell class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 15:51'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfCommandShell class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 15:51'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfCommandShell class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 15:51'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfCommandShell class methodsFor: 'metacello tool support' stamp: 'SeanDeNigris 7/5/2012 15:51'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfCommandShell class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 15:51'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfCommandShell class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 15:51'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfCommandShell class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 15:51'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfCommandShell class methodsFor: 'accessing' stamp: 'SeanDeNigris 7/5/2012 15:51'!project	^self new project! !!ConfigurationOfCommandShell class methodsFor: 'development support' stamp: 'SeanDeNigris 7/5/2012 15:51'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfCommandShell methodsFor: 'baselines' stamp: 'SeanDeNigris 2/12/2013 10:52'!baseline10: spec	<version: '1.0-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://www.squeaksource.com/CommandShell'.		spec project: 'OSProcess' with: [			spec				className: 'ConfigurationOfOSProcess';				loads: #('Core');				repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec			package: 'CommandShell-Base' with: [ 				"Base actually requires the following packages, but the dependency is circular, so we'll include until it''s fixed"				spec includes: #('CommandShell-Commands' 'CommandShell-Piping' 'CommandShell-UI') ];			package: 'CommandShell-Commands' with: [ spec requires: #('CommandShell-Base') ];			package: 'CommandShell-Morphic' with: [ spec requires: #('CommandShell-Base') ];			package: 'CommandShell-Piping' with: [ spec requires: #('CommandShell-Base' 'OSProcess') ];			package: 'CommandShell-UI' with: [ spec requires: #('CommandShell-Base' 'CommandShell-Morphic') ];			package: 'CommandShellPharo' with: [ spec requires: #('CommandShell-Base') ];			package: 'CommandShell-Tests' with: [ spec requires: #('CommandShell-Base' 'CommandShell-Piping' 'OSProcess') ].		spec			group: 'Core' with: #('CommandShell-Base' 'CommandShell-Commands' 'CommandShell-Morphic' 'CommandShell-Piping' 'CommandShell-UI' 'CommandShellPharo' );			group: 'Piping' with: #('CommandShell-Piping');			group: 'Tests' with: #('CommandShell-Tests'). ].		spec for: #'squeak' do: [			spec package: 'CommandShell-MVC' with: [ "Unknown dependencies" ] ].! !!ConfigurationOfCommandShell methodsFor: 'symbolic versions' stamp: 'ThierryGoubier 7/6/2015 19:10'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '4.6.15'.! !!ConfigurationOfCommandShell methodsFor: 'accessing' stamp: 'SeanDeNigris 7/5/2012 15:51'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfCommandShell methodsFor: 'symbolic versions' stamp: 'ThierryGoubier 7/6/2015 19:10'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '4.6.15'.	spec for: #'pharo1.4.x' version: '1.0'.! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'SeanDeNigris 2/12/2013 10:52'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: ''.		spec author: 'SeanDeNigris'.		spec timestamp: '7/5/2012 15:51'.		spec project: 'OSProcess' with: [ spec version: '4.4.6' ].		spec 			package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.23';			package: 'CommandShell-Commands' with: 'CommandShell-Commands-dtl.10';			package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.1';			package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.10';			package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.9';			package: 'CommandShell-UI' with: 'CommandShell-UI-dtl.9' ].			spec for: #'pharo' do: [		spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].		spec for: #'squeak' do: [		spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.2' ].! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'SeanDeNigris 2/12/2013 10:54'!version11: spec	<version: '1.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'StephaneDucasse'.		spec timestamp: '10/02/2013 12:57'.		spec project: 'OSProcess' with: [ spec version: '4.5' ].		spec 			package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.31';			package: 'CommandShell-Commands' with: 'CommandShell-Commands-dtl.14';			package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';			package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.13';			package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';			package: 'CommandShell-UI' with: 'CommandShell-UI-dtl.10' ].			spec for: #'pharo' do: [		spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #'squeak' do: [		spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ].! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 4/25/2015 18:24'!version4612: spec	<version: '4.6.12' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: ''.			spec author: 'ThierryGoubier'.			spec timestamp: '4/25/2015 18:19'.			spec project: 'OSProcess' with: [ spec version: '4.6.2' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.41';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.18';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';				package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 6/17/2015 20:10'!version4613: spec	<version: '4.6.13' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: ''.			spec author: 'ThierryGoubier'.			spec timestamp: '6/17/2015 20:09'.			spec project: 'OSProcess' with: [ spec version: '4.6.3' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.42';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.19';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';				package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 6/18/2015 07:22'!version4614: spec	<version: '4.6.14' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: ''.			spec author: 'ThierryGoubier'.			spec timestamp: '6/18/2015 07:22'.			spec project: 'OSProcess' with: [ spec version: '4.6.4' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.43';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.19';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';				package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 7/6/2015 19:15'!version4615: spec	<version: '4.6.15' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: 'CommandShell 4.6.15By Thierry Goubier: Reimplement CrLfFileEditor as subclass of Model to remove StringHolder reference.Use CrLfFileStream only if the preferred MultiByteFileStream is not present in the image (old images).'.			spec author: 'ThierryGoubier'.			spec timestamp: '7/6/2015 19:14'.			spec project: 'OSProcess' with: [ spec version: '4.6.4' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.44';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-dtl.18';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.19';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.13';				package: 'CommandShell-UI' with: 'CommandShell-UI-dtl.13' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 9/11/2013 10:15'!version466: spec	<version: '4.6.6' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'ThierryGoubier'.		spec timestamp: '09/11/2013 10:13'.		spec project: 'OSProcess' with: [ spec version: '4.5.7' ].		spec 			package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.34';			package: 'CommandShell-Commands' with: 'CommandShell-Commands-dtl.15';			package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';			package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.14';			package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';			package: 'CommandShell-UI' with: 'CommandShell-UI-dtl.11' ].			spec for: #'pharo' do: [		spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #'squeak' do: [		spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ].! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 10/24/2013 17:40'!version467: spec	<version: '4.6.7' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'ThierryGoubier'.		spec timestamp: '9/23/2013 10:12'.		spec project: 'OSProcess' with: [ spec version: '4.5.8' ].		spec 			package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.36';			package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';			package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';			package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.14';			package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';			package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].			spec for: #'pharo' do: [		spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #'squeak' do: [		spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ].! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 10/5/2014 09:23'!version468: spec	<version: '4.6.8' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: ''.			spec author: 'ThierryGoubier'.			spec timestamp: '2014-10-05T09:22:59.050216+02:00'.			spec project: 'OSProcess' with: [ spec version: '4.5.11' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.37';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.15';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';				package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !!ConfigurationOfCommandShell methodsFor: 'versions' stamp: 'ThierryGoubier 3/6/2015 07:17'!version469: spec	<version: '4.6.9' imports: #('1.0-baseline')>	spec		for: #common		do: [ 			spec blessing: #release.			spec description: ''.			spec author: 'ThierryGoubier'.			spec timestamp: '2014-10-05T09:22:59.050216+02:00'.			spec project: 'OSProcess' with: [ spec version: '4.5.13' ].			spec				package: 'CommandShell-Base' with: 'CommandShell-Base-dtl.38';				package: 'CommandShell-Commands' with: 'CommandShell-Commands-ThierryGoubier.16';				package: 'CommandShell-Morphic' with: 'CommandShell-Morphic-dtl.2';				package: 'CommandShell-Piping' with: 'CommandShell-Piping-dtl.16';				package: 'CommandShell-Tests' with: 'CommandShell-Tests-dtl.11';				package: 'CommandShell-UI' with: 'CommandShell-UI-ThierryGoubier.12' ].	spec for: #pharo do: [ spec package: 'CommandShellPharo' with: 'CommandShellPharo-dtl.2' ].	spec for: #squeak do: [ spec package: 'CommandShell-MVC' with: 'CommandShell-MVC-dtl.3' ]! !"ConfigurationOfCommandShell"!!CartesianProduct commentStamp: 'CiprianTeodorov 4/29/2015 22:54' prior: 0!This class implements a somewhat efficient cartesian product algorithm.The core algorithm is implemented in #cartesianProduct:by:do: which actually implements a cartesian product between anArity instances of the same set with the possibility to skip computing some parts of the results.This skip functionality is used in #cartesianProduct:do: to compute the cartesian product of a collection of arrays. It produces duplicate results if the arrays are not sets (include more than one instance of the same object)This class is functional, thus it can have only one instanceDifferent implementations added.CartesianProduct benchmark  benchmark results on 29/04/2015 -- Pharo 4.0 {#generic->207. #recursive->20. #explorative->105. #iterative->81} Instance Variables!!CartesianProduct commentStamp: 'CiprianTeodorov 4/29/2015 22:54' prior: 34060650!This class implements a somewhat efficient cartesian product algorithm.The core algorithm is implemented in #cartesianProduct:by:do: which actually implements a cartesian product between anArity instances of the same set with the possibility to skip computing some parts of the results.This skip functionality is used in #cartesianProduct:do: to compute the cartesian product of a collection of arrays. It produces duplicate results if the arrays are not sets (include more than one instance of the same object)This class is functional, thus it can have only one instanceDifferent implementations added.CartesianProduct benchmark  benchmark results on 29/04/2015 -- Pharo 4.0 {#generic->207. #recursive->20. #explorative->105. #iterative->81} Instance Variables!!CartesianProduct class methodsFor: 'benchmarks' stamp: 'CiprianTeodorov 4/29/2015 22:53'!benchmark	| rnd arrayOfSets timeGeneric timeRecursive timeExplore timeIter count0 count1 count2 count3 |	rnd := Random new.	arrayOfSets := (1 to: 10)		collect: [ :e | 			(1 to: 5)				collect: [ :each | 					| size arr |					size := rnd nextInt: 10.					arr := Array new: size.					1 to: size do: [ :i | arr at: i put: i ].					arr ] ].	count0 := 0.	timeGeneric := Time		millisecondsToRun: [ 1 to: 10 do: [ :idx | CartesianProduct instance cartesianProductGeneric: (arrayOfSets at: idx) do: [ :t | count0 := count0 + 1 ] ] ].	count1 := 0.	timeRecursive := Time		millisecondsToRun: [ 1 to: 10 do: [ :idx | CartesianProduct instance cartesianProductRecursive: (arrayOfSets at: idx) do: [ :t | count1 := count1 + 1 ] ] ].	count2 := 0.	timeExplore := Time		millisecondsToRun: [ 1 to: 10 do: [ :idx | CartesianProduct instance cartesianProductExplorative: (arrayOfSets at: idx) do: [ :t | count2 := count2 + 1 ] ] ].	count3 := 0.	timeIter := Time		millisecondsToRun: [ 1 to: 10 do: [ :idx | CartesianProduct instance cartesianProductIterative: (arrayOfSets at: idx) do: [ :t | count3 := count3 + 1 ] ] ].	self assert: count0 = count1.	self assert: count1 = count2.	self assert: count2 = count3.	^ {(#generic -> timeGeneric).	(#recursive -> timeRecursive).	(#explorative -> timeExplore).	(#iterative -> timeIter)}! !!CartesianProduct class methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 11/1/2013 19:03'!cartesianProduct: aCollectionOfArrays do: aBlock	self instance cartesianProduct: aCollectionOfArrays do: aBlock! !!CartesianProduct class methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 19:03'!instance	^ instance ifNil: [ instance := CartesianProduct new ] ifNotNil: [ instance ]! !!CartesianProduct class methodsFor: 'private' stamp: 'CiprianTeodorov 11/1/2013 19:04'!resetInstance	instance := nil! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:58'!cartesianProduct: anArray by: anArity do: aBlock	| precomputedScale setCardinality resultCardinality idx tuple |	setCardinality := anArray size.	resultCardinality := setCardinality raisedTo: anArity.	precomputedScale := self scalesForArity: anArity resultCardinality: resultCardinality setCardinality: setCardinality.	tuple := Array new: anArity.		idx := 0.	[ idx < resultCardinality ]		whileTrue: [ 			| skipIndex |			"generate the idxth solution"			1 to: anArity do: [ :tupleIdx | 				| position |				position := (idx / (precomputedScale at: tupleIdx) \\ setCardinality) truncated.				tuple at: tupleIdx put: (anArray at: position + 1) ].			skipIndex := aBlock value: tuple.			self assert: [ skipIndex <= anArity ] description: 'The skip index should be smaller than the number of sets'.			skipIndex = anArity				ifTrue: [ idx := idx + 1 ]				ifFalse: [ idx := idx + (precomputedScale at: skipIndex + 1) ] ]! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:55'!cartesianProduct: aCollectionOfSets do: aBlock	^ (self cartesianProductRecursive: aCollectionOfSets) do: [ :t | aBlock value: t ]! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:43'!cartesianProductExplorative: activesPerAutomata do: aBlock	|toSeeLocal knowLocal|	knowLocal := Set new: (activesPerAutomata inject: 1 into: [ :product :list | product * list size ]).	toSeeLocal := LinkedList new.	toSeeLocal add: (Array new: activesPerAutomata size withAll: 1).	[ toSeeLocal isEmpty ]		whileFalse: [ 			| current |			current := toSeeLocal removeFirst.					"executeStuff"			aBlock value: (activesPerAutomata collectWithIndex: [:each :idx | each at: (current at: idx)]).			activesPerAutomata				doWithIndex: [ :each :idx | 					| value |					value := current at: idx.					value < each size						ifTrue: [ 							| next |							next := current deepCopy.							next at: idx put: value + 1.							(knowLocal includes: next) ifFalse: [ knowLocal add: next. toSeeLocal addLast: next ].							 ] ] ]! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:40'!cartesianProductGeneric: aCollectionOfSets do: aBlock	| block max result arity |	arity := aCollectionOfSets size.	result := Array new: arity.	block := [ :tuple | 	| stopAt |	stopAt := arity.	tuple		withIndexDo: [ :value :idx | 			| set |			set := aCollectionOfSets at: idx.			stopAt := set size < value				ifTrue: [ idx - 1 ]				ifFalse: [ stopAt ].			stopAt = arity				ifTrue: [ result at: idx put: (set at: value) ] ].	stopAt = arity		ifTrue: [ aBlock value: result ].	stopAt ].	max := (aCollectionOfSets detectMax: [ :each | each size ]) size.	self cartesianProduct: (1 to: max) by: arity do: block! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:43'!cartesianProductIterative: anArrayOfOrderedSets do: aBlock	|tupleCardinality resultCardinality precomputedScales precomputedSizes tuple idx|	tupleCardinality := anArrayOfOrderedSets size.	precomputedSizes := (anArrayOfOrderedSets collect: [ :each | each size ]) asArray.	precomputedScales := self scales: precomputedSizes. 	tuple := Array new: tupleCardinality.	idx := 0. 	resultCardinality := precomputedScales first.	[ idx < resultCardinality ] whileTrue: [ 		1 to: tupleCardinality do: [ :tupleIdx | 			| position |			position := (idx / (precomputedScales at: (tupleIdx + 1)) \\ (precomputedSizes at: tupleIdx)) truncated.			tuple at: tupleIdx put: ((anArrayOfOrderedSets at: tupleIdx) at: (position + 1))].		aBlock value: tuple.		idx := idx + 1.	 ].! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:48'!cartesianProductRecursive: listOfLists 	| resultLists |	resultLists := OrderedCollection new.	listOfLists		ifEmpty: [ resultLists add: {}. ^ resultLists  ]		ifNotEmpty: [ 			| firstList remainingLists |			firstList := listOfLists at: 1.			remainingLists := self cartesianProductRecursive: (listOfLists copyFrom: 2 to: listOfLists size).			firstList				do: [ :condition | 					remainingLists						do: [ :remainingList | 							| tuple |							tuple := OrderedCollection new: remainingList size + 1.							tuple add: condition.							tuple addAll: remainingList.							resultLists add: tuple ] ] ].	^ resultLists! !!CartesianProduct methodsFor: 'cartesian product' stamp: 'CiprianTeodorov 4/29/2015 22:42'!cartesianProductRecursive: listOfLists do: aBlock	^(self cartesianProductRecursive: listOfLists) do: [ :t | aBlock value: t ]. ! !!CartesianProduct methodsFor: 'cartesian product private' stamp: 'CiprianTeodorov 4/29/2015 22:42'!scales: listOfSizes	|scale current arity|	arity := listOfSizes size.	scale := Array new: arity + 1.	current := scale at: arity + 1 put: 1.	1 to: arity do: [ :idx | current := scale at: (arity-idx+1) put: (current * (listOfSizes at: (arity - idx + 1))) ].	^scale! !!CartesianProduct methodsFor: 'cartesian product private' stamp: 'CiprianTeodorov 11/1/2013 18:54'!scalesForArity: anArity resultCardinality: resultCardinality setCardinality: setCardinality	| scale current |	scale := Array new: anArity.	current := scale at: 1 put: resultCardinality / setCardinality.	2 to: anArity do: [ :idx | current := scale at: idx put: current / setCardinality ].	^ scale! !"CartesianProduct"!!CLExternalLibraryWrapper class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 2/2/2013 20:20'!initialize	uniqueInstance := super new! !!CLExternalLibraryWrapper class methodsFor: 'instance creation' stamp: 'CiprianTeodorov 12/26/2012 22:16'!new	self error: 'External library wrappers are singleton -- send uniqueInstance instead'! !!CLExternalLibraryWrapper class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 12/25/2012 18:47'!reset	^ uniqueInstance := nil! !!CLExternalLibraryWrapper class methodsFor: 'instance creation' stamp: 'CiprianTeodorov 3/9/2013 20:25'!uniqueInstance	^ uniqueInstance		ifNil: [ 			self initialize.			uniqueInstance ]		ifNotNil: [ uniqueInstance ]! !!CLExternalLibraryWrapper methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 12/26/2012 20:06'!call: fnSpec options: callOptions	" you can override this method if you need to"	^ (self nbCalloutIn: thisContext sender)		cdecl;		options: callOptions;		function: fnSpec module: self libraryNameOrHandle! !!CLExternalLibraryWrapper methodsFor: 'utils' stamp: 'CiprianTeodorov 12/24/2012 22:16'!libraryNameOrHandle	^ self class nbLibraryNameOrHandle! !!CLExternalLibraryWrapper methodsFor: 'utils' stamp: 'CiprianTeodorov 12/24/2012 22:16'!nbLibraryNameOrHandle	^ self class nbLibraryNameOrHandle! !!CLLibraryMap class methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/24/2012 22:01'!at: aSymbol	^ self at: aSymbol ifAbsent: [ super nbBindingOf: aSymbol ]! !!CLLibraryMap class methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/24/2012 22:01'!at: aSymbol ifAbsent: aBlock	^ typeMap at: aSymbol ifAbsent: aBlock! !!CLLibraryMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 12/24/2012 22:03'!initialize	super initialize.	self initializeTypeMap! !!CLLibraryMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 12/24/2012 22:02'!initializeTypeMap	typeMap := Dictionary newFromPairs: self typeMap.! !!CLLibraryMap class methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/25/2012 17:23'!libraryNameOrHandle	^self subclassResponsibility ! !!CLLibraryMap class methodsFor: 'accessing' stamp: 'CiprianTeodorov 12/24/2012 22:02'!typeMap	^#()! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 20:07'!rejectClasses^ #()! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 20:07'!rejectRules^ #()! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 20:20'!ruleClassInstVarNotInitializedRuleV1TruePositive^ #(#(#(#RGClassDefinition #(#CLExternalLibraryWrapper)) #'2013-02-02T20:20:52.855+01:00') )! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 20:52'!ruleInconsistentMethodClassificationRuleV1TruePositive^ #(#(#(#RGMethodDefinition #(#'CLLibraryMap class' #at: #true)) #'2013-02-02T20:50:25.692000001+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #initialize #true)) #'2013-02-02T20:50:25.731+01:00') #(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #initialize #true)) #'2013-02-02T20:52:11.08+01:00') #(#(#RGMethodDefinition #(#CLExternalLibraryWrapper #libraryNameOrHandle #false)) #'2013-02-02T20:52:11.117000001+01:00') #(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #new #true)) #'2013-02-02T20:52:11.157+01:00') )! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 20:27'!ruleSendsDifferentSuperRuleV1TruePositive^ #(#(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #uniqueInstance #true)) #'2013-02-02T20:27:31.016+01:00') )! !!ManifestTalkFFIRuntime class methodsFor: 'meta data' stamp: 'CiprianTeodorov 2/2/2013 21:02'!ruleUnclassifiedMethodsRuleV1TruePositive^ #(#(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #initialize #true)) #'2013-02-02T21:02:19.246+01:00') #(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #new #true)) #'2013-02-02T21:02:19.281000001+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #at:ifAbsent: #true)) #'2013-02-02T21:02:19.318+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #libraryNameOrHandle #true)) #'2013-02-02T21:02:19.583+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #at: #true)) #'2013-02-02T21:02:19.618000001+01:00') #(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #uniqueInstance #true)) #'2013-02-02T21:02:19.797000001+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #initialize #true)) #'2013-02-02T21:02:19.832000001+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #typeMap #true)) #'2013-02-02T21:02:19.976000001+01:00') #(#(#RGMethodDefinition #(#'CLExternalLibraryWrapper class' #reset #true)) #'2013-02-02T21:02:20.194+01:00') #(#(#RGMethodDefinition #(#CLExternalLibraryWrapper #libraryNameOrHandle #false)) #'2013-02-02T21:02:20.338+01:00') #(#(#RGMethodDefinition #(#'CLLibraryMap class' #initializeTypeMap #true)) #'2013-02-02T21:02:20.373000001+01:00') )! !"TalkFFI-Runtime"!!BddH6A class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!BddH6A class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 data1;	NBUInt8 data2;	NBUInt8 data3;	)! !!BddH6A class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH7A class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!BddH7A class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 data1;	)! !!BddH7A class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH5A class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!FddH5A class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 data1;	NBUInt8 data2;	NBUInt8 data3;	)! !!FddH5A class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH6A class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!FddH6A class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 data1;	)! !!FddH6A class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SBddCacheStatS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SBddCacheStatS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt32 uniqueAccess;	NBUInt32 uniqueChain;	NBUInt32 uniqueHit;	NBUInt32 uniqueMiss;	NBUInt32 opHit;	NBUInt32 opMiss;	NBUInt32 swapCount;	)! !!SBddCacheStatS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SBddGbcStatS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SBddGbcStatS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBInt32 nodes;	NBInt32 freenodes;	NBInt32 time;	NBInt32 sumtime;	NBInt32 num;	)! !!SBddGbcStatS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SBddPairS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SBddPairS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	BDD * result;	NBInt32 last;	NBInt32 id;	SBddPairS * next;	)! !!SBddPairS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SBddStatS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SBddStatS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBInt32 produced;	NBInt32 nodenum;	NBInt32 maxnodenum;	NBInt32 freenodes;	NBInt32 minfreenodes;	NBInt32 varnum;	NBInt32 cachesize;	NBInt32 gbcnum;	)! !!SBddStatS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SBvecS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SBvecS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBInt32 bitnum;	BDD * bitvec;	)! !!SBvecS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SFILES class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SFILES class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 * _p;	NBInt32 _r;	NBInt32 _w;	NBInt8 _flags;	NBInt8 _file;	SbufS _bf;	NBInt32 _lbfsize;	NBVoid * _cookie;	FddH1Cb _close;	FddH2Cb _read;	FddH3Cb _seek;	FddH4Cb _write;	SbufS _ub;	SFILEXO _extra;	NBInt32 _ur;	FddH5A _ubuf;	FddH6A _nbuf;	SbufS _lb;	NBInt32 _blksize;	fpos_t _offset;	)! !!SFILES class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!SbufS class methodsFor: 'nativeboost mapping' stamp: 'CiprianTeodorov 3/19/2014 09:39'!asNBExternalType: gen	^NBExternalStructureType objectClass: self! !!SbufS class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fieldsDesc	^#(	NBUInt8 * _base;	NBInt32 _size;	)! !!SbufS class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!Boolean class methodsFor: '*BuDDy-Core' stamp: 'CiprianTeodorov 3/24/2014 19:06'!X	^DontCare uniqueInstance ! !!Boolean methodsFor: '*BuDDy-Core' stamp: 'CiprianTeodorov 3/24/2014 18:56'!ifFalse: tBlock ifX: xBlock	self ifX: [ ^xBlock value ].	^self ifFalse: tBlock! !!Boolean methodsFor: '*BuDDy-Core' stamp: 'CiprianTeodorov 3/24/2014 18:52'!ifTrue: tBlock ifFalse: fBlock ifX: dBlock	self ifX: [ ^dBlock value ].	^self ifTrue: tBlock ifFalse: fBlock! !!Boolean methodsFor: '*BuDDy-Core' stamp: 'CiprianTeodorov 3/24/2014 18:56'!ifTrue: tBlock ifX: xBlock	self ifX: [ ^xBlock value ].	^self ifTrue: tBlock! !!Boolean methodsFor: '*BuDDy-Core' stamp: 'CiprianTeodorov 3/24/2014 18:53'!ifX: dBlock	^nil! !!DontCare class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:42'!initialize	instance := DontCare basicNew.! !!DontCare class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 19:06'!uniqueInstance	instance ifNil: [ self initialize ].	^instance! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:37'!& aBoolean	"Evaluating conjunction - answer aBoolean since we don't care what the receiver is"	^aBoolean! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:38'!and: alternativeBlock 	"Nonevaluating conjunction -- answer the value of alternativeBlock since the receiver can be true."	^alternativeBlock value! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:57'!asBit	^$-! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:55'!ifX: dBlock	^dBlock value! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:39'!not	"negation answer self since the receiver can be false or true"! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:40'!or: alternativeBlock	! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:47'!printOn: aStream	aStream nextPut: $X.! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:41'!xor: aBoolean	! !!DontCare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 18:41'!| aBoolean 	"Evaluating disjunction (OR) -- answer true since the receiver is true."	^self! !!BddH10Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBVoid (NBInt32 arg1, NBInt32 arg2))! !!BddH10Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH1Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/20/2014 22:06'!fnSpec	^#(NBVoid (NBInt8 * arg1, NBInt32 arg2))! !!BddH1Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH2Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1))! !!BddH2Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH3Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1, NBExternalString arg2, NBInt32 arg3))! !!BddH3Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH4Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt64 (NBVoid * arg1, NBInt64 arg2, NBInt32 arg3))! !!BddH4Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH5Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1, NBExternalString arg2, NBInt32 arg3))! !!BddH5Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH8Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBVoid (SFILES * arg1, NBInt32 arg2))! !!BddH8Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH9Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBVoid (NBInt32 arg1, SBddGbcStatS * arg2))! !!BddH9Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddHCbAnon1 class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBVoid (NBInt32 arg1))! !!BddHCbAnon1 class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddHCbAnon2 class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 ())! !!BddHCbAnon2 class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BvecH1Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBInt32 arg1))! !!BvecH1Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BvecH2Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBInt32 arg1, NBInt32 arg2, NBInt32 arg3))! !!BvecH2Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BvecH3Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBInt32 arg1, NBInt32 arg2))! !!BvecH3Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH1Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1))! !!FddH1Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH2Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1, NBExternalString arg2, NBInt32 arg3))! !!FddH2Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH3Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt64 (NBVoid * arg1, NBInt64 arg2, NBInt32 arg3))! !!FddH3Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH4Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBInt32 (NBVoid * arg1, NBExternalString arg2, NBInt32 arg3))! !!FddH4Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH7Cb class methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnSpec	^#(NBVoid (SFILES * arg1, NBInt32 arg2))! !!FddH7Cb class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BddH class methodsFor: 'library path' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbLibraryNameOrHandle	^ BuddyMap libraryNameOrHandle! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!addref: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_addref(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!addvarblock: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_addvarblock(BDD arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!allsat: r handler: handler 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_allsat(BDD r, Bddallsathandler handler)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!and: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_and(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!anodecount: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_anodecount(BDD * arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!appall: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_appall(BDD arg1, BDD arg2, NBInt32 arg3, BDD arg4)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!appex: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_appex(BDD arg1, BDD arg2, NBInt32 arg3, BDD arg4)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!apply: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_apply(BDD arg1, BDD arg2, NBInt32 arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!appuni: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_appuni(BDD arg1, BDD arg2, NBInt32 arg3, BDD arg4)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!autoreorder: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_autoreorder(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!autoreorder_times: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_autoreorder_times(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!biimp: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_biimp(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!blockfile_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddfilehandler bdd_blockfile_hook(Bddfilehandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!buildcube: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_buildcube(NBInt32 arg1, NBInt32 arg2, BDD * arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!cachestats: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_cachestats(bddCacheStat * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!clear_error	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_clear_error()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!clrvarblocks	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_clrvarblocks()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!compose: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_compose(BDD arg1, BDD arg2, BDD arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!constrain: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_constrain(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!default_errhandler: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_default_errhandler(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!default_gbchandler: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_default_gbchandler(NBInt32 arg1, bddGbcStat * arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!default_reohandler: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_default_reohandler(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!delref: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_delref(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!disable_reorder	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_disable_reorder()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!done	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_done()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!enable_reorder	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_enable_reorder()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!error_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddinthandler bdd_error_hook(Bddinthandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!errstring: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBExternalString bdd_errstring(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!exist: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_exist(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!extvarnum: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_extvarnum(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!false	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_false()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!file_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddfilehandler bdd_file_hook(Bddfilehandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnload: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_fnload(NBExternalString arg1, BDD * arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnprintdot: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_fnprintdot(NBExternalString arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fnsave: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_fnsave(NBExternalString arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!forall: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_forall(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintall: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprintall(FILE * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintdot: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprintdot(FILE * arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintorder: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprintorder(FILE * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprintset(FILE * arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintstat: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprintstat(FILE * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprinttable: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_fprinttable(FILE * arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!freepair: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_freepair(bddPair * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fullsatone: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_fullsatone(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!gbc	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_gbc()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!gbc_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddgbchandler bdd_gbc_hook(Bddgbchandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!getallocnum	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_getallocnum()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!getnodenum	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_getnodenum()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!getreorder_method	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_getreorder_method()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!getreorder_times	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_getreorder_times()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!high: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_high(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ibuildcube: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_ibuildcube(NBInt32 arg1, NBInt32 arg2, NBInt32 * arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!imp: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_imp(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!init: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_init(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!intaddvarblock: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_intaddvarblock(NBInt32 arg1, NBInt32 arg2, NBInt32 arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!isrunning	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_isrunning()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ite: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_ite(BDD arg1, BDD arg2, BDD arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ithvar: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_ithvar(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!level2var: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_level2var(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!load: ifile arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_load(FILE * ifile, BDD * arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!low: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_low(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!makeset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_makeset(NBInt32 * arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!newpair	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(bddPair * bdd_newpair()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nithvar: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_nithvar(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nodecount: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_nodecount(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!not: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_not(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!or: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_or(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!pathcount: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBFloat64 bdd_pathcount(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printall	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printall()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printdot: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printdot(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printorder	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printorder()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printset: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printset(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printstat	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printstat()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printtable: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_printtable(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!reorder: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_reorder(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!reorder_gain	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_reorder_gain()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!reorder_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddinthandler bdd_reorder_hook(Bddinthandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!reorder_probe: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddsizehandler bdd_reorder_probe(Bddsizehandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!reorder_verbose: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_reorder_verbose(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!replace: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_replace(BDD arg1, bddPair * arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!resetpair: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_resetpair(bddPair * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!resize_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bdd2Inthandler bdd_resize_hook(Bdd2Inthandler arg1)) options: #( optMayGC )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!restrict: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_restrict(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satcount: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBFloat64 bdd_satcount(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satcountln: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBFloat64 bdd_satcountln(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satcountlnset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBFloat64 bdd_satcountlnset(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satcountset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBFloat64 bdd_satcountset(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satone: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_satone(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!satoneset: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_satoneset(BDD arg1, BDD arg2, BDD arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!save: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_save(FILE * arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!scanset: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_scanset(BDD arg1, NBInt32 * * arg2, NBInt32 * arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setbddpair: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setbddpair(bddPair * arg1, NBInt32 arg2, BDD arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setbddpairs: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setbddpairs(bddPair * arg1, NBInt32 * arg2, BDD * arg3, NBInt32 arg4)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setcacheratio: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setcacheratio(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setmaxincrease: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setmaxincrease(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setmaxnodenum: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setmaxnodenum(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setminfreenodes: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setminfreenodes(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setpair: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setpair(bddPair * arg1, NBInt32 arg2, NBInt32 arg3)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setpairs: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setpairs(bddPair * arg1, NBInt32 * arg2, NBInt32 * arg3, NBInt32 arg4)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setvarnum: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_setvarnum(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setvarorder: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_setvarorder(NBInt32 * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!simplify: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_simplify(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!stats: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_stats(bddStat * arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!support: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_support(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!swapvar: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_swapvar(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!true	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_true()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!unique: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_unique(BDD arg1, BDD arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!var2level: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_var2level(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!var: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_var(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varblockall	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bdd_varblockall()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varlevel: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_varlevel(NBInt32 arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varnum	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_varnum()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varprofile: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 * bdd_varprofile(BDD arg1)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!veccompose: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_veccompose(BDD arg1, bddPair * arg2)) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!versionnum	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bdd_versionnum()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!versionstr	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBExternalString bdd_versionstr()) options: #(  )! !!BddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!xor: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bdd_xor(BDD arg1, BDD arg2)) options: #(  )! !!BvecH class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BvecH class methodsFor: 'library path' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbLibraryNameOrHandle	^ BuddyMap libraryNameOrHandle! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!add: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_add(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!addref: v 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_addref(BVEC v)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!coerce: bitnum v: v 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_coerce(NBInt32 bitnum, BVEC v)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!con: bitnum val: val 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_con(NBInt32 bitnum, NBInt32 val)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!copy: v 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_copy(BVEC v)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!delref: v 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_delref(BVEC v)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!div: left right: right res: res rem: rem 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bvec_div(BVEC left, BVEC right, BVEC * res, BVEC * rem)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!divfixed: e c: c res: res rem: rem 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bvec_divfixed(BVEC e, NBInt32 c, BVEC * res, BVEC * rem)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!equ: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_equ(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!false: var 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_false(NBInt32 var)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!free: v 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid bvec_free(BVEC v)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!gte: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_gte(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!gth: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_gth(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!isconst: e 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bvec_isconst(BVEC e)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ite: a b: b c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_ite(BDD a, BVEC b, BVEC c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!lte: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_lte(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!lth: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_lth(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!map1: a fun: fun 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_map1(BVEC a, BvecH1Cb fun)) options: #( optMayGC )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!map2: a b: b fun: fun 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_map2(BVEC a, BVEC b, BvecH3Cb fun)) options: #( optMayGC )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!map3: a b: b c: c fun: fun 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_map3(BVEC a, BVEC b, BVEC c, BvecH2Cb fun)) options: #( optMayGC )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!mul: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_mul(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!mulfixed: e c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_mulfixed(BVEC e, NBInt32 c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!neq: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD bvec_neq(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!shl: l r: r c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_shl(BVEC l, BVEC r, BDD c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!shlfixed: e pos: pos c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_shlfixed(BVEC e, NBInt32 pos, BDD c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!shr: l r: r c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_shr(BVEC l, BVEC r, BDD c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!shrfixed: e pos: pos c: c 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_shrfixed(BVEC e, NBInt32 pos, BDD c)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!sub: left right: right 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_sub(BVEC left, BVEC right)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!true: var 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_true(NBInt32 var)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!val: e 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 bvec_val(BVEC e)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!var: bitnum offset: offset step: step 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_var(NBInt32 bitnum, NBInt32 offset, NBInt32 step)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varfdd: var 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_varfdd(NBInt32 var)) options: #(  )! !!BvecH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varvec: bitnum var: var 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BVEC bvec_varvec(NBInt32 bitnum, NBInt32 * var)) options: #(  )! !!FddH class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!FddH class methodsFor: 'library path' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbLibraryNameOrHandle	^ BuddyMap libraryNameOrHandle! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!clearall	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid fdd_clearall()) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!domain: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD fdd_domain(NBInt32 arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!domainnum	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_domainnum()) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!domainsize: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_domainsize(NBInt32 arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!equals: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD fdd_equals(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!extdomain: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_extdomain(NBInt32 * arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!file_hook: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(Bddfilehandler fdd_file_hook(Bddfilehandler arg1)) options: #( optMayGC )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!fprintset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid fdd_fprintset(FILE * arg1, BDD arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!intaddvarblock: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_intaddvarblock(NBInt32 arg1, NBInt32 arg2, NBInt32 arg3)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ithset: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD fdd_ithset(NBInt32 arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!ithvar: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD fdd_ithvar(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!makeset: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(BDD fdd_makeset(NBInt32 * arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!overlapdomain: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_overlapdomain(NBInt32 arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!printset: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBVoid fdd_printset(BDD arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!scanallvar: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 * fdd_scanallvar(BDD arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!scanset: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_scanset(BDD arg1, NBInt32 * * arg2, NBInt32 * arg3)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!scanvar: arg1 arg2: arg2 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_scanvar(BDD arg1, NBInt32 arg2)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setpair: arg1 arg2: arg2 arg3: arg3 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_setpair(bddPair * arg1, NBInt32 arg2, NBInt32 arg3)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!setpairs: arg1 arg2: arg2 arg3: arg3 arg4: arg4 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_setpairs(bddPair * arg1, NBInt32 * arg2, NBInt32 * arg3, NBInt32 arg4)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!varnum: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 fdd_varnum(NBInt32 arg1)) options: #(  )! !!FddH methodsFor: 'foreign interface' stamp: 'CiprianTeodorov 3/19/2014 09:39'!vars: arg1 	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>	^self call: #(NBInt32 * fdd_vars(NBInt32 arg1)) options: #(  )! !!BDDConstant class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 20:01'!id: anId symbol: aSymbol	^self new initialize;		id: anId;		symbol: aSymbol! !!BDDConstant methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/24/2014 20:01'!id		^ id! !!BDDConstant methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/24/2014 20:01'!id: anObject		id := anObject! !!BDDConstant methodsFor: 'printing' stamp: 'CiprianTeodorov 3/24/2014 20:10'!printOn: aStream	aStream nextPutAll: symbol asString.! !!BDDConstant methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/24/2014 20:01'!symbol		^ symbol! !!BDDConstant methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/24/2014 20:01'!symbol: anObject		symbol := anObject! !!BDDFactory class methodsFor: 'reflective operations' stamp: 'CiprianTeodorov 3/24/2014 21:43'!doesNotUnderstand: aMessage	aMessage numArgs = 0		ifFalse: [ ^ super doesNotUnderstand: aMessage ].	^ operators		at: aMessage selector		ifAbsent: [ reorderMethods at: aMessage selector ifAbsent: [ super doesNotUnderstand: aMessage ] ]! !!BDDFactory class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/24/2014 21:42'!initialize	super initialize.	self initializeOperators.	self initializeReorderMethods.! !!BDDFactory class methodsFor: 'operations' stamp: 'CiprianTeodorov 3/24/2014 21:38'!initializeOperators	operators := Dictionary new.	self operatorList do: [ :each |		operators at: each first put: (BDDOperation id: each second symbol: each first) .	]! !!BDDFactory class methodsFor: 'operations' stamp: 'CiprianTeodorov 3/24/2014 21:39'!initializeReorderMethods	reorderMethods := Dictionary new.	self reorderMethodList do: [ :each |		reorderMethods at: each first put: (BDDReorderMethod id: each second symbol: each first) .	]! !!BDDFactory class methodsFor: 'instance-creation' stamp: 'CiprianTeodorov 3/24/2014 20:20'!nodeTableSize: aNumberOfNodes cacheSize: aCacheSize	^self package: #buddy nodeTableSize: aNumberOfNodes cacheSize: aCacheSize! !!BDDFactory class methodsFor: 'operations' stamp: 'CiprianTeodorov 3/24/2014 21:38'!operatorList	^#(	(and 0)	(xor 1)	(or 2)	(nand 3)	(nor 4)	(imp 5)	(biimp 6)	(diff 7)	(less 8)	(invimp 9)	)! !!BDDFactory class methodsFor: 'instance-creation' stamp: 'CiprianTeodorov 3/24/2014 20:20'!package: aSymbol nodeTableSize: aNumberOfNodes cacheSize: aCacheSize	^aSymbol caseOf: { 	[ #buddy ] -> [ BuDDyFactory nodeTableSize: aNumberOfNodes cacheSize: aCacheSize  ]	}	otherwise: [ "SmallBDDFactory nodes: aNumberOfNodes cache: aCacheSize." 		"in the future we might have a smalltalk bdd library, as default"		nil		]! !!BDDFactory class methodsFor: 'operations' stamp: 'CiprianTeodorov 3/24/2014 21:37'!reorderMethodList	^#(	(NONE 0)	(WIN2 1)	(WIN2ITE 2)	(SIFT 3)	(SIFTITE 4)	(WIN3 5)	(WIN3ITE 6)	(RANDOM 7)	)! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:35'!activeNodes	"gets the number of active nodes in use. The dead nodes not yet reclaimed are conted as active"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'variable blocks' stamp: 'CiprianTeodorov 3/25/2014 00:28'!addVarBlock: varBlock fixed: aBoolean	"adds a new variable block for reordering.	Creates a new variable block with the variables in the variable set var.     * The variables in var must be contiguous.</p>     *      * <p>The fixed parameter sets the block to be fixed (no reordering of its     * child blocks is allowed) or free."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:45'!autoReorder: aMethod	"enables automatic reordering, if the method is REORDER_NONE then reordering is disabled"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:46'!autoReorder: aMethod max: aMax	"enables automatic reordering with the max number of reorderings"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:33'!cacheRatio: aRatio	"Sets the cache ratio for the operator caches.  When the node table       grows, operator caches will also grow to maintain the ratio."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:36'!cacheSize	"gets the current size of the cache, in entries"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:33'!cacheSize: aSize	"sets the cache size"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'variable blocks' stamp: 'CiprianTeodorov 3/25/2014 00:31'!clearVarBlocks	"clears all variable blocks defined so far"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:48'!disableReorder	"disable reordering until enableReorder is sent"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'initialization' stamp: 'CiprianTeodorov 3/24/2014 20:26'!done	"This function frees all memory used by the BDD     package and resets the package to its uninitialized state.     The BDD package is no longer usable after this call."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'pairing' stamp: 'CiprianTeodorov 3/24/2014 21:57'!duplicate: aVariable	"duplicate a variable"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:48'!enableReorder	"enable reordering after a #disableReorder is sent"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:32'!increaseFactor: aFactor	"sets the factor by which to increase the node table after garbage collection.	The amount of growth is still limited by maxIncrease"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'testing' stamp: 'CiprianTeodorov 3/24/2014 20:17'!isInitialized	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - variables' stamp: 'CiprianTeodorov 3/24/2014 21:28'!ithvar: aNumber	"returns a BDD representing the I'th var. 	One with the children true and false.	The requested var should be between 0 and varNum.	Constant false is returned on failure"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:34'!level2var: aLevel	"converts from an integer representing a BDD level to a BDD variable"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'serialization' stamp: 'CiprianTeodorov 3/24/2014 21:31'!loadFrom: aStream	"loads a BDD from a stream"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'serialization' stamp: 'CiprianTeodorov 3/24/2014 21:31'!loadFromFilename: aFilename	"loads a BDD from a file"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'pairing' stamp: 'CiprianTeodorov 3/24/2014 21:53'!makePair	"makes a new BDDPair object"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:31'!maxIncrease: aNumber	"sets the maximum number of nodes by which to increase the node table"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:27'!maxNodes: aSize	"sets the maximum number of BDD nodes available"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:30'!minFreeNodes: aRatio	"sets the minimum percentage of nodes to be reclaimed after a garbage collection.	If this percentage is not reclaimed, the node table will grow. aRatio should be between 0 and 1. the default is 1/5"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - variables' stamp: 'CiprianTeodorov 3/24/2014 21:28'!nithvar: aNumber	"returns a BDD representing the negation of the I'th var. 	One with the children true and false.	The requested var should be between 0 and varNum.	Constant false is returned on failure"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:35'!nodeTableSize	"gets the number of allocated nodes. It includes both dead and active nodes"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - cache' stamp: 'CiprianTeodorov 3/24/2014 20:33'!nodeTableSize: aNumber	"sets the node table size"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'initialization' stamp: 'CiprianTeodorov 3/24/2014 20:25'!nodeTableSize: aNumberOfNodes cacheSize: aCacheSize	"initialize the BDD engine with number of nodes and a cache size"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - variables' stamp: 'CiprianTeodorov 3/24/2014 21:09'!numVariables	"returns the number of defined variables"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - variables' stamp: 'CiprianTeodorov 3/24/2014 21:10'!numVariables: aNumber	"sets the number of used variables.	It can be called more than once, but it only increases the number of variables"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'constants' stamp: 'CiprianTeodorov 3/24/2014 20:15'!one	^self subclassResponsibility ! !!BDDFactory methodsFor: 'pairing' stamp: 'CiprianTeodorov 3/24/2014 21:56'!pair: oldVar with: newVar	"make a new pairing that maps from one var to another"	"oldVar can be a variable index or a BDDDomain	newVar can be an index, a BDD or a Domain	"	^self makePair 		oldVar: oldVar;		newVar: newVar! !!BDDFactory methodsFor: 'printing' stamp: 'CiprianTeodorov 3/24/2014 21:29'!printAllOn: aStream	^self subclassResponsibility ! !!BDDFactory methodsFor: 'variable blocks' stamp: 'CiprianTeodorov 3/25/2014 00:32'!printOrderOn: aStream	"prints an idented list of the variable blocks"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:37'!printStatisticsOn: aStream	^self subclassResponsibility ! !!BDDFactory methodsFor: 'printing' stamp: 'CiprianTeodorov 3/24/2014 21:29'!printTable: aBDD on: aStream		"prints the node table entries used by a bdd"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:45'!reorder: aMethod	"reorder a BDD using a given method"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:37'!reorderGain	"Calculate the gain in size after a reordering.  The value returned is     * (100*(A-B))/A, where A is previous number of used nodes and B is current     * number of used nodes."^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:47'!reorderMethod	"the current reordering method define by autoReorder"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:47'!reorderTimes	"returns the number of reorderings left"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:49'!reorderVerbosity: aNumber	"verbose reordering infos. 0 -no info, 1 - some info, >1 - lots of info"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'initialization' stamp: 'CiprianTeodorov 3/24/2014 20:24'!reset	"resets the BDD factory to its initial state.	everything is reallocated. same as done followed by initialize"	|nodes cache|	nodes := self nodeTableSize.	cache := self cacheSize.	self done.	self nodeTableSize: nodes cacheSize: cache.! !!BDDFactory methodsFor: 'serialization' stamp: 'CiprianTeodorov 3/24/2014 21:32'!save: aBDD toFilename:  aFilename 	"saves a BDD in a file"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'serialization' stamp: 'CiprianTeodorov 3/24/2014 21:33'!save: aBDD toStream:  aStream 	"saves a BDD in a file"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing - statistics' stamp: 'CiprianTeodorov 3/25/2014 00:34'!sharedNodesCount: aCollectionOfBDD	"counts the number of shared nodes in a collection of BDDs"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'pairing' stamp: 'CiprianTeodorov 3/24/2014 21:57'!swap: var1 with:var2	"swaps 2 variables"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:34'!var2level: aVar	"converts from an integer representing a BDD variable to a BDD level"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'variable blocks' stamp: 'CiprianTeodorov 3/25/2014 00:31'!varBlockAll	"Add a variable block for all variables.</p>     *      * <p>Adds a variable block for all BDD variables declared so far.  Each block     * contains one variable only.  More variable blocks can be added later with     * the use of addVarBlock -- in this case the tree of variable blocks will     * have the blocks of single variables as the leafs."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'variable blocks' stamp: 'CiprianTeodorov 3/25/2014 00:29'!varBlockFrom: firstIdx to: lastIdx fixed: aBoolean	"Adds a new variable block for reordering.</p>     *      * <p>Creates a new variable block with the variables numbered first through     * last, inclusive.</p>     *      * <p>The fixed parameter sets the block to be fixed (no reordering of its     * child blocks is allowed) or free."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'reordering' stamp: 'CiprianTeodorov 3/24/2014 21:52'!varOrder: anArrayOfVariableIndices	"This function sets the current variable order to be the one defined by     * neworder.  The variable parameter neworder is interpreted as a sequence     * of variable indices and the new variable order is exactly this sequence.     * The array must contain all the variables defined so far. If, for     * instance the current number of variables is 3 and neworder contains     * [1; 0; 2] then the new variable order is v1<v0<v2.</p>     *      * <p>Note that this operation must walk through the node table many times,     * and therefore it is much more efficient to call this when the node table     * is small."	^self subclassResponsibility ! !!BDDFactory methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 00:33'!version	"BDD lib version"	^self subclassResponsibility ! !!BDDFactory methodsFor: 'constants' stamp: 'CiprianTeodorov 3/24/2014 20:15'!zero	^self subclassResponsibility ! !!BuDDyBDD class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/18/2014 23:10'!bdd	^bdd ifNil: [ bdd := BddH uniqueInstance ]! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:33'!bddop_and	^0! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:34'!bddop_biimp     ^6! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:35'!bddop_diff      ^7! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:34'!bddop_imp       ^5! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:35'!bddop_invimp    ^9! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:35'!bddop_less      ^8! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:34'!bddop_nand      ^3! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:34'!bddop_nor       ^4! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:34'!bddop_or        ^2! !!BuDDyBDD class methodsFor: 'operators' stamp: 'CiprianTeodorov 3/18/2014 22:33'!bddop_xor       ^1! !!BuDDyBDD class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/18/2014 23:11'!initialize	bdd := BddH uniqueInstance.! !!BuDDyBDD class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/24/2014 20:19'!nodeTableSize: aNumberOfNodes cacheSize: aCacheSize		[ self bdd init: aNumberOfNodes  arg2: aCacheSize ] on: Exception do: [ :ex | ^ex ].	buddyIsInitialized := true.! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:10'!& anotherBDD	"logical and A&B=A*B [0001]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_and! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:10'!* anotherBDD	"logical and A&B=A*B [0001]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_and! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:10'!+ anotherBDD	"logical or (A+B)=(A|B) [0111]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_or! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:07'!- anotherBDD	"set difference (A\B) [0010]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_diff! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:07'!< anotherBDD	"less than (A<B) [0100]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_less! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:07'!<= anotherBDD	"reverse implication (A <= B) [1011]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_invimp ! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:07'!<=> anotherBDD	"biimplication (A <=> B) [1001]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_biimp ! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:07'!=> anotherBDD	"implication (A => B) [1101]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_imp! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:08'!> anotherBDD	"greater than (A>B)=(A\B) [0010]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_diff! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:08'!\ anotherBDD	"set difference (A \ B) [0010]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_diff! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:51'!allsatCollect: aBlock	| newCollection |	newCollection := OrderedCollection new.	self allsatDo: [:each | newCollection add: (aBlock value: each)].	^ newCollection! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/24/2014 19:02'!allsatDo: aBlock	|handler|	handler := Bddallsathandler on: [ :varset :size | |arr|		arr := OrderedCollection new.		1 to: size do: [ :idx | |value state|			value := (varset byteAt: (idx - 1)).			value < 0 ifTrue: [ state := Boolean X ]			ifFalse: [ value = 0 ifTrue: [ state := false ] ifFalse: [ state := true ] ].			arr add: state.		].		aBlock value: arr asArray.	].	^ (bdd allsat: self id handler: handler)! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:54'!anodecount: anArrayOfBDD	"Counts the number of shared nodes in an array of bdds. "	|array size|	array := nil. self halt.	size := anArrayOfBDD size.	^bdd anodecount: array arg2: size.! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:26'!compose: gBDD for: varBDD	^(bdd compose: self id arg2: gBDD  arg3: varBDD) asBDD	! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:22'!constrain: aBDD	"generalized cofactor.	Computes the generalized cofactor of self with respect to aBDD"	^ (bdd constrain: self id arg2: aBDD) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:28'!exist: varBDD	"Existential quantification of variables.	Removes all occurences in self of variables in the set varBDD by existential quantification."	^ (bdd exist: self id arg2: varBDD) asBDD! !!BuDDyBDD methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/18/2014 22:45'!false	^0! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:29'!forall: varBDD	"Universal quantification of variables.	Removes all occurences in r of variables in the set var by universal quantification."	^ (bdd forall: self id arg2: varBDD) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:35'!fullsatone	"Finds one satisfying variable assignment.	Finds a BDD with exactly one variable at all levels. This BDD implies r and is not false unless r is false."	^(bdd fullsatone: self id) asBDD! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:47'!high "^BDD"	"gets the true branch of a BDD"	^(bdd high: self id) asBDD! !!BuDDyBDD methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/18/2014 23:03'!id	^self root! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:15'!ifTrue: trueBDD ifFalse: falseBDD	"calculates the BDD for the expression (f*g)+(~f*g) more efficiently than doing the three operations separately."	"can also be used for conjunction, disjunction and any other boolean operator, but is not as efficient for the binary and unary operations."	^(bdd ite: self id arg2: trueBDD arg3: falseBDD) asBDD! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:47'!low "^BDD"	"gets the false branch of a BDD"	^(bdd low: self id) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:09'!nand: anotherBDD	"logical not-and [1110]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_nand! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:52'!nodecount "^number"	"Counts the number of nodes used for a bdd. "	^bdd nodecount: self id ! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:09'!nor: anotherBDD	"logical not-or [1000]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_nor! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:03'!not	"Negates a bdd.	Negates the BDD r by exchanging all references to the zero-terminal with references to the one-terminal and vice versa.	Returns: The negated bdd."	^(bdd not: self id) asBDD! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:56'!pathcount	"Counts the number of paths leading to the true terminal"	^bdd pathcount: self id.! !!BuDDyBDD methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/19/2014 09:42'!ref	^bdd addref: self id! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:20'!restrict: aBDDSet	"Restric a set of variables to constant values.This function restricts the variables in r to constant true or false. How this is done depends on how the variables are included in the variable set var. If they are included in their positive form then they are restricted to true and vice versa. Unfortunately it is not possible to insert variables in their negated form using bdd_makeset, so the variable set has to be build manually as a conjunction of the variables. Example: Assume variable 1 should be restricted to true and variable 3 to false.aBDD = make_user_bdd(); R1 = BDD ithvar:1; R2 = BDD nithvar:3; R = R1 & R2; RES = aBDD restrict: R. "	^(bdd restrict:self id arg2: aBDDSet) asBDD! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:49'!satcount "^number"	"calculates the number of satisfying variable assignments"	^bdd satcount: self id! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:52'!satcount: aBDDSet "^number"	"calculates the number of satisfying variable assignments for a given set of variables"	^bdd satcountset: self id arg2: aBDDSet id! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:51'!satcountln "^number"	"Calculates the logarithm of the number of satisfying variable assignments. "	^bdd satcountln: self id! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:52'!satcountln: aBDDSet "^number"	"Calculates the logarithm of the number of satisfying variable assignments for a given set of variables. "	^bdd satcountlnset: self id arg2: aBDDSet id! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:33'!satone	"Finds one satisfying variable assignment.	Finds a BDD with at most one variable at each level. This BDD implies r and is not false unless r is false."	^ (bdd satone: self id) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:34'!satoneset: varBDD polarity: polBDD	"Finds one satisfying variable assignment.Finds a minterm in r. The var argument is a variable set that defines a set of variables that must be mentioned in the result. The polarity of these variables in result --- in case they are undefined in r --- are defined by the pol parameter. If pol is the false BDD then the variables will be in negative form, and otherwise they will be in positive form."	^(bdd satoneset: self id arg2: varBDD arg3: polBDD) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:27'!simplify: domainBDD	"Coudert and madre's restrict function.	Tries to simplify the BDD f by restricting it to the domain covered by domainBDD. 	No checks are done to see if the result is actually smaller than the input. 	This can be done by the user with a call to bdd_nodecount."	^ (bdd simplify: self id arg2: domainBDD) asBDD! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:25'!substitute: varBDD with: gBDD	^self compose: gBDD for: varBDD	! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:48'!support "^BDD"	"returns the variable support of a BDD"	^(bdd support: self id) asBDD! !!BuDDyBDD methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/18/2014 22:44'!true	^1! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:30'!unique: varBDD	"Unique quantification of variables.	Removes all occurences in self of variables in the set varBDD by unique quantification. 	This type of quantification uses a XOR operator instead of an OR operator as in the existential quantification, and an AND operator as in the universal quantification."	^ (bdd unique: self id arg2: varBDD)! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:46'!var "^int"	"get the variable labeling the BDD"	^bdd var: self id! !!BuDDyBDD methodsFor: 'bdd information' stamp: 'CiprianTeodorov 3/20/2014 20:55'!varprofile"Returns a variable profile.Counts the number of times each variable occurs in the bdd r. The result is stored and returned in an integer array where the i'th position stores the number of times the i'th variable occured in the BDD. It is the users responsibility to free the array again using a call to free.Returns:A pointer to an integer array with the profile or NULL if an error occured."	self halt.! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:09'!xor: anotherBDD	"logical xor [0110]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_xor! !!BuDDyBDD methodsFor: 'bdd operators' stamp: 'CiprianTeodorov 3/20/2014 21:10'!| anotherBDD	"logical or (A+B)=(A|B) [0111]"	^bdd apply: self id arg2: anotherBDD ref id arg3: self class bddop_or! !!SFILEXO class methodsFor: 'nativeboost types' stamp: 'CiprianTeodorov 3/19/2014 09:39'!nbBindingOf: aTypeName	^ BuddyMap at: aTypeName! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initialize	super initialize.	self initializeStructs.	self initializeEnums.	self initializeCallbacks.	self initializeArrays.	self initializeUnions.! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initializeArraysBddH6A initialize.FddH6A initialize.BddH7A initialize.FddH5A initialize.! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initializeCallbacksBvecH3Cb initialize.BvecH2Cb initialize.BddH5Cb initialize.FddH1Cb initialize.FddH7Cb initialize.BddH10Cb initialize.BddHCbAnon2 initialize.FddH2Cb initialize.BvecH1Cb initialize.BddH2Cb initialize.BddH1Cb initialize.BddH8Cb initialize.FddH3Cb initialize.BddHCbAnon1 initialize.BddH9Cb initialize.BddH3Cb initialize.FddH4Cb initialize.BddH4Cb initialize.! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initializeEnums! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initializeStructsSBvecS rebuildFieldAccessors.SbufS rebuildFieldAccessors.SBddPairS rebuildFieldAccessors.SFILES rebuildFieldAccessors.SBddCacheStatS rebuildFieldAccessors.SBddGbcStatS rebuildFieldAccessors.SBddStatS rebuildFieldAccessors.! !!BuddyMap class methodsFor: 'class initialization' stamp: 'CiprianTeodorov 3/19/2014 09:39'!initializeUnions! !!BuddyMap class methodsFor: 'library path' stamp: 'CiprianTeodorov 4/18/2015 10:33'!libraryNameOrHandle	|imageDir|	imageDir := Smalltalk imagePath asFileReference parent fullName.	NativeBoost platformId = 1 ifTrue: [ |libpath|		libpath := imageDir, '/buddy-2.4/linux32/lib/libbdd.so'.		libpath asFileReference exists ifTrue: [ ^libpath ] ].	NativeBoost platformId = 2 		ifTrue:[|libpath|		libpath := imageDir, '/buddy-2.4/osx32/lib/libbdd.dylib'.		libpath asFileReference exists ifTrue: [ ^libpath ] ].	NativeBoost platformId = 3 		ifTrue:[|libpath|		libpath := imageDir, '/buddy-2.4/win32/lib/libbdd.dll'.		libpath asFileReference exists ifTrue: [ ^libpath ] ].		self error: 'define your own path'! !!BuddyMap class methodsFor: 'type map' stamp: 'CiprianTeodorov 3/19/2014 09:39'!typeMap	^#(bddGbcStat 'SBddGbcStatS'bddStat 'SBddStatS'FILE 'SFILES'fpos_t 'NBInt64'bddCacheStat 'SBddCacheStatS'BDD 'NBInt32'BVEC 'SBvecS'bddPair 'SBddPairS')! !!SBvecS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!bitnum	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #bitnum! !!SBvecS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!bitnum: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #bitnum put: anObject! !!SBvecS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!bitvec	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #bitvec! !!SBvecS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!bitvec: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #bitvec put: anObject! !!SbufS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_base	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_base! !!SbufS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_base: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_base put: anObject! !!SbufS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_size	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_size! !!SbufS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_size: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_size put: anObject! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!id	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #id! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!id: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #id put: anObject! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!next	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #next! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!next: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #next put: anObject! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!result	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #result! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!result: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #result put: anObject! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!last	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #last! !!SBddPairS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!last: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #last put: anObject! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data1! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data1 put: anObject! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data2	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data2! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data2: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data2 put: anObject! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data3	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data3! !!FddH5A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data3: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data3 put: anObject! !!FddH6A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data1	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data1! !!FddH6A methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!data1: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #data1 put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_w	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_w! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_w: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_w put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_p	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_p! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_p: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_p put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_extra	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_extra! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_extra: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_extra put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_nbuf	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_nbuf! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_nbuf: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_nbuf put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_close	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_close! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_close: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_close put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_offset	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_offset! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_offset: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_offset put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_lbfsize	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_lbfsize! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_lbfsize: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_lbfsize put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_file	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_file! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_file: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_file put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ubuf	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ubuf! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ubuf: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ubuf put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_seek	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_seek! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_seek: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_seek put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_cookie	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_cookie! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_cookie: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_cookie put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_blksize	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_blksize! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_blksize: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_blksize put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_bf	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_bf! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_bf: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_bf put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_lb	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_lb! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_lb: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_lb put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ur	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ur! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ur: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ur put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_read	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_read! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_read: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_read put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_flags	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_flags! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_flags: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_flags put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_r	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_r! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_r: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_r put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ub	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ub! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_ub: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_ub put: anObject! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_write	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_write! !!SFILES methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!_write: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #_write put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueAccess	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueAccess! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueAccess: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueAccess put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueChain	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueChain! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueChain: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueChain put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!opMiss	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #opMiss! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!opMiss: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #opMiss put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!swapCount	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #swapCount! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!swapCount: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #swapCount put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueHit	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueHit! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueHit: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueHit put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!opHit	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #opHit! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!opHit: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #opHit put: anObject! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueMiss	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueMiss! !!SBddCacheStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!uniqueMiss: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #uniqueMiss put: anObject! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!sumtime	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #sumtime! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!sumtime: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #sumtime put: anObject! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!nodes	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #nodes! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!nodes: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #nodes put: anObject! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!freenodes	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #freenodes! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!freenodes: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #freenodes put: anObject! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!time	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #time! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!time: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #time put: anObject! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!num	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #num! !!SBddGbcStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!num: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #num put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!maxnodenum	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #maxnodenum! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!maxnodenum: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #maxnodenum put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!minfreenodes	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #minfreenodes! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!minfreenodes: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #minfreenodes put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!produced	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #produced! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!produced: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #produced put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!varnum	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #varnum! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!varnum: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #varnum put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!freenodes	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #freenodes! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!freenodes: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #freenodes put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!nodenum	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #nodenum! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!nodenum: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #nodenum put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!gbcnum	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #gbcnum! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!gbcnum: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #gbcnum put: anObject! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!cachesize	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #cachesize! !!SBddStatS methodsFor: '*generated-code-non-existing-package' stamp: 'NativeBoost 1/5/2016 15:12'!cachesize: anObject	"This method was automatically generated"	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: errorCode>		^ self fieldAt: #cachesize put: anObject! !"BuDDy"!!HelloWorld commentStamp: 'StefanMarr 5/14/2011 16:42' prior: 0!Simple example for how to use ScriptStarter.HelloWorld prints all arguments given to #run:.!!Run commentStamp: 'StefanMarr 3/19/2012 21:24' prior: 0!Run is a class that will take the command line arguments and will try to evaluate it as Smalltalk.!!ScriptStarter commentStamp: 'StefanMarr 5/14/2011 16:29' prior: 0!ScriptStarter provides a startUp method and registers itself on the startUpList to enable scripting using command-line arguments.The first argument on the command-line is used to identify a class on which #run: is invoked with the arguments as an array.#run: can be used similar to classic main(String[] args) methods in other languages. !!HeadlessSave class methodsFor: 'script entry' stamp: 'StefanMarr 4/5/2012 21:47'!run: arguments 	| proc |	proc := [		| basicName newName |		ScriptConsole println: 'Do wait, let system run non-busy, and then save and quit'.		(Delay forSeconds: 10) wait.		ScriptConsole println: 'Do headless save now.'.		basicName := SmalltalkImage current imageName withoutLast: '.image' size.		newName := basicName, '-headless.image'.		SmalltalkImage current saveAs: newName.		SmalltalkImage current snapshot: false andQuit: true.		] newProcess.		proc priority: Processor userBackgroundPriority.	proc resume.! !!HelloWorld commentStamp: 'StefanMarr 5/14/2011 16:42' prior: 34190116!Simple example for how to use ScriptStarter.HelloWorld prints all arguments given to #run:.!!HelloWorld class methodsFor: 'script entry'!run: arguments 	ScriptConsole print: 'Hello World!!'.	arguments		do: [:elem | ScriptConsole print: elem].	SmalltalkImage current snapshot: false andQuit: true! !!Run commentStamp: 'StefanMarr 3/19/2012 21:24' prior: 34190269!Run is a class that will take the command line arguments and will try to evaluate it as Smalltalk.!!Run class methodsFor: 'script entry' stamp: 'StefanMarr 3/19/2012 21:47'!run: args	| str cmdClass |	ScriptStarter quitVMAfterScriptExecution: false.		cmdClass := args removeFirst.	str := args reduce: [:a :b | a asString, ' ', b asString ].	ScriptConsole println: str.	ScriptConsole println: args asString.	ScriptConsole println: 'Going to evaluate the string'.	[ Compiler evaluate: str. ]		ifError: [:err :rcvr | ScriptConsole println: 'Error: ', err].! !!ScriptConsole class methodsFor: 'streaming'!<< aString	self print: aString! !!ScriptConsole class methodsFor: 'printing'!cr	self println: ''.! !!ScriptConsole class methodsFor: 'initialization' stamp: 'StefanMarr 4/5/2012 22:08'!detectAvailableMechanismForStdout	"The prefered means is to use the stdout file handle.	 Will try to fall back on the RoarVM primitive if necessary."	| cls |	(FileStream respondsTo: #stdout)		ifTrue: [			PrintTarget := FileStream stdout.			IsRVM := false. "Not needed when stdout is used"			^ self.		].			cls := Smalltalk at: #RVMOperations ifAbsent: [nil].	IsRVM := (cls notNil and: [cls perform: #isRVM]).	IsRVM 		ifTrue: [ 			PrintTarget := cls.			^ self.		]		ifFalse: [			"Squeak 4.2 provides a stream at FileStream>>stdout"					].		PrintTarget := Transcript.	^ Transcript! !!ScriptConsole class methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 14:03'!flush	PrintTarget ifNotNil: [PrintTarget flush].! !!ScriptConsole class methodsFor: 'initialization' stamp: 'StefanMarr 12/31/2011 01:27'!initialize	"ScriptConsole initialize"	OutputToTranscript := false.	self detectAvailableMechanismForStdout.	Position := 0.! !!ScriptConsole class methodsFor: 'streaming' stamp: 'StefanMarr 12/5/2011 18:11'!nextPut: somethingAsString	self print: somethingAsString! !!ScriptConsole class methodsFor: 'streaming' stamp: 'StefanMarr 12/31/2011 01:23'!nextPutAll: somethingAsString	self print: somethingAsString! !!ScriptConsole class methodsFor: 'printing'!outputToTranscript	^ OutputToTranscript! !!ScriptConsole class methodsFor: 'printing'!outputToTranscript: aBool	OutputToTranscript := aBool! !!ScriptConsole class methodsFor: 'read, write, position' stamp: 'StefanMarr 12/31/2011 01:29'!peekLast	^ LastPrintedChar! !!ScriptConsole class methodsFor: 'read, write, position' stamp: 'StefanMarr 12/31/2011 01:27'!position	^ Position! !!ScriptConsole class methodsFor: 'printing'!print: somethingAsString	self print: somethingAsString withLineEnding: ''.! !!ScriptConsole class methodsFor: 'printing' stamp: 'StefanMarr 12/31/2011 01:30'!print: somethingAsString withLineEnding: lineEnd	"Will output the somethingAsString to stdout using one of the available mechansims and to the transcript if requested"	| output |	output := somethingAsString asString.	Position := Position + output size.	output size > 0 ifTrue: [		LastPrintedChar := output last].		PrintTarget ifNotNil: [		IsRVM ifTrue: [ PrintTarget print: output. ]			   ifFalse: [ PrintTarget nextPutAll: (output, lineEnd) ].	].	(OutputToTranscript or: [PrintTarget isNil])		ifTrue: [			Transcript show: output, lineEnd.		].! !!ScriptConsole class methodsFor: 'printing'!println: somethingAsString	self print: somethingAsString withLineEnding: String crlf.! !!ScriptConsole class methodsFor: 'printing' stamp: 'StefanMarr 12/31/2011 01:22'!space	"Append a space character to the receiver."	self nextPut: Character space! !!ScriptConsole class methodsFor: 'printing' stamp: 'StefanMarr 12/31/2011 01:27'!tab	"Append a tab character to the receiver."	self nextPut: Character tab! !!ScriptStarter commentStamp: 'StefanMarr 5/14/2011 16:29' prior: 34190437!ScriptStarter provides a startUp method and registers itself on the startUpList to enable scripting using command-line arguments.The first argument on the command-line is used to identify a class on which #run: is invoked with the arguments as an array.#run: can be used similar to classic main(String[] args) methods in other languages. !!ScriptStarter class methodsFor: 'helper' stamp: 'StefanMarr 3/19/2012 21:44'!executeRunFor: scriptClassName with: arguments	| scriptClass |	scriptClass := Smalltalk classNamed: scriptClassName.	scriptClass ifNotNil: [		scriptClass run: arguments.		QuitVM ifTrue: [			Smalltalk snapshot: SafeBeforeQuit andQuit: true.		].	].! !!ScriptStarter class methodsFor: 'helper' stamp: 'StefanMarr 8/6/2012 18:37'!getSystemAttributes	| arguments arg i |	arguments := OrderedCollection new.	i := 2.	[[arg := Smalltalk vm getSystemAttribute: i] value == nil]		whileFalse: [arguments addLast: arg.			i := i + 1].	^ arguments! !!ScriptStarter class methodsFor: 'initialization' stamp: 'sm 5/30/2011 22:33'!initialize	"Automatically install ScriptStarter when the code is filed in."	self install.		QuitVM := true.	SafeBeforeQuit := false.	IsResuming := false.! !!ScriptStarter class methodsFor: 'system startup entry' stamp: 'sm 5/25/2011 12:41'!install	"Will register ScriptStarter on the StartUpList to activate it on VM startup."	| pref |	Smalltalk addToStartUpList: ScriptStarter.		"Disable the loading of documents on startup"	pref := Smalltalk at: #Preferences ifAbsent: [nil].	pref	ifNotNil: [			(pref respondsTo: #disable:)				ifTrue: [	pref disable: #readDocumentAtStartup. ]			]		ifNil: [			(Smalltalk globals at: #AbstractLauncer ifAbsent: [nil])				ifNotNilDo: [:launcher |					launcher readDocumentAtStartup: false				]			].! !!ScriptStarter class methodsFor: 'configuration'!quitVMAfterScriptExecution	^ QuitVM! !!ScriptStarter class methodsFor: 'configuration'!quitVMAfterScriptExecution: aBool	QuitVM := aBool! !!ScriptStarter class methodsFor: 'configuration'!saveImageBeforeQuit	^ SafeBeforeQuit! !!ScriptStarter class methodsFor: 'configuration'!saveImageBeforeQuit: aBool	SafeBeforeQuit := aBool! !!ScriptStarter class methodsFor: 'system startup entry' stamp: 'sm 5/30/2011 22:35'!startUp	"startUp is invoked during startup.	 ScriptStarter has to be registered in the SystemDirectory's StartUpList	 See ScriptStarter>>install"		| arguments scriptClassName |	"Ok, only, and really only during startup"	IsResuming ifFalse: [ Transcript show: 'ScriptStarter did not execute a given script, since it assumes to be executed after a snapshot and not during startup.'.		^ self. ].		"First make sure that stdout output can be used if available."	ScriptConsole detectAvailableMechanismForStdout.		arguments := self getSystemAttributes.	arguments size > 0		ifTrue: [scriptClassName := arguments at: 1.			self executeRunFor: scriptClassName with: arguments.]! !!ScriptStarter class methodsFor: 'system startup entry' stamp: 'sm 5/30/2011 22:30'!startUp: resuming	IsResuming := resuming.	^ super startUp: resuming.! !!ScriptStarter class methodsFor: 'transporter' stamp: 'StefanMarr 4/5/2012 21:48'!transportersForFileOutMenu	^ { (Smalltalk at: #Transporter ifAbsent: [^#()])			forPackage: (PackageInfo named: 'Scripting') }! !!ScriptStarter class methodsFor: 'system startup entry'!uninstall	"Will remove ScriptStarter from the StartUpList"	Smalltalk removeFromStartUpList: ScriptStarter.		self flag: 'TODO: restore original setting for readDocumentAtStartup, see >>install.'.	Transcript show: 'You might need to restore the original setting for readDocumentAtStartup'.! !!UpdateImage class methodsFor: 'script entry' stamp: 'sm 5/30/2011 22:41'!run: args	| proc |	"The loading needs to be done after everything in startup has been done.	 Otherwise the snaphost routine gets confused.	 Thus, we do that ourselfs."	ScriptStarter quitVMAfterScriptExecution: false.		"Use a delayed process to do the actual work"	proc := [ (Delay forSeconds: 5) wait.	  "Create an up-to-date image"	  (FileStream readOnlyFileNamed: 'FileInAllRenaissanceCode.st') fileIn.	Transcript show: 'Snapshot and Quit now...'. 	 Smalltalk snapshot: true andQuit: true. ] newProcess.	proc name: 'Update Image'.	proc resume.	! !!SubunitRunner class methodsFor: 'defaults' stamp: 'StefanMarr 8/11/2012 13:59'!defaultOutputTarget	^ DefaultOutputTarget ifNil: [		(Smalltalk hasClassNamed: #ScriptConsole) ifTrue: [^Smalltalk classNamed: #ScriptConsole].		Transcript		] ifNotNil: [DefaultOutputTarget]! !!SubunitRunner class methodsFor: 'defaults' stamp: 'sm 5/25/2011 14:21'!defaultOutputTarget: someStreamishThing	"The output target should understand some parts of the standard stream protocol.	 For details, see the actual usage. A Transcript is good, and most streams, too."	DefaultOutputTarget := someStreamishThing! !!SubunitRunner class methodsFor: 'scripting' stamp: 'StefanMarr 3/10/2012 18:06'!run: arguments	"This is the main entry when started as a script from the command line"	| sel  |	(arguments size < 2) ifTrue: [		^ self usage.].	sel := (arguments at: 2) asSymbol.	sel = #runAllTests ifTrue: [		^ self runAllTests.].		(arguments size < 3) ifTrue: [		^ self usage.].		self perform: sel with: (arguments at: 3).	! !!SubunitRunner class methodsFor: 'running' stamp: 'sm 5/25/2011 16:05'!runAllTests	self runClasses: Smalltalk allClasses named: 'All'.! !!SubunitRunner class methodsFor: 'running'!runCategories: aCollectionOfStrings	^ aCollectionOfStrings do: [ :each | self runCategory: each ]! !!SubunitRunner class methodsFor: 'running'!runCategory: aString	^ self runClasses: (Smalltalk organization classesInCategory: aString) named: aString! !!SubunitRunner class methodsFor: 'running'!runClasses: aCollectionOfClasses named: aString	| suite classes |	suite := TestSuite named: aString.	classes := (aCollectionOfClasses		select: [ :each | (each includesBehavior: TestCase) and: [ each isAbstract not ] ])			asSortedCollection: [ :a :b | a name <= b name ].	classes isEmpty		ifTrue: [ ^ self ].	classes		do: [ :each | each addToSuiteFromSelectors: suite ].	^ self runSuite: suite! !!SubunitRunner class methodsFor: 'running'!runPackage: aString	^ self runClasses: (PackageInfo named: aString) classes named: aString! !!SubunitRunner class methodsFor: 'running'!runPackages: aCollectionOfStrings	^ aCollectionOfStrings do: [ :each | self runPackage: each ]! !!SubunitRunner class methodsFor: 'running'!runSuite: aTestSuite	^ self new 		initializeOn: aTestSuite; 		run! !!SubunitRunner class methodsFor: 'scripting' stamp: 'StefanMarr 3/10/2012 17:48'!usage	ScriptConsole println: 'TestConsoleRunner <action> [argument]'.	ScriptConsole println: ''.		ScriptConsole println: '   <action> = runAllTests | runCategory: | runPackage: '.! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:23'!beforeTestCase: aTestCase	stream nextPut: Character lf.		stream	nextPutAll: 'test: '.	self   reportTestName: aTestCase.	stream nextPut: Character lf.	stream flush.! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:23'!beforeTestSuite: aSuite	stream nextPut: Character lf.		stream nextPutAll: 'suite: ';    nextPutAll: aSuite name; nextPut: Character lf.	stream nextPutAll: 'progress: '; nextPutAll: aSuite tests size asString; nextPut: Character lf.	stream nextPutAll: 'time: '; nextPutAll: DateAndTime now asString; nextPut: Character lf.		stream flush.! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:23'!errorTestCase: aTestCase with: error stack: stack	stream nextPut: Character lf.		stream nextPutAll: 'error: '.	self   reportTestName: aTestCase.	self   reportCause: error stack: stack.	stream flush.! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:23'!expectedFailTestCase: aTestCase	stream nextPut: Character lf.		stream nextPutAll: 'xfail: '.	self   reportTestName: aTestCase.	stream nextPut:    Character lf.	stream flush.! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:24'!failedTestCase: aTestCase with: error stack: stack	stream nextPut: Character lf.	stream nextPutAll: 'failure: '.	self   reportTestName: aTestCase.	self   reportCause: error stack: stack.	stream flush.! !!SubunitRunner methodsFor: 'initialization' stamp: 'StefanMarr 7/14/2011 17:18'!initialize	super initialize.	stream := self class defaultOutputTarget! !!SubunitRunner methodsFor: 'initialization'!initializeOn: aTestSuite	suite := aTestSuite.	suitePosition := suiteTime := suiteFailures := suiteErrors := 0! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/11/2012 13:12'!reportCause: error stack: stack.		stream nextPutAll: ' ['; nextPut: Character lf.	stream		tab; nextPutAll: 'type: '; nextPutAll: (error class name); nextPut: Character lf;		tab; nextPutAll: 'message:'; nextPutAll: (error messageText ifNil: [ error description ]); nextPut: Character lf;		tab; nextPutAll: 'stack trace:'; nextPut: Character lf;		nextPutAll: stack;		nextPut: Character lf;		nextPutAll: ']'; nextPut: Character lf! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/11/2012 13:14'!reportTestName: aTestCase  stream	nextPutAll: (aTestCase class category); nextPut: $.;	nextPutAll: (aTestCase class name); nextPut: $.;	nextPutAll: (aTestCase selector)! !!SubunitRunner methodsFor: 'running' stamp: 'StefanMarr 8/11/2012 13:15'!run	| execBlock |	execBlock :=  [ [ 			self setUp.			suiteTime := [ self runAll ]				timeToRun ]					ensure: [ self tearDown. ] ].		(Smalltalk at: #Author ifAbsent: [ 		execBlock value.		^ self ])			uniqueInstance				ifUnknownAuthorUse: 'TestConsoleRunner'				during: execBlock.! !!SubunitRunner methodsFor: 'running'!runAll	suite tests do: [ :each | each run: self ]! !!SubunitRunner methodsFor: 'running' stamp: 'StefanMarr 8/11/2012 13:17'!runCase: aTestCase	| error stack didSucceed |	didSucceed := false.		self beforeTestCase: aTestCase.		[	aTestCase announce: TestCaseStarted withResult: self.		aTestCase runCase.		aTestCase announce: TestCaseEnded  withResult: self.		self addPass: aTestCase.		didSucceed := true.] 	on: Halt , Error, TestFailure, self class failure, self class error	do: [ :err |			error := err.			stack := self stackTraceString: err of: aTestCase.			err sunitAnnounce: aTestCase toResult: self ].	didSucceed ifTrue: [		self successfulTestCase: aTestCase.		^ self.].		(error isNil or: [ aTestCase expectedFailures includes: aTestCase selector ]) ifTrue: [		self expectedFailTestCase: aTestCase.		^ self.	].	(error isKindOf: TestFailure)		ifTrue: [self failedTestCase: aTestCase with: error stack: stack]		ifFalse:[self errorTestCase:  aTestCase with: error stack: stack].! !!SubunitRunner methodsFor: 'running' stamp: 'StefanMarr 8/11/2012 12:30'!setUp	self beforeTestSuite: suite.		"Initialize the test resources."	suite resources do: [ :each |		each isAvailable			ifFalse: [ each signalInitializationError ] ]! !!SubunitRunner methodsFor: 'private'!stackTraceString: err of: aTestCase	^ String streamContents: [ :str | 		| context |		context := err signalerContext.		[ context isNil or: [ context receiver == aTestCase and: [ context methodSelector == #runCase ] ] ] whileFalse: [			str print: context; nextPut: Character lf.			context := context sender ] ] ! !!SubunitRunner methodsFor: 'reporting' stamp: 'StefanMarr 8/12/2012 08:25'!successfulTestCase: aTestCase	stream nextPut: Character lf.		stream 	  nextPutAll: 'success: ';	  nextPutAll: (aTestCase class category); nextPut: $.;	  nextPutAll: (aTestCase class name); nextPut: $.;	  nextPutAll: (aTestCase selector);	  nextPut:    Character lf.	  stream flush.! !!SubunitRunner methodsFor: 'running' stamp: 'StefanMarr 8/11/2012 13:14'!tearDown	suite resources 		do: [ :each | each reset ]! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:54'!expectedFailures	^#(testExpectedFail testUnexpectedPass)! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:52'!testAllFine	self assert: true.! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:53'!testException	self foobarNotUnderstood.! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:53'!testExpectedFail	self fail.! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:53'!testFail	self fail.! !!SubunitTestExamples methodsFor: 'as yet unclassified' stamp: 'StefanMarr 8/11/2012 12:54'!testUnexpectedPass	self assert: true.! !"Scripting"!!SMarkHarness commentStamp: '<historical>' prior: 0!A benchmark harness steers the execution and reporting of benchmarks.For that purpose, it will use a designated benchmark runner to do the execution and a benchmark reporter to output the results.The benchmark harness is also parameterized by the benchmark suites that are to be executed.The simplest way to execute a benchmark suite is to use SMarkSuite >> #run.However, directly using the harness classes gives more freedom on reporting and execution strategies.A typical call of the harness from the commandline would result in the following invokation:	SMarkHarness run: {'SMarkHarness'. 'SMarkLoops.benchIntLoop'. 1. 1. 5}!!ReBenchHarness commentStamp: 'StefanMarr 5/16/2011 09:10' prior: 0!The ReBenchHarness is optimized for use from the command-line.It is especially meant to be used together with ReBench, a tool to execute and document benchmarks reproducibly.See: https://github.com/smarr/ReBench#readme!!SMarkReporter commentStamp: '<historical>' prior: 0!SMarkReporter is a simple formatter of benchmark results. Subclass such as SMarkSimpleStatisticsReporter might implement more advanced reporting functionality, e.g., including a statistical evaluation of the results.Example:	| f |	f := TextStream on: String new.	SMarkSimpleStatisticsReporter reportFor: (SMarkTestRunnerSuiteForAutosizing run: 10) on: f.	f contents!!ReBenchReporter commentStamp: '<historical>' prior: 0!A ReBenchReporter is reporter for the ReBench framework (cf. https://github.com/smarr/ReBench).It is used be the ReBenchHarness, which is the main class of interest for users that just want to execute benchmarks.!!SMarkResult commentStamp: 'StefanMarr 3/18/2011 23:45' prior: 0!A benchmark result is characterized by: - the total execution time (#total is the least a benchmark results in) - the name of the benchmark that was executed - the suite object specifies the used input used for the benchmark - dictionary of additional the criteria and the related timingsA benchmark can produced multiple resuts for different criteria. The standard criterion is #total.!!SMarkCogRunner commentStamp: 'StefanMarr 12/30/2011 23:24' prior: 0!This runner is doing warmup on for Cog VMs with just-in-time compilation.The goal is to bring the JIT compiler into a steady state where no jitting is performed anymore during benchmarking.!!SMarkProfileRunner commentStamp: '<historical>' prior: 0!This runner profiles the benchmarks for better analysis. Unlike the classical benchmark runner this one will not collect the results. Instead it will execute the benchmarks in the system profiler.!!SMarkSuite commentStamp: '<historical>' prior: 0!A Benchmark Suite is a set of benchmarks and it knows what exactly needs to be executed.However, it does not really know how to execute it.It knows all the magic, that is, how to set up and tear down the environment for the benchmarks, but does not have the knowledge of how many iterations need to be done and how to evaluate any results that might be produced.Please see also SMarkHarness, which is the main class relevant for users to execute benchmarks with SMark.Usage:Choose a suite (i.e. one of my subclasses) and use the class-side #run or run: messages.To get an example print the result of the following expression:		SMarkCompiler run: 10		SMarkLoops runOnly: #benchArrayAccess!!SMarkLoops commentStamp: '<historical>' prior: 0!SMarkLoops implements a set of microbenchmarks measuring a number of basic aspects such as message send, instance field access, and array access cost.Example use:  (SMarkLoops new runOnly: #benchFloatLoop) run: 10 !!SMarkSlopstone commentStamp: 'nishis 2/21/98 06:26' prior: 0!modified for Squeak by nishis@urban.ne.jpI added one class methods.and modified execute method.  block variables are renamed for Squeak.Thanx to Mr. Tim Olson, Mr. Kohler Markus, Mr. Tim Rowledge, Mr. John Maloney, Mr. Ian Piumarta.original comments	NAME			STones80	AUTHOR			bruce@utafll.uta.edu (Bruce Samuelson)	FUNCTION		low and medium level benchmarks for ST80 and ST/V	ST-VERSIONS		pre R4.0, R4.0, R4.1, ST/V	PREREQUISITES	need floating point hardware or emulation	CONFLICTS		none	DISTRIBUTION	world	VERSION			1.0	DATE			April 16, 1993SUMMARY The filein includes two classes: Slopstones (Smalltalk Low levelOPeration Stones) and Smopstones (Smalltalk Medium level OPeration Stones).Each includes seven cpu intensive benchmarks. They work equally well with16-bit and 32-bit implementations and are designed to be portable to allSmalltalk versions from ParcPlace and Digitalk. They are normalized to theauthor's 486/33 Windows 3.1 machine running ParcPlace VisualWorks 1.0.Results have been posted to the Usenet group comp.lang.smalltalk and form thebasis of an article that is scheduled to be published in the June issue of TheSmalltalk Report.The only difference between the ST80 (STones80) and ST/V (STonesV) filein isin the messages that define the classes in the first few lines of code. TheST80 messages specify the class category and message protocol, which are notused in ST/V.Bruce Samuelson!!SMarkSmopstone commentStamp: 'nishis 2/21/98 06:26' prior: 0!modified for Squeak by nishis@urban.ne.jpsee the comment of SlopstoneBenchmark class.I added all class methods and initialization>initilize method,modified:	streamTestsOn: method.  In some case use testPrintOn: s base: instead of printOn:,	primesUpTo: method. From recursively calling a block to whileTrue: block.	sorcerersApprentice method. From recursively calling a block to  recursive method.	execute and setup method.Thanx to Mr. Tim Olson, Mr. Kohler Markus, Mr. Tim Rowledge, Mr. John Maloney, Mr. Ian Piumarta.originak code by	NAME			STones80	AUTHOR			bruce@utafll.uta.edu (Bruce Samuelson)	FUNCTION		low and medium level benchmarks for ST80 and ST/V	ST-VERSIONS		pre R4.0, R4.0, R4.1, ST/V	PREREQUISITES	need floating point hardware or emulation	CONFLICTS		none	DISTRIBUTION	world	VERSION			1.0	DATE			April 16, 1993!!SMarkTestRunnerSuite commentStamp: 'StefanMarr 3/13/2011 22:58' prior: 0!This is a benchmark suite used to test the benchmark runner!!SMarkTestSuite commentStamp: 'StefanMarr 3/12/2011 22:13' prior: 0!This class is used for unit testing only.!!SMarkTimer commentStamp: '<historical>' prior: 0!A SMarkTimer is a simple timer.A subclass can measure alternative metrics, or for instance use different time sources.A subclass of SMarkRunner can then use the custom timer class by overriding SMarkRunner class >> #defaultTimer.!!SMarkTransporter commentStamp: 'StefanMarr 4/5/2012 21:43' prior: 0!SMarkTransporter is a used to interact with a git-fileout system used in the RoarVM project to manage Smalltalk source code.SMarkTransporter is not actually a Transporter class, since there are currently no needs for customization.Thus, it is just a dummy class for future use, and to hold #transportersForFileOutMenu.!!SMarkResultTest commentStamp: 'StefanMarr 3/18/2011 23:29' prior: 0!This test specifies the data stored in a result object.The result object does not actually provide behavior on its own.!!SMarkTest commentStamp: 'StefanMarr 3/12/2011 21:57' prior: 0!A general test to ensure the overall framework works as expected.!!SMarkCompilerTargetClass methodsFor: 'compiling'!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set."	^ false! !!SMarkCompilerTargetClass methodsFor: 'accessing method dictionary' stamp: 'StefanMarr 2/13/2013 00:43'!addAndClassifySelector: selector withMethod: compiledMethod inProtocol: aCategory notifying: requestor	| priorMethodOrNil oldProtocol newProtocol |	priorMethodOrNil := self compiledMethodAt: selector ifAbsent: [nil].	self addSelectorSilently: selector withMethod: compiledMethod.	oldProtocol := self organization categoryOfElement: selector.	self classify: selector under: aCategory.	newProtocol := self organization categoryOfElement: selector.! !!SMarkCompilerTargetClass methodsFor: 'compatibility Pharo 1.4 vs. 2.0' stamp: 'StefanMarr 2/13/2013 00:42'!classify: selector under: aCategory	"Use image specific approach Pharo 1.4 vs. Pharo 2.0"	| classify |	classify := [self organization classify: selector under: aCategory].	"Pharo 1.4"	(Smalltalk at: #SystemChangeNotifier ifPresent: [:cls |		^ cls uniqueInstance doSilently: classify ]).		"Pharo 2.0"	^ SystemAnnouncer uniqueInstance suspendAllWhile: classify.! !!SMarkCompilerTargetClass methodsFor: 'initialization' stamp: 'sm 1/17/2011 09:38'!initialize	super initialize.	self methodDictionary: MethodDictionary new.! !!SMarkHarness commentStamp: '<historical>' prior: 34208543!A benchmark harness steers the execution and reporting of benchmarks.For that purpose, it will use a designated benchmark runner to do the execution and a benchmark reporter to output the results.The benchmark harness is also parameterized by the benchmark suites that are to be executed.The simplest way to execute a benchmark suite is to use SMarkSuite >> #run.However, directly using the harness classes gives more freedom on reporting and execution strategies.A typical call of the harness from the commandline would result in the following invokation:	SMarkHarness run: {'SMarkHarness'. 'SMarkLoops.benchIntLoop'. 1. 1. 5}!!ReBenchHarness commentStamp: 'StefanMarr 5/16/2011 09:10' prior: 34209250!The ReBenchHarness is optimized for use from the command-line.It is especially meant to be used together with ReBench, a tool to execute and document benchmarks reproducibly.See: https://github.com/smarr/ReBench#readme!!ReBenchHarness class methodsFor: 'helper' stamp: 'StefanMarr 12/30/2011 19:59'!defaultArgumentParser	^ ReBenchHarnessArgumentParser! !!ReBenchHarness class methodsFor: 'defaults'!defaultReporter	^ ReBenchReporter! !!ReBenchHarness class methodsFor: 'defaults' stamp: 'sm 5/25/2011 17:06'!defaultRunner	^ SMarkWeakScalingRunner! !!ReBenchHarness class methodsFor: 'helper' stamp: 'sm 5/25/2011 17:20'!usageBenchmarkParameters: usage	^ usage,		' processes          optional, number of processes/threads used by the benchmarks', String crlf,				' inner-iterations   optional, number of iterations done by a single process', String crlf,				' problemSize        optional, depending on benchmark for instance size of used data set', String crlf.				! !!ReBenchHarness class methodsFor: 'helper' stamp: 'sm 5/25/2011 17:20'!usageHeader	| usage |	usage := 'SMark Benchmark Framework, version: ', self version, String crlf.	usage := usage, String crlf.	usage := usage, 'Usage: <vm+image> ', self name,				' <suiteOrBenchmark> [processes [inner-iterations [problemSize]]]', String crlf.	usage := usage, String crlf.		usage := usage, '  This harness is used for weak-scalling benchmarks.', String crlf.	usage := usage, '  Use the SMarkHarness for more general settings, it offers more options.', String crlf.		usage := usage, String crlf.	^ usage! !!ReBenchHarness class methodsFor: 'helper'!usageReporter: usage	"Will rely on default, which is good for ReBench, so do not advertise option."	^ usage! !!ReBenchHarness class methodsFor: 'helper'!usageRunner: usage	"Will rely on default, which is good for ReBench, so do not advertise option."	^ usage! !!SMarkHarness class methodsFor: 'helper' stamp: 'StefanMarr 12/30/2011 19:59'!defaultArgumentParser	^ SMarkHarnessArgumentParser! !!SMarkHarness class methodsFor: 'defaults'!defaultOutputDestination	^ Smalltalk at:       #ScriptConsole	            ifAbsent: [SMarkReporter defaultOutputDestination]! !!SMarkHarness class methodsFor: 'defaults'!defaultReporter	^ SMarkReporter defaultReporter! !!SMarkHarness class methodsFor: 'defaults'!defaultRunner	^ SMarkSuite defaultRunner! !!SMarkHarness class methodsFor: 'benchmarking' stamp: 'sm 5/25/2011 17:41'!execute: runner andReport: reporter	runner reportConfiguration: self defaultOutputDestination.	runner execute.	reporter runner: runner.	reporter outputStream: self defaultOutputDestination.	reporter report.! !!SMarkHarness class methodsFor: 'benchmarking'!execute: aBenchmarkOrSuite using: aRunnerClass andReport: withAReporterClass	| parsedBenchmarkOrSuite runner reporter |		parsedBenchmarkOrSuite := self parseBenchmarkOrSuite: aBenchmarkOrSuite.		runner := aRunnerClass new.	reporter := withAReporterClass new.	self instructRunner: runner with: parsedBenchmarkOrSuite.	self execute: runner andReport: reporter.   ! !!SMarkHarness class methodsFor: 'helper' stamp: 'StefanMarr 12/30/2011 20:00'!parseArguments: arguments	| parser |	parser := self defaultArgumentParser new.	parser harness: self.	^ parser parse: arguments.! !!SMarkHarness class methodsFor: 'script entry' stamp: 'StephaneDucasse 6/16/2013 20:45'!run: arguments	"Executed from the command line using something similar to	 ./vm my.image SMarkHarness SMarkRunner SMarkReporter SMarkLoops\>\>benchIntLoop 1 1 5	 ./vm my.image SMarkHarness SMarkRunner SMarkReporter SMarkLoops.benchIntLoop 1 1 5"	| runner reporter runnerAndReporter |		(self shouldShowUsage: arguments)		ifTrue: [			self usage.			^ self.		].		runnerAndReporter := self parseArguments: arguments.	runner := runnerAndReporter first.	reporter := runnerAndReporter second.  		self execute: runner andReport: reporter. ! !!SMarkHarness class methodsFor: 'helper'!shouldShowUsage: arguments		arguments size < 2 ifTrue: [^ true ].		^ arguments anySatisfy: [:elem | (elem = '--help') or: [elem = '-?'] ].  ! !!SMarkHarness class methodsFor: 'helper' stamp: 'StephaneDucasse 6/16/2013 21:04'!usage	| usage |	"Example usage: SMarkHarness SMarkRunner SMarkReporter SMarkLoops.benchIntLoop 1 1 5"		usage := self usageHeader.		usage := usage, 'Arguments:', String crlf.	usage := self usageRunner:   usage.	usage := self usageReporter: usage.	usage := usage, ' suiteOrBenchmark   required, either a SMarkSuite with benchmarks,', String crlf.	usage := usage, '                              or a benchmark denoted by Suite.benchName', String crlf.	usage := self usageBenchmarkParameters: usage.		self defaultOutputDestination print: usage.! !!SMarkHarness class methodsFor: 'helper'!usageBenchmarkParameters: usage	^ usage,	' iterations         optional, number of times the benchmarks are repeated', String crlf,				' processes          optional, number of processes/threads used by the benchmarks', String crlf,				' problemSize        optional, depending on benchmark for instance number of', String crlf,				'                              inner iterations or size of used data set', String crlf.! !!SMarkHarness class methodsFor: 'helper'!usageHeader	| usage |	usage := 'SMark Benchmark Framework, version: ', self version, String crlf.	usage := usage, String crlf.	usage := usage, 'Usage: <vm+image> ', self name, ' [runner] [reporter] <suiteOrBenchmark>', String crlf.	usage := usage, '                               [iterations [processes [problemSize]]]', String crlf.	usage := usage, String crlf.	^ usage! !!SMarkHarness class methodsFor: 'helper'!usageReporter: usage	^ usage,	' reporter           optional, a SMarkReporter class that processes', String crlf,				'                              and displays the results', String crlf.	! !!SMarkHarness class methodsFor: 'helper'!usageRunner: usage	^ usage, ' runner             optional, a SMarkRunner class that executes the benchmarks', String crlf.! !!SMarkHarness class methodsFor: 'helper'!version	(Smalltalk classNamed: #ConfigurationOfBenchmarking)		ifNotNilDo: [:cfg |			^ cfg project currentVersion versionNumber asString.		].	  	(Smalltalk classNamed: #MCPackage)		ifNotNilDo: [:mcp |			| package |			package := mcp named: 'SMark'.			package hasWorkingCopy ifTrue: [				^ package workingCopy ancestors first name.			].		].		^ ''.! !!ReBenchHarnessArgumentParser methodsFor: 'argument parsing' stamp: 'sm 5/25/2011 17:17'!determineBenchmarkParametersFromArguments	i := i + 1.	i <= numParams ifTrue: [		processes := (arguments at: i) asInteger.		i := i + 1.		i <= numParams ifTrue: [			iterations := (arguments at: i) asInteger.			i := i + 1.			i <= numParams ifTrue: [				problemSize := arguments at: i.			]		]	].! !!ReBenchHarnessArgumentParser methodsFor: 'argument parsing'!determineReporter	reporter := harness defaultReporter new.! !!ReBenchHarnessArgumentParser methodsFor: 'argument parsing'!determineRunner	runner := harness defaultRunner new.! !!ReBenchHarnessArgumentParser methodsFor: 'helper' stamp: 'sm 5/25/2011 17:31'!instructRunner	super instructRunner.		runner iterations: runner class defaultNumberOfIterations.	runner innerIterations: iterations.! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing' stamp: 'sm 5/25/2011 17:38'!determineBenchmarkParameters	"Initialize with defaults, will be overwritten in case	 it is specified."	iterations := runner class defaultNumberOfIterations.	processes  := runner class defaultNumberOfProcesses.	problemSize:= suiteClass defaultProblemSize.		self determineBenchmarkParametersFromArguments.! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing'!determineBenchmarkParametersFromArguments	i := i + 1.	i <= numParams ifTrue: [		iterations := (arguments at: i) asInteger.		i := i + 1.		i <= numParams ifTrue: [			processes := (arguments at: i) asInteger.			i := i + 1.			i <= numParams ifTrue: [				problemSize := arguments at: i.			]		]	].! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing'!determineReporter	(currentObj isKindOf: SMarkReporter)		ifFalse: [ reporter := harness defaultReporter new. ]		ifTrue:  [ reporter := currentObj.			i := i + 1.			i <= numParams ifTrue: [				current := arguments at: i.			]		].! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing'!determineRunner	(currentObj isKindOf: SMarkRunner)		ifFalse: [ runner := harness defaultRunner new. ]		ifTrue:  [ runner := currentObj.			i := i + 1.			i <= numParams ifTrue: [				current := arguments at: i.				currentObj := (Smalltalk classNamed: current) ifNotNilDo: [:cls | cls new].			]		].! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing' stamp: 'sm 5/25/2011 17:26'!determineSuiteOrBenchmark	self parseBenchmarkOrSuite: current.! !!SMarkHarnessArgumentParser methodsFor: 'accessing'!harness: aHarness	harness := aHarness! !!SMarkHarnessArgumentParser methodsFor: 'helper' stamp: 'sm 5/25/2011 17:29'!instructRunner	suite := suiteClass new.	specificBenchmark ifNotNil: [		suite runOnly: specificBenchmark.	].		runner suite: suite. 	runner iterations: iterations.	runner processes: processes.	runner problemSize: problemSize.! !!SMarkHarnessArgumentParser methodsFor: 'parsing' stamp: 'sm 5/25/2011 17:27'!parse: argumentsArray	arguments := argumentsArray.	numParams := arguments size.		i := 2.	current := arguments at: i.	currentObj := (Smalltalk classNamed: current) ifNotNilDo: [:cls | cls new].			self determineRunner.	self determineReporter.		self determineSuiteOrBenchmark.		self determineBenchmarkParameters.		self instructRunner.		^ {runner. reporter}! !!SMarkHarnessArgumentParser methodsFor: 'argument parsing'!parseBenchmarkOrSuite: aBenchmarkOrSuite	"Identify the benchmark suite or suite and benchmark method	 that should be executed. The string should be of the format 'Class>>benchName' or 'Class.benchName' for shell/bash compatibility.	 Accepts a string, class, or array.	 Returns, a class, or an array of a class and a symbol."	| parsed |	(aBenchmarkOrSuite isKindOf: Class)		ifTrue: [			suiteClass := aBenchmarkOrSuite.			^ suiteClass		].	  	(aBenchmarkOrSuite isKindOf: Array)		ifTrue:  [ parsed := aBenchmarkOrSuite. ]		ifFalse: [ parsed := aBenchmarkOrSuite findTokens: '>.'. ].		((parsed size > 2) or: [parsed size < 1])				ifTrue: [ Error signal: 'The passed argument has to represent two elements. A class/classname and a method symbol' ].		suiteClass := parsed first.		(suiteClass isKindOf: Class) 		ifFalse: [ suiteClass := Smalltalk at: (suiteClass asSymbol) ifAbsent: [Error signal: 'Class that was supposed to represent a benchmark suite was not found: ', suiteClass asString ]].		parsed size = 1		ifTrue: [^suiteClass].	specificBenchmark := parsed second asSymbol.		^ { suiteClass. specificBenchmark }! !!SMarkReporter commentStamp: '<historical>' prior: 34209527!SMarkReporter is a simple formatter of benchmark results. Subclass such as SMarkSimpleStatisticsReporter might implement more advanced reporting functionality, e.g., including a statistical evaluation of the results.Example:	| f |	f := TextStream on: String new.	SMarkSimpleStatisticsReporter reportFor: (SMarkTestRunnerSuiteForAutosizing run: 10) on: f.	f contents!!SMarkReporter class methodsFor: 'defaults'!defaultOutputDestination	^ ScriptConsole! !!SMarkReporter class methodsFor: 'defaults'!defaultReporter	^ SMarkSimpleStatisticsReporter! !!SMarkReporter class methodsFor: 'reporting'!reportFor: aRunner	self reportFor: aRunner on: self defaultOutputDestination.! !!SMarkReporter class methodsFor: 'reporting'!reportFor: aRunner on: aStream	| reporter |	reporter := self new.	reporter runner: aRunner.	reporter outputStream: aStream.	reporter report.	^ reporter.! !!SMarkReporter methodsFor: 'reporting'!benchmarkFooter: aName	stream cr.! !!SMarkReporter methodsFor: 'reporting'!benchmarkHeader: aName	stream << 'Benchmark ' << (aName asString); cr.! !!SMarkReporter methodsFor: 'reporting'!footer	"No output at the moment"	^ self! !!SMarkReporter methodsFor: 'reporting'!header	| suiteName |	suiteName := runner suite class name asString.	stream << 'Report for: ' << suiteName; cr.! !!SMarkReporter methodsFor: 'initialization' stamp: 'StephaneDucasse 6/16/2013 21:10'!initialize	super initialize.	stream := self class defaultOutputDestination.! !!SMarkReporter methodsFor: 'accessing'!outputStream: aStream	stream := aStream  ! !!SMarkReporter methodsFor: 'accessing'!report	self header.		runner results keysAndValuesDo: [:key :value |		self benchmarkHeader: key.		self reportAllRuns: value of: key.		self benchmarkFooter: key.	].	self footer.	^ self! !!SMarkReporter methodsFor: 'reporting' stamp: 'CamilloBruni 9/5/2011 13:13'!reportAllRuns: aListOfResults of: benchmark	aListOfResults do: [:result |		result criteria keysAndValuesDo: [:benchName :timer |			stream << benchName << ': ' << (timer totalTime asString, 'ms'); cr.]]! !!SMarkReporter methodsFor: 'accessing'!runner: aRunner	runner := aRunner.! !!ReBenchReporter commentStamp: '<historical>' prior: 34209959!A ReBenchReporter is reporter for the ReBench framework (cf. https://github.com/smarr/ReBench).It is used be the ReBenchHarness, which is the main class of interest for users that just want to execute benchmarks.!!ReBenchReporter methodsFor: 'as yet unclassified' stamp: 'StefanMarr 5/16/2011 15:23'!benchmarkHeader: aName	^ self! !!SMarkSimpleStatisticsReporter methodsFor: 'statistics' stamp: 'StefanMarr 3/20/2011 12:05'!confidenceVariance: times	| numMeasurements |	numMeasurements := times size.	(numMeasurements >= 30) 		ifTrue: [			^ (self gaussianConfidenceFactor) * (times stdev) / (numMeasurements asFloat sqrt)].			"use the students T distribution for small probe counts"	^ (self studentsTConfidenceFactorFor: numMeasurements) * (times stdev) / (numMeasurements asFloat sqrt)! !!SMarkSimpleStatisticsReporter methodsFor: 'statistics' stamp: 'StefanMarr 3/20/2011 11:49'!gaussianConfidenceFactor	"used for large probe counts >= 30"	"1 ~ 68.27%"	"1.644853626951 ~ 90%"	"2 ~ 95.45%"	^ 1.644853626951! !!SMarkSimpleStatisticsReporter methodsFor: 'reporting' stamp: 'StefanMarr 5/16/2011 16:08'!reportAllRuns: aListOfResults of: benchmark	| criteria |	criteria := aListOfResults first criteria.		criteria keysDo: [:criterion |		| times |		times := self resultsFor: criterion from: aListOfResults.		self reportResult: times for: criterion of: benchmark.		stream cr.	].! !!SMarkSimpleStatisticsReporter methodsFor: 'reporting' stamp: 'CamilloBruni 9/6/2011 10:41'!reportResult: aResultsArray for: aCriterion of: benchmark	| convidenceVariance significantDigits |	stream << benchmark <<  ' ' <<  aCriterion <<  ': iterations='.	aResultsArray size printOn: stream .	stream << ' runtime: '.		aResultsArray size < 2 ifTrue: [		aResultsArray average printOn: stream.		stream << 'ms'.		^ self.	].		convidenceVariance := self confidenceVariance: aResultsArray.  		"only print significant "	significantDigits := self significantDigits: convidenceVariance.	aResultsArray average printOn: stream showingDecimalPlaces: significantDigits.	stream << 'ms +/-'.	convidenceVariance printOn: stream showingDecimalPlaces: significantDigits.! !!SMarkSimpleStatisticsReporter methodsFor: 'helper' stamp: 'StefanMarr 5/16/2011 16:02'!resultsFor: aCriterion from: aListOfResults	^aListOfResults collect: [:result | (result criteria at: aCriterion) totalTime]	! !!SMarkSimpleStatisticsReporter methodsFor: 'statistics' stamp: 'StefanMarr 3/20/2011 11:46'!significantDigits: confidenceVariance	confidenceVariance = 0 		ifTrue: [ ^ 2].		confidenceVariance >= 10		ifTrue: [ ^ 0].		^ 1 - (confidenceVariance log floor)! !!SMarkSimpleStatisticsReporter methodsFor: 'statistics' stamp: 'StefanMarr 3/20/2011 12:03'!studentsTConfidenceFactorFor: aNumberOfMeasurements	"used for small probe counts < 30"	"the students T distribution sucks to calculate since the value depends on the probeCout"	"these values are for a confidence interval of ~90%"	| values |	values := Array new: 30.	values at: 1  put: 6.314.	values at: 2  put: 2.920.	values at: 3  put: 2.353.	values at: 4  put: 2.132.	values at: 5  put: 2.015.	values at: 6  put: 1.943.	values at: 7  put: 1.895.	values at: 8  put: 1.860.	values at: 9  put: 1.833.	values at: 10 put: 1.812.	values at: 11 put: 1.796.	values at: 12 put: 1.782.	values at: 13 put: 1.771.	values at: 14 put: 1.761.	values at: 15 put: 1.753.	values at: 16 put: 1.746.	values at: 17 put: 1.740.	values at: 18 put: 1.734.	values at: 19 put: 1.729.	values at: 20 put: 1.725.	values at: 21 put: 1.721.	values at: 22 put: 1.717.	values at: 23 put: 1.714.	values at: 24 put: 1.711.	values at: 25 put: 1.708.	values at: 26 put: 1.706.	values at: 27 put: 1.703.	values at: 28 put: 1.701.	values at: 29 put: 1.699.	values at: 30 put: 1.697.	^ values at: aNumberOfMeasurements.	! !!SMarkSimpleStatisticsReporter methodsFor: 'helper' stamp: 'StefanMarr 3/20/2011 19:40'!totalResultsFor: aListOfResults	^aListOfResults collect: [:timer | timer total]	! !!SMarkResult commentStamp: 'StefanMarr 3/18/2011 23:45' prior: 34210240!A benchmark result is characterized by: - the total execution time (#total is the least a benchmark results in) - the name of the benchmark that was executed - the suite object specifies the used input used for the benchmark - dictionary of additional the criteria and the related timingsA benchmark can produced multiple resuts for different criteria. The standard criterion is #total.!!SMarkResult methodsFor: 'accessing'!benchmarkName	^ benchName! !!SMarkResult methodsFor: 'accessing'!benchmarkName: aString	benchName := aString! !!SMarkResult methodsFor: 'accessing'!criteria	^ criteria! !!SMarkResult methodsFor: 'accessing'!criteria: aCollectionOfTimers	criteria := aCollectionOfTimers! !!SMarkResult methodsFor: 'accessing'!suite	^ suite! !!SMarkResult methodsFor: 'accessing'!suite: aBenchmarkSuite	suite := aBenchmarkSuite! !!SMarkResult methodsFor: 'accessing'!total	^ time! !!SMarkResult methodsFor: 'accessing'!total: aTime	time := aTime! !!SMarkAutosizeRunner class methodsFor: 'defaults' stamp: 'StefanMarr 3/19/2011 19:17'!defaultTargetTime	"300 milliseconds seems to be a reasonable target time for most problems.	 It is a compromise between the general measurment noise as well as timer accuracy	 and the absolute runtime of benchmarks"	^ 300! !!SMarkAutosizeRunner methodsFor: 'initialization' stamp: 'StefanMarr 3/19/2011 19:59'!initialize	super initialize.	targetTime := self class defaultTargetTime.! !!SMarkAutosizeRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 3/20/2011 10:27'!performBenchmark: aSelector	"First determine a useful number of inner loop iterations until the targetTime is reached."	| execTime i |	"make sure no timers are recorded for this"	timers := nil.		i := 1.	execTime := Time millisecondsToRun: [ suite perform: aSelector. ].		[ execTime > targetTime ] whileFalse: [		i := i * 2. "Was thinking of doing something fancy here, but just go with this simple staight-forward solution"		execTime := Time millisecondsToRun: [ 1 to: i do: [:ignored| suite perform: aSelector]].	].	innerLoopIterations := i.		"Then start executing the benchmark"	^ super performBenchmark: aSelector.! !!SMarkAutosizeRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 3/20/2011 10:49'!runBaseBenchmark	"baseBenchmark is not supported with autosizing. I do not see how that can be made possible since all different benchmarks will have different number of iterations, and the only way how a consistent baseline could be found would be to normalize the results, but well, incooprorating the baseline measurement with the statistical evaluation is harder than just substracting a one time value..., I am not going to do that here for the moment. Stefan 2011-03-20"		(suite respondsTo: #baseBenchmark) 		ifFalse: [ ^ nil ].		"I decided to go here with a silent solution to avoid thinking about logging frameworks and Transcript to console convertion..."	self recordResults: (self class defaultTimer new: 'total') for: #baseBenchmark  ! !!SMarkAutosizeRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/19/2011 19:18'!targetTime	"Target time in milliseconds"	^ targetTime! !!SMarkAutosizeRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/19/2011 19:18'!targetTime: anIntInMilliseconds	"Target time in milliseconds"	targetTime := anIntInMilliseconds! !!SMarkAutosizeRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 3/20/2011 10:31'!timedBenchmarkExecution: aSelector	"Will do a timed execution of the benchmark and return the result timer"	| timer |	timers := Dictionary new.	timer := self createTimer: 'total'.		timer start.	1 to: innerLoopIterations do: [:ignored|		suite perform: aSelector.	].	timer stop.		self recordResults: timer for: aSelector.		^ timer! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!baseBenchmarkExecuted	^ baseBenchmarkExecuted! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!countSetUpInvoke	setUpCount := setUpCount + 1! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!countTearDownInvoke	tearDownCount := tearDownCount + 1! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!countWasExecuted	^ notifyRunnerWasExecuted ! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!didPerform: aSymbol	performedBenchmarks add: aSymbol.! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!didRunBaseBenchmark	baseBenchmarkExecuted := true.! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!didSetUpBenchB	didSetUpBenchB := true.! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!didTearDownBenchC	didTearDownBenchC := true.! !!SMarkTestAutosizeRunner methodsFor: 'initialization' stamp: 'StefanMarr 3/19/2011 23:24'!initialize	super initialize.	setUpCount := 0.	tearDownCount := 0.	notifyRunnerWasExecuted := 0.		baseBenchmarkExecuted := false.	performedBenchmarks := Set new.		"set the targetTime to something which is more reasonable for testing"	targetTime := 50.! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!isNotifyRunnerWasExecutedSet	^ notifyRunnerWasExecuted! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!notifyRunnerWasExecuted	notifyRunnerWasExecuted := notifyRunnerWasExecuted + 1! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!performedBenchmarks	^ performedBenchmarks! !!SMarkTestAutosizeRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 11:01'!setUp	notifyRunnerWasExecuted := false! !!SMarkCogRunner commentStamp: 'StefanMarr 12/30/2011 23:24' prior: 34210704!This runner is doing warmup on for Cog VMs with just-in-time compilation.The goal is to bring the JIT compiler into a steady state where no jitting is performed anymore during benchmarking.!!SMarkCogRunner methodsFor: 'initialization' stamp: 'StefanMarr 12/30/2011 22:51'!initialize	super initialize.	warmingUp := false.! !!SMarkCogRunner methodsFor: 'initialization' stamp: 'StefanMarr 12/30/2011 23:26'!performBenchmark: aSelector	"Based on an email by Eliot from May 16th, 2011.	 The first time a method is executed it will get into the inline cache.	 The second time, it is found in the inline cache, which triggers the JIT compiler to produce code.	 Thus, the third time it should be executed in the steady state."	warmingUp := true.		suite runBenchmark: aSelector.		Smalltalk garbageCollect.		suite runBenchmark: aSelector.		Smalltalk garbageCollect.	warmingUp := false.		^ super performBenchmark: aSelector.! !!SMarkCogRunner methodsFor: 'initialization' stamp: 'StefanMarr 12/30/2011 22:57'!recordResults: timer for: aSelector	"Only record the results when we are not in warmup mode."	warmingUp ifFalse: [		super recordResults: timer for: aSelector.	].! !!SMarkProfileRunner commentStamp: '<historical>' prior: 34210955!This runner profiles the benchmarks for better analysis. Unlike the classical benchmark runner this one will not collect the results. Instead it will execute the benchmarks in the system profiler.!!SMarkProfileRunner class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:19'!execute: aSuite selector: aBenchmarkSelector	| runner |	runner := self new.	aSuite runner: runner.	runner 		suite: aSuite;		execute: aBenchmarkSelector.	^ runner! !!SMarkProfileRunner class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:31'!execute: aSuite selector: aBenchmarkSelector iterations: nIterations	| runner |	runner := self new.	aSuite runner: runner.	runner 		suite: aSuite;		iterations: nIterations;		execute: aBenchmarkSelector.	^ runner! !!SMarkProfileRunner methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:24'!execute	"run all benchmnarks in a benchmark suite "	[ suite run ] timeProfile! !!SMarkProfileRunner methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:28'!execute: aSelector		[ self performBenchmark: aSelector ] timeProfile! !!SMarkProfileRunner methodsFor: 'initialization' stamp: 'CamilloBruni 1/28/2013 18:28'!initialize	super initialize.	numIterations := 1.! !!SMarkProfileRunner methodsFor: 'benchmarks' stamp: 'CamilloBruni 1/28/2013 18:34'!performBenchmark: aSelector	currentBenchmark := aSelector.		1 to: numIterations do: [:i|		suite runBenchmark: aSelector ].			currentBenchmark := nil.! !!SMarkProfileRunner methodsFor: 'benchmarks' stamp: 'CamilloBruni 1/28/2013 18:34'!timedBenchmarkExecution: aSelector	suite perform: aSelector! !!SMarkRunner class methodsFor: 'defaults' stamp: 'StefanMarr 3/21/2011 11:43'!defaultNumberOfIterations	^ 1! !!SMarkRunner class methodsFor: 'defaults' stamp: 'StefanMarr 5/14/2011 11:09'!defaultNumberOfProcesses	^ 1! !!SMarkRunner class methodsFor: 'defaults' stamp: 'StefanMarr 3/20/2011 20:56'!defaultTimer	^ SMarkTimer! !!SMarkRunner class methodsFor: 'benchmarking' stamp: 'StefanMarr 3/20/2011 19:51'!execute: aSuite	^ self execute: aSuite with: 1.! !!SMarkRunner class methodsFor: 'benchmarking' stamp: 'StefanMarr 3/20/2011 19:51'!execute: aSuite with: nIterations	| runner |	runner := self new.	aSuite runner: runner.	runner suite: aSuite.	runner iterations: nIterations.  	runner execute.	^ runner! !!SMarkRunner methodsFor: 'helper' stamp: 'StefanMarr 3/20/2011 10:28'!createTimer: name	"Create and register a new timer for the current benchmark"	| timer |	timer := self class defaultTimer new: name.		timers ifNotNil: [		timers at: name put: timer.	].		^ timer.! !!SMarkRunner methodsFor: 'execution' stamp: 'StefanMarr 3/13/2011 23:05'!execute	suite run.	self runBaseBenchmark.	^ results	! !!SMarkRunner methodsFor: 'initialization' stamp: 'StefanMarr 5/14/2011 11:10'!initialize	super initialize.	numIterations := self class defaultNumberOfIterations.	numProcesses  := self class defaultNumberOfProcesses.	results := Dictionary new.! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/21/2011 12:20'!iterations	^ numIterations! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/21/2011 12:20'!iterations: anInteger	numIterations := anInteger! !!SMarkRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 4/15/2011 11:50'!performBenchmark: aSelector	currentBenchmark := aSelector.		1 to: numIterations do: [:i|		"self timedBenchmarkExecution: aSelector."		suite runBenchmark: aSelector.  	].			currentBenchmark := nil.		^ results at: (suite benchmarkNameForSelector: aSelector)! !!SMarkRunner methodsFor: 'printing' stamp: 'CamilloBruni 9/5/2011 13:13'!printOn: aStream	^ self reportOn: aStream.! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 5/8/2013 13:55'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	^ problemSize! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 8/21/2012 09:44'!problemSize: aValue	"Do some conversion to make it easier for the benchmarks"	(aValue isString and: [aValue isAllDigits]) ifTrue: [		problemSize := Number readFrom: aValue.		^ self.	].	problemSize := aValue! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 5/14/2011 11:08'!processes	"The standard runner does use only a single process, but in case a benchmark supports parallelism it can query for the intended degree of parallelism"	^ numProcesses! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 5/14/2011 11:08'!processes: anInt	"The standard runner does use only a single process, but a benchmark can use that to do its own parallelism"	numProcesses := anInt! !!SMarkRunner methodsFor: 'helper' stamp: 'StefanMarr 3/20/2011 21:01'!recordResults: timer for: aSelector	| result name |	name := suite benchmarkNameForSelector: aSelector.		result := SMarkResult new.	result total: timer totalTime.	result benchmarkName: name.	result suite: suite.	result criteria: timers.		(results at: name ifAbsentPut: OrderedCollection new) add: result.! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 4/15/2011 16:46'!report	SMarkReporter defaultReporter reportFor: self.  	! !!SMarkRunner methodsFor: 'reporting' stamp: 'sm 5/25/2011 17:50'!reportConfiguration: aStream	aStream << 'Runner Configuration:';cr.	aStream << ('  iterations: ', numIterations asString); cr.	aStream << ('  processes: ', numProcesses asString); cr.	aStream << ('  problem size: ', problemSize asString); cr.! !!SMarkRunner methodsFor: 'reporting' stamp: 'StefanMarr 4/15/2011 16:47'!reportOn: aStream	SMarkReporter defaultReporter reportFor: self on: aStream  	! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/18/2011 19:41'!results	^ results! !!SMarkRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 3/18/2011 18:42'!runBaseBenchmark	"In certain sitatuations it is one wants a baseline that is incooprated in all 	 benchmark results to be substracted from the final values.		#baseBenchmark can be used to charaterize such a baseline"		(suite respondsTo: #baseBenchmark) 		ifFalse: [ ^ nil ].		^ self performBenchmark: #baseBenchmark.! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 3/20/2011 18:45'!suite	^ suite! !!SMarkRunner methodsFor: 'accessing' stamp: 'StefanMarr 4/15/2011 16:14'!suite: aBenchmarkSuite	suite := aBenchmarkSuite.	suite runner: self.! !!SMarkRunner methodsFor: 'benchmarking' stamp: 'ReinoutStevens 12/6/2011 14:30'!timedBenchmarkExecution: aSelector	"Will do a timed execution of the benchmark and return the result timer"	| timer result |	timers := Dictionary new.	timer := self createTimer: 'total'.		timer start.	result := suite perform: aSelector.	timer stop.	suite processResult: result withTimer: timer.		self recordResults: timer for: aSelector.		^ timer! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 18:35'!baseBenchmarkExecuted	^ baseBenchmarkExecuted! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 17:36'!countSetUpInvoke	setUpCount := setUpCount + 1! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 17:39'!countTearDownInvoke	tearDownCount := tearDownCount + 1! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 19:44'!countWasExecuted	^ notifyRunnerWasExecuted ! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 19:00'!didPerform: aSymbol	performedBenchmarks add: aSymbol.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 17:56'!didRunBaseBenchmark	baseBenchmarkExecuted := true.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 17:43'!didSetUpBenchB	didSetUpBenchB := true.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 17:42'!didTearDownBenchC	didTearDownBenchC := true.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 12:14'!hasSetUpBenchB	^ didSetUpBenchB.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 12:21'!hasTearDownBenchC	^ didTearDownBenchC! !!SMarkTestRunner methodsFor: 'initialization' stamp: 'StefanMarr 3/18/2011 19:49'!initialize	super initialize.	setUpCount := 0.	tearDownCount := 0.	notifyRunnerWasExecuted := 0.		baseBenchmarkExecuted := false.	performedBenchmarks := OrderedCollection new.! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/15/2011 22:16'!isNotifyRunnerWasExecutedSet	^ notifyRunnerWasExecuted! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 19:44'!notifyRunnerWasExecuted	notifyRunnerWasExecuted := notifyRunnerWasExecuted + 1! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 19:00'!performedBenchmarks	^ performedBenchmarks! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/15/2011 22:15'!setUp	notifyRunnerWasExecuted := false! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 12:27'!setUpCount	^ setUpCount! !!SMarkTestRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 12:39'!tearDownCount	^ tearDownCount! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:44'!baseBenchmarkExecuted	^ baseBenchmarkExecuted! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:41'!countSetUpInvoke	setUpCount := setUpCount + 1! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:41'!countTearDownInvoke	tearDownCount := tearDownCount + 1! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:41'!countWasExecuted	^ notifyRunnerWasExecuted ! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:41'!didPerform: aSymbol	performedBenchmarks add: aSymbol.! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:42'!didRunBaseBenchmark	baseBenchmarkExecuted := true.! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:42'!didSetUpBenchB	didSetUpBenchB := true.! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:42'!didTearDownBenchC	didTearDownBenchC := true.! !!SMarkTestWeakScalingRunner methodsFor: 'initialization' stamp: 'StefanMarr 4/15/2011 10:42'!initialize	super initialize.	setUpCount := 0.	tearDownCount := 0.	notifyRunnerWasExecuted := 0.		baseBenchmarkExecuted := false.	performedBenchmarks := OrderedCollection new.! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 13:20'!isNotifyRunnerWasExecutedSet	^ notifyRunnerWasExecuted > 0! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:42'!notifyRunnerWasExecuted	notifyRunnerWasExecuted := notifyRunnerWasExecuted + 1! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:42'!performedBenchmarks	^ performedBenchmarks! !!SMarkTestWeakScalingRunner methodsFor: 'as yet unclassified' stamp: 'StefanMarr 4/15/2011 10:43'!setUp	notifyRunnerWasExecuted := false! !!SMarkWeakScalingRunner class methodsFor: 'defaults' stamp: 'StefanMarr 4/15/2011 15:42'!defaultNumberOfInnerIterations	"The number of iterations of the inner loop	 in which the benchmark is executed."	^ 1! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'sm 5/30/2011 17:13'!execute: aSelector withProcesses: numberOfProcesses withTimer: timer	"This case is meant for all cases. REM: this is also used for numProc==1 to be able to measure the process start overhead in all cases.	 It will start the processes and wait for their completion."		| processes |	processes			:= Array new: numberOfProcesses.	runningProcessesMtx := Semaphore forMutualExclusion.	completionSignal		:= Semaphore new.	runningProcesses := numberOfProcesses.		"First initialize the processes"	1 to: numberOfProcesses do: [ :procNum |		| proc |		proc := SMarkWeakScalingRunnerExecutor createFor: aSelector for: numInnerIterations with: self and: suite.		proc priority: Processor highestPriority.		proc name: (self class name, '-',  procNum asString).		processes at: procNum put: proc.		"On: procNum"	].		"Now, execute the benchmark and do the timing now"	timer start.	1 to: numberOfProcesses do: [ :procNum |		(processes at: procNum) resume.	].	completionSignal wait.	timer stop.	! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'sm 5/30/2011 16:17'!executorCompleted	runningProcessesMtx critical: [		runningProcesses := runningProcesses - 1.		(runningProcesses == 0) ifTrue: [			completionSignal signal.		]	]! !!SMarkWeakScalingRunner methodsFor: 'initialization' stamp: 'StefanMarr 4/15/2011 15:43'!initialize	super initialize.	numProcesses			:= self class defaultNumberOfProcesses.	numInnerIterations	:= self class defaultNumberOfInnerIterations.! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 4/15/2011 15:43'!innerIterations	"The number of inner iterations the benchmark is executed inside a processes"	^ numInnerIterations! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 4/15/2011 15:43'!innerIterations: anInteger	"The number of inner iterations the benchmark is executed inside a processes"	numInnerIterations := anInteger! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 4/15/2011 10:54'!processes	^ numProcesses! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'StefanMarr 4/15/2011 10:53'!processes: anInteger	numProcesses := anInteger! !!SMarkWeakScalingRunner methodsFor: 'reporting' stamp: 'sm 5/25/2011 17:50'!reportConfiguration: aStream	super reportConfiguration: aStream.	aStream << ('inner iterations: ', numInnerIterations asString); cr.! !!SMarkWeakScalingRunner methodsFor: 'benchmarking' stamp: 'sm 5/25/2011 18:31'!timedBenchmarkExecution: aSelector	"Will do a timed execution of the benchmark and return the result timer"	| timer |	timers := Dictionary new.	timer := self createTimer: 'total'.		self execute: aSelector withProcesses: numProcesses withTimer: timer.		self recordResults: timer for: aSelector.		^ timer! !!SMarkSuite commentStamp: '<historical>' prior: 34211204!A Benchmark Suite is a set of benchmarks and it knows what exactly needs to be executed.However, it does not really know how to execute it.It knows all the magic, that is, how to set up and tear down the environment for the benchmarks, but does not have the knowledge of how many iterations need to be done and how to evaluate any results that might be produced.Please see also SMarkHarness, which is the main class relevant for users to execute benchmarks with SMark.Usage:Choose a suite (i.e. one of my subclasses) and use the class-side #run or run: messages.To get an example print the result of the following expression:		SMarkCompiler run: 10		SMarkLoops runOnly: #benchArrayAccess!!SMarkCompiler class methodsFor: 'script entry'!defaultNumberOfIterations	^ 50! !!SMarkCompiler class methodsFor: 'script entry'!defaultNumberOfProcesses	^ 8! !!SMarkCompiler methodsFor: 'benchmarking'!benchCompiler	"was Benchmark>>testCompiler"	SMarkCompilerTargetClass new compile:		'somethingDummy: aBlock repeated: nTimes | i emptyBlock emptyTime blockTime |		nTimes > 1000 ifTrue: [^self time: aBlock repeatedK: nTimes // 1000].		emptyBlock := [].		emptyTime := Time millisecondsToRun:						[i := 0.						 [(i := i + 1) <= nTimes] whileTrue: [emptyBlock value]].		blockTime := Time millisecondsToRun:						[i := 0.						 [(i := i + 1) <= nTimes] whileTrue: [aBlock value]].		^blockTime - emptyTime'.! !!SMarkLoops commentStamp: '<historical>' prior: 34211959!SMarkLoops implements a set of microbenchmarks measuring a number of basic aspects such as message send, instance field access, and array access cost.Example use:  (SMarkLoops new runOnly: #benchFloatLoop) run: 10 !!SMarkLoops class methodsFor: 'as yet unclassified' stamp: 'StefanMarr 1/10/2012 16:56'!defaultProblemSize	^ 50000! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 9/12/2012 13:23'!benchArrayAccess	| i obj array |		array := Array new: 1.	obj   := Object new.		i := self problemSize.	[i > 0] whileTrue: [		array at: 1.		array at: 1 put: obj.				i := i - 1.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:55'!benchClassVarBinding	| i r |	i := self problemSize.	[i > 0] whileTrue: [		r := ClassVarValue.		ClassVarValue := nil.		i := i - 1.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:56'!benchFloatLoop	| a limit |	a := 1.23.	limit := self problemSize.	[a < limit] whileTrue: [		a := a + 0.6.		a := a + 0.4.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:56'!benchInstVarAccess	| i r |	i := self problemSize.	[i > 0] whileTrue: [		r := someInstVar.		someInstVar := nil.		i := i - 1.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:56'!benchIntLoop	| i |	i := self problemSize.	[i > 0] whileTrue: [		i := i - 1.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:56'!benchSend	| i r |	i := self problemSize.	[i > 0] whileTrue: [		self doNothing.		i := i - 1.	].! !!SMarkLoops methodsFor: 'benchmarking' stamp: 'StefanMarr 1/10/2012 16:56'!benchSendWithManyArguments	| i r |	i := self problemSize.	[i > 0] whileTrue: [		self doNothingA: i b: i c: i d: i e: i f: i g: i h: i i: i j: i.		i := i - 1.	].! !!SMarkLoops methodsFor: 'helper' stamp: 'StefanMarr 1/10/2012 10:32'!doNothing! !!SMarkLoops methodsFor: 'helper' stamp: 'StefanMarr 1/10/2012 10:35'!doNothingA: p1 b: p2 c: p3 d: p4 e: p5 f: p6 g: p7 h: p8 i: p9 j: p10! !!SMarkSlopstone commentStamp: 'nishis 2/21/98 06:26' prior: 34212241!modified for Squeak by nishis@urban.ne.jpI added one class methods.and modified execute method.  block variables are renamed for Squeak.Thanx to Mr. Tim Olson, Mr. Kohler Markus, Mr. Tim Rowledge, Mr. John Maloney, Mr. Ian Piumarta.original comments	NAME			STones80	AUTHOR			bruce@utafll.uta.edu (Bruce Samuelson)	FUNCTION		low and medium level benchmarks for ST80 and ST/V	ST-VERSIONS		pre R4.0, R4.0, R4.1, ST/V	PREREQUISITES	need floating point hardware or emulation	CONFLICTS		none	DISTRIBUTION	world	VERSION			1.0	DATE			April 16, 1993SUMMARY The filein includes two classes: Slopstones (Smalltalk Low levelOPeration Stones) and Smopstones (Smalltalk Medium level OPeration Stones).Each includes seven cpu intensive benchmarks. They work equally well with16-bit and 32-bit implementations and are designed to be portable to allSmalltalk versions from ParcPlace and Digitalk. They are normalized to theauthor's 486/33 Windows 3.1 machine running ParcPlace VisualWorks 1.0.Results have been posted to the Usenet group comp.lang.smalltalk and form thebasis of an article that is scheduled to be published in the June issue of TheSmalltalk Report.The only difference between the ST80 (STones80) and ST/V (STonesV) filein isin the messages that define the classes in the first few lines of code. TheST80 messages specify the class category and message protocol, which are notused in ST/V.Bruce Samuelson!!SMarkSlopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 5/7/2013 17:16'!benchStone	"Using the SlopStone benchmarks, but not doing the	 old style Stone performance number reporting"	| n |	n := self problemSize.	n > SmallInteger maxVal		ifTrue: [ self error: 'Count exceeded max small int.' ].		o := obj new.		1 to: n do: [:i | self doIntAdd         ].	1 to: n do: [:i | self doFloatAdd       ].	1 to: n do: [:i | self doStringAccess   ].	1 to: n do: [:i | self doObjectCreation ].	1 to: n do: [:i | self doObjectCopy     ].	1 to: n do: [:i | self doPerform        ].	1 to: n do: [:i | self doBlockValue     ].! !!SMarkSlopstone methodsFor: 'defaults'!defaultProblemSize	^ 1! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 9/9/2012 01:52'!doBlockValue	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value.	[] value. [] value. [] value. [] value. [] value. [] value. [] value! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 9/9/2012 01:48'!doFloatAdd	1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+	1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 9/9/2012 01:47'!doIntAdd	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+	1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 17:16'!doObjectCopy	o copy copy copy copy copy copy copy copy copy copy! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 17:11'!doObjectCreation	obj new. obj new. obj new. obj new. obj new.	obj new. obj new. obj new. obj new. obj new.	obj new. obj new. obj new. obj new. obj new.	obj new. obj new. obj new. obj new. obj new! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 17:17'!doPerform	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself.	o perform: #yourself. o perform: #yourself. o perform: #yourself! !!SMarkSlopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 9/9/2012 01:50'!doStringAccess	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.	'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1! !!SMarkSlopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 5/8/2013 13:55'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	| ps |	ps := super problemSize.		ps isInteger ifFalse: [	^ self defaultProblemSize].			^ ps! !!SMarkSlopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 9/9/2012 02:16'!readme   "STEFAN: use the original benchmarks, but do not use original way            of reporting results. Rely on the SMark reporting instead."	"INTRODUCTION 	 	Slopstone: Smalltalk Low level OPeration Stones 	Portable Low Level Benchmarks for ST80 and ST/V (using 16-bit 	SmallIntegers) Placed in public domain January 1993  (c) Bruce 	Samuelson Permission is given to place this in public Smalltalk archives 	 	Use monospaced fonts if possible to view the methods in this class. 	 	(1) Collect garbage if supported (2) do 'SlopstoneBenchmark new 	runBenchmark'. Results are printed in the Transcript window. 	Post results for your machines to comp.lang.smalltalk or 	mail them to bruce@ling.uta.edu or bruce@utafll.uta.edu. 	 	DISCUSSION 	    	This readme method would normally be in the class comment for ST80. 	ST/V-DOS doesn't support class comments. 	  	The benchmarks test strictly low level operations. They do not test 	higher level operations such as forming sets, sorting, or streaming, nor 	do they test 	applications. They also do not test user interface operations because of 	the non-portability of this area of Smalltalk and its sensitivity to the 	performance of the video subsystem. The tests are cpu bound. They do 	not access files and should not cause disk paging. 	 	The benchmarks use loop counts of 16000 because SmallIntegers cannot 	exceed 16383 for ST/V-DOS. 16-bit implementions would perform worse 	with large loop 	counts. The benchmarks are also suitable for testing 32-bit versions of 	Smalltalk. 	 	DEFINITION OF REFERENCE MACHINE (ONE SLOPSTONE) 	 	The following machine is the one on which I developed these 	benchmarks. By 	convention it is defined to operate at one slopstone. It's a mid range 	performer for current ParcPlace versions of Smalltalk. 	 	Hardware: Amax 486DX/33 (includes internal floating point processor 	and internal 8K cache), 256K external cache, 16MB RAM. 	 	Software: ParcPlace VisualWorks 1.0, Windows 3.1, DOS 5.0 (plain vanilla 	setup). 	 	COMPARISON TO XEROX DORADO 	 	For reference, the machine runs at 649% of a Dorado on ParcPlace 	benchmarks for ST80 4.1. Its fast video card helps on these PPS 	benchmarks. I didn't run 	them for VisualWorks 1.0. It would be somewhat slower because there 	are vastly 	more classes. 	 	EXAMPLE RESULTS FOR REFERENCE MACHINE 	 	1000s    time    1000s of 	itera-   sec-    iterations   slop- 	tions    onds    per sec      stones   explanation 	 	3808     0.577   6600         1.0      add integers 	 544     2.262    240         1.0      add floats 	 960     1.088    882         1.0      access strings 	 320     0.908    352         1.0      create objects 	 160     1.49     107         1.0      copy objects 	 480     1.129    425         1.0      perform selectors 	 896     1.237    724         1.0      evaluate blocks 	 	 640     1.151    555         1.0      geometric mean"	^ self! !!SMarkSlopstone methodsFor: 'initialize-release' stamp: 'StefanMarr 5/16/2013 12:26'!setUp	obj := Object.! !!SMarkSmopstone commentStamp: 'nishis 2/21/98 06:26' prior: 34213742!modified for Squeak by nishis@urban.ne.jpsee the comment of SlopstoneBenchmark class.I added all class methods and initialization>initilize method,modified:	streamTestsOn: method.  In some case use testPrintOn: s base: instead of printOn:,	primesUpTo: method. From recursively calling a block to whileTrue: block.	sorcerersApprentice method. From recursively calling a block to  recursive method.	execute and setup method.Thanx to Mr. Tim Olson, Mr. Kohler Markus, Mr. Tim Rowledge, Mr. John Maloney, Mr. Ian Piumarta.originak code by	NAME			STones80	AUTHOR			bruce@utafll.uta.edu (Bruce Samuelson)	FUNCTION		low and medium level benchmarks for ST80 and ST/V	ST-VERSIONS		pre R4.0, R4.0, R4.1, ST/V	PREREQUISITES	need floating point hardware or emulation	CONFLICTS		none	DISTRIBUTION	world	VERSION			1.0	DATE			April 16, 1993!!SMarkSmopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 5/16/2013 11:43'!benchStone	| n primes strings set |		n := self problemSize.		self fractonacci: n / 13. "13/2"		primes := self primesUpTo: n * 100. "7351 - 1" "9000"	self streamTestsOn: primes.		strings := self stringsUpTo: n * 100. "8000"	set := self setFrom: strings.	self sort: set.		self sorcerersApprentice: n.! !!SMarkSmopstone methodsFor: 'defaults' stamp: 'StefanMarr 5/16/2013 11:44'!defaultProblemSize	^ 80! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'nishis 2/14/98 02:47'!fractonacci: n 	"Return something like the fibonacci function of n but	using fractional numbers rather than whole ones. The	reason for this variation is to run long enough to get	a decent time measurement without exceeding 16383, the	limit of small integers for ST/V-DOS. Choosing n = 13/2	takes enough time and computes to 13581.	Fibonacci uses n-1 and n-2 instead of n-(1/2) and n-(1/3).	However, I couldn't get it to run in the above constraints.	This benchmark tests the efficiency of recursively calling	a method that does a little fractional arithmetic internally."	^n > 1		ifTrue: [(self fractonacci: n - (1/2)) + (self fractonacci: n - (1/3))]		ifFalse: [1]! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 18:10'!primesUpTo: n	"modified by nishis"	"Return the prime numbers between 2 and n.	This method tests the efficiency of recursively calling a block	that does some collection enumeration based on integer arithmetic."	| nSqrt lowPrimes highPrimes genNext first |	n < 5 | (n > 16363) ifTrue: [self error: 'Prime limit(s) out of range.'].	nSqrt := n sqrt rounded.	lowPrimes := ordCollectionFact with: 2.	highPrimes := intervalFact from: 5 to: n by: 2.		genNext := [:nextPrime |		lowPrimes add: nextPrime.		highPrimes := highPrimes select: [:k | k \\ nextPrime ~= 0].		(first := highPrimes first) <= nSqrt ifTrue: [genNext value: first]].		genNext value: 3.	^ lowPrimes , highPrimes! !!SMarkSmopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 5/8/2013 13:55'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	| ps |	ps := super problemSize.		ps isInteger ifFalse: [	^ self defaultProblemSize].			^ ps! !!SMarkSmopstone methodsFor: 'benchmarking' stamp: 'StefanMarr 9/9/2012 02:50'!readme   "STEFAN: use the original benchmarks, but do not use original way            of reporting results. Rely on the SMark reporting instead."	"INTRODUCTION 	 	Smopstone: Smalltalk Medium level OPeration Stones 	Portable Medium level Benchmarks for ST80 and ST/V (using 16-bit 	SmallInts) Placed in public domain January 1993  (c) Bruce Samuelson 	Permission is given to place this in public Smalltalk archives 	 	Use monospaced fonts if possible to view the methods in this class. 	 	(1) Collect garbage if supported (2) do 'SmopstoneBenchmark new 	runBenchmark'. Results are printed in the Transcript window. 	Post results for your machines to comp.lang.smalltalk or 	mail them to bruce@ling.uta.edu or bruce@utafll.uta.edu. 	 	DISCUSSION 	    	This readme method would normally be in the class comment for ST80. 	ST/V-DOS doesn't support class comments. 	 	These benchmarks are a companion to the SlopstoneBenchmark class 	posted to 	comp.lang.smalltalk this month. Slopstones tested low level operations. 	  	Smopstones test medium level operations that exercise recursive block 	and  	method calls, collection building and enumeration, streaming, and 	sorting. The 	lower level operations contained in them exercise arithmetic (mostly 	integer, with some fractions and floats) string manipulation, and low 	level streaming. 	 	The benchmarks do not test applications. They also do not test user 	interface performance because of the non-portability of this area of 	Smalltalk and its  	sensitivity to the speed of the video subsystem. The tests are cpu bound. 	They do not access files and should not cause disk paging. 	 	The main weaknesses of the benchmarks are (1) they are not high 	enough level 	to test actual applications, and (2) they concentrate in too few areas of 	Smalltalk, omitting many of the diverse capabilities of its class library. 	My excuse is that one can only devote limited time writing public 	domain benchmarks. 	 	The tests avoid generating integers larger than 16383, the maximum 	SmallInteger in ST/V-DOS. 16-bit implementions would perform worse 	with larger 	integers. The benchmarks are also suitable for testing 32-bit versions of 	Smalltalk. They try to avoid other pitfalls that would skew the results 	such as the lack of an adequate hash function for a class. Someone 	warned of this 	in comp.lang.smalltalk (I forget who). 	 	DEFINITION OF REFERENCE MACHINE (ONE SMOPSTONE) 	 	The following machine is the one on which I developed these 	benchmarks. By 	convention it is defined to operate at one smopstone. It's a mid range 	performer for current ParcPlace versions of Smalltalk. 	 	Hardware: Amax 486DX/33 (includes internal floating point processor 	and internal 8K cache), 256K external cache, 16MB RAM. 	 	Software: ParcPlace VisualWorks 1.0, Windows 3.1, DOS 5.0 (plain vanilla 	setup). 	 	COMPARISON TO XEROX DORADO 	 	For reference, the machine runs at 649% of a Dorado on ParcPlace 	benchmarks for ST80 4.1. Its fast video card helps on these PPS 	benchmarks. I didn't run 	them for VisualWorks 1.0. It would be somewhat slower because there 	are vastly 	more classes. 	 	EXAMPLE RESULTS FOR REFERENCE MACHINE 	 	time in    smop- 	seconds    stones    explanation 	 	 	3.157      1.0       generating fractonaccis 	1.123      1.0       generating primes 	1.091      1.0       generating and parsing streams 	3.091      1.0       generating strings 	1.167      1.0       forming sets 	5.139      1.0       sorting strings 	5.601      1.0       sorcerer's apprentice 	 	2.355      1.0       geometric mean"	^ self! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 19:05'!setFrom: collection	"Form a set from collection and return it.	This method tests the efficiency of building a fairly large set	from strings. It indirectly tests the effectiveness of the string	hash function. Strings are used often enough as dictionary keys	that this may be worth including in the benchmark suite.  ST/V-DOS	has a primitive hash for strings, and ST80 has an elaborate one	written in Smalltalk."	^ setFact withAll: collection! !!SMarkSmopstone methodsFor: 'running' stamp: 'StefanMarr 5/7/2013 19:27'!setUp	ordCollectionFact := OrderedCollection.	intervalFact      := Interval.	rectFactory       := Rectangle.	sortedColFact     := SortedCollection.	arrFact           := Array.	setFact           := Set.	pointFact         := Point.! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/16/2013 11:43'!sorcerersApprentice: m	"modified by nishis"	" FORMATTED FOR MONOSPACED FONT	Perform various operations on rectangles.	This method tests the efficiency of recursively calling a block that	includes lots of integer arithmetic, collection building, and collection	enumeration. The method:	(1) Creates a collection of pseudo random rectangles 	(2) Forms a new collection of all their intersections 	(3) Recursively continues until there are no more intersections 	(4) Returns a collection with the counts of rectangles in each generation.	Because the intersections are forming progressively smaller rectangles	(we exclude intersections of a rectangle with itself), the algorithm will	eventually converge. Depending on the choice of numeric parameters, it may	converge very quickly or very slowly. The parameters used below make it	converge in a reasonable amount of time (a few seconds on a one-smopstone	machine). It took some experimentation with different combinations to	achieve this.	The pseudo random number generator isn't very good, but it's adequate	for this benchmark. I had intended the number '87' it uses to be a prime,	but 87 = 29 * 3. The numbers may have been a bit more random otherwise.	One could write an algorithm that would converge much more quickly and in	a more predictable amount of time by sorting the intermediate rectangles	in two dimensions and not bothering to test for intersections those	rectangles that are contained in mutually exclusive regions. We have	chosen algorithmic simplicity over performance optimization. We simply	perform intersections of each rectangle with every possible partner in	each generation. The time consumed is quadratic in the number of rectangles.	The algorithm originally stored rectangles in sets to eliminate duplicates.	Unfortunately, ST/V-DOS uses the hash function inherited from Object for	Rectangle, which will allow duplicates to be stored. So we were forced to	store rectangles in ordered collections and eliminate duplicates by brute	force. The brutality was heightened because we could not use the test	collection>>includes: to decide whether to add a rectangle to the ordered	collections, since ST/V-DOS does not define equality (=) for rectangles	either. The remaining warts in the code are not worth explaining.	In an actual application, these shortcomings of ST/V-DOS would have been	overcome by adding subclasses and methods rather than writing kludgy code."	| n firstGen intersection isIncluded counts r random	a b c d e f g h generate nextGen |		n := 20 * m.	firstGen := ordCollectionFact new.	counts   := ordCollectionFact new.	r := 50.	random := [r := r + 1 * 87 \\ n].	m timesRepeat: [		a := random value.		b := random value.		c := random value.		d := random value.		e := a min: b.		f := c min: d.		g := a max: b.		h := c max: d.		firstGen add: (rectFactory origin: (pointFact x: e y: f) corner: (pointFact x: g y: h))].	generate := 		[:lastGen |		counts add: lastGen size.		nextGen := ordCollectionFact new.		lastGen do:			[:r1 |			lastGen do: 				[:r2 | 				(r1 origin ~= r2 origin or: [r1 corner ~= r2 corner])				"In ST80 this test would have simply been r1 ~= r2"					ifTrue:						[(r1 intersects: r2)							ifTrue:								[intersection := r1 intersect: r2.								isIncluded := false.                     "All these lines"								nextGen do:                              "would have been"									[:rec |                                "avoided if we"										(rec origin = intersection origin and: "could have used"										[rec corner = intersection corner])    "a set for"											ifTrue: [isIncluded := true]].       "nextGen. See"								isIncluded                               "explanation"									ifFalse:                               "above."										[nextGen size > 500											ifTrue: [self error: 'Converges too slowly.']											ifFalse: [nextGen add: intersection]]]]]].			nextGen size > 0 ifTrue: [generate value: nextGen]].		generate value: firstGen.	^counts! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 18:18'!sort: collection	"Form a sorted collection from collection and return it.	This method tests the efficiency of sorting a fairly large	collection of strings. It indirectly measures the efficiency	of the sorting algorithm and of string comparison operations."	^collection as: sortedColFact! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 18:19'!streamTestsOn: integers 	"modified by nishis"	"Test steaming operations on the collection of integers. 	 	This method measures the efficiency of integer-to-float conversion, of 	printing numbers to a write stream, of parsing tokens in a read 	stream,   and of converting the tokens from strings to numbers. The 	technique for 	converting tokens into floats is constrained by portability between 	ST80 and ST/V. 	 	To validate the logic, the original integers are compared with the 	final   floats. There should be no roundoff errors."	"The following line accounts for the different implementations of 	Float>>printString for some versions of Smalltalk. USA versions use 	the decimal character, while some European versions use the comma 	char.   Thanks to Marten Feldtmann for pointing this out."	| delim space s floats float string |	delim := 1.0 printString at: 2.	"$. for USA, $, for some Europe."	space := Character value: 32.	"Can't use Character space in ST/V-DOS"	s := ReadWriteStream on: String new.	integers do: 		[:i |			i asFloat printOn: s.			s space].	"Now make sure the underlying string size is < 16383, a 16-bit small int."	s contents size > (SmallInteger maxVal) ifTrue: [self error: 'String too big.'].	s reset.	floats := ordCollectionFact new: integers size.	[s atEnd]		whileFalse: 			[float := 0.0.			string := s upTo: delim.			s upTo: space.			"In the following, digitValue is portable between ST80 and ST/V-DOS. "			string do: [:char | float := float * 10.0 + char digitValue].			floats add: float].	integers = floats ifFalse: [self error: 'Numbers do not compare.']! !!SMarkSmopstone methodsFor: 'stone benchmarks' stamp: 'StefanMarr 5/7/2013 20:18'!stringsUpTo: n 	"Return a collection of strings representing the integers from 1 	to n with their digits reversed. 	 	This method tests the efficiency of creating small streams, performing 	string operations, and building collections. It includes a gross kludge 	to coerce portability between ST80 and ST/V. They vary slightly in the 	selector used to reverse collections. Subsequent to freezing this code, 	someone pointed out that it could have been written more simply 	without   using perform:. It could also have been simplified using 	select:. It 	was too late to change. The techniques are left as an exercise for the 	reader."	| selector |	(arrFact with: #reverse with: #reversed)		do: [:symbol | (String canUnderstand: symbol)			ifTrue: [selector := symbol]].	^ (intervalFact from: 1 to: n)		collect: [:m | m printString perform: selector]! !!SMarkSuite class methodsFor: 'defaults'!defaultProblemSize	^ nil! !!SMarkSuite class methodsFor: 'defaults' stamp: 'StefanMarr 12/30/2011 22:43'!defaultRunner	^ self onCog: [SMarkCogRunner]	       else:  [SMarkRunner]! !!SMarkSuite class methodsFor: 'benchmarking'!isAbstractClass	"This is a hack that is necessary in Squeak since it does not provide #isAbstractClass.	 Actually this class is supposed to be abstract, but well, inheritance..."		^ false! !!SMarkSuite class methodsFor: 'platform support' stamp: 'StefanMarr 4/5/2012 22:20'!onCog: cogSpecificBlock else: general	^ (Smalltalk vm isRunningCogit)		ifTrue:  [cogSpecificBlock value]		ifFalse: [general value]! !!SMarkSuite class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:22'!profile: aSelector	^ self profileRunner 		execute: self new selector: aSelector.! !!SMarkSuite class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:30'!profile: aSelector iterations: nIterations	^ self profileRunner 		execute: self new selector: aSelector iterations: nIterations.! !!SMarkSuite class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:21'!profileAll	^ self profileRunner 		execute: self new.! !!SMarkSuite class methodsFor: 'profiling' stamp: 'CamilloBruni 1/28/2013 18:17'!profileRunner	^ SMarkProfileRunner! !!SMarkSuite class methodsFor: 'benchmarking' stamp: 'StephaneDucasse 6/16/2013 12:11'!run	"Execute the suite one time."	^ self defaultRunner execute: self new.! !!SMarkSuite class methodsFor: 'benchmarking' stamp: 'StephaneDucasse 6/16/2013 12:11'!run: nIterations	"Execute the suite a given number of iterations."		^ self defaultRunner execute: self new with: nIterations.! !!SMarkSuite class methodsFor: 'benchmarking' stamp: 'StefanMarr 6/30/2013 00:57'!runOnly: aSelector  "aSelector should refer to a benchmark method.   Example:     SMarkLoops runOnly: #benchFloatLoop  "  ^ self defaultRunner execute: (self new runOnly: aSelector)! !!SMarkSuite class methodsFor: 'benchmarking' stamp: 'StephaneDucasse 6/16/2013 21:03'!runOnly: aSelector iterations: anInteger	"Execute only the bench name aSelector from the suite."		^ self defaultRunner execute: (self new runOnly: aSelector) with: anInteger! !!SMarkSuite methodsFor: 'helper'!benchmarkNameForSelector: selector	"Extracts the actual name of the benchmark from the selector"	(selector beginsWith: #bench) ifTrue: [ ^ selector copyFrom: 6 to: selector size].	^ selector asSymbol	! !!SMarkSuite methodsFor: 'running'!cleanUpInstanceVariables	"Make sure all variables that are 'user variables' get cleaned"		self class allInstVarNames do: [ :name |		name = 'runner' ifFalse: [			self instVarNamed: name put: nil ] ]! !!SMarkSuite methodsFor: 'benchmarking'!performCustomSelector: aSelector with: aPrefix	| customSelector |	customSelector := (aPrefix, aSelector capitalized) asSymbol.	(self respondsTo: customSelector) ifTrue: [ 		self perform: customSelector].! !!SMarkSuite methodsFor: 'benchmarking' stamp: 'StefanMarr 5/8/2013 13:55'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	runner             ifNil: [^ self class defaultProblemSize].	runner problemSize ifNil: [^ self class defaultProblemSize].	^ runner problemSize! !!SMarkSuite methodsFor: 'benchmarking' stamp: 'ReinoutStevens 12/6/2011 14:31'!processResult: anObject withTimer: aSMarkTimer	"subclass responsability. You can verify your results here, or do things with the timer."	^self.! !!SMarkSuite methodsFor: 'benchmarking'!run	"Executes all the benchmarks in the suite, 	 coordinating with the runner when necessary"		| potentialBenchmarkSelectors |	selectedBenchmarks		ifNotNil: [ potentialBenchmarkSelectors := selectedBenchmarks ]		ifNil:    [ potentialBenchmarkSelectors := self class allSelectors ].						potentialBenchmarkSelectors		do: [ :selector |			(self shouldRunSelector: selector)				ifTrue: [					runner performBenchmark: selector ]		].	! !!SMarkSuite methodsFor: 'benchmarking'!runBenchmark: aSelector		[self setUp.	 self performCustomSelector: aSelector with: #setUp.	 runner timedBenchmarkExecution: aSelector] ensure: [		self performCustomSelector: aSelector with: #tearDown.		self tearDown.		self cleanUpInstanceVariables]! !!SMarkSuite methodsFor: 'benchmarking'!runOnly: aSymbol	selectedBenchmarks := IdentitySet newFrom: { aSymbol }.! !!SMarkSuite methodsFor: 'accessing'!runner	^ runner! !!SMarkSuite methodsFor: 'accessing'!runner: aRunner	runner := aRunner.! !!SMarkSuite methodsFor: 'benchmarking'!selectedBenchmarks	^ selectedBenchmarks! !!SMarkSuite methodsFor: 'running' stamp: 'StefanMarr 6/30/2013 00:59'!setUp	"It is the subclass' responsibility to set up the necessary environment for a benchmark"	^ self! !!SMarkSuite methodsFor: 'testing' stamp: 'StefanMarr 6/30/2013 00:59'!shouldRunSelector: selector	"Tells whether the given selector is in the form bench*, and thus is a benchmark that should be executed."		(selector includes: $:) ifTrue: [ ^ false ].	^ selector beginsWith: #bench! !!SMarkSuite methodsFor: 'running' stamp: 'StefanMarr 6/30/2013 00:58'!tearDown	"It is the subclass' responsibility to clean up the environment after a benchmark"	^ self! !!SMarkTestRunnerSuite commentStamp: 'StefanMarr 3/13/2011 22:58' prior: 34214665!This is a benchmark suite used to test the benchmark runner!!SMarkTestRunnerSuite class methodsFor: 'as yet unclassified'!isAbstractClass	"This is more like a hack, but we do not want to execute this as a benchmark"	^ true! !!SMarkTestRunnerSuite methodsFor: 'as yet unclassified'!benchDoNothing	"Just a dummy that should be executed and result in some measured value"	^ self! !!SMarkTestRunnerSuite methodsFor: 'as yet unclassified'!benchNotifyRunner	runner notifyRunnerWasExecuted.	^ self! !!SMarkTestRunnerSuiteForAutosizing class methodsFor: 'as yet unclassified'!defaultRunner	^ SMarkTestRunner! !!SMarkTestRunnerSuiteForAutosizing methodsFor: 'as yet unclassified'!baseBenchmark	(Delay forMilliseconds: 5) wait.! !!SMarkTestRunnerSuiteForAutosizing methodsFor: 'as yet unclassified'!benchBig	(Delay forMilliseconds: 100) wait.! !!SMarkTestRunnerSuiteForAutosizing methodsFor: 'as yet unclassified'!benchSmall	(Delay forMilliseconds: 5) wait.! !!SMarkTestRunnerSuiteForPerfromBenchmark class methodsFor: 'as yet unclassified'!defaultRunner	^ SMarkTestRunner! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!BenchShouldNotBeExecuted	"This one should not be executed"	(Delay forMilliseconds: 5) wait.	runner didPerform: #BenchShouldNotBeExecuted.! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!baseBenchmark	(Delay forMilliseconds: 5) wait.	runner didPerform: #baseBenchmark.! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!benchAfsdfsdfsdf	(Delay forMilliseconds: 5) wait.	runner didPerform: #benchAfsdfsdfsdf.! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!benchBsdfasereSDSfsdfsdfs	(Delay forMilliseconds: 5) wait.	runner didPerform: #benchBsdfasereSDSfsdfsdfs.! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!benchC	(Delay forMilliseconds: 5) wait.	runner didPerform: #benchC.! !!SMarkTestRunnerSuiteForPerfromBenchmark methodsFor: 'as yet unclassified'!benchZZ	(Delay forMilliseconds: 5) wait.	runner didPerform: #benchZZ.! !!SMarkTestSuite commentStamp: 'StefanMarr 3/12/2011 22:13' prior: 34214795!This class is used for unit testing only.!!SMarkTestSuite class methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/20/2011 21:09'!defaultRunner	^ SMarkTestRunner! !!SMarkTestSuite class methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/13/2011 20:57'!isAbstractClass	"This is more like a hack, but we do not want to execute this as a benchmark"	^ true! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/12/2011 22:15'!a	^a! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/12/2011 22:15'!b	^b! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 00:35'!benchA	a := #executed.	(Delay forMilliseconds: 1) wait.! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 00:38'!benchB	b := #executed.	(Delay forMilliseconds: 1) wait.! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/12/2011 22:37'!benchC	c := #executed.! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/19/2011 01:04'!benchWithMultipleCriteria	| t1 t2 t3 |	t3 := runner createTimer: 't3'.	t3 start.		(Delay forMilliseconds: 25) wait.		t2:= runner createTimer: 't2'.	t2 start.	(Delay forMilliseconds: 15) wait.			t1 := runner createTimer: 't1'.  	t1 start.	(Delay forMilliseconds: 10) wait.			t3 stop.	t2 stop.	t1 stop.    ! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/12/2011 22:15'!c	^c! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/12/2011 22:15'!d	^d! !!SMarkTestSuite methodsFor: 'initialize-release' stamp: 'StefanMarr 3/18/2011 19:50'!initialize	super initialize.		"Filling in some test data"	a := 1.	b := 2.	c := #three.	d := '42'.	! !!SMarkTestSuite methodsFor: 'running' stamp: 'StefanMarr 3/12/2011 22:39'!setUp	runner countSetUpInvoke! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/13/2011 20:29'!setUpBenchB	runner didSetUpBenchB! !!SMarkTestSuite methodsFor: 'running' stamp: 'StefanMarr 3/12/2011 22:39'!tearDown	runner countTearDownInvoke! !!SMarkTestSuite methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/13/2011 20:30'!tearDownBenchC	runner didTearDownBenchC! !!SMarkTestSuiteWithBaseBenchmark methodsFor: 'as yet unclassified' stamp: 'StefanMarr 3/18/2011 18:32'!baseBenchmark	runner didRunBaseBenchmark.! !!SMarkTimer commentStamp: '<historical>' prior: 34214889!A SMarkTimer is a simple timer.A subclass can measure alternative metrics, or for instance use different time sources.A subclass of SMarkRunner can then use the custom timer class by overriding SMarkRunner class >> #defaultTimer.!!SMarkTimer class methodsFor: 'instance creation' stamp: 'StefanMarr 3/14/2011 08:54'!new: aName	| timer |		timer := super new.	timer name: aName.		^timer! !!SMarkTimer methodsFor: 'timing' stamp: 'StephaneDucasse 6/16/2013 21:15'!currentMillis	^ Time millisecondClockValue! !!SMarkTimer methodsFor: 'initialization' stamp: 'ReinoutStevens 12/6/2011 14:32'!initialize	super initialize.	elapsedTime := 0! !!SMarkTimer methodsFor: 'accessing' stamp: 'StefanMarr 3/14/2011 08:54'!name	^name! !!SMarkTimer methodsFor: 'accessing' stamp: 'StefanMarr 3/14/2011 08:54'!name: aString	name := aString ! !!SMarkTimer methodsFor: 'timing' stamp: 'StefanMarr 3/14/2011 08:54'!reset	startTime := 0.	elapsedTime := 0.! !!SMarkTimer methodsFor: 'timing' stamp: 'StefanMarr 3/20/2011 12:24'!start	startTime := self currentMillis.! !!SMarkTimer methodsFor: 'timing' stamp: 'StefanMarr 3/20/2011 12:25'!stop	| elapsedInThisPeriod current |	current := self currentMillis.		elapsedInThisPeriod := Time milliseconds: current since: startTime.		elapsedTime := elapsedTime + elapsedInThisPeriod.! !!SMarkTimer methodsFor: 'accessing' stamp: 'StefanMarr 3/14/2011 08:54'!totalTime	^elapsedTime! !!SMarkTransporter commentStamp: 'StefanMarr 4/5/2012 21:43' prior: 34215193!SMarkTransporter is a used to interact with a git-fileout system used in the RoarVM project to manage Smalltalk source code.SMarkTransporter is not actually a Transporter class, since there are currently no needs for customization.Thus, it is just a dummy class for future use, and to hold #transportersForFileOutMenu.!!SMarkTransporter class methodsFor: 'transporter' stamp: 'StefanMarr 4/5/2012 21:46'!transportersForFileOutMenu	^ { (Smalltalk at: #Transporter ifAbsent: [^#()])			forPackage: (PackageInfo named: 'SMark') }! !!SMarkWeakScalingRunnerExecutor class methodsFor: 'as yet unclassified' stamp: 'sm 5/30/2011 16:33'!createFor: aSelector for: numIterations with: aRunner and: aSuite	| o |	o := self new.	o runner: aRunner.	o suite: aSuite.	o innerIterations: numIterations.	o benchmarkSelector: aSelector.	^ ([ o run ] newProcess)! !!SMarkWeakScalingRunnerExecutor methodsFor: 'accessing' stamp: 'sm 5/30/2011 16:20'!benchmarkSelector: aSelector	benchmarkSelector := aSelector! !!SMarkWeakScalingRunnerExecutor methodsFor: 'accessing' stamp: 'sm 5/30/2011 16:20'!innerIterations: anInt	numInnerIterations := anInt! !!SMarkWeakScalingRunnerExecutor methodsFor: 'benchmarking' stamp: 'sm 5/30/2011 16:22'!run	1 to: numInnerIterations do: [:i |		suite perform: benchmarkSelector.].		runner executorCompleted.! !!SMarkWeakScalingRunnerExecutor methodsFor: 'accessing' stamp: 'sm 5/30/2011 16:21'!runner: aRunner	runner := aRunner! !!SMarkWeakScalingRunnerExecutor methodsFor: 'accessing' stamp: 'sm 5/30/2011 16:21'!suite: aSuite	suite := aSuite! !!Time class methodsFor: '*SMark-squeak protocol' stamp: 'sm 5/25/2011 14:26' prior: 59592248!milliseconds: currentTime since: lastTime	"Answer the elapsed time since last recorded in milliseconds.	Compensate for rollover."	| delta |	delta := currentTime - lastTime.	^ delta < 0		ifTrue: [SmallInteger maxVal + delta]		ifFalse: [delta]! !!SMarkHarnessArgumentParserTest methodsFor: 'running'!setUp	parser := SMarkHarnessArgumentParser new.	parser harness: SMarkHarness.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsOnlyBench	| arguments runnerAndReporter runner reporter runOnly |	arguments := {#ignored. 'SMarkTestSuite.benchA' }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner suite isKindOf: SMarkTestSuite).	runOnly := runner suite selectedBenchmarks.	self assert: 1 equals: runOnly size.	self assert: (runOnly includes: #benchA).! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsOnlySuite	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestSuite' }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsReporterSuiteIterations	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkSimpleStatisticsReporter'. 'SMarkTestSuite'. '13'. }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (reporter isKindOf: SMarkSimpleStatisticsReporter).	self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.	! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsRunnerReporterSuiteIterations	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestRunner'. 'SMarkSimpleStatisticsReporter'. 'SMarkTestSuite'. '13'. }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner isKindOf: SMarkTestRunner).	self assert: (reporter isKindOf: SMarkSimpleStatisticsReporter).	self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsRunnerSuiteIterations	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestRunner'. 'SMarkTestSuite'. '13'. }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner isKindOf: SMarkTestRunner).	self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsSuiteAndIterations	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestSuite'. '13' }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsSuiteIterationsProcesses	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestSuite'. '13'. '91' }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.	self assert: 91 equals: runner processes.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseArgumentsSuiteIterationsProcessesProblemSize	| arguments runnerAndReporter runner reporter |	arguments := {#ignored. 'SMarkTestSuite'. '13'. '91'. 'SSS' }.	runnerAndReporter := parser parse: arguments.		runner   := runnerAndReporter first.	reporter := runnerAndReporter second.		self assert: runner notNil.	self assert: reporter notNil.		self assert: (runner suite isKindOf: SMarkTestSuite).	self assert: runner suite selectedBenchmarks isNil.		self assert: 13 equals: runner iterations.	self assert: 91 equals: runner processes.	self assert: 'SSS' equals: runner problemSize.! !!SMarkHarnessArgumentParserTest methodsFor: 'tests'!testParseBenchmarkOrSuite	| example1 example2 example3 example4 example5 |	example1 := 'String>>findTokens:'.	example2 := 'SMarkTestSuite'.	example3 := { SMarkTestSuite. #benchA }.	example4 := SMarkTestSuite.	example5 := 'String.findTokens:'. ". (dot) notation is required to avoid quoting in bash"		self assert: { String. #findTokens: }    equals: (parser parseBenchmarkOrSuite: example1).	self assert: SMarkTestSuite              equals: (parser parseBenchmarkOrSuite: example2).	self assert: { SMarkTestSuite. #benchA } equals: (parser parseBenchmarkOrSuite: example3).	self assert: SMarkTestSuite              equals: (parser parseBenchmarkOrSuite: example4).	self assert: { String. #findTokens: }    equals: (parser parseBenchmarkOrSuite: example5).		"What to do when the input is not a symbol, array, or class?"		"What to do when the class does not exist"	self should: [parser parseBenchmarkOrSuite: 'FooBarClassThatDoesNotExist'] raise: Error.! !!SMarkHarnessClassTest methodsFor: 'tests'!testShouldShowUsage	| example1 example2 example3 example4 |	example1 := { #ignored. '--help' }.	example2 := { #ignored. }.	example3 := { #ignored. '-?'}.	example4 := { #ignored. 1. 2. }.		self assert: (SMarkHarness shouldShowUsage: example1).	self assert: (SMarkHarness shouldShowUsage: example2).	self assert: (SMarkHarness shouldShowUsage: example3).	self deny:   (SMarkHarness shouldShowUsage: example4).! !!SMarkReporterTest methodsFor: 'running'!setUp	runner := SMarkTestRunnerSuiteForAutosizing run.! !!SMarkReporterTest methodsFor: 'compatibility Pharo 1.4 vs. 2.0' stamp: 'StefanMarr 2/13/2013 00:58'!string: str includes: subStr	"To be compatible with Pharo 1.4 and 2.0"	(str respondsTo: #includesSubstring:)		ifTrue:  [ ^ str includesSubstring: subStr ] "2.0"		ifFalse: [ ^ str includesSubString: subStr ] "1.4"! !!SMarkReporterTest methodsFor: 'tests' stamp: 'StefanMarr 2/13/2013 00:56'!testContentOfStream	"Hm, how to test that robustly?"	| reporter stream out |	stream := TextStream on: String new.	reporter := SMarkReporter reportFor: runner on: stream.		out := stream contents.		self assert: (self string: out includes: 'Small').	self assert: (self string: out includes: 'Big').! !!SMarkReporterTest methodsFor: 'tests' stamp: 'StefanMarr 2/13/2013 00:55'!testConvenienceReportOnRunner	| stream out |	stream := TextStream on: String new.		"That should just work, cannot really check whether it is displayed anywhere."	SMarkTestRunnerSuiteForAutosizing run report.		"Check whether it reported as expected"	SMarkTestRunnerSuiteForAutosizing run reportOn: stream.		out := stream contents.		self assert: (self string: out includes: 'Small').	self assert: (self string: out includes: 'Big').! !!SMarkResultTest commentStamp: 'StefanMarr 3/18/2011 23:29' prior: 34215587!This test specifies the data stored in a result object.The result object does not actually provide behavior on its own.!!SMarkResultTest methodsFor: 'running'!setUp	| runner |	runner := SMarkTestRunner execute: SMarkTestRunnerSuite new.	result := (runner results at: #DoNothing) at: 1.! !!SMarkResultTest methodsFor: 'tests'!testBenchmarkName	self assert: (result benchmarkName isKindOf: String)! !!SMarkResultTest methodsFor: 'tests'!testCriteria	self assert: (result criteria respondsTo: #at:).	self assert: (result criteria size > 0).! !!SMarkResultTest methodsFor: 'tests'!testSuite	self assert: result suite notNil! !!SMarkResultTest methodsFor: 'tests'!testTotal	self assert: (result total isKindOf: Number)! !!SMarkAutosizeRunnerTest class methodsFor: 'as yet unclassified'!shouldInheritSelectors	^ true! !!SMarkAutosizeRunnerTest methodsFor: 'helper'!runnerClass	^ SMarkTestAutosizeRunner! !!SMarkAutosizeRunnerTest methodsFor: 'tests'!testAutosizing	"Ensure that the runtime is automatically sized up to a predefined value"	| runner results big small runTime benchmarkSum |		runner := self runnerClass new.		"sanity check for target time"	"Not checked since we reduced the targetTime for testing:	 self assert: self runnerClass defaultTargetTime equals: runner targetTime."	self assert: (self runnerClass defaultTargetTime > 250).		runner iterations: 3.	  	runner suite: SMarkTestRunnerSuiteForAutosizing new.		"Execute the benchmarks and take the overall time it takes"	runTime := Time millisecondClockValue.	results := runner execute.	runTime := Time millisecondClockValue - runTime.		"There should be three benchmarks"	self assert: 3 equals: results size.	self assert: (results includesKey: #baseBenchmark).	big := results at: #Big.	small := results at: #Small.		self assert: (big respondsTo: #at:).	self assert: 3 equals: big size.		self assert: (runner targetTime <= (big at: 1) total).	self assert: (runner targetTime <= (small at: 1) total).		"Calculate the sum of all measurements"	benchmarkSum := big inject: 0 into: [:sum :result| sum + result total].	benchmarkSum := small inject: benchmarkSum into: [:sum :result| sum + result total].		"And now make sure that we not try to find the problem size for every but only the first run"	self assert: (benchmarkSum * 2) > runTime.	! !!SMarkAutosizeRunnerTest methodsFor: 'tests'!testAutosizingBaseBenchmark	"Ensure that baseBenchmarks are not delivering any data since I do not see how that could be done nicely"	| runner results |	runner := self runnerClass new.	runner iterations: 3.	runner suite: SMarkTestRunnerSuiteForAutosizing new.		"Execute the benchmarks and take the overall time it takes"	results := runner execute.		"There should be two benchmarks"	self assert: 3 equals: results size.	self assert: 0 equals: ((results at: #baseBenchmark) at: 1) total.	! !!SMarkAutosizeRunnerTest methodsFor: 'tests'!testBaseBenchmark	"Different from base test: Ensure the base benchmark is NOT executed when available"		| runner |	runner := self runnerClass execute: SMarkTestSuiteWithBaseBenchmark new.	self deny: runner baseBenchmarkExecuted  ! !!SMarkAutosizeRunnerTest methodsFor: 'tests'!testExecute	"This test is slightly different from the one in the base class"	| runner results performedBenchmarks |	runner := self runnerClass new.	runner suite: SMarkTestRunnerSuiteForPerfromBenchmark new.	results := runner execute.		performedBenchmarks := runner performedBenchmarks.			self assert: 4 equals: performedBenchmarks size.				"Different from base test"	self deny: (performedBenchmarks includes: #baseBenchmark).	"Different from base test"		self assert: (results respondsTo: #at:).		"But still we get a result" "Different from base test"	self assert: (((results at: #baseBenchmark) at: 1) isKindOf: SMarkResult).! !!SMarkAutosizeRunnerTest methodsFor: 'tests'!testIterations	| runner |	"This test is different then the one in the base class, it is not direct, but just looks at the results"		" simple scenario should default to 1 run for now "	runner := self runnerClass execute: SMarkTestRunnerSuite new.		self assert: 1 equals: (runner results at: #NotifyRunner) size.		" but we can also be more fancy and set the number of iterations "	runner := self runnerClass new.	runner suite: SMarkTestRunnerSuite new.		"first check again that the default is as expected"	self assert: 1 equals: runner iterations.  		runner iterations: 10.	self assert: runner iterations equals: 10.		runner execute.		self assert: 10 equals: (runner results at: #NotifyRunner) size.! !!SMarkRunnerTest methodsFor: 'helper'!runnerClass	^ SMarkTestRunner! !!SMarkRunnerTest methodsFor: 'tests'!testBaseBenchmark	"Ensure the base benchmark is executed when available"		| runner |	runner := self runnerClass execute: SMarkTestSuiteWithBaseBenchmark new.	self assert: runner baseBenchmarkExecuted  ! !!SMarkRunnerTest methodsFor: 'tests'!testBaseBenchmarkNone	"Ensure that not having a base benchmark does not pose a problem"	| runner |	runner := self runnerClass execute: SMarkTestSuite new.	self deny: runner baseBenchmarkExecuted  ! !!SMarkRunnerTest methodsFor: 'tests'!testBenchmarkWithMultipleCriteraTimers	"Check whether the benchmark benchWithMultipleCriteria, really results in different unrelated timings"	| runner result |	runner := self runnerClass execute: SMarkTestSuite new.		result := (runner results at: #WithMultipleCriteria) at: 1.	self assert: (result isKindOf: SMarkResult).		self assert: result benchmarkName equals: #WithMultipleCriteria.	self assert: (result total >= 50).		self assert: (result criteria notNil).	self assert: (result criteria respondsTo: #at:).		self assert: ((result criteria at: 't1') totalTime >= 10).	self assert: ((result criteria at: 't2') totalTime >= 25).	self assert: ((result criteria at: 't3') totalTime >= 50).	! !!SMarkRunnerTest methodsFor: 'tests'!testClassExecute	| runner |	runner := self runnerClass execute: SMarkTestSuiteWithBaseBenchmark new.		self assert: (runner isKindOf: self runnerClass).! !!SMarkRunnerTest methodsFor: 'tests'!testExecute	"Ensure all benchmarks are run, including the baseBenchmark and the results are returned"	| runner results performedBenchmarks |	runner := self runnerClass new.	runner suite: SMarkTestRunnerSuiteForPerfromBenchmark new.	results := runner execute.		performedBenchmarks := runner performedBenchmarks.			self assert: 5 equals: performedBenchmarks size.	self assert: (performedBenchmarks includes: #baseBenchmark).		self assert: (results respondsTo: #at:).	self assert: (((results at: #baseBenchmark) at: 1) isKindOf: SMarkResult).! !!SMarkRunnerTest methodsFor: 'tests'!testIterations	| runner |	" simple scenario should default to 1 run for now "	runner := self runnerClass execute: SMarkTestRunnerSuite new.		self assert: runner countWasExecuted equals: 1.		" but we can also be more fancy and set the number of iterations "	runner := self runnerClass new.	runner suite: SMarkTestRunnerSuite new.		"first check again that the default is as expected"	self assert: runner iterations equals: 1.  		runner iterations: 10.	self assert: 10 equals: runner iterations.		runner execute.		self assert: 10 equals: runner countWasExecuted.! !!SMarkRunnerTest methodsFor: 'tests'!testPerformBenchmark	"Ensure that performBenchmark executes all the defined #bench methods, but for instance not #Bench"		| runner performedBenchmarks |	runner := self runnerClass execute: SMarkTestRunnerSuiteForPerfromBenchmark new.	performedBenchmarks := runner performedBenchmarks.	self assert: (performedBenchmarks includes: #benchAfsdfsdfsdf).	self assert: (performedBenchmarks includes: #benchBsdfasereSDSfsdfsdfs).	self assert: (performedBenchmarks includes: #benchC).	self assert: (performedBenchmarks includes: #benchZZ).	self deny: (performedBenchmarks includes: #BenchShouldNotBeExecuted).! !!SMarkRunnerTest methodsFor: 'tests'!testResultStructure	| runner results resultA resultB suite |	suite := SMarkTestSuite new.	runner := self runnerClass execute: suite.	results := runner results.		"Don't care whether it is a dictionary, but at least it should present us something that maps benchmark names to result objects"	self assert: (results respondsTo: #at:).	resultA := (results at: #A) at: 1.	resultB := (results at: #B) at: 1.	self assert: (resultA isKindOf: SMarkResult).	self assert: (resultB isKindOf: SMarkResult).	self assert: (((results at: #C) at: 1) isKindOf: SMarkResult).		"Make sure some properties of the result objects is ensured"	self assert: resultA total > 0.	self assert: #A equals: resultA benchmarkName.	self assert: suite equals: resultA suite.	self assert: 1 equals: resultA criteria size.		self assert: resultB total > 0.	self assert: #B equals: resultB benchmarkName.	self assert: suite equals: resultB suite.	self assert: 1 equals: resultB criteria size.	"Testing for multi-criteria results somewhere else"! !!SMarkRunnerTest methodsFor: 'tests'!testTimer	"Simple test whether a timer is created and it is from the expected class.	 This test is very basic, other tests like testBenchmarkWithMultipleCirteria* need to cover the rest"	| runner timer |	runner := self runnerClass new.	timer := runner createTimer: #foo.	self assert: timer name equals: #foo.	self assert: (timer isKindOf: self runnerClass defaultTimer).  ! !!SMarkWeakScalingRunnerTest class methodsFor: 'as yet unclassified'!shouldInheritSelectors	^ true! !!SMarkWeakScalingRunnerTest methodsFor: 'helper'!runnerClass	^ SMarkTestWeakScalingRunner! !!SMarkWeakScalingRunnerTest methodsFor: 'tests'!testInnerIterations	"Test the semantics of the inner loop parameter"	| runner results |		"Setup"	runner := self runnerClass new.	runner iterations: 1.	runner innerIterations: 1.  	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 10 equals: runner countWasExecuted.	self assert: 1  equals: (results at: #NotifyRunner) size.		runner := self runnerClass new.	runner iterations: 2.	runner innerIterations: 1.  	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 20 equals: runner countWasExecuted.	self assert: 2  equals: (results at: #NotifyRunner) size.			runner := self runnerClass new.	runner iterations: 2.	runner innerIterations: 4.  	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: (20 * 4) equals: runner countWasExecuted.	self assert: 2  equals: (results at: #NotifyRunner) size.		runner := self runnerClass new.	runner iterations: 4.	runner innerIterations: 7.  	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: (40 * 7) equals: runner countWasExecuted.	self assert: 4           equals: (results at: #NotifyRunner) size.! !!SMarkWeakScalingRunnerTest methodsFor: 'tests'!testWeakScaling3Processes	"test with small number of processes and varying number of iterations"	| runner results |		"Setup for 2 iteration, and 3 process"	runner := self runnerClass new.	runner iterations: 2.	runner processes: 3.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 6 equals: runner countWasExecuted.	self assert: 2 equals: (results at: #NotifyRunner) size.! !!SMarkWeakScalingRunnerTest methodsFor: 'tests'!testWeakScalingFewProcesses	"test with small number of processes and varying number of iterations"	| runner results |		"Setup for 1 iteration, and 1 process"	runner := self runnerClass new.	runner iterations: 1.	runner processes: 1.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 1 equals: runner countWasExecuted.	! !!SMarkWeakScalingRunnerTest methodsFor: 'tests'!testWeakScalingManyProcesses	"test with large number of processes and varying number of iterations"	| runner results |		"Setup"	runner := self runnerClass new.	runner iterations: 1.	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 10 equals: runner countWasExecuted.	self assert: 1  equals: (results at: #NotifyRunner) size.		runner := self runnerClass new.	runner iterations: 2.	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 20 equals: runner countWasExecuted.	self assert: 2  equals: (results at: #NotifyRunner) size.		runner := self runnerClass new.	runner iterations: 4.	runner processes: 10.	runner suite: SMarkTestRunnerSuite new.	results := runner execute.		self assert: 40 equals: runner countWasExecuted.	self assert: 4  equals: (results at: #NotifyRunner) size.! !!SMarkSuiteTest methodsFor: 'tests'!testBenchmarkNameForSelector	| suite |	suite := SMarkSuite new.		self assert: (suite benchmarkNameForSelector: #benchSomething) equals: #Something.	self assert: (suite benchmarkNameForSelector: #benchsomeThingElse) equals: #someThingElse.		self assert: (suite benchmarkNameForSelector: #nobenchSomeThing) equals: #nobenchSomeThing.	self assert: (suite benchmarkNameForSelector: #BenchSomeThing) equals: #BenchSomeThing.! !!SMarkSuiteTest methodsFor: 'tests'!testClassRun	| runner |		runner := SMarkTestSuite run.	self assert: (runner isKindOf: SMarkTestSuite defaultRunner).	self deny: runner results isNil    ! !!SMarkSuiteTest methodsFor: 'tests'!testCleanUpInstanceVariables	| suite |	suite := SMarkTestSuite new.	suite runner: #dummy.		self assert: suite runner	equals: #dummy.	self assert: suite a			equals: 1.	self assert: suite c			equals: #three.					suite cleanUpInstanceVariables.		self assert: suite runner	equals: #dummy.	self assert: suite a			equals: nil.	self assert: suite b			equals: nil.	self assert: suite c			equals: nil.	self assert: suite d			equals: nil.! !!SMarkSuiteTest methodsFor: 'tests'!testCustomSetUp	| suite runner |		suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite.  		self assert: runner hasSetUpBenchB! !!SMarkSuiteTest methodsFor: 'tests'!testCustomTearDown	| suite runner |	suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite.  		self assert: runner hasTearDownBenchC.! !!SMarkSuiteTest methodsFor: 'tests'!testSetUp	| suite runner |	suite := SMarkTestSuite new.		self assert: suite a			equals: 1.	self assert: suite b			equals: 2.	self assert: suite c			equals: #three.		runner := SMarkTestRunner execute: suite.		"Make sure they are reset after each run,	 well we test just whether they are reset after the final run"	self assert: suite a			equals: nil.	self assert: suite b			equals: nil.	self assert: suite c			equals: nil.	self assert: suite d			equals: nil.	"Make sure setUp was called 4 times."		self assert: 4 equals: runner setUpCount.! !!SMarkSuiteTest methodsFor: 'tests'!testSetupAndTeaddownCalledForEveryBenchForEveryIteration	| suite runner |	"Setup needs to be executed for every benchmark on every iteration.	 Test with iterations: 1"	suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite with: 1.	self assert: 4 equals: runner setUpCount.	self assert: 4 equals: runner tearDownCount.		"Setup needs to be executed for every benchmark on every iteration.	 Test with iterations: 4"	suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite with: 4.	self assert: (4 * 4) equals: runner setUpCount.	self assert: (4 * 4) equals: runner tearDownCount.		"Test with iterations: 10"	suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite with: 10.	self assert: (4 * 10) equals: runner setUpCount.	self assert: (4 * 10) equals: runner tearDownCount.! !!SMarkSuiteTest methodsFor: 'tests'!testShouldRunSelector	| suite |	suite := SMarkSuite new.		self assert: (suite shouldRunSelector: #benchSomething).	self assert: (suite shouldRunSelector: #benchsomeThingElse).		self deny: (suite shouldRunSelector: #nobenchSomeThing).	self deny: (suite shouldRunSelector: #BenchSomeThing).! !!SMarkSuiteTest methodsFor: 'tests'!testTearDown	| suite runner |	suite := SMarkTestSuite new.	runner := SMarkTestRunner execute: suite.  		self assert: 4 equals: runner tearDownCount.! !!SMarkTest commentStamp: 'StefanMarr 3/12/2011 21:57' prior: 34215773!A general test to ensure the overall framework works as expected.!!SMarkTest methodsFor: 'running'!setUp	"Necessary for Squeak 4.2 compatibility, since method anotations are not supported in the base image."	(self respondsTo:  #timeout:) ifTrue: [		self timeout: 300.	].! !!SMarkTest methodsFor: 'tests' stamp: 'StefanMarr 7/5/2013 11:16'!testAllBenchmarksForReturningThemSelf	"This is a regression test to ensure that the old behavior worked in the first place"	| allSuites |	allSuites := { SMarkCompiler. SMarkLoops }.		allSuites do: [:suite |		suite isAbstractClass ifFalse: [			| runner results |			Transcript show: (suite class name asString); cr.			runner := suite run.			results := runner results.			self assert: (runner isKindOf: suite defaultRunner).			self assert: 1 equals: runner iterations.			self assert: (results size > 0).		].	].! !!SMarkTest methodsFor: 'tests' stamp: 'StefanMarr 1/15/2012 20:40'!testBasicRun	| runner results benchResult result |		runner := SMarkLoops run.	results := runner results.	result := (results at: #IntLoop).		self assert: (result isKindOf: Collection).	self assert: result size equals: 1.		benchResult := result at: 1.	self assert: (benchResult isKindOf: SMarkResult).	self assert: (benchResult total notNil).	! !!SMarkTimerTest methodsFor: 'tests'!testName	| timer |	timer := SMarkTimer new.		self assert: timer name equals: nil.		timer name: #foo.		self assert: timer name equals: #foo.! !!SMarkTimerTest methodsFor: 'tests'!testReset	| timer |	timer := SMarkTimer new.		timer start.	(Delay forMilliseconds: 10) wait.	timer stop.		self assert: (timer totalTime >= 10).		timer reset.		self assert: timer totalTime equals: 0.! !!SMarkTimerTest methodsFor: 'tests'!testStartStop	| timer |	timer := SMarkTimer new.		self assert: timer totalTime equals: 0.		timer start.		(Delay forMilliseconds: 10) wait.		timer stop.		self assert: (timer totalTime >= 10).! !!SMarkTimerTest methodsFor: 'tests'!testTotalTimeWithResume	| timer |	timer := SMarkTimer new.	self assert: timer totalTime equals: 0.		timer start.	(Delay forMilliseconds: 10) wait.	timer stop.		self assert: (timer totalTime >= 10).		timer start.	(Delay forMilliseconds: 10) wait.	timer stop.		self assert: (timer totalTime >= 20).		timer start.	(Delay forMilliseconds: 10) wait.	timer stop.		self assert: (timer totalTime >= 30).! !"SMark"!!DBPlan commentStamp: '<historical>' prior: 0!A Plan is an ordered list of constraints to be executed in sequence to resatisfy all currently satisfiable constraints in the face of one or more changing inputs.!!SMarkDeltaBlue commentStamp: '<historical>' prior: 0!One-way constraint solver Benchmark. The main focus in DeltaBlue is on polymorphism and object-oriented programmingTo run the benchmark, execute the expression 'SMarkDeltaBlue run'.!!DBAbstractConstraint commentStamp: '<historical>' prior: 0!I am an abstract class representing a system-maintainable relationship (or "constraint") between a set of variables. I supply a strength instance variable; concrete subclasses provide a means of storing the constrained variables and other information required to represent a constraint.Instance variables:	strength			the strength of this constraint <Strength>!!DBBinaryConstraint commentStamp: '<historical>' prior: 0!I am an abstract superclass for constraints having two possible output variables.Instance variables:	v1, v2		possible output variables <Variable>	direction		one of:					#forward (v2 is output)					#backward (	v1 is output)					nil (not satisfied)!!DBEqualityConstraint commentStamp: '<historical>' prior: 0!I constrain two variables to have the same value: "v1 = v2".!!DBScaleConstraint commentStamp: '<historical>' prior: 0!I relate two variables by the linear scaling relationship:"v2 = (v1 * scale) + offset". Either v1 or v2 may be changed to maintain thisrelationship but the scale factor and offset are considered read-only.Instance variables:	scale		scale factor input variable <Variable>	offset		offset input variable <Variable>!!DBUnaryConstraint commentStamp: '<historical>' prior: 0!I am an abstract superclass for constraints having a single possible output variable.Instance variables:	output		possible output variable <Variable>	satisfied		true if I am currently satisfied <Boolean>!!DBEditConstraint commentStamp: '<historical>' prior: 0!I mark variables that should, with some level of preference, stay the same. I have one method with zero inputs and one output, which does nothing. Planners may exploit the fact that, if I am satisfied, my output will not change during plan execution. This is called "stay optimization."!!DBStayConstraint commentStamp: '<historical>' prior: 0!I mark variables that should, with some level of preference, stay the same.I have one method with zero inputs and one output, which does nothing. Plannersmay exploit the fact that, if I am satisfied, my output will not change duringplan execution. This is called "stay optimization."!!DBPlanner commentStamp: '<historical>' prior: 0!This benchmark is an implementation of the DeltaBlue Constraint Solver described in `The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver'', by Bjorn N. Freeman-Benson and John Maloney, Communications of the ACM, January 1990 (also as University of Washington TR 89-08-06).!!DBStrength commentStamp: '<historical>' prior: 0!Strengths are used to measure the relative importance of constraints. The hierarchy of available strengths is determined by the class variable StrengthTable (see my class initialization method). Because Strengths are invariant, references to Strength instances are shared (i.e. all references to"Strength of: #required" point to a single, shared instance). New strengths may be inserted in the strength hierarchy without disrupting current constraints.Instance variables:	symbolicValue		symbolic strength name (e.g. #required) <Symbol>	arithmeticValue		index of the constraint in the hierarchy, used for comparisons <Number>!!DBVariable commentStamp: '<historical>' prior: 0!I represent a constrained variable. In addition to my value, I maintain the structure of the constraint graph, the current dataflow graph, and various parameters of interest to the DeltaBlue incremental constraint solver.Instance variables:	value			my value; changed by constraints, read by client <Object>	constraints		normal constraints that reference me <Array of Constraint>	determinedBy	the constraint that currently determines					my value (or nil if there isn''t one) <Constraint>	walkStrength		my walkabout strength <Strength>	stay			true if I am a planning-time constant <Boolean>	mark			used by the planner to mark constraints <Number>!!DBPlan commentStamp: '<historical>' prior: 34325425!A Plan is an ordered list of constraints to be executed in sequence to resatisfy all currently satisfiable constraints in the face of one or more changing inputs.!!DBPlan methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:49'!execute	"Execute my constraints in order."	self do: [: c | c execute].! !!SMarkDeltaBlue commentStamp: '<historical>' prior: 34325644!One-way constraint solver Benchmark. The main focus in DeltaBlue is on polymorphism and object-oriented programmingTo run the benchmark, execute the expression 'SMarkDeltaBlue run'.!!SMarkDeltaBlue methodsFor: 'benchmarking' stamp: 'ClemenTBera 9/23/2013 13:17'!benchDeltaBlue	"This the combined benchmark."		| n |		n := self problemSize.		DBStrength initialize.		self doChain: n. 	self doProjection: n! !!SMarkDeltaBlue methodsFor: 'defaults' stamp: 'ClementBera 9/23/2013 11:18'!defaultProblemSize	^ 5000! !!SMarkDeltaBlue methodsFor: 'benchmarking' stamp: 'ClementBera 9/23/2013 10:46'!doChain: n	| vars editConstraint plan planner |	planner := DBPlanner new.	vars := (1 to: n+1) collect: [ :i | DBVariable new].	"thread a chain of equality constraints through the variables"	1 to: n do:		[ :i || v1 v2 |		 v1 := vars at: i.		 v2 := vars at: i + 1.		 DBEqualityConstraint var: v1 var: v2 strength: #required].	DBStayConstraint var: vars last strength: #strongDefault.	editConstraint := DBEditConstraint var: (vars first) strength: #preferred.	plan := planner extractPlanFromConstraints: (Array with: editConstraint).	1 to: 100 do: [ :v | 		vars first value: v.		plan execute.		vars last value ~= v ifTrue: [self error: 'Chain test failed!!!!']].	editConstraint destroyConstraint! !!SMarkDeltaBlue methodsFor: 'benchmarking' stamp: 'ClementBera 9/23/2013 10:47'!doProjection: n	"This test constructs a two sets of variables related to each other by	 a simple linear transformation (scale and offset)."	| scale offset src dst planner dests |	planner := DBPlanner new.	dests := OrderedCollection new.	scale := DBVariable value: 10.	offset := DBVariable value: 1000.	1 to: n do:		[ :i |		src := DBVariable value: i.		dst := DBVariable value: i.		dests add: dst.		DBStayConstraint var: src strength: #default.		DBScaleConstraint var: src var: scale var: offset var: dst strength: #required].	planner changeVar: src newValue: 17.	dst value ~= 1170 ifTrue: [self error: 'Projection test 1 failed!!!!'].	planner changeVar: dst newValue: 1050.	src value ~= 5 ifTrue: [self error: 'Projection test 2 failed!!!!'].	planner changeVar: scale newValue: 5.	1 to: n - 1 do: [ :i |		(dests at: i) value ~= (i*5 + 1000)			ifTrue: [self error: 'Projection test 3 failed!!!!']].	planner changeVar: offset newValue: 2000.	1 to: n - 1 do: [ :i |		(dests at: i) value ~= (i*5 + 2000)			ifTrue: [self error: 'Projection test 4 failed!!!!']].! !!SMarkDeltaBlue methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 11:05'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	| ps |	ps := super problemSize.		ps isInteger ifFalse: [	^ self defaultProblemSize].			^ ps! !!DBAbstractConstraint commentStamp: '<historical>' prior: 34325890!I am an abstract class representing a system-maintainable relationship (or "constraint") between a set of variables. I supply a strength instance variable; concrete subclasses provide a means of storing the constrained variables and other information required to represent a constraint.Instance variables:	strength			the strength of this constraint <Strength>!!DBAbstractConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:54'!addConstraint	"Activate this constraint and attempt to satisfy it."	self addToGraph.	DBPlanner current incrementalAdd: self.! !!DBAbstractConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:54'!addToGraph	"Add myself to the constraint graph."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!chooseMethod: mark	"Decide if I can be satisfied and record that decision. The output of	 the choosen method must not have the given mark and must have a	 walkabout strength less than that of this constraint."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:54'!destroyConstraint	"Deactivate this constraint, remove it from the constraint graph,	 possibly causing other constraints to be satisfied, and destroy it."	(self isSatisfied) ifTrue: [DBPlanner current incrementalRemove: self].	self removeFromGraph.	self release.! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!execute	"Enforce this constraint. Assume that it is satisfied."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!inputsDo: aBlock	"Assume that I am satisfied. Evaluate the given block on all my current	 input variables."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!inputsKnown: mark	"Assume that I am satisfied. Answer true if all my current inputs are	 known. A variable is known if either a) it is 'stay' (i.e. it is a	 constant at plan execution time), b) it has the given mark (indicating	 that it has been computed by a constraint appearing earlier in the	 plan), or c) it is not determined by any constraint."	self inputsDo:		[ :v |		 (v mark = mark or: [v stay or: [v determinedBy isNil]]) ifFalse:			[^false]].	^true! !!DBAbstractConstraint methodsFor: 'testing' stamp: 'ClementBera 9/23/2013 10:53'!isInput	"Normal constraints are not input constraints. An input constraint is	 one that depends on external state, such as the mouse, the keyboard,	 a clock, or some arbitrary piece of imperative code."	^false! !!DBAbstractConstraint methodsFor: 'testing' stamp: 'ClementBera 9/23/2013 10:54'!isSatisfied	"Answer true if this constraint is satisfied in the current solution."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 11:02'!longPrintOn: aStream	aStream nextPut: $(.	self shortPrintOn: aStream.	aStream space; nextPutAll: self strength printString.	(self isSatisfied)		ifTrue:			[aStream cr; space; space; space.			 self inputsDo:				[ :in | aStream nextPutAll: 'v', in printString, ' '].			aStream nextPutAll: '-> '.			aStream nextPutAll: 'v', self output printString]		ifFalse:			[aStream space; nextPutAll: 'UNSATISFIED'].	aStream nextPut: $); cr.! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!markUnsatisfied	"Record the fact that I am unsatisfied."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:55'!output	"Answer my current output variable. Raise an error if I am not	 currently satisfied."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 10:57'!printOn: aStream	self shortPrintOn: aStream! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:56'!recalculate	"Calculate the walkabout strength, the stay flag, and, if it is 'stay',	 the value for the current output of this constraint. Assume this	 constraint is satisfied."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:54'!removeFromGraph	"Remove myself from the constraint graph."	self subclassResponsibility! !!DBAbstractConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:56'!satisfy: mark	"Attempt to find a way to enforce this (still unsatisfied) constraint.	 If successful, record the solution, perhaps modifying the current	 dataflow graph.  Answer the constraint that this constraint overrides,	 if there is one, or nil, if there isn't."	| overridden out |	self chooseMethod: mark.	self isSatisfied		ifTrue:			"constraint can be satisfied"			["mark inputs to allow cycle detection in addPropagate"			 self inputsDo: [ :in | in mark: mark].			 out := self output.			 overridden := out determinedBy.			 overridden ifNotNil: [overridden markUnsatisfied].			 out determinedBy: self.			 (DBPlanner current addPropagate: self mark: mark) ifFalse:				[self notify:					('Cycle encountered adding:\   ',					 self printString,					 '\Constraint removed.') withCRs.				 ^nil].			 out mark: mark]		ifFalse:			"constraint cannot be satisfied"			[overridden := nil.			 (strength sameAs: (DBStrength required)) ifTrue:				[self notify: 'Failed to satisfy a required constraint']].	^ overridden! !!DBAbstractConstraint methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 11:02'!shortPrintOn: aStream	aStream nextPutAll: self class name, '(', self printString, ')'.! !!DBAbstractConstraint methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:53'!strength	^ strength! !!DBAbstractConstraint methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:53'!strength: anObject	strength := anObject! !!DBBinaryConstraint commentStamp: '<historical>' prior: 34326313!I am an abstract superclass for constraints having two possible output variables.Instance variables:	v1, v2		possible output variables <Variable>	direction		one of:					#forward (v2 is output)					#backward (	v1 is output)					nil (not satisfied)!!DBBinaryConstraint class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 10:33'!var: variable1 var: variable2 strength: strengthSymbol	"Install a constraint with the given strength equating the given	 variables."	^(self new) var: variable1 var: variable2 strength: strengthSymbol! !!DBBinaryConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:21'!addToGraph	"Add myself to the constraint graph."	v1 addConstraint: self.	v2 addConstraint: self.	direction := nil.! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:24'!chooseMethod: mark	"Decide if I can be satisfied and which way I should flow based on the relative strength of the variables I relate, and record that decision."	v1 mark == mark ifTrue:		"forward or nothing"		[ ^ direction := ((v2 mark ~= mark) and: [strength stronger: v2 walkStrength])			ifTrue: [ #forward ]			ifFalse: [ nil ] ].	v2 mark == mark ifTrue:		"backward or nothing"		[ ^ direction := ((v1 mark ~= mark) and: [strength stronger: v1 walkStrength])			ifTrue: [ #backward ]			ifFalse: [ nil ] ].	"if we get here, neither variable is marked, so we have choice"	(v1 walkStrength weaker: v2 walkStrength)		ifTrue:			[ ^ direction := (strength stronger: v1 walkStrength)				ifTrue: [ #backward ]				ifFalse: [ nil ]]		ifFalse:			[ ^ direction := (strength stronger: v2 walkStrength)				ifTrue: [ #forward ]				ifFalse: [ nil ]]. ! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:25'!execute	"Enforce this constraint. Assume that it is satisfied."	self subclassResponsibility! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:25'!inputsDo: aBlock	"Evaluate the given block on my current input variable."	direction == #forward		ifTrue: [ aBlock value: v1 ]		ifFalse: [ aBlock value: v2 ].! !!DBBinaryConstraint methodsFor: 'testing' stamp: 'ClementBera 9/23/2013 10:21'!isSatisfied	"Answer true if this constraint is satisfied in the current solution."	^ direction notNil! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:25'!markUnsatisfied	"Record the fact that I am unsatisfied."	direction := nil.! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:26'!output	"Answer my current output variable."	^ direction == #forward		ifTrue: [ v2 ]		ifFalse: [ v1 ]! !!DBBinaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:27'!recalculate	"Calculate the walkabout strength, the stay flag, and, if it is 'stay',         the value for the current output of this constraint. Assume this	 constraint is satisfied."	| in out |	direction == #forward		ifTrue: [in := v1. out := v2]		ifFalse: [in := v2. out := v1].	out walkStrength: (strength weakest: in walkStrength).	out stay: in stay.	out stay ifTrue: [ self execute ].		"stay optimization"! !!DBBinaryConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:29'!removeFromGraph	"Remove myself from the constraint graph."	v1 ifNotNil: [v1 removeConstraint: self].	v2 ifNotNil: [v2 removeConstraint: self].	direction := nil.! !!DBBinaryConstraint methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:21'!var: variable1 var: variable2 strength: strengthSymbol	"Initialize myself with the given variables and strength."	strength := DBStrength of: strengthSymbol.	v1 := variable1.	v2 := variable2.	direction := nil.	self addConstraint.! !!DBEqualityConstraint commentStamp: '<historical>' prior: 34326629!I constrain two variables to have the same value: "v1 = v2".!!DBEqualityConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 11:24'!execute	"Enforce this constraint. Assume that it is satisfied." 	direction == #forward		ifTrue: [v2 value: v1 value]		ifFalse: [v1 value: v2 value].! !!DBScaleConstraint commentStamp: '<historical>' prior: 34326749!I relate two variables by the linear scaling relationship:"v2 = (v1 * scale) + offset". Either v1 or v2 may be changed to maintain thisrelationship but the scale factor and offset are considered read-only.Instance variables:	scale		scale factor input variable <Variable>	offset		offset input variable <Variable>!!DBScaleConstraint class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 10:32'!var: src var: scale var: offset var: dst strength: strengthSymbol	"Install a scale constraint with the given strength on the given variables."	^(self new) src: src scale: scale offset: offset dst: dst strength: strengthSymbol! !!DBScaleConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:28'!addToGraph	"Add myself to the constraint graph."	super addToGraph.	scale addConstraint: self.	offset addConstraint: self.! !!DBScaleConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:31'!execute	"Enforce this constraint. Assume that it is satisfied."	direction == #forward		ifTrue: [v2 value: v1 value * scale value + offset value]		ifFalse: [v1 value: v2 value - offset value // scale value].! !!DBScaleConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:31'!inputsDo: aBlock	"Evaluate the given block on my current input variable."	direction == #forward		ifTrue: [ aBlock 				value: v1; 				value: scale; 				value: offset]		ifFalse: [ aBlock 				value: v2; 				value: scale; 				value: offset].! !!DBScaleConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:32'!recalculate	"Calculate the walkabout strength, the stay flag, and, if it is 'stay', the value for the current output of this constraint. Assume this constraint is satisfied."	| in out |	direction == #forward		ifTrue: [in := v1. out := v2]		ifFalse: [out := v1. in := v2].	out walkStrength: (strength weakest: in walkStrength).	out stay: (in stay and: [scale stay and: [offset stay]]).	out stay ifTrue: [self execute].		"stay optimization"! !!DBScaleConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:29'!removeFromGraph	"Remove myself from the constraint graph."	super removeFromGraph.	scale ifNotNil: [scale removeConstraint: self].	offset ifNotNil: [offset removeConstraint: self].! !!DBScaleConstraint methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:27'!src: srcVar scale: scaleVar offset: offsetVar dst: dstVar strength: strengthSymbol	"Initialize myself with the given variables and strength."	strength := DBStrength of: strengthSymbol.	v1 := srcVar.	v2 := dstVar.	scale := scaleVar.	offset := offsetVar.	direction := nil.	self addConstraint.! !!DBUnaryConstraint commentStamp: '<historical>' prior: 34327126!I am an abstract superclass for constraints having a single possible output variable.Instance variables:	output		possible output variable <Variable>	satisfied		true if I am currently satisfied <Boolean>!!DBEditConstraint commentStamp: '<historical>' prior: 34327391!I mark variables that should, with some level of preference, stay the same. I have one method with zero inputs and one output, which does nothing. Planners may exploit the fact that, if I am satisfied, my output will not change during plan execution. This is called "stay optimization."!!DBEditConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:19'!execute	"Edit constraints do nothing."! !!DBEditConstraint methodsFor: 'testing' stamp: 'ClementBera 9/23/2013 10:18'!isInput	"I indicate that a variable is to be changed by imperative code."	^true! !!DBStayConstraint commentStamp: '<historical>' prior: 34327736!I mark variables that should, with some level of preference, stay the same.I have one method with zero inputs and one output, which does nothing. Plannersmay exploit the fact that, if I am satisfied, my output will not change duringplan execution. This is called "stay optimization."!!DBStayConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:20'!execute	"Stay constraints do nothing."! !!DBUnaryConstraint class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 10:20'!var: aVariable strength: strengthSymbol	"Install an edit constraint with the given strength on the given	 variable."	^(self new) var: aVariable strength: strengthSymbol! !!DBUnaryConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:16'!addToGraph	"Add myself to the constraint graph."	output addConstraint: self.	satisfied := false.! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:19'!chooseMethod: mark	"Decide if I can be satisfied and record that decision."	satisfied :=		output mark ~= mark and:		[strength stronger: output walkStrength].! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:17'!execute	"Enforce this constraint. Assume that it is satisfied."	self subclassResponsibility! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:17'!inputsDo: aBlock	"I have no input variables."! !!DBUnaryConstraint methodsFor: 'testing' stamp: 'ClementBera 9/23/2013 10:15'!isSatisfied	"Answer true if this constraint is satisfied in the current solution."	^satisfied! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:17'!markUnsatisfied	"Record the fact that I am unsatisfied."	satisfied := false.! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:18'!output	"Answer my current output variable."	^ output! !!DBUnaryConstraint methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:18'!recalculate	"Calculate the walkabout strength, the stay flag, and, if it is 'stay',	 the value for the current output of this constraint. Assume this	 constraint is satisfied."	output walkStrength: strength.	output stay: self isInput not.	output stay ifTrue: [self execute].	"stay optimization"! !!DBUnaryConstraint methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:16'!removeFromGraph	"Remove myself from the constraint graph."	output ifNotNil: [ :out | out removeConstraint: self].	satisfied := false.! !!DBUnaryConstraint methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:15'!var: aVariable strength: strengthSymbol	"Initialize myself with the given variable and strength."	strength := DBStrength of: strengthSymbol.	output := aVariable.	satisfied := false.	self addConstraint.! !!DBPlanner commentStamp: '<historical>' prior: 34328074!This benchmark is an implementation of the DeltaBlue Constraint Solver described in `The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver'', by Bjorn N. Freeman-Benson and John Maloney, Communications of the ACM, January 1990 (also as University of Washington TR 89-08-06).!!DBPlanner class methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 11:16'!current	^ currentPlanner! !!DBPlanner class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 10:39'!new	^ currentPlanner := super new! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:36'!addConstraintsConsuming: v to: aCollection	| determiningC |	determiningC := v determinedBy.	v constraints do:		[ :c |		 (c == determiningC or: [c isSatisfied not]) ifFalse:			[aCollection add: c]].! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:36'!addPropagate: c mark: mark	"Recompute the walkabout strengths and stay flags of all variables	 downstream of the given constraint and recompute the actual values	 of all variables whose stay flag is true. If a cycle is detected,	 remove the given constraint and answer false. Otherwise, answer true.	 Details: Cycles are detected when a marked variable is encountered	 downstream of the given constraint. The sender is assumed to have	 marked the inputs of the given constraint with the given mark. Thus,	 encountering a marked node downstream of the output constraint means	 that there is a path from the constraint's output to one of its	 inputs."	| todo d |	todo := OrderedCollection with: c.	[todo isEmpty] whileFalse:		[d := todo removeFirst.		 (d output mark = mark) ifTrue:			[self incrementalRemove: c.			 ^ false].		 d recalculate.		 self addConstraintsConsuming: d output to: todo].	^ true! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:37'!changeVar: aVariable newValue: newValue	| editConstraint plan |	editConstraint := DBEditConstraint var: aVariable strength: #preferred.	plan := self extractPlanFromConstraints: (Array with: editConstraint).	10 timesRepeat: [		aVariable value: newValue.		plan execute].	editConstraint destroyConstraint.! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:37'!constraintsConsuming: v do: aBlock	| determiningC |	determiningC := v determinedBy.	v constraints do:		[ :c |		 (c == determiningC or: [c isSatisfied not]) ifFalse:			[aBlock value: c]].! !!DBPlanner methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:34'!extractPlanFromConstraints: constraints	"Extract a plan for resatisfaction starting from the outputs of the	 given constraints, usually a set of input constraints."	| sources |	sources := OrderedCollection new.	constraints do:		[: c | (c isInput and: [c isSatisfied]) ifTrue: [sources add: c]].	^self makePlan: sources! !!DBPlanner methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:35'!extractPlanFromVariables: variables	"Extract a plan from the dataflow graph having the given variables. It	 is assumed that the given set of variables is complete, or at least	 that it contains all the input variables."	| sources |	sources := OrderedCollection new.	variables do:		[: v |		 (v constraints) do:			[: c | (c isInput and: [c isSatisfied]) ifTrue: [sources add: c]]].	^self makePlan: sources! !!DBPlanner methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:34'!incrementalAdd: c	"Attempt to satisfy the given constraint and, if successful,	 incrementally update the dataflow graph.	 Details: If satifying the constraint is successful, it may override a	 weaker constraint on its output. The algorithm attempts to resatisfy	 that constraint using some other method. This process is repeated	 until either a) it reaches a variable that was not previously	 determined by any constraint or b) it reaches a constraint that	 is too weak to be satisfied using any of its methods. The variables	 of constraints that have been processed are marked with a unique mark	 value so that we know where we've been. This allows the algorithm to	 avoid getting into an infinite loop even if the constraint graph has	 an inadvertent cycle."	| mark overridden |	mark := self newMark.	overridden := c satisfy: mark.	[overridden isNil] whileFalse:		[overridden := overridden satisfy: mark].! !!DBPlanner methodsFor: 'adding' stamp: 'ClementBera 9/23/2013 10:34'!incrementalRemove: c	"Entry point for retracting a constraint. Remove the given constraint,	 which should be satisfied, and incrementally update the dataflow	 graph.	 Details: Retracting the given constraint may allow some currently	 unsatisfiable downstream constraint be satisfied. We thus collect a	 list of unsatisfied downstream constraints and attempt to satisfy	 each one in turn. This list is sorted by constraint strength,	 strongest first, as a heuristic for avoiding unnecessarily adding	 and then overriding weak constraints."	| out unsatisfied |	out := c output.	c markUnsatisfied.	c removeFromGraph.	unsatisfied := self removePropagateFrom: out.	unsatisfied do: [: u | self incrementalAdd: u].! !!DBPlanner methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:33'!initialize	super initialize.	currentMark := 1.! !!DBPlanner methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:35'!makePlan: sources	"Extract a plan for resatisfaction starting from the given satisfied	 source constraints, usually a set of input constraints. This method	 assumes that stay optimization is desired; the plan will contain only	 constraints whose output variables are not stay. Constraints that do	 no computation, such as stay and edit constraints, are not included	 in the plan.	 Details: The outputs of a constraint are marked when it is added to	 the plan under construction. A constraint may be appended to the plan	 when all its input variables are known. A variable is known if either	 a) the variable is marked (indicating that has been computed by a	 constraint appearing earlier in the plan), b) the variable is 'stay'	 (i.e. it is a constant at plan execution time), or c) the variable	 is not determined by any constraint. The last provision is for past	 states of history variables, which are not stay but which are also	 not computed by any constraint."	| mark plan todo c |	mark := self newMark.	plan := DBPlan new.	todo := sources.	[todo isEmpty] whileFalse:		[c := todo removeFirst.		 ((c output mark ~= mark) and:		"not in plan already and..."		  [c inputsKnown: mark]) ifTrue:	"eligible for inclusion"			[plan addLast: c.			 c output mark: mark.			 self addConstraintsConsuming: c output to: todo]].	^ plan! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:37'!newMark	"Select a previously unused mark value.	 Details: We just keep incrementing. If necessary, the counter will	 turn into a LargePositiveInteger. In that case, it will be a bit	 slower to compute the next mark but the algorithms will all behave	 correctly. We reserve the value '0' to mean 'unmarked'. Thus, this	 generator starts at '1' and will never produce '0' as a mark value."	^currentMark := currentMark + 1! !!DBPlanner methodsFor: 'planning' stamp: 'ClementBera 9/23/2013 10:36'!propagateFrom: v	"The given variable has changed. Propagate new values downstream."	| todo c |	todo := OrderedCollection new.	self addConstraintsConsuming: v to: todo.	[todo isEmpty] whileFalse:		[c := todo removeFirst.		 c execute.		 self addConstraintsConsuming: c output to: todo].! !!DBPlanner methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:39'!removePropagateFrom: out	"Update the walkabout strengths and stay flags of all variables	 downstream of the given constraint. Answer a collection of unsatisfied	 constraints sorted in order of decreasing strength."	| unsatisfied todo v |	unsatisfied := SortedCollection sortBlock:		[ :c1 :c2 | c1 strength stronger: c2 strength].	out determinedBy: nil.	out walkStrength: DBStrength absoluteWeakest.	out stay: true.	todo := OrderedCollection with: out.	[todo isEmpty] whileFalse:		[v := todo removeFirst.		 v constraints do:		 	[ :c | c isSatisfied ifFalse: [unsatisfied add: c]].		 self constraintsConsuming: v do:			[ :c |			 c recalculate.			 todo add: c output]].	^ unsatisfied! !!DBStrength commentStamp: '<historical>' prior: 34328416!Strengths are used to measure the relative importance of constraints. The hierarchy of available strengths is determined by the class variable StrengthTable (see my class initialization method). Because Strengths are invariant, references to Strength instances are shared (i.e. all references to"Strength of: #required" point to a single, shared instance). New strengths may be inserted in the strength hierarchy without disrupting current constraints.Instance variables:	symbolicValue		symbolic strength name (e.g. #required) <Symbol>	arithmeticValue		index of the constraint in the hierarchy, used for comparisons <Number>!!DBStrength class methodsFor: 'constants' stamp: 'ClementBera 9/23/2013 10:53'!absoluteStrongest	^AbsoluteStrongest! !!DBStrength class methodsFor: 'constants' stamp: 'ClementBera 9/23/2013 10:53'!absoluteWeakest	^AbsoluteWeakest! !!DBStrength class methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:52'!initialize	"Initialize the symbolic strength table. Fix the internally caches	 values of all existing instances."	"Strength initialize"	StrengthTable := Dictionary new.	StrengthTable at: #absoluteStrongest put: -10000.	StrengthTable at: #required put: -800.	StrengthTable at: #strongPreferred put: -600.	StrengthTable at: #preferred put: -400.	StrengthTable at: #strongDefault put: -200.	StrengthTable at: #default put: 0.	StrengthTable at: #weakDefault put: 500.	StrengthTable at: #absoluteWeakest put: 10000.	StrengthConstants := Dictionary new.	StrengthTable keys do:		[: strengthSymbol |			StrengthConstants				at: strengthSymbol				put: ((super new) initializeWith: strengthSymbol)].	AbsoluteStrongest := DBStrength of: #absoluteStrongest.	AbsoluteWeakest := DBStrength of: #absoluteWeakest.	Required := DBStrength of: #required.! !!DBStrength class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 10:52'!of: aSymbol	"Answer an instance with the specified strength."	^ StrengthConstants at: aSymbol! !!DBStrength class methodsFor: 'constants' stamp: 'ClementBera 9/23/2013 10:53'!required	^Required! !!DBStrength methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:50'!arithmeticValue	"Answer my arithmetic value. Used for comparisons. Note that	 STRONGER constraints have SMALLER arithmetic values."	^arithmeticValue! !!DBStrength methodsFor: 'private' stamp: 'ClementBera 9/23/2013 10:51'!initializeWith: symVal	"Record my symbolic value and reset my arithmetic value."	symbolicValue := symVal.	arithmeticValue := StrengthTable at: symbolicValue.! !!DBStrength methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 10:50'!printOn: aStream	"Append a string which represents my strength onto aStream."	aStream nextPutAll: '%', symbolicValue, '%'.! !!DBStrength methodsFor: 'comparing' stamp: 'ClementBera 9/23/2013 10:49'!sameAs: aStrength	"Answer true if I am the same strength as the given Strength."	^ arithmeticValue = aStrength arithmeticValue! !!DBStrength methodsFor: 'comparing' stamp: 'ClementBera 9/23/2013 10:49'!stronger: aStrength	"Answer true if I am stronger than the given Strength."	^ arithmeticValue < aStrength arithmeticValue! !!DBStrength methodsFor: 'max / min' stamp: 'ClementBera 9/23/2013 10:50'!strongest: aStrength	"Answer the stronger of myself and aStrength."	^ (aStrength stronger: self)		ifTrue: [aStrength]		ifFalse: [self]! !!DBStrength methodsFor: 'comparing' stamp: 'ClementBera 9/23/2013 10:49'!weaker: aStrength	"Answer true if I am weaker than the given Strength."	^ arithmeticValue > aStrength arithmeticValue! !!DBStrength methodsFor: 'max / min' stamp: 'ClementBera 9/23/2013 10:50'!weakest: aStrength	"Answer the weaker of myself and aStrength."	^ (aStrength weaker: self)		ifTrue: [aStrength]		ifFalse: [self].! !!DBVariable commentStamp: '<historical>' prior: 34329098!I represent a constrained variable. In addition to my value, I maintain the structure of the constraint graph, the current dataflow graph, and various parameters of interest to the DeltaBlue incremental constraint solver.Instance variables:	value			my value; changed by constraints, read by client <Object>	constraints		normal constraints that reference me <Array of Constraint>	determinedBy	the constraint that currently determines					my value (or nil if there isn''t one) <Constraint>	walkStrength		my walkabout strength <Strength>	stay			true if I am a planning-time constant <Boolean>	mark			used by the planner to mark constraints <Number>!!DBVariable class methodsFor: 'instance creation' stamp: 'ClementBera 9/23/2013 11:01'!value: aValue	^self new value: aValue! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!addConstraint: aConstraint	"Add the given constraint to the set of all constraints that refer	 to me."	constraints add: aConstraint.! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!constraints	^ constraints! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!determinedBy	^ determinedBy! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!determinedBy: anObject	determinedBy := anObject! !!DBVariable methodsFor: 'initialize' stamp: 'ClementBera 9/23/2013 10:58'!initialize	super initialize.	value := 0.	constraints := OrderedCollection new: 2.	determinedBy := nil.	walkStrength := DBStrength absoluteWeakest.	stay := true.	mark := 0.! !!DBVariable methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 11:00'!longPrintOn: aStream	self shortPrintOn: aStream.	aStream nextPutAll: '   Constraints: '.	(constraints isEmpty)		ifTrue: [aStream cr; tab; nextPutAll: 'none']		ifFalse:			[constraints do:				[: c | aStream cr; tab. c shortPrintOn: aStream]].	(determinedBy isNil) ifFalse:		[aStream cr; nextPutAll: '   Determined by: '.		 aStream cr; tab. determinedBy shortPrintOn: aStream].	aStream cr.! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!mark	^ mark! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:58'!mark: anObject	mark := anObject! !!DBVariable methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 11:00'!printOn: aStream	self shortPrintOn: aStream! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!removeConstraint: c	"Remove all traces of c from this variable."	constraints remove: c ifAbsent: [].	determinedBy == c ifTrue: [determinedBy := nil].! !!DBVariable methodsFor: 'update' stamp: 'ClementBera 9/23/2013 10:59'!setValue: aValue	"Attempt to assign the given value to me using a strength of	 #preferred."	self setValue: aValue strength: #preferred.! !!DBVariable methodsFor: 'update' stamp: 'ClementBera 9/23/2013 11:00'!setValue: aValue strength: strengthSymbol	"Attempt to assign the given value to me using the given strength."	| editConstraint |	editConstraint := DBEditConstraint var: self strength: strengthSymbol.	(editConstraint isSatisfied) ifTrue:		[self value: aValue.		 DBPlanner propagateFrom: self].	editConstraint destroyConstraint.! !!DBVariable methodsFor: 'printing' stamp: 'ClementBera 9/23/2013 11:02'!shortPrintOn: aStream	aStream nextPutAll: 'V(', self printString, ', '.	aStream nextPutAll: walkStrength printString, ', '.	(stay isNil) ifFalse:		[aStream nextPutAll: (stay ifTrue: ['stay, '] ifFalse: ['changing, '])].	aStream nextPutAll: value printString.	aStream nextPutAll: ')'.	aStream cr.! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!stay	^ stay! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!stay: anObject	stay := anObject! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!value	^ value! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!value: anObject	value := anObject! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!walkStrength	^ walkStrength! !!DBVariable methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 10:59'!walkStrength: anObject	walkStrength := anObject! !"SMark-DeltaBlue"!!SMarkRichards commentStamp: '<historical>' prior: 0!Richards is an OS kernel simulation benchmark, originally written in BCPL by Martin Richards. The main focus in Richards is on property access and calling functions and methods.!!RichObject commentStamp: '<historical>' prior: 0!This class mostly adds some constants that are used in the Richards benchmarks.!!RichDeviceTaskDataRecord commentStamp: '<historical>' prior: 0!A task that suspends itself after each time it has been run to simulate waiting for data from an external device.!!RichHandlerTaskDataRecord commentStamp: '<historical>' prior: 0!A task that manipulates work packets and then suspends itself.!!RichIdleTaskDataRecord commentStamp: '<historical>' prior: 0!An idle task doesn't do any work itself but cycles control between the two device tasks.!!RichPacket commentStamp: '<historical>' prior: 0!A simple package of data that is manipulated by the tasks.  The exact layout of the payload data carried by a packet is not importaint, and neither is the nature of the work performed on packets by the tasks. Besides carrying data, packets form linked lists and are hence used both as data and worklists.!!RichRunner commentStamp: '<historical>' prior: 0!Richards simulates the task dispatcher of an operating system.!!RichTaskState commentStamp: '<historical>' prior: 0!Abstract task that manipulates work packets.!!RichTaskControlBlock commentStamp: '<historical>' prior: 0!A task control block manages a task and the queue of work packages associated with it.!!RichWorkerTaskDataRecord commentStamp: '<historical>' prior: 0!A task that manipulates work packets.!!SMarkRichards commentStamp: '<historical>' prior: 34366294!Richards is an OS kernel simulation benchmark, originally written in BCPL by Martin Richards. The main focus in Richards is on property access and calling functions and methods.!!SMarkRichards methodsFor: 'benchs' stamp: 'ClementBera 9/27/2013 16:27'!benchRichards	RichObject initialize.	self problemSize timesRepeat: [ RichRunner start ]! !!SMarkRichards methodsFor: 'benchs' stamp: 'ClementBera 9/27/2013 15:56'!defaultProblemSize	^ 50! !!SMarkRichards methodsFor: 'benchs' stamp: 'ClementBera 9/27/2013 15:56'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"	| ps |	ps := super problemSize.		ps isInteger ifFalse: [	^ self defaultProblemSize].			^ ps! !!RichObject commentStamp: '<historical>' prior: 34366524!This class mostly adds some constants that are used in the Richards benchmarks.!!RichDeviceTaskDataRecord commentStamp: '<historical>' prior: 34366670!A task that suspends itself after each time it has been run to simulate waiting for data from an external device.!!RichDeviceTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!pending	^ pending! !!RichDeviceTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!pending: anObject	pending := anObject! !!RichHandlerTaskDataRecord commentStamp: '<historical>' prior: 34366852!A task that manipulates work packets and then suspends itself.!!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!deviceIn	^ deviceIn! !!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!deviceIn: anObject	deviceIn := anObject! !!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!deviceInAdd: packet    deviceIn := self append: packet head: deviceIn! !!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!workIn	^ workIn! !!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:10'!workIn: anObject	workIn := anObject! !!RichHandlerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:11'!workInAdd: packet    workIn := self append: packet head: workIn! !!RichIdleTaskDataRecord commentStamp: '<historical>' prior: 34366979!An idle task doesn't do any work itself but cycles control between the two device tasks.!!RichIdleTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:18'!control	^ control! !!RichIdleTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:18'!control: anObject	control := anObject! !!RichIdleTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:18'!count	^ count! !!RichIdleTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:18'!count: anObject	count := anObject! !!RichIdleTaskDataRecord methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:17'!initialize	control := 1.    	count := 10000! !!RichObject class methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 15:20'!initialize	super initialize.    	DeviceA := 5.    	DeviceB := 6.    	DevicePacketKind := 1.    	HandlerA := 3.    	HandlerB := 4.    	Idler := 1.    	Worker := 2.    	WorkPacketKind := 2! !!RichObject methodsFor: 'utilities' stamp: 'ClementBera 9/27/2013 15:19'!append: packet head: queueHead    | mouse link |    packet link: nil.    queueHead ifNil: [ ^ packet ].    mouse := queueHead.    [ (link := mouse link) isNil]	whileFalse: [ mouse := link ].    mouse link: packet.    ^ queueHead! !!RichPacket commentStamp: '<historical>' prior: 34367120!A simple package of data that is manipulated by the tasks.  The exact layout of the payload data carried by a packet is not importaint, and neither is the nature of the work performed on packets by the tasks. Besides carrying data, packets form linked lists and are hence used both as data and worklists.!!RichPacket class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 15:21'!create: link identity: identity kind: kind     ^ self new		link: link		identity: identity		kind: kind! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!data	^ data! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!datum	^ datum! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!datum: anObject	datum := anObject! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!identity	^ identity! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!identity: anObject	identity := anObject! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!kind	^ kind! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!link	^ link! !!RichPacket methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 15:21'!link: anObject	link := anObject! !!RichPacket methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 15:20'!link: aLink identity: anIdentity kind: aKind     link := aLink.    identity := anIdentity.     kind := aKind.    datum := 1.    data := ByteArray new: 4! !!RichRunner commentStamp: '<historical>' prior: 34367477!Richards simulates the task dispatcher of an operating system.!!RichRunner class methodsFor: 'starting' stamp: 'ClementBera 9/27/2013 15:58'!start    "RichardsBenchmark start"    ^self new start! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 16:18'!createDevice: identity priority: priority work: work state: state     | data |    data := RichDeviceTaskDataRecord new.    self	createTask: identity	priority: priority	work: work	state: state	function: 	    [:work1 :word | | data1 functionWork |	    data1 := word.	    functionWork := work1.	    functionWork 		ifNil:		    [(functionWork := data1 pending) isNil			ifTrue: [self wait]			ifFalse: 			    [data1 pending: nil.			    self queuePacket: functionWork]]		ifNotNil: 		    [data1 pending: functionWork.		    self holdSelf]]	data: data! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 16:18'!createHandler: identity priority: priority work: work state: state     | data |    data := RichHandlerTaskDataRecord new.    self	createTask: identity	priority: priority	work: work	state: state	function: 	    [:work1 :word | | data1 workPacket count devicePacket |	    data1 := word.	    work1 		ifNotNil: [WorkPacketKind == work1 kind 		    ifTrue: [data1 workInAdd: work1]		    ifFalse: [data1 deviceInAdd: work1]].	    (workPacket := data1 workIn) 		ifNil: [self wait]		ifNotNil: 		    [count := workPacket datum.		    count > 4			ifTrue: 			    [data1 workIn: workPacket link.			    self queuePacket: workPacket]			ifFalse:			    [(devicePacket := data1 deviceIn) 				ifNil: [self wait]				ifNotNil: 				    [data1 deviceIn: devicePacket link.				    devicePacket datum: (workPacket data at: count).				    workPacket datum: count + 1.				    self queuePacket: devicePacket]]]]	data: data! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 16:18'!createIdler: identity priority: priority work: work state: state     | data |    data := RichIdleTaskDataRecord new.    self	createTask: identity	priority: priority	work: work	state: state	function: 	    [:work1 :word | | data1 |	    data1 := word.	    data1 count: data1 count - 1.	    0 = data1 count		ifTrue: [self holdSelf]		ifFalse:		    [0 = (data1 control bitAnd: 1)			ifTrue: 			    [data1 control: data1 control // 2.			    self release: DeviceA]			ifFalse: 			    [data1 control: (data1 control // 2 bitXor: 53256).			    self release: DeviceB]]]	data: data! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 15:27'!createPacket: link identity: identity kind: kind     ^ RichPacket		create: link		identity: identity		kind: kind! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 15:28'!createTask: identity priority: priority work: work state: state function: aBlock data: data     | t |    t := RichTaskControlBlock		link: taskList		create: identity		priority: priority		initialWorkQueue: work		initialState: state		function: aBlock		privateData: data.    taskList := t.    taskTable at: identity put: t! !!RichRunner methodsFor: 'creation' stamp: 'ClementBera 9/27/2013 16:18'!createWorker: identity priority: priority work: work state: state     | data |    data := RichWorkerTaskDataRecord new.    self	createTask: identity	priority: priority	work: work	state: state	function: 	    [:work1 :word | | data1 |	    data1 := word.	    work1		ifNil: [self wait]		ifNotNil: 		    [data1 destination: (HandlerA = data1 destination			    ifTrue: [HandlerB]			    ifFalse: [HandlerA]).		    work1 identity: data1 destination.		    work1 datum: 1.		    1 to: 4 do: [ :i | 			data1 count: data1 count + 1.			data1 count > 26 ifTrue: [data1 count: 1].			work1 data at: i put: $A asInteger + data1 count - 1].		    self queuePacket: work1]]	data: data! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:30'!findTask: identity     | t |    t := taskTable at: identity.    t ifNil: [self error: 'findTask failed'].    ^ t! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:35'!holdSelf    holdCount := holdCount + 1.    currentTask taskHolding: true.    ^ currentTask link! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:35'!initScheduler    queuePacketCount := holdCount := 0.    taskTable := Array new: 6.    taskList := nil! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:37'!queuePacket: packet     | t |    t := self findTask: packet identity.    t ifNil: [ ^ nil ].    queuePacketCount := queuePacketCount + 1.    packet link: nil.    packet identity: currentTaskIdentity.    ^ t addInput: packet checkPriority: currentTask! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:38'!release: identity     | t |    t := self findTask: identity.    t ifNil: [ ^ nil ].    t taskHolding: false.    ^ t priority > currentTask priority	ifTrue: [ t ]	ifFalse: [ currentTask ]! !!RichRunner methodsFor: 'scheduling' stamp: 'ClementBera 9/27/2013 16:00'!schedule    currentTask := taskList.     [currentTask isNil]	whileFalse: 	    [currentTask isTaskHoldingOrWaiting		ifTrue: [currentTask := currentTask link]		ifFalse: 		    [currentTaskIdentity := currentTask identity.		    currentTask := currentTask runTask]]! !!RichRunner methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:01'!start    | workQ |    self initScheduler.    self	createIdler: Idler	priority: 0	work: nil	state: RichTaskState running.    workQ := self		createPacket: nil		identity: Worker		kind: WorkPacketKind.    workQ := self		createPacket: workQ		identity: Worker		kind: WorkPacketKind.    self	createWorker: Worker	priority: 1000	work: workQ	state: RichTaskState waitingWithPacket.    workQ := self		createPacket: nil		identity: DeviceA		kind: DevicePacketKind.    workQ := self		createPacket: workQ		identity: DeviceA		kind: DevicePacketKind.    workQ := self		createPacket: workQ		identity: DeviceA		kind: DevicePacketKind.    self	createHandler: HandlerA	priority: 2000	work: workQ	state: RichTaskState waitingWithPacket.    workQ := self		createPacket: nil		identity: DeviceB		kind: DevicePacketKind.    workQ := self		createPacket: workQ		identity: DeviceB		kind: DevicePacketKind.    workQ := self		createPacket: workQ		identity: DeviceB		kind: DevicePacketKind.    self	createHandler: HandlerB	priority: 3000	work: workQ	state: RichTaskState waitingWithPacket.    self	createDevice: DeviceA	priority: 4000	work: nil	state: RichTaskState waiting.    self	createDevice: DeviceB	priority: 5000	work: nil	state: RichTaskState waiting.    self schedule.    queuePacketCount = 23246 & (holdCount = 9297) ifFalse: [self error: 'wrong result'].! !!RichRunner methodsFor: 'private' stamp: 'ClementBera 9/27/2013 15:40'!wait     currentTask taskWaiting: true.    ^ currentTask! !!RichTaskState commentStamp: '<historical>' prior: 34367595!Abstract task that manipulates work packets.!!RichTaskControlBlock commentStamp: '<historical>' prior: 34367702!A task control block manages a task and the queue of work packages associated with it.!!RichTaskControlBlock class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 16:17'!link: link create: identity priority: priority initialWorkQueue: initialWorkQueue initialState: initialState function: aBlock privateData: privateData     ^ self new		link: link		identity: identity		priority: priority		initialWorkQueue: initialWorkQueue		initialState: initialState		function: aBlock		privateData: privateData! !!RichTaskControlBlock methodsFor: 'scheduling' stamp: 'ClementBera 9/27/2013 16:15'!addInput: packet checkPriority: oldTask    input 	ifNil: 	    [input := packet.	    packetPendingIV := true.	    priority > oldTask priority ifTrue: [ ^ self ]]	ifNotNil: 	    [ input := self append: packet head: input ].    ^ oldTask! !!RichTaskControlBlock methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:13'!identity	^ identity! !!RichTaskControlBlock methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:13'!link	^ link! !!RichTaskControlBlock methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:12'!link: aLink identity: anIdentity priority: aPriority initialWorkQueue: anInitialWorkQueue initialState: anInitialState function: aBlock privateData: aPrivateData     link := aLink.    identity := anIdentity.    priority := aPriority.    input := anInitialWorkQueue.    packetPendingIV := anInitialState isPacketPending.    taskWaiting := anInitialState isTaskWaiting.    taskHolding := anInitialState isTaskHolding.    function := aBlock.    handle := aPrivateData! !!RichTaskControlBlock methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:13'!priority	^ priority! !!RichTaskControlBlock methodsFor: 'scheduling' stamp: 'ClementBera 9/27/2013 16:16'!runTask    | message |    self isWaitingWithPacket	ifTrue: 	    [message := input.	    input := message link.	    input 		ifNil: [self running]		ifNotNil: [self packetPending]]	ifFalse: [message := nil].    ^ function value: message value: handle! !!RichTaskState class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 16:09'!packetPending    ^super new packetPending! !!RichTaskState class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 16:09'!running    ^super new running! !!RichTaskState class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 16:09'!waiting    ^super new waiting! !!RichTaskState class methodsFor: 'instance creation' stamp: 'ClementBera 9/27/2013 16:09'!waitingWithPacket    ^super new waitingWithPacket! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:06'!isPacketPending    ^packetPendingIV! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:07'!isRunning    ^packetPendingIV not and: [taskWaiting not and: [taskHolding not]]! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:06'!isTaskHolding    ^taskHolding! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:07'!isTaskHoldingOrWaiting    ^taskHolding or: [packetPendingIV not and: [taskWaiting]]! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:06'!isTaskWaiting    ^taskWaiting! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:07'!isWaiting    ^packetPendingIV not and: [taskWaiting and: [taskHolding not]]! !!RichTaskState methodsFor: 'testing' stamp: 'ClementBera 9/27/2013 16:07'!isWaitingWithPacket    ^packetPendingIV and: [taskWaiting and: [taskHolding not]]! !!RichTaskState methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:06'!packetPending    packetPendingIV := true.    taskWaiting := false.    taskHolding := false! !!RichTaskState methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:06'!running    packetPendingIV := taskWaiting := taskHolding := false! !!RichTaskState methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:07'!taskHolding: anObject	^ taskHolding := anObject! !!RichTaskState methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:07'!taskWaiting: anObject	^ taskWaiting := anObject! !!RichTaskState methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:06'!waiting    packetPendingIV := taskHolding := false.    taskWaiting := true! !!RichTaskState methodsFor: 'initialize' stamp: 'ClementBera 9/27/2013 16:06'!waitingWithPacket    taskHolding := false.    taskWaiting := packetPendingIV := true! !!RichWorkerTaskDataRecord commentStamp: '<historical>' prior: 34367855!A task that manipulates work packets.!!RichWorkerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:11'!count	^ count! !!RichWorkerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:11'!count: anObject	count := anObject! !!RichWorkerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:11'!destination	^ destination! !!RichWorkerTaskDataRecord methodsFor: 'accessing' stamp: 'ClementBera 9/27/2013 16:11'!destination: anObject	destination := anObject! !!RichWorkerTaskDataRecord methodsFor: 'as yet unclassified' stamp: 'ClementBera 9/27/2013 16:18'!initialize    destination := HandlerA.    count := 0! !"SMark-Richards"!!SMarkJenkinsReporter commentStamp: '<historical>' prior: 0!report as xml for the jenkins plot plugin display.!!SMarkVMBench commentStamp: '<historical>' prior: 0!runs all the VMbenchs.Ex: SMarkVMBench run jenkinsReport (output in command line)!!SMarkJenkinsReporter commentStamp: '<historical>' prior: 34385665!report as xml for the jenkins plot plugin display.!!SMarkJenkinsReporter methodsFor: 'reporting' stamp: 'ClemenTBera 9/23/2013 13:03'!benchmarkFooter: aName	stream 		nextPut: $<;		nextPut: $/;		nextPutAll: aName asString;		nextPut: $>;		cr.! !!SMarkJenkinsReporter methodsFor: 'reporting' stamp: 'ClemenTBera 9/23/2013 13:18'!benchmarkHeader: aName	stream 		tab;		nextPut: $<;		nextPutAll: aName asString;		nextPut: $>.! !!SMarkJenkinsReporter methodsFor: 'reporting' stamp: 'ClemenTBera 9/23/2013 13:01'!footer	| suiteName |	suiteName := runner suite class name asString.	stream 		nextPut: $<;		nextPut: $/;		nextPutAll: suiteName;		nextPut: $>;		cr.! !!SMarkJenkinsReporter methodsFor: 'reporting' stamp: 'ClemenTBera 9/23/2013 13:01'!header	| suiteName |	suiteName := runner suite class name asString.	stream 		nextPut: $<;		nextPutAll: suiteName;		nextPut: $>;		cr.! !!SMarkJenkinsReporter methodsFor: 'reporting' stamp: 'ClemenTBera 9/23/2013 13:11'!reportAllRuns: aListOfResults of: benchmark	| sumOfBenchs |	sumOfBenchs := 0.	aListOfResults do: [:result |		result criteria keysAndValuesDo: [ :benchName :timer |			sumOfBenchs := sumOfBenchs + timer totalTime ] ].	stream << sumOfBenchs.! !!SMarkRunner methodsFor: '*SMark-Jenkins' stamp: 'ClemenTBera 9/23/2013 13:40'!jenkinsReport	| report |	report := '' writeStream.	SMarkJenkinsReporter reportFor: self on: report.	^ report contents	! !!EvaluateCommandLineHandler methodsFor: '*SMark-Jenkins' stamp: 'ClementBera 9/23/2013 13:54' prior: 22676679!evaluate: aStream	"remove the quotes around strings that drove me nuts."	| result exceptionClassToUse |		"workaround to make old Compiler unloadable"	exceptionClassToUse := (Smalltalk compilerClass == OpalCompiler) 		ifTrue: [OCSemanticWarning]		ifFalse: [Smalltalk globals at: #ParserNotification].		[ 		result := Smalltalk evaluate: aStream.		self hasSessionChanged			ifFalse: [ self stdout << result asString; lf ]	] on: Error, ParserNotification do: [ :error |		self handleError: error ].! !!SMarkVMBench commentStamp: '<historical>' prior: 34385770!runs all the VMbenchs.Ex: SMarkVMBench run jenkinsReport (output in command line)!!SMarkVMBench methodsFor: 'bench' stamp: 'ClementBera 9/27/2013 16:29'!benchCompiler	SMarkCompiler run: self problemSize * 3! !!SMarkVMBench methodsFor: 'bench' stamp: 'ClemenTBera 9/23/2013 13:15'!benchDeltaBlue	SMarkDeltaBlue run: self problemSize! !!SMarkVMBench methodsFor: 'bench' stamp: 'ClemenTBera 9/23/2013 13:16'!benchLoops	SMarkLoops run: self problemSize! !!SMarkVMBench methodsFor: 'bench' stamp: 'ClementBera 9/27/2013 16:42'!benchRichards	SMarkRichards run: (self problemSize // 4)! !!SMarkVMBench methodsFor: 'bench' stamp: 'ClemenTBera 9/23/2013 13:16'!benchStone	SMarkSlopstone run: self problemSize.	SMarkSmopstone run: self problemSize! !!SMarkVMBench methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 14:02'!defaultProblemSize	^ 10! !!SMarkVMBench methodsFor: 'accessing' stamp: 'ClementBera 9/23/2013 14:08'!problemSize	<omniUnenforced> "Hint for the OMOP that it is part of the meta infrastructure"		^ self defaultProblemSize! !"SMark-Jenkins"!!AttachableFileStream commentStamp: '<historical>' prior: 0!I am a stream on an input or output channel provided by the underlying operating system. I behave like an ordinary file stream, except that I can attach myself to an input or output stream which has already been opened by the underlying operating system.!!AsyncFileReadStream commentStamp: 'dtl 7/9/2003 21:04' prior: 0!AsyncFileReadStream implements event-driven read behavior on a file stream. Whenever data is available, a #changed event is generated. An AsyncFileReadStream expects to have a client object respond immediately to the change notification by reading the available data, otherwise a possibly endless stream of change notifications will be generated.AsyncFileReadStream requires aio support in the AioPlugin module.!!BufferedAsyncFileReadStream commentStamp: 'dtl 3/7/2006 06:55' prior: 0!BufferedAsyncFileReadStream adds output buffering behavior to an event driven file stream, permitting blocking reads without risk of blocking the Squeak VM. This is useful for OS pipes, for which Squeak may wish to read and write the pipe without concern for VM deadlocks.A BufferedAsyncFileReadStream may be set for either blocking or nonblocking reads. When in blocking mode, a Smalltalk Process that requests a read will be blocked until data is available, but the VM will not be blocked and other Smalltalk Processes can proceed normally.Whenever data becomes available, a dataAvailableSemaphore is signalled and a #changed event is generated.!!AioEventHandler commentStamp: 'dtl 11/25/2006 15:55' prior: 0!AioEventHandler responds to external IO events, such as data available on a file descriptor. When an external IO event is received, an instance of AioEventHandler sends #changed to itself to notify its dependents that the event has occurred.!!OSProcessAccessor commentStamp: 'dtl 7/7/2010 07:58' prior: 0!I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.The single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.When an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.!!MacOSProcessAccessor commentStamp: '<historical>' prior: 0!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Macintosh process model.!!OS2OSProcessAccessor commentStamp: '<historical>' prior: 0!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the OS2 process model.!!RiscOSProcessAccessor commentStamp: '<historical>' prior: 0!I provide access to the operating system process in which the Squeak VM is currently running. I am based on the RiscOS task model. There is only one instance of me, and instances of RiscOSProcess depend on me to provide access to the operating system process which they represent. I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances ofRiscOSProcess) when these events occur.!!UnixOSProcessAccessor commentStamp: '<historical>' prior: 0!I provide access to the operating system process in which the Squeak VM is currently running. I am based on the Unix process model. There is only one instance of me, and instances of UnixOSProcess depend on me to provide access to the operating system process which they represent.I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances of UnixOSProcess) when these events occur.!!WindowsOSProcessAccessor commentStamp: '<historical>' prior: 0!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Win32 process model for Windows and Windows NT.!!PseudoAioEventHandler commentStamp: 'dtl 11/25/2006 10:42' prior: 0!PseudoAioEventHandler is a replacement for AioEventHandler for use when an AioPlugin is not present. It creates a polling loop by generating #changed: events periodically. With a real AioEventHandler, events are generated only when actual IO activity occurs, while the PseudoAioEventHandler produces regularly timed events regardless of whether any actual IO changes have happened.!!ExternalPipe commentStamp: 'dtl 3/10/2006 11:06' prior: 0!I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.Subclasses implement buffering behavior for the reader end of a pipe.!!OSPipe commentStamp: 'dtl 3/8/2006 07:27' prior: 0!I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.I use a single-character buffer to implement #peek without losing data from the external OS pipe.!!AioEventHandlerExample commentStamp: 'dtl 7/5/2003 18:38' prior: 0!Demonstrate asynchronous read handers for file streams, OS pipes, standard input, and sockets. See class category "examples". Some examples require OSProcess.!!OSFileLock commentStamp: 'dtl 2/23/2004 19:36' prior: 0!I describe the region representing the entire addressable space of an external file, including regions that have not yet been allocated for use by the file. On platforms that support file locking, an OSFileLock is used to describe a lock on the entire file.!!OSFileRegionLock commentStamp: 'jf 2/22/2004 19:50' prior: 0!I describe an addressable region of contiguous bytes in an external file. On platforms that support file locking, an OSFileRegionLock is used to specify a portion of the file to be locked.!!OSProcess commentStamp: '<historical>' prior: 0!I represent an operating system process, such as the process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems.!!ExternalOSProcess commentStamp: '<historical>' prior: 0!I represent an OSProcess other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process.!!ExternalMacOSProcess commentStamp: '<historical>' prior: 0!I represent an external MacOS process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton MacOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent MacOSProcess (a singleton) to check the status of all its ExternalMacOSProcess children, and #update: them accordingly.!!ExternalOS2Process commentStamp: '<historical>' prior: 0!I represent an external OS2 process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton OS2ProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent OS2Process (a singleton) to check the status of all its ExternalOS2Process children, and #update: them accordingly.!!ExternalRiscOSProcess commentStamp: '<historical>' prior: 0!I represent an external RiscOS task other than the process in which this Squeak is executing. I maintain information about the state of the external task during and after the lifetime of the task. In particular, I hold the exit status of the task after it completes execution. When the external task changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton RiscOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent RiscOSProcess (a singleton) to check the status of all its ExternalRiscOSProcess children, and #update: them accordingly.!!ExternalUnixOSProcess commentStamp: '<historical>' prior: 0!I represent an external Unix process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton UnixProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent UnixProcess (a singleton) to check the status of all its ExternalUnixProcess children, and #update: them accordingly.!!ExternalWindowsOSProcess commentStamp: '<historical>' prior: 0!I represent an external Windows process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton WindowsOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent WindowsOSProcess (a singleton) to check the status of all its ExternalWindowsOSProcess children, and #update: them accordingly.!!ThisOSProcess commentStamp: '<historical>' prior: 0!I represent the operating system process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems by collaborating with corresponding subclasses of OSProcessAccessor to provide primitive access to the external operating system.!!MacProcess commentStamp: '<historical>' prior: 0!I represent a Macintosh operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of MacOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my MacOSProcessAccessor.!!OS2Process commentStamp: '<historical>' prior: 0!I represent an OS2 operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of OS2OSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my OS2OSProcessAccessor.!!RiscOSProcess commentStamp: '<historical>' prior: 0!I represent an Acorn RiscOS operating system task, such as the task in which the Squeak VM is currently running. I collaborate with a singleton instance of RiscOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of a RiscOSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my RiscOSProcessAccessor.!!UnixProcess commentStamp: '<historical>' prior: 0!I represent the Unix operating system process in which this Squeak session is running. I collaborate with an instance of UnixOSProcessAccessor to provide access to the external operating system. My instance variables are updated when my process accessor changes, allowing them to be monitored with a Smalltalk inspector.!!WindowsProcess commentStamp: 'dtl 9/25/2005 16:31' prior: 0!I represent a Windows operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of WindowsOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my WindowsOSProcessAccessor.My process ID and process handle (a Win32 HANDLE) are held by my pid and processHandle variables. The main thread for this process is held by my mainThread variable.Standard input, output, and error streams are available, and my be used when the console is open (WindowsProcess>>openConsole). They can also be reassigned to file streams (WindowsOSProcessAccessor>>setStdOut:).When external processes are created, they are added to my allMyChildren collection, and a thread is created to wait for any of them to exit. This thread is held by my childWatcherThread instance variable while the thread is active, and is also added to my threads collection.Whenever a child process exits, the childWatcherThread will signal a Semaphore (a Smalltalk Semaphore, not a Windows semaphore), then exit. A Squeak process in my processAccessor waits on this Semaphore, and sends an 'update: #childProcessStatus' message to me. In response to this, I update the status of my active child processes, one or more of which will have exited. If any of my child processes are still active, I set a new childWatcherThread to wait for them to exit.Note that some Windows applications will exit their main process after creating another application process. These applications will appear to Squeak as if they have exited immediately, even though the application is running.!!UnixProcessExitStatus commentStamp: 'dtl 8/23/2012 22:48' prior: 0!A UnixProcessExitStatus represents the exit status of a unix process. This is an integer bit field answered by the wait() system call that contains information about exit status of the process. The meaning of the bit field varies according to the cause of process exit. Following a normal process exit, the status may be decoded to provide a small positive integer value in the range 0 - 255, which is the value that is presented by a unix shell as the exit status of a program. If terminated by a signal, the corresponding value is the signal number of the signal that caused process exit.UnixExitStatus decodes the process exit status in a manner compatible with a typical GNU unix implementation. It is not guaranteed to be portable and may produce misleading results on other unix systems.!!WindowsThread commentStamp: '<historical>' prior: 0!I represent a thread of execution within a Windows process. May threadID is a uniqueidentifier for the thread, and my handle is a Windows HANDLE to the thread. My handleshould be closed when the thread exits.!!AttachableFileStream commentStamp: '<historical>' prior: 34389194!I am a stream on an input or output channel provided by the underlying operating system. I behave like an ordinary file stream, except that I can attach myself to an input or output stream which has already been opened by the underlying operating system.!!AsyncFileReadStream commentStamp: 'dtl 7/9/2003 21:04' prior: 34389516!AsyncFileReadStream implements event-driven read behavior on a file stream. Whenever data is available, a #changed event is generated. An AsyncFileReadStream expects to have a client object respond immediately to the change notification by reading the available data, otherwise a possibly endless stream of change notifications will be generated.AsyncFileReadStream requires aio support in the AioPlugin module.!!AsyncFileReadStream class methodsFor: 'examples' stamp: 'dtl 7/9/2003 20:16'!stdIn	"self stdIn"	^ super stdIn initialize! !!AsyncFileReadStream methodsFor: 'finalization' stamp: 'dtl 6/17/2006 08:08'!actAsExecutor	super actAsExecutor.	eventHandler := nil! !!AsyncFileReadStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 20:53'!asAsyncFileReadStream	^ self! !!AsyncFileReadStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 19:40'!asAttachableFileStream	"Answer a replacement for this object, with no asynchronous event handling.	Do not close the ioHandle when this object is finalized."	self keepOpen.	^ AttachableFileStream		name: self name		attachTo: self ioHandle		writable: self isReadOnly not! !!AsyncFileReadStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 21:01'!asBufferedAsyncFileReadStream	"Answer a replacement for this object, with buffered output."	^ BufferedAsyncFileReadStream		name: self name		attachTo: self ioHandle		writable: self isReadOnly not! !!AsyncFileReadStream methodsFor: 'initialize-release' stamp: 'dtl 7/8/2003 21:48'!close	self disableEventHandling.	^ super close! !!AsyncFileReadStream methodsFor: 'read event handling' stamp: 'dtl 9/3/2010 16:50'!disableEventHandling	eventHandler		ifNotNil: [eventHandler removeDependent: self; close].	self eventHandler: nil! !!AsyncFileReadStream methodsFor: 'read event handling' stamp: 'dtl 11/25/2006 10:56'!enableEventHandling	self eventHandler: (AioEventHandler aioPluginPresent		ifTrue: [AioEventHandler				forFileStream: self				exceptions: true				readEvents: true				writeEvents: false]		ifFalse: [PseudoAioEventHandler new]).	self eventHandler addDependent: self! !!AsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/8/2003 19:26'!eventHandler	"The aio event handler. Provides notification whenever external data is available."	^ eventHandler! !!AsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/8/2003 19:26'!eventHandler: anAioEventHandler	"The aio event handler. Provides notification whenever external data is available."	eventHandler := anAioEventHandler! !!AsyncFileReadStream methodsFor: 'finalization' stamp: 'dtl 9/3/2010 16:57'!finalize	"Shut the the event handler before closing the file, otherwise aio	functions may reference a closed file handle."	eventHandler ifNotNil: [eventHandler finalize].	super finalize! !!AsyncFileReadStream methodsFor: 'read event handling' stamp: 'dtl 7/8/2003 19:29'!hasValidHandler	^ self eventHandler notNil and: [eventHandler hasValidHandler]! !!AsyncFileReadStream methodsFor: 'initialize-release' stamp: 'dtl 3/15/2006 07:45'!initialize	super initialize.	self readOnly.	OSProcess accessor setNonBlocking: self ioHandle.	self enableEventHandling! !!AsyncFileReadStream methodsFor: 'initialize-release' stamp: 'dtl 7/8/2003 21:48'!open	^ super open initialize! !!AsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 9/2/2006 09:58'!upToEndOfFile	"Answer a subcollection from the current access position through	the last element of the receiver.  Use #atEndOfFile to determine end	of file status with feof(), required for reliable end of file test on	OS pipes. Close the file when end of file is detected."	| b |	b := super upToEndOfFile.	self isReadOnly		ifTrue: [self close].	^ b! !!AsyncFileReadStream methodsFor: 'updating' stamp: 'dtl 7/8/2003 21:22'!update: aParameter	(aParameter == self eventHandler)		ifTrue: [self changed]! !!BufferedAsyncFileReadStream commentStamp: 'dtl 3/7/2006 06:55' prior: 34390005!BufferedAsyncFileReadStream adds output buffering behavior to an event driven file stream, permitting blocking reads without risk of blocking the Squeak VM. This is useful for OS pipes, for which Squeak may wish to read and write the pipe without concern for VM deadlocks.A BufferedAsyncFileReadStream may be set for either blocking or nonblocking reads. When in blocking mode, a Smalltalk Process that requests a read will be blocked until data is available, but the VM will not be blocked and other Smalltalk Processes can proceed normally.Whenever data becomes available, a dataAvailableSemaphore is signalled and a #changed event is generated.!!BufferedAsyncFileReadStream class methodsFor: 'examples' stamp: 'dtl 7/9/2003 20:24'!stdIn	"self stdIn"	^ super stdIn! !!BufferedAsyncFileReadStream methodsFor: 'finalization' stamp: 'dtl 6/17/2006 08:10'!actAsExecutor	super actAsExecutor.	nonBlockingMode := nil.	readBuffer := nil.	readSyncSemaphore := nil.	dataAvailableSemaphore := nil! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 10/1/2006 17:12'!appendAllToBuffer: chars	"Append all chars to readBuffer, then signal dataAvailableSemaphore to inform	any blocked reader that the read can proceed. Also generate a #changed event	to inform any interested objects that new data has become available."	| pos |	self readSyncSemaphore critical:		[(self readBuffer position > self maxReadBufferSize) ifTrue:			["Read buffer is getting too large. Replace it."			self readBuffer: (ReadWriteStream on: readBuffer upToEnd)].		pos := readBuffer position.		readBuffer setToEnd.		readBuffer nextPutAll: chars.		readBuffer position: pos].	self dataAvailableSemaphore signal.	self changed! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 10/1/2006 17:12'!appendToBuffer: aCharacter	"Append aCharacter to readBuffer, then signal dataAvailableSemaphore to inform	any blocked reader that the read can proceed, and trigger a #dataReady event to	inform any interested objects that new data has become available."	| pos |	self readSyncSemaphore critical:		[pos := self readBuffer position.		readBuffer setToEnd.		readBuffer nextPut: aCharacter.		readBuffer position: pos].	self dataAvailableSemaphore signal.	self changed! !!BufferedAsyncFileReadStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 20:54'!asAsyncFileReadStream	"Answer a replacement for this object, with asynchronous event handling but	no buffering."	^ AsyncFileReadStream		name: self name		attachTo: self ioHandle		writable: self isReadOnly not! !!BufferedAsyncFileReadStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 20:55'!asBufferedAsyncFileReadStream	^ self! !!BufferedAsyncFileReadStream methodsFor: 'testing' stamp: 'dtl 2/22/2007 08:00'!atEnd	"Answer whether the receiver can access any more objects.	Warning: If this instance represents the reader end of an OS pipe, it	is possible for the #atEnd test to give a false negative. In particular, after	closing the writer end of an empty OSPipe, the reader may not appear to	be atEnd until some time has elapsed, or until an explicit read on the pipe	causes the status to be updated. To illustrate the problem:		(OSPipe new setBufferedReader; yourself) closeWriter; atEnd>>false		(OSPipe new ) closeWriter; next; yourself; atEnd>>true		(OSPipe new setBufferedReader; yourself) closeWriter; next; yourself; atEnd>>true"	^ self readSyncSemaphore		critical: [self readBuffer atEnd				and: [super atEnd]]! !!BufferedAsyncFileReadStream methodsFor: 'testing' stamp: 'dtl 2/22/2007 08:01'!atEndOfFile	"Answer whether the receiver is at its end based on the result of	the last read operation. This uses feof() to test the underlying file	stream status, and can be used as an alternative to #atEnd, which	does not properly report end of file status for an OSPipe."	^ self readSyncSemaphore		critical: [self readBuffer atEnd				and: [fileID isNil						or: [OSProcess accessor isAtEndOfFile: fileID]]]! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 2/22/2007 08:02'!basicNext	"Answer the next byte from this file, or nil if at the end of the file.	If the readBuffer is empty, force a basicNext in order to ensure that	the end of file flag is updated (in stdio stream)."	(self readSyncSemaphore			critical: [self readBuffer atEnd])		ifTrue: [^ super basicNext]		ifFalse: [[self isBlocking]				ifTrue: [self waitForDataReady].			^ self readSyncSemaphore				critical: [readBuffer next]]! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/6/2003 10:15'!dataAvailableSemaphore	"Signalled one or more times when data becomes available. Only one Process	is permitted to wait on this Semaphore."	^ dataAvailableSemaphore ifNil: [dataAvailableSemaphore := Semaphore new]! !!BufferedAsyncFileReadStream methodsFor: 'testing' stamp: 'dtl 7/9/2003 20:59'!isBlocking	"Answer true if set to blocking mode."	^ self nonBlockingMode not! !!BufferedAsyncFileReadStream methodsFor: 'defaults' stamp: 'dtl 7/6/2003 10:15'!maxReadBufferSize	"Replace readBuffer when position exceeds this."	^ 40000! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 12/7/2012 20:02'!moveAvailableDataFrom: sqFile	| count bufferSize buffer |	(readBuffer notNil and: [readBuffer size > self readBufferMemoryWarningThreshold])		ifTrue: [self notify: 'buffer size ', readBuffer size asString.			^(Delay forSeconds: 2) wait].	bufferSize := self readAheadChunkSize.	buffer := String new: bufferSize.	[count := self primRead: sqFile				into: buffer				startingAt: 1				count: bufferSize]		on: Error	"Could fail if closed"		do: [count := 0].	(count notNil and: [count > 0])		ifTrue:			[count == bufferSize				ifTrue:					[self appendAllToBuffer: buffer]				ifFalse:					[count > 0						ifTrue:							[self appendAllToBuffer: (buffer copyFrom: 1 to: count)]]]		ifFalse:			[(self closed or: [OSProcess accessor isAtEndOfFile: self ioHandle])				ifTrue:					[self disableEventHandling]]! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 7/6/2003 20:30'!moveAvailableDataToBuffer	^ self moveAvailableDataFrom: (OSProcess accessor handleFromAccessor: self ioHandle).! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 9/3/2010 17:01'!next	((self readSyncSemaphore				critical: [self readBuffer atEnd])			and: [self isBlocking])		ifTrue: [self waitForDataReady].	^ self readSyncSemaphore		critical: [readBuffer next]! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 7/6/2003 10:15'!next: n into: aString startingAt: startIndex	"Read n bytes into the given string.	Return aString or a partial copy if less than n elements have been read."	| count |	count := self readInto: aString startingAt: startIndex count: n.	count = n		ifTrue: [^ aString]		ifFalse: [^ aString copyFrom: 1 to: startIndex+count-1]! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/9/2003 20:57'!nonBlockingMode	"True if nonblocking read behavior should be implemented"	^ nonBlockingMode ifNil: [nonBlockingMode := true]! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/9/2003 20:58'!nonBlockingMode: trueOrFalse	"True if nonblocking read behavior should be implemented"	nonBlockingMode := trueOrFalse! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 9/3/2010 17:01'!peek	"Answer what would be returned if the message next were sent to the	receiver. If the receiver is at the end, answer nil. "	((self readSyncSemaphore				critical: [self readBuffer atEnd])			and: [self isBlocking])		ifTrue: [self waitForDataReady].	^ self readSyncSemaphore		critical: [readBuffer peek]! !!BufferedAsyncFileReadStream methodsFor: 'defaults' stamp: 'dtl 7/6/2003 10:15'!readAheadChunkSize	"The async read ahead process will read at most this many characters.	Notes: On my system (dtl), a chunk size of 2000 leads to ExternalCommandShell	overdriving the stdout stream when doing (for example) a long directory listing.	I have added error handling to accommodate this, but I do know know how	reliable it is, so I would prefer to avoid generating the condition. A chunk	size of 200 is small enough that performance is noticably impacted in a	CommandShell window. A chunk size of 1000 seems to produce good overall	behavior."	^ 1000! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:22'!readBuffer	"Read ahead buffer, filled asynchronously as data becomes available on the IO channel"	^ readBuffer ifNil: [readBuffer := ReadWriteStream on: String new]! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/6/2003 10:15'!readBuffer: aStream	readBuffer := aStream! !!BufferedAsyncFileReadStream methodsFor: 'defaults' stamp: 'dtl 12/7/2012 19:54'!readBufferMemoryWarningThreshold	"A read buffer larger that this may start causing problems. Issue a warning	before the object memory becomes too large." 	^self maxReadBufferSize * 1000! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 3/21/2007 21:56'!readInto: byteArray startingAt: startIndex count: count 	"Read into the given array as specified, and return the count actually	transferred. "	| s size |	self isBlocking		ifTrue: [self waitForDataReady: count.			s := self readSyncSemaphore						critical: [self readBuffer next: count].			size := count]		ifFalse: [size := self readBuffer size - readBuffer position min: count.			s := self readSyncSemaphore						critical: [self readBuffer next: size]].	byteArray		replaceFrom: startIndex		to: startIndex + size - 1		with: s.	^ size! !!BufferedAsyncFileReadStream methodsFor: 'accessing' stamp: 'dtl 7/6/2003 10:15'!readSyncSemaphore	"A semaphore for synchronizing access to readBuffer"	^ readSyncSemaphore ifNil: [readSyncSemaphore := Semaphore forMutualExclusion]! !!BufferedAsyncFileReadStream methodsFor: 'initialize-release' stamp: 'dtl 7/9/2003 20:54'!setBlocking	"Set for blocking reads. Default is nonblocking mode."	self nonBlockingMode: false! !!BufferedAsyncFileReadStream methodsFor: 'initialize-release' stamp: 'dtl 7/9/2003 20:55'!setNonBlocking	"Set for nonblocking reads. This is the default mode."	self nonBlockingMode: true! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 3/19/2007 18:28'!upTo: delim 	^ self readSyncSemaphore critical: [self readBuffer upTo: delim]! !!BufferedAsyncFileReadStream methodsFor: 'read, write, position' stamp: 'dtl 12/21/2007 13:14'!upToEndOfFile	"Answer a subcollection from the current access position through	the last element of the receiver.  Use #atEndOfFile to determine end	of file status with feof(), required for reliable end of file test on	OS pipes. Close the file when end of file is detected."	| newStream buffer |	buffer := buffer1 species new: 1000.	newStream := WriteStream on: (buffer1 species new: 100).	[self atEndOfFile] whileFalse:		[self moveAvailableDataToBuffer.		newStream nextPutAll: (self nextInto: buffer)].	self isReadOnly ifTrue: [self close].	^ newStream contents! !!BufferedAsyncFileReadStream methodsFor: 'updating' stamp: 'dtl 7/8/2003 22:06'!update: aParameter	"A #changed event is generated as a side effect of this method"	(aParameter == self eventHandler)		ifTrue: [self moveAvailableDataToBuffer]! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 7/6/2003 10:15'!waitForBufferAvailable	"Block if the readBuffer has grown too large. No-op for now, but add	this later if large pipes prove to be a problem."! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 7/6/2003 10:15'!waitForDataReady	"Block until at least one character is available in the readBuffer. This is not	thread safe, and only one Process is permitted to send this message."	self dataAvailableSemaphore wait! !!BufferedAsyncFileReadStream methodsFor: 'read ahead buffer' stamp: 'dtl 2/22/2007 08:09'!waitForDataReady: count 	"Block until at least count characters are available in the readBuffer"	[self readSyncSemaphore		critical: [self readBuffer size - readBuffer position < count]]		whileTrue: [self waitForDataReady]! !!AttachableFileStream class methodsFor: 'file creation' stamp: 'dtl 6/12/1999 15:53'!fileNamed: fileName	self shouldNotImplement! !!AttachableFileStream class methodsFor: 'initialize-release' stamp: 'dtl 10/19/2001 21:53'!initialize	"AttachableFileStream initialize"	UseIOHandle := (Smalltalk hasClassNamed: #IOHandle)! !!AttachableFileStream class methodsFor: 'file creation' stamp: 'dtl 6/12/1999 15:53'!isAFileNamed: fileName	self shouldNotImplement! !!AttachableFileStream class methodsFor: 'instance creation' stamp: 'dtl 3/15/2006 19:50'!name: aSymbolOrString attachTo: anIOHandle writable: readWriteFlag 	"Create a new instance attached to anIOHandle, where anIOHandle	represents an open IO channel. For write streams, this represents two	Smalltalk streams which write to the same OS file or output stream,	presumably with interleaved output. The purpose of this method is to	permit a FileStream to be attached to an existing IOHandle, such as	the IOHandle for standard input, standard output, and standard error."	^ (super basicNew		name: aSymbolOrString		attachTo: anIOHandle		writable: readWriteFlag) initialize! !!AttachableFileStream class methodsFor: 'file creation' stamp: 'dtl 6/12/1999 15:54'!newFileNamed: fileName	self shouldNotImplement! !!AttachableFileStream class methodsFor: 'file creation' stamp: 'dtl 6/12/1999 15:55'!oldFileNamed: fileName	self shouldNotImplement! !!AttachableFileStream class methodsFor: 'file creation' stamp: 'dtl 6/12/1999 15:56'!readOnlyFileNamed: fileName	self shouldNotImplement! !!AttachableFileStream class methodsFor: 'registry' stamp: 'dtl 8/25/2006 18:15'!register: anObject	"An attachable file stream is generally either a second reference to an	existing file stream, or a reference to a transient object such as a pipe	endpoint. There is no need to register it for finalization."	^ anObject! !!AttachableFileStream class methodsFor: 'examples' stamp: 'dtl 3/7/2006 06:42'!stdIn	"self stdIn"	^ self name: 'stdIn' attachTo: OSProcess thisOSProcess stdIn ioHandle writable: false! !!AttachableFileStream class methodsFor: 'registry' stamp: 'dtl 8/25/2006 18:15'!unregister: anObject	"An attachable file stream is generally either a second reference to an	existing file stream, or a reference to a transient object such as a pipe	endpoint. There is no need to register it for finalization."	^ anObject! !!AttachableFileStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 21:01'!asAsyncFileReadStream	"Answer a replacement for this object, with asynchronous event handling.	Do not close the ioHandle when this object is finalized."	self keepOpen.	^ AsyncFileReadStream		name: self name		attachTo: self ioHandle		writable: self isReadOnly not! !!AttachableFileStream methodsFor: 'converting' stamp: 'dtl 9/16/2002 17:59'!asAttachableFileStream	^ self! !!AttachableFileStream methodsFor: 'converting' stamp: 'dtl 7/8/2003 21:01'!asBufferedAsyncFileReadStream	"Answer a replacement for this object, with asynchronous event handling	and buffered output. Do not close the ioHandle when this object is finalized."	self keepOpen.	^ BufferedAsyncFileReadStream		name: self name		attachTo: self ioHandle		writable: self isReadOnly not! !!AttachableFileStream methodsFor: 'finalization' stamp: 'dtl 9/17/2002 08:08'!autoClose	"Private. Answer true if the file should be automatically closed when 	this object is finalized."	^ autoClose		ifNil: [autoClose := true]! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 9/3/2010 17:00'!close	"Close this file."	| h |	(h := self ioHandle) ifNotNil:		[UseIOHandle			ifTrue:				[h close.				self ioHandle: nil]			ifFalse:				[self primCloseNoError: h.				self unregister.				fileID := nil]]! !!AttachableFileStream methodsFor: 'initialize-release' stamp: 'dtl 4/14/2006 09:34'!disableEventHandling	"Subclasses may disable event handling"! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 6/12/1999 16:00'!ensureOpen	self shouldNotImplement! !!AttachableFileStream methodsFor: 'finalization' stamp: 'dtl 7/6/2006 22:17'!finalize	self autoClose		ifTrue: [[self primCloseNoError: fileID] on: Error do: []]! !!AttachableFileStream methodsFor: 'read, write, position' stamp: 'dtl 11/8/2000 21:55'!flush	"Flush the external OS stream (the one in the C library)."	OSProcess accessor flushExternalStream: self ioHandle! !!AttachableFileStream methodsFor: 'private - IOHandle' stamp: 'dtl 1/29/2000 15:18'!ioHandle	UseIOHandle		ifTrue: [^ super ioHandle]		ifFalse: [^ fileID]! !!AttachableFileStream methodsFor: 'testing' stamp: 'dtl 3/26/2006 15:52'!isPipe	^ false! !!AttachableFileStream methodsFor: 'finalization' stamp: 'dtl 9/17/2002 08:05'!keepOpen	"Do not allow the file to be closed when this object is finalized."	autoClose := false! !!AttachableFileStream methodsFor: 'attaching' stamp: 'dtl 11/30/2002 09:22'!name: aSymbolOrString attachTo: anIOHandle writable: readWriteFlag	"Attach to an existing file handle, assumed to have been previously opened by the underlying operating system."	name := aSymbolOrString.	UseIOHandle		ifTrue: [self ioHandle: anIOHandle]		ifFalse: [fileID := anIOHandle].	readWriteFlag ifTrue: [self readWrite] ifFalse: [self readOnly].	self ascii.	UseIOHandle ifFalse: [self register]! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 6/12/1999 16:00'!open	self shouldNotImplement! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 6/12/1999 16:01'!open: fileName forWrite: writeMode	self shouldNotImplement! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 6/12/1999 16:02'!openReadOnly	self shouldNotImplement! !!AttachableFileStream methodsFor: 'read, write, position' stamp: 'dtl 5/17/2009 14:11'!position	"Return the receiver's current file position. If the stream is not positionable,	as in the case of a Unix pipe stream, answer 0."	^ [super position]		on: Error		do: [0]! !!AttachableFileStream methodsFor: 'open/close' stamp: 'dtl 6/12/1999 16:02'!reopen	self shouldNotImplement! !!AttachableFileStream methodsFor: 'nonblocking' stamp: 'dtl 2/17/2007 18:10'!setBlocking	OSProcess accessor setBlocking: self ioHandle! !!AttachableFileStream methodsFor: 'nonblocking' stamp: 'dtl 2/17/2007 18:10'!setNonBlocking	OSProcess accessor setNonBlocking: self ioHandle! !!AttachableFileStream methodsFor: 'read, write, position' stamp: 'dtl 9/2/2006 17:17'!upToEnd	"Answer a subcollection from the current access position through the last element	of the receiver. This is slower than the method in StandardFileStream, but it	works with pipes which answer false to #atEnd when no further input is	currently available, but the pipe is not yet closed."	| newStream buffer nextBytes |	buffer := buffer1 species new: 1000.	newStream := WriteStream on: (buffer1 species new: 100).	[self atEnd or: [(nextBytes := self nextInto: buffer) isEmpty]]		whileFalse: [newStream nextPutAll: nextBytes].	^ newStream contents! !!AttachableFileStream methodsFor: 'read, write, position' stamp: 'dtl 6/4/2006 16:02'!upToEndOfFile	"Answer a subcollection from the current access position through	the last element of the receiver.  Use #atEndOfFile to determine end	of file status with feof(), required for reliable end of file test on	OS pipes."	| newStream buffer |	buffer := buffer1 species new: 1000.	newStream := WriteStream on: (buffer1 species new: 100).	[self atEndOfFile] whileFalse: [newStream nextPutAll: (self nextInto: buffer)].	^ newStream contents! !!StandardFileStream methodsFor: '*OSProcess-Base' stamp: 'dtl 6/5/2006 06:59'!atEndOfFile	"Answer whether the receiver is at its end based on the result of	the last read operation. This uses feof() to test the underlying file	stream status, and can be used as an alternative to #atEnd, which	does not properly report end of file status for an OSPipe."	^ fileID isNil or: [OSProcess accessor isAtEndOfFile: fileID]! !!StandardFileStream methodsFor: '*OSProcess-Base' stamp: 'dtl 1/13/2007 16:44'!fileID	"The contents of fileID can and will change after calling this method.	The sender should copy the result rather than depending on the result	to be immutable."	^ fileID! !!StandardFileStream methodsFor: '*OSProcess-Base' stamp: 'dtl 6/5/2006 07:18'!isPipe	^ false! !!AioEventHandler commentStamp: 'dtl 11/25/2006 15:55' prior: 34390722!AioEventHandler responds to external IO events, such as data available on a file descriptor. When an external IO event is received, an instance of AioEventHandler sends #changed to itself to notify its dependents that the event has occurred.!!AioEventHandler class methodsFor: 'testing' stamp: 'dtl 2/11/2013 19:17'!aioPluginPresent	"Answer true if an AIO plugin is available. The value of AioPluginPresent	is cleared at startup time, and is reestablished once for each Squeak session.	See initializeAioPluginPresent to initialize after an image startup if warning	dialog is not desired."	"AioEventHandler aioPluginPresent"	^ AioPluginPresent		ifNil: [AioPluginPresent := self basicNew primAioModuleVersionString notNil.			AioPluginPresent ifFalse:				[self notify: 'AioPlugin not present, AioEventHandler will use polling input'].			^ AioPluginPresent]! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/5/2003 09:16'!for: aSocketOrFileStream	"self for: SourceFiles first"	"self for: Socket new"	"self for: OSProcess thisOSProcess stdIn"	^ self new for: aSocketOrFileStream! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/5/2003 11:14'!for: aSocketOrFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Flag parameters are true or false, indicating types of events to be handled."	^ self new for: aSocketOrFileStream			exceptions: exceptionEventFlag			readEvents: readEventFlag			writeEvents: writeEventFlag! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/4/2003 18:47'!forFileStream: aFileStream	"self forFileStream: SourceFiles first"	^ self new forFileStream: aFileStream! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/5/2003 11:14'!forFileStream: aFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Flag parameters are true or false, indicating types of events to be handled."	"self forFileStream: SourceFiles first"	^ self new forFileStream: aFileStream			exceptions: exceptionEventFlag			readEvents: readEventFlag			writeEvents: writeEventFlag! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/4/2003 19:01'!forSocket: aSocket	"self forSocket: Socket new"	^ self new forSocket: aSocket! !!AioEventHandler class methodsFor: 'instance creation' stamp: 'dtl 7/5/2003 11:14'!forSocket: aSocket exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Flag parameters are true or false, indicating types of events to be handled."	"self forSocket: Socket new"	^ self new forSocket: aSocket			exceptions: exceptionEventFlag			readEvents: readEventFlag			writeEvents: writeEventFlag! !!AioEventHandler class methodsFor: 'testing' stamp: 'dtl 10/3/2012 20:24'!initializeAioPluginPresent	"Initialize the AioPluginPresent flag silently without invoking a warning	if the plugin is not present, and answer the value of the flag. Send this	to prevent a warning dialog from being presented after image startup,	as may be preferred if the image is to be run headless."	"AioEventHandler initializeAioPluginPresent"	^ AioPluginPresent		ifNil: [AioPluginPresent := self basicNew primAioModuleVersionString notNil]! !!AioEventHandler class methodsFor: 'system startup' stamp: 'dtl 11/25/2006 10:04'!startUp: resuming	"Clear the value of AioPluginPresent. The value will be set once when	#aioPluginPresent is first sent, and will remain set to that value for the	duration of this Squeak session.	This method is called by ThisOSProcess>>startUp. AioEventHandler does	not need to be registered in the system startup list."	resuming ifTrue: [AioPluginPresent := nil]! !!AioEventHandler methodsFor: 'aio event forwarding' stamp: 'dtl 7/4/2003 19:10'!aioDisable: ioDescriptor	"Definitively disable asynchronous event notification for a descriptor. The ioDescriptor	parameter is an object representing a low level OS file or socket descriptor."	^ self primAioDisable: ioDescriptor! !!AioEventHandler methodsFor: 'aio event forwarding' stamp: 'dtl 9/1/2003 16:58'!aioEnable: ioDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse	"Enable asynchronous notification for a descriptor. Send this message one time	prior to beginning event handling for ioDescriptor. The ioDescriptor parameter is an	object representing a low level OS file or socket descriptor. The semaphoreIndex is	the index of a Semaphore to be notified, and the third parameter is a flag indicating	that ioDescriptor represents an external object which should not be closed on termination	of aio handling."	^ (self primAioEnable: ioDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse)			ifNil: [self notify: 'aio event forwarding not supported']! !!AioEventHandler methodsFor: 'aio event forwarding' stamp: 'dtl 7/4/2003 18:52'!aioHandle: ioDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag	"Enable asynchronous notification for a descriptor. Send this message one time to	enable a single event notification. Send it again after each event has been received	and handled (in other words, the process which waits on the event semaphore is	responsible for re-enabling the handler by calling this method each time an event	is handled). The ioDescriptor parameter is an object representing a low level OS file or	socket descriptor. The remaining three parameters are Boolean flags representing the	types of events for which notification is being requested: handle exceptions, handle	for read, and handle for write. It is common to watch for read events and exception	events, or to watch for write events and exception events."	^ self primAioHandle: ioDescriptor		exceptionEvents: exceptionFlag		readEvents: readFlag		writeEvents: writeFlag! !!AioEventHandler methodsFor: 'aio event forwarding' stamp: 'dtl 7/4/2003 19:10'!aioSuspend: ioDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag	"Temporarily suspend asynchronous event notification for a descriptor. The	ioDescriptor parameter is an object representing a low level OS file or socket	descriptor. The remaining three parameters are Boolean flags representing the	types of events for which notification is being requested: handle exceptions,	handle for read, and handle for write."	^ self primAioSuspend: ioDescriptor		exceptionEvents: exceptionFlag		readEvents: readFlag		writeEvents: writeFlag! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 8/20/2006 18:43'!close	"When the FileStream or Socket handled by this aio handler is closed,	it should send #close to this handler."	| p |	self breakDependents.	Smalltalk unregisterExternalObject: semaphore.	self aioDisable: self descriptor.	semaphore := nil.	semaIndex := nil.	p := handlerProc.	handlerProc := nil.	p ifNotNil: [p terminate] "p may be the active process, do this last"! !!AioEventHandler methodsFor: 'handler process' stamp: 'dtl 7/5/2003 10:50'!defaultHandlerProcess	"Generate a #changed notification whenever an external aio event occurs"	^ self handleReadAndExceptionsEvents! !!AioEventHandler methodsFor: 'accessing' stamp: 'dtl 3/30/2003 19:05'!descriptor	^ descriptor! !!AioEventHandler methodsFor: 'accessing' stamp: 'dtl 3/30/2003 19:05'!descriptor: aLowLevelIODescriptor	descriptor := aLowLevelIODescriptor! !!AioEventHandler methodsFor: 'finalization' stamp: 'dtl 9/4/2003 06:54'!finalize	"Note: An aio handler will not be garbage collected until the semaphore	is unregistered. When the FileStream or Socket handled by this aio	handler is closed, it should send #close to this handler."	self close! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/5/2003 09:15'!for: aSocketOrFileStream	"Answer an event handler for any kind of IO stream that can be associated	with an OS handle for aio events. Currently, subclasses of FileStream and	Socket can have aio event handlers."	(aSocketOrFileStream isKindOf: Socket)		ifTrue: [^ self forSocket: aSocketOrFileStream].	(aSocketOrFileStream isKindOf: FileStream)		ifTrue: [^ self forFileStream: aSocketOrFileStream].	self error: 'expected a FileStream or Socket subclass'! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/5/2003 11:03'!for: aSocketOrFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Answer an event handler for any kind of IO stream that can be associated	with an OS handle for aio events. Currently, subclasses of FileStream and	Socket can have aio event handlers."	(aSocketOrFileStream isKindOf: Socket)		ifTrue: [^ self forSocket: aSocketOrFileStream					exceptions: exceptionEventFlag					readEvents: readEventFlag					writeEvents: writeEventFlag].	(aSocketOrFileStream isKindOf: FileStream)		ifTrue: [^ self forFileStream: aSocketOrFileStream					exceptions: exceptionEventFlag					readEvents: readEventFlag					writeEvents: writeEventFlag].	self error: 'expected a FileStream or Socket subclass'! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/9/2005 14:00'!forFileStream: aFileStream	self descriptor: (self handleForFile: aFileStream).	self setDefaultEventMask.! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/5/2003 11:01'!forFileStream: aFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	self descriptor: (self handleForFile: aFileStream).	self initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/9/2005 14:00'!forSocket: aSocket	"Any existing event handling for aSocket will be disabled. Note that this	will make the socket useless for any applications that expect the prior	event handling behavior."	self descriptor: (self handleForSocket: aSocket).	self aioDisable: self descriptor.	self setDefaultEventMask.! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/5/2003 12:46'!forSocket: aSocket exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Any existing event handling for aSocket will be disabled. Note that this	will make the socket useless for any applications that expect the prior	event handling behavior."	self descriptor: (self handleForSocket: aSocket).	self aioDisable: self descriptor.	self initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag! !!AioEventHandler methodsFor: 'handler process' stamp: 'dtl 11/12/2011 21:25'!handleExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	"Generate a #changed notification whenever the requested type of external aio event occurs."	| p sema handler |	sema := Semaphore new.	handler := [[self hasValidHandler] whileTrue:		[self aioHandle: self descriptor			exceptionEvents: exceptionEventFlag			readEvents: readEventFlag			writeEvents: writeEventFlag.		sema signal. "event handler is ready"		self semaphore wait.		self changed]].	p := handler forkAt: Processor userBackgroundPriority.	sema wait. "until process has been started and events are being handled"	^p! !!AioEventHandler methodsFor: 'private' stamp: 'dtl 9/4/2003 06:40'!handleForFile: aFileStream	"self new handleForFile: SourceFiles first"	| ioHandle |	ioHandle := self useIOHandle		ifTrue: [aFileStream ioHandle]		ifFalse: [aFileStream fileID].	^ self primOSFileHandle: ioHandle! !!AioEventHandler methodsFor: 'private' stamp: 'dtl 7/4/2003 15:16'!handleForSocket: aSocket	"self new handleForSocket: Socket newTCP"	| ioHandle |	ioHandle := self useIOHandle		ifTrue: [aSocket ioHandle]		ifFalse: [aSocket socketHandle].	^ self primOSSocketHandle: ioHandle! !!AioEventHandler methodsFor: 'handler process' stamp: 'dtl 7/5/2003 10:49'!handleReadAndExceptionsEvents	"Generate a #changed notification whenever data is available for reading or an exception	occurs on the external IO channel."	^ self handleExceptions: true readEvents: true writeEvents: false! !!AioEventHandler methodsFor: 'handler process' stamp: 'dtl 7/5/2003 10:49'!handleReadEvents	"Generate a #changed notification whenever data is available for reading"	^ self handleExceptions: false readEvents: true writeEvents: false! !!AioEventHandler methodsFor: 'accessing' stamp: 'dtl 3/30/2003 19:04'!handlerProc	^ handlerProc! !!AioEventHandler methodsFor: 'handler process' stamp: 'dtl 4/23/2012 06:45'!hasValidHandler	"True if the event handler is running, and if it refers to the correct external	object semaphore. For protection following an image restart."	^ semaIndex notNil		and: [Smalltalk externalObjects size >= semaIndex			and: [(Smalltalk externalObjects at: semaIndex) == semaphore]]! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 9/3/2010 16:48'!initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag	semaphore := Semaphore new.	semaIndex := Smalltalk registerExternalObject: semaphore.	([self aioEnable: self descriptor forSemaphore: self semaIndex externalObject: true]		on: Warning		do: [:e |			self close. "unregister the semaphore"			self notify: e messageText. nil])		ifNotNil:			[handlerProc := self				handleExceptions: exceptionEventFlag				readEvents: readEventFlag				writeEvents: writeEventFlag]! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:53'!primAioDisable: aDescriptor	"Definitively disable asynchronous event notification for a descriptor. The descriptor	parameter is an object representing a low level OS file or socket descriptor."	<primitive: 'primitiveAioDisable' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:53'!primAioEnable: aDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse	"Enable asynchronous notification for a descriptor. The descriptor parameter is an	object representing a low level OS file or socket descriptor. The semaphoreIndex	is the index of a Semaphore to be notified, and the third parameter is a flag indicating	that descriptor represents an external object which should not be closed on termination	of aio handling."	<primitive: 'primitiveAioEnable' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:53'!primAioHandle: aDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag	"Enable asynchronous notification for a descriptor. The descriptor parameter is an	object representing a low level OS file or socket descriptor. The second parameter is	the index of a Semaphore to be notified, the remaining three parameters are Boolean	flags representing the types of events for which notification is being requested:	handle exceptions, handle for read, and handle for write. It is common to watch for	read events and exception events, or to watch for write events and exception events."	<primitive: 'primitiveAioHandle' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:26'!primAioModuleName	"Module name of the installed plugin, if any."	"self new primAioModuleName"	<primitive: 'primitiveModuleName' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:28'!primAioModuleVersionString	"Module name of the installed plugin, if any."	"self new primAioModuleVersionString"	<primitive: 'primitiveVersionString' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:54'!primAioSuspend: aDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag	"Temporarily suspend asynchronous event notification for a descriptor. The	descriptor parameter is an object representing a low level OS file or socket	descriptor. The remaining three parameters are Boolean flags representing the	types of events for which notification is being requested: handle exceptions,	handle for read, and handle for write."	<primitive: 'primitiveAioSuspend' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:54'!primOSFileHandle: sqFile	"Answer the low level file descriptor for a file IO handle."	<primitive: 'primitiveOSFileHandle' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'primitive access' stamp: 'dtl 9/1/2003 17:54'!primOSSocketHandle: sqFile	"Answer the low level socket descriptor for a socket IO handle."	<primitive: 'primitiveOSSocketHandle' module: 'AioPlugin'>	^ nil! !!AioEventHandler methodsFor: 'accessing' stamp: 'dtl 3/30/2003 19:04'!semaIndex	^ semaIndex! !!AioEventHandler methodsFor: 'accessing' stamp: 'dtl 3/30/2003 19:04'!semaphore	^ semaphore! !!AioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 7/9/2005 14:00'!setDefaultEventMask	"Default initialization for read events and exception events"	^ self initializeForExceptions: true readEvents: true writeEvents: false! !!AioEventHandler methodsFor: 'private' stamp: 'dtl 3/30/2003 19:26'!useIOHandle	^ Smalltalk hasClassNamed: #IOHandle! !!OSProcessAccessor commentStamp: 'dtl 7/7/2010 07:58' prior: 34391029!I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.The single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.When an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.!!MacOSProcessAccessor commentStamp: '<historical>' prior: 34392056!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Macintosh process model.!!MacOSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:44'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for the	Squeak VM running on the current platform."	^ OSProcess isNonUnixMac! !!MacOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/23/2002 05:57'!primGetSession	"Answer the unique identifier for this session of Smalltalk running in this OS Process."	^ nil! !!OS2OSProcessAccessor commentStamp: '<historical>' prior: 34392275!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the OS2 process model.!!OS2OSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:47'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for the	Squeak VM running on the current platform."	^ OSProcess isOS2! !!OS2OSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/23/2002 05:56'!primGetSession	"Answer the unique identifier for this session of Smalltalk running in this OS Process."	^ nil! !!OSProcessAccessor class methodsFor: 'concrete subclasses' stamp: 'dtl 3/5/2005 12:04'!concreteClass	"OSProcessAccessor concreteClass"	^ self subclasses		detect: [:c | c isResponsibleForThisPlatform]		ifNone: [self notify: self printString,					': No concrete class implementation available for system type ',					OSProcess platformName printString.				nil]! !!OSProcessAccessor class methodsFor: 'initialize-release' stamp: 'dtl 3/5/2005 13:24'!emulateWin32FileLocking: trueOrFalse	"This is a preference that controls whether file locking will attempt to emulation	Win32 behavior, in which a lock request will fail if the requested region overlaps	a region for which there is an existing lock. This behavior is valid only for locks	managed within a single Squeak image, and will not produce the expected results	for a Squeak image cooperating with another Squeak image, or with some other	external program.	Use of the Win32 emulation may result in performance penalties for an application	that performs a large number of lock requests, such as a database."	"self emulateWin32FileLocking: true"	"self emulateWin32FileLocking: false"	EmulateWin32FileLocking := trueOrFalse! !!OSProcessAccessor class methodsFor: 'instance creation' stamp: 'dtl 12/14/2013 09:15'!forThisOSProcess	"Answer a single instance corresponding to the OS process in which this 	Smalltalk image is executing."	"OSProcessAccessor forThisOSProcess"	ThisOSProcessAccessor		ifNotNil: [ThisOSProcessAccessor isResponsibleForThisPlatform					ifTrue:						["Common case, platform has not changed"						^ThisOSProcessAccessor ]					ifFalse:						["We are running on a different platform, so start a new accessor"						ThisOSProcessAccessor changed: #invalidProcessAccessor.						ThisOSProcessAccessor finalize]].	^ ThisOSProcessAccessor := self concreteClass basicNew initialize! !!OSProcessAccessor class methodsFor: 'initialize-release' stamp: 'dtl 12/14/2013 09:15'!initialize	"OSProcessAccessor initialize"	UseIOHandle := (Smalltalk hasClassNamed: #IOHandle).	ThisOSProcessAccessor := nil.	self emulateWin32FileLocking: false.	self allSubInstances do: [:e | e finalize]! !!OSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/24/2003 09:17'!isResponsibleForThisPlatform	"Answer true if an instance of this class is responsible for representing the	OS process for the Squeak VM running on the current platform."	^ self subclassResponsibility! !!OSProcessAccessor class methodsFor: 'instance creation' stamp: 'dtl 3/2/2002 08:29'!new	self inform: 'use OSProcessAccessor>>forThisOSProcess to create or obtain the OSProcess instance for this Smalltalk session.'.	^ nil! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:41'!aioModuleName	"Answer a string containing the module name string for the AIO plugin."	"OSProcess accessor aioModuleName"	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:41'!aioVersionString	"Answer a string containing the version string for the AIO plugin."	"OSProcess accessor aioVersionString"	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'testing' stamp: 'dtl 10/18/2001 22:58'!canAccessSystem	"Answer true if it is possible to access the external process. Concrete subclasses should	know how to answer true."	^ false! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 4/9/2005 22:44'!canAcquireLock: anOSFileLockDescriptor	"Answer true if the file lock cache will permit fileLock to be acquired. This method	does not guarantee that the underlying OS will grant the lock."	^ (self fileLockRegistry anySatisfy:			[:ld | ld isActive and: [ld conflictsWith: anOSFileLockDescriptor]]) not! !!OSProcessAccessor methodsFor: 'testing' stamp: 'dtl 2/14/2004 11:43'!canForwardExternalSignals	"Answer true if it is possible to forward OS signals to a Smalltalk Semaphore."	^ false! !!OSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 4/7/2007 10:19'!canObtainSessionIdentifierFromPlugin	^ canObtainSessionIdentifierFromPlugin		ifNil: [canObtainSessionIdentifierFromPlugin := self primGetSession notNil]! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 3/5/2005 13:21'!emulateWin32FileLocking	"Answer the current value of this preference"	^ EmulateWin32FileLocking! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 9/24/2009 21:36'!fileLockRegistry	^ FileLockRegistry ifNil: [FileLockRegistry := Set new]! !!OSProcessAccessor methodsFor: 'session identification' stamp: 'dtl 8/6/2003 21:39'!getSessionIdentifier	"Call a primitive to obtain the unique identifier for this Squeak session. If the	primitive fails, try to deduce the session identifier from an instance of	StandardFileStream. Some versions of the OSProcessPlugin may not be able to	obtain a session ID, so this provides a mechanism for obtaining the session ID	indirectly if necessary."	"OSProcess accessor getSessionIdentifier"	| session |	session := self primGetSession.	session ifNil: [session :=  self getSessionIdentifierFromSourcesFile].	session ifNil: [session :=  self getSessionIdentifierFromFileInSqueakDirectory].	^ session! !!OSProcessAccessor methodsFor: 'session identification' stamp: 'dtl 1/23/2013 21:30'!getSessionIdentifierFromFileInSqueakDirectory	"Deduce the session identifier using method of last resort.	This is an unreliable method, because it assumes knowledge of the internal structure	of the SQFile data structure.	Deprecated:	As of approximately Squeak 3.8 and beyond, the session id has been moved to the	first slot of the data structure. This method will not work for a Squeak VM beyond	that point, and will not work for any 64 bit VM. However, an reliable means of	obtaining sessionID is now available (#getSessionIdentifier), so this method is retained	only for backwards compatibility to allow OSPP to be built on an older VMMaker."	"OSProcess accessor getSessionIdentifierFromFileInSqueakDirectory"	| id s |	(OSProcess directoryEntryNames: OSProcess defaultPathString) do:		[:n | (s := FileStream readOnlyFileNamed: n) ifNotNil:			[(Smalltalk hasClassNamed: #IOHandle)				ifTrue: [id := s ioHandle getHandle copyFrom: 5 to: 8]				ifFalse: [(id := s fileID) ifNotNil: [id copyFrom: 5 to: 8]].			s close.			^ id]].	^ nil! !!OSProcessAccessor methodsFor: 'session identification' stamp: 'dtl 8/7/2005 22:02'!getSessionIdentifierFromSourcesFile	"Deduce the session identifier from an existing open FileStream on the sources file.	This is an unreliable method, because it assumes knowledge of the internal structure	of the SQFile data structure.	Deprecated:	As of approximately Squeak 3.8 and beyond, the session id has been moved to the	first slot of the data structure. This method will not work for a Squeak VM beyond	that point, and will not work for any 64 bit VM. However, an reliable means of	obtaining sessionID is now available (#getSessionIdentifier), so this method is retained	only for backwards compatibility to allow OSPP to be built on an older VMMaker."	"OSProcess accessor getSessionIdentifierFromSourcesFile"	| s id |	s := SourceFiles first.	s ifNil: [^ nil].	^ (Smalltalk hasClassNamed: #IOHandle)		ifTrue: [s ioHandle getHandle copyFrom: 5 to: 8]		ifFalse: [(id := s fileID) ifNotNil: [id copyFrom: 5 to: 8]]! !!OSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:07'!getStdErrHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard error for the	OS process in which I am currently executing."	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:07'!getStdInHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard input for the	OS process in which I am currently executing."	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:06'!getStdOutHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard output for the	OS process in which I am currently executing."	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 2/27/2015 19:54'!grimReaper	"Answer the value of grimReaper"	^ grimReaper! !!OSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 2/27/2015 19:54'!grimReaper: anObject	"Set the value of grimReaper"	grimReaper := anObject! !!OSProcessAccessor methodsFor: 'private - IOHandle' stamp: 'dtl 3/1/2002 15:19'!handleFromAccessor: aByteArrayOrIOAccessor	UseIOHandle		ifTrue: [aByteArrayOrIOAccessor isNil			ifTrue: [^ nil]			ifFalse: [^ aByteArrayOrIOAccessor asSQFileStruct]]		ifFalse: [^ aByteArrayOrIOAccessor]! !!OSProcessAccessor methodsFor: 'private - IOHandle' stamp: 'dtl 1/3/2004 21:21'!handleFromFileStream: aFileStream	^ UseIOHandle		ifTrue: [self handleFromAccessor: aFileStream ioHandle]		ifFalse: [aFileStream fileID]! !!OSProcessAccessor methodsFor: 'testing' stamp: 'dtl 8/8/2002 15:13'!handlesOsSignals	"True if OS signals can be handled and forwarded to the image"	^ false! !!OSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 2/27/2015 19:51'!initialize	canObtainSessionIdentifierFromPlugin := nil.	self canObtainSessionIdentifierFromPlugin.	sessionIdentifier := nil.	self sessionIdentifier.! !!OSProcessAccessor methodsFor: 'private - IOHandle' stamp: 'dtl 7/12/2003 12:17'!ioAccessorFromSQFile: aByteArray	"Answer an object which represents an IO channel. If IOHandle is present in	this image, use it; otherwise just answer aByteArray."	UseIOHandle		ifTrue: [^ (Smalltalk at: #IOHandle) newFromSqFileStruct: aByteArray]		ifFalse: [^ aByteArray]! !!OSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 11/28/2010 14:04'!isAtEndOfFile: anIOHandle	"Answer whether the file represented by anIOHandle is at end of file, as determined	by a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers	true if the file pointer is at the end of the file, but which does not call feof() to	determine that an end of file condition has occurred. The difference is significant	if aSqFileStruct represents a pipe or a device file, which may not be positionable	in the sense of a conventional disk file."	^ self primTestEndOfFileFlag: (self handleFromAccessor: anIOHandle)! !!OSProcessAccessor methodsFor: 'platform identification' stamp: 'dtl 8/24/2003 09:18'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isResponsibleForThisPlatform! !!OSProcessAccessor methodsFor: 'pipe open' stamp: 'dtl 11/28/2010 12:28'!makePipeHandles	"Create a pipe, and answer an array of two IO accessors for the pipe 	reader and writer."	"OSProcess accessor makePipeHandles"	^self primCreatePipe		ifNotNilDo: [:p | ^ p collect: [:e | self ioAccessorFromSQFile: e]]! !!OSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 2/28/2015 18:33'!newPid	"This image is now being run in a new VM process with different pid. Pause the handling	of child processes, and remove references to child processes that no longer pertain to	the current VM process."	grimReaper ifNotNilDo: [ :p | p terminate. grimReaper := nil ].	self changed: #pid.	self restartChildWatcherProcess! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:41'!osppModuleName	"Answer a string containing the module name string for the OSPP plugin."	"OSProcess accessor osppModuleName"	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:41'!osppModuleVersionString	"Answer a string containing the version string for the OSPP plugin."	"OSProcess accessor osppModuleVersionString"	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'session identification' stamp: 'dtl 3/2/2002 09:07'!primGetSession	"Subclasses should override if they know how to obtain the session identifier."	^ nil! !!OSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 4/8/2007 10:49'!primTestEndOfFileFlag: aSqFileStruct	"Answer whether the file represented by aSqFileStruct is at end of file, as determined	by a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers	true if the file pointer is at the end of the file, but which does not call feof() to	determine that an end of file condition has occurred. The difference is significant	if aSqFileStruct represents a pipe or a device file, which may not be positionable	in the sense of a conventional disk file."	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 3/5/2005 13:06'!register: fileRegionLock	"If an object equal to fileRegionLock exists in the registry, answer it. Otherwise, add	fileRegionLock to the registry and answer fileRegionLock."	^ (self fileLockRegistry like: fileRegionLock)		ifNil: [self fileLockRegistry add: fileRegionLock]! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 4/10/2005 15:05'!registeredLocksForFile: aFileStream	"Answer all lock descriptors associated with aFileStream"	^ self fileLockRegistry select: [:ea | ea fileStream = aFileStream]! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'jf 2/26/2004 18:06'!removeInactiveLocks	"Go through the lock cache and remove any that have been left	behind after their streams were closed."	^ self fileLockRegistry copy do: [:ea | ea isActive ifFalse: [self fileLockCache remove: ea]]! !!OSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 2/28/2015 18:31'!restartChildWatcherProcess	self subclassResponsibility! !!OSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 3/2/2002 08:32'!sessionIdentifier	^ sessionIdentifier ifNil: [sessionIdentifier := self getSessionIdentifier]! !!OSProcessAccessor methodsFor: 'file control' stamp: 'dtl 2/11/2001 15:37'!setNonBlocking: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 3/5/2005 13:07'!unregister: fileRegionLock	"If an object equal to fileRegionLock exists in the registry, remove it and	answer the object. Otherwise answer nil."	^ self fileLockRegistry remove: fileRegionLock ifAbsent: [nil]! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:41'!xdcpModuleName	"Answer a string containing the module name string for the display control plugin."	"OSProcess accessor xdcpModuleName"	^ self subclassResponsibility! !!OSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:42'!xdcpVersionString	"Answer a string containing the version string for the display control plugin."	"OSProcess accessor xdcpVersionString"	^ self subclassResponsibility! !!RiscOSProcessAccessor commentStamp: '<historical>' prior: 34392489!I provide access to the operating system process in which the Squeak VM is currently running. I am based on the RiscOS task model. There is only one instance of me, and instances of RiscOSProcess depend on me to provide access to the operating system process which they represent. I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances ofRiscOSProcess) when these events occur.!!RiscOSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:48'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for the	Squeak VM running on the current platform."	^ OSProcess isRiscOS! !!RiscOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 1/6/2001 23:15'!primForkAndExec: executableFile	withArgs: anArrayOfArgumentStrings	argCount: numberOfArgumentStrings	withEnv: anArrayOfEnvironmentStrings	envCount: numberOfEnvironmentStrings	stdIn: inputFileHandle	stdOut: outputFileHandle	stdErr: errorFileHandle	"Parameters are expected to have been properly prepared by the caller,	including string values which are to be null terminated strings.	In other words, all strings should have (Character value: 0) as the	last element in the string."! !!RiscOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/23/2002 05:56'!primGetSession	"Answer the unique identifier for this session of Smalltalk running in this OS Process."	^ nil! !!UnixOSProcessAccessor commentStamp: '<historical>' prior: 34393015!I provide access to the operating system process in which the Squeak VM is currently running. I am based on the Unix process model. There is only one instance of me, and instances of UnixOSProcess depend on me to provide access to the operating system process which they represent.I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances of UnixOSProcess) when these events occur.!!UnixOSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:49'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for the	Squeak VM running on the current platform."	^ OSProcess isUnix! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:43'!aioModuleName	"Answer a string containing the module name string for the AIO plugin."	"OSProcess accessor aioModuleName"	^ self primAioPluginModuleName! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:44'!aioVersionString	"Answer a string containing the version string for the AIO plugin."	"OSProcess accessor aioVersionString"	^ self primAioPluginVersionString! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 10/7/2000 13:39'!canAccessChildProcess: anExternalProcess	"Is the child process still there? Maybe not if we have restarted the image	and anExternalProcess refers to a process which died while we were not	watching."	^ self primCanReceiveSignals: anExternalProcess pid! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 9/9/2000 15:45'!canAccessSystem	"Answer true if it is possible to access the external process, else false. Failure	to access the external process is probably due to lack of a UnixOSProcessPlugin	module."	^ self primGetPid notNil! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 8/30/2003 18:43'!canControlXDisplay	"True if the XDisplayControlPlugin is accessible. Older versions of OSProcess relied on	the X display control to be embedded in the OSProcessPlugin module. This has been	moved to a separate display control plugin to allow support of non-X platforms and	other display media on Unix platforms (OS X)."	"OSProcess accessor canControlXDisplay"	^ self primXDisplayControlPluginModuleName notNil! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 2/14/2004 12:17'!canForwardExternalSignals	"Answer true if it is possible to forward OS signals to a Smalltalk Semaphore."	^ true! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/31/2001 15:07'!chDir: pathString	"Change current working directory. The $PWD environment variable is not updated (but	see UnixProcess>>chDir:). Answer nil for success, or an error message."	"OSProcess accessor chDir: '/tmp'"	"OSProcess accessor chDir: '/no/such/path'"	"OSProcess accessor chDir: FileDirectory default name"	| result message |	result := self primChdir: pathString.	result isNil		ifTrue:			[^ nil]		ifFalse:			[message := self primErrorMessageAt: result.			^ message]! !!UnixOSProcessAccessor methodsFor: 'signal print stack trace' stamp: 'dtl 7/20/2010 00:06'!clearPrintAllStacksOnSigUsr1	"Clear any signal handler in the VM that was set to print all call stacks on	console output when a SIGUSR1 is received. Restores default SIGUSR1	handler, which may result in exiting the VM on this signal. Answer an	identifier for the previously defined signal handler or nil if no handler	had been set."	^self primForwardSignal: self primSigUsr1Number toSemaphore: nil	! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 3/2/2009 22:42'!closeUnixFileNumber: unixFileDescriptor	"Close the file associated with unixFileDescriptor, a small integer value."	<primitive: 'primitiveUnixFileClose' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'debugging' stamp: 'dtl 11/19/2006 09:02'!currentSigHandlerAddress: signalNumber	"Answer the current machine address of the signal handler for signalNumber,	expressed as a ByteArray.	Temporarily set a signal forwarded for signalNumber, and remember the	machine address of the prior signal handler. Restore the signal handler	to its previous value, and answer the machine address of the handler."	"OSProcess accessor currentSigHandlerAddress: OSProcess accessor primSigIntNumber"	| sema index previousHandlerAddress |	sema := Semaphore new.	index := Smalltalk registerExternalObject: sema.	(previousHandlerAddress := self primForwardSignal: signalNumber toSemaphore: index)		ifNil:			[Smalltalk unregisterExternalObject: sema.			^ self error: 'could not forward signal number ', signalNumber asString].	self restoreSignal: signalNumber.	^ previousHandlerAddress! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/2/2000 19:59'!environmentAt: aSymbolOrString	"Get an environment variable from the external OS process."	"OSProcess thisOSProcess environmentAt: 'PATH'"	^ self primEnvironmentAtSymbol: aSymbolOrString! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 10/7/2001 01:18'!environmentAt: aSymbolOrString put: aString	"Add or update an environment variable in the external OS process. Convert aSymbol	and aString into a KEY=value string and pass this to the OS process environment.	Standard C libraries provide a putenv() function for this purpose, with a parameter	in the form KEY=value. Note: Maintain a reference to the return value, see note in	primitivePutEnv."	"OSProcess accessor environmentAt: 'AAAA' put: 'this is the value of AAAA'"	"OSProcess accessor environmentAt: 'AAAA' put: nil"	"OSProcess accessor environmentAt: 'AAAA'"	aString isNil		ifTrue:			[^ self primUnsetEnv: aSymbolOrString, (Character value: 0) asString]		ifFalse:			[^ self environmentPut: (aSymbolOrString asString, '=', aString)]! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 9/10/2000 09:48'!environmentPut: aString	"Add or update an environment variable in the external OS process using a 'KEY=value'	string. Create a null terminated string for use by the external putenv() call in a pluggable	primitive."	"OSProcess thisOSProcess processAccessor environmentPut: 'SOMEKEY=somevalue'"	| cString |	cString := aString, (Character value: 0) asString.	^ self primPutEnv: cString! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 05:49'!fileProtectionMask: aPathString	"Call stat(2) to obtain the file protection mask for a file."	"OSProcess accessor fileProtectionMask: '/bin/sh'"	"OSProcess accessor fileProtectionMask: '/etc/hosts'"	"OSProcess accessor fileProtectionMask: '/bin/su'"	"OSProcess accessor fileProtectionMask: '/bin/NOSUCHFILE'"	"OSProcess accessor fileProtectionMask: 12345"	| mask |	(aPathString isKindOf: String) ifFalse: [self error: 'expected a path string'. ^ nil].	mask := self primFileProtectionMask: aPathString.	(mask == nil) ifTrue: [^ nil].	(mask isKindOf: Integer)		ifTrue: [^ self primErrorMessageAt: mask].	^ mask! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 05:49'!fileStat: aPathString	"Call stat(2) to obtain the UID, GID, and file protection mask for a file."	"OSProcess accessor fileStat: '/var/spool/news'"	"OSProcess accessor fileStat: '/etc/hosts'"	"OSProcess accessor fileStat: '/bin/su'"	"OSProcess accessor fileStat: '/bin/NOSUCHFILE'"	"OSProcess accessor fileStat: 12345"	| mask |	(aPathString isKindOf: String) ifFalse: [self error: 'expected a path string'. ^ nil].	mask := self primFileStat: aPathString.	(mask == nil) ifTrue: [^ nil].	(mask isKindOf: Integer)		ifTrue: [^ self primErrorMessageAt: mask].	^ mask! !!UnixOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 7/6/2010 21:22'!finalize	"Clean up grimReaper and associated semaphore."	self grimReaper ifNotNil:			[grimReaper terminate.			grimReaper := nil].	self sigChldSemaphore ifNotNil:			[self restoreSigChld.			self sigChldSemaphore: nil]! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 11/28/2010 12:13'!flushExternalStream: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to flush the	external I/O stream."	^ self primSQFileFlush: (self handleFromAccessor: anIOHandle)! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 1/25/2004 21:43'!forkAndExec: executableFile	stdIn: inputFileHandle	stdOut: outputFileHandle	stdErr: errorFileHandle	argBuf: argVec	argOffsets: argOffsets	envBuf: envVec	envOffsets: envOffsets	workingDir: pathString	"Parameters are expected to have been properly prepared by the caller, including string	values which are to be null terminated strings. In other words, all strings should have	(Character value: 0) as the last element in the string.	Parameters should be:		executableFile: a string with the name of a file to execute.		stdIn: a fileID ByteArray (struct SQFile in C) to be used as standard input.		stdOut: a fileID ByteArray to be used as standard output.		stdErr: a fileID ByteArray to be used as standard error.		argVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.		argOffsets: an Array of offsets for fixing up the argVec addresses.		envVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.		envOffsets: an Array of offsets for fixing up the envVec addresses.		workingDir: a null terminated path name String, or nil.	The envVec parameter may be nil, in which case envOffsets is ignored. workingDir may be nil. The	other parameters are required. Parameters with nil value indicate that current values for this process	should be used."	^ self primForkExec: executableFile			stdIn: inputFileHandle			stdOut: outputFileHandle			stdErr: errorFileHandle			argBuf: argVec			argOffsets: argOffsets			envBuf: envVec			envOffsets: envOffsets			workingDir: pathString! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 4/27/2011 21:01'!forkSqueak	"Clone this Squeak Smalltalk image in a child OSProcess. The child is the same as the	parent, except for its new X session connection, and the return value of this method,	which is zero for the child process, and a positive integer equal to the pid of the child	for the parent process.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	self safeToForkSqueak		ifTrue: [^self primForkSqueak].	[self notify: 'forkSqueak requires XDisplayControlPlugin']		ensure: [^nil]! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:51'!forwardSigChld	"Set a signal handler for SIGCHLD. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigChld"	^ self forwardSignal: self primSigChldNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:51'!forwardSigHup	"Set a signal handler for SIGHUP. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigHup"	^ self forwardSignal: self primSigHupNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:51'!forwardSigInt	"Set a signal handler for SIGINT. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigInt"	^ self forwardSignal: self primSigIntNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:51'!forwardSigKill	"Set a signal handler for SIGKILL. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigKill"	self notify: 'SIGKILL and SIGSTOP signals cannot be caught, see man signal(2)'.	^ self forwardSignal: self primSigKillNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:52'!forwardSigPipe	"Set a signal handler for SIGPIPE. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigPipe"	^ self forwardSignal: self primSigPipeNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:52'!forwardSigQuit	"Set a signal handler for SIGQUIT. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigQuit"	^ self forwardSignal: self primSigQuitNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:52'!forwardSigTerm	"Set a signal handler for SIGTERM. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigTerm"	^ self forwardSignal: self primSigTermNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:52'!forwardSigUsr1	"Set a signal handler for SIGUSR1. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigUsr1"	^ self forwardSignal: self primSigUsr1Number! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:52'!forwardSigUsr2	"Set a signal handler for SIGUSR2. Answer a new Semaphore, or nil if unable	to set the handler (possibly because it has already been set)."	"OSProcess accessor forwardSigUsr1"	^ self forwardSignal: self primSigUsr2Number! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 12/6/2002 18:28'!forwardSignal: signalNumber 	"Set a signal handler in the VM which will signal a Smalltalk semaphore 	at semaphoreIndex whenever an external signal sigNum is received.	Answer a new Semaphore, or nil if unable to set the handler (possibly	because it has already been set). A Smalltalk process can wait on the	Semaphore, and take action when a signal is detected. See man(7) signal	for signal number definitions on your unix system."	"OSProcess accessor forwardSignal: OSProcess accessor primSigIntNumber"	| sema index |	sema := Semaphore new.	index := Smalltalk registerExternalObject: sema.	(self primForwardSignal: signalNumber toSemaphore: index)		ifNil:			[Smalltalk unregisterExternalObject: sema.			^ nil].	^ sema! !!UnixOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 11/28/2010 12:07'!getStdErrHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard error for the	OS process in which I am currently executing."	^ self primGetStdErrHandle		ifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]! !!UnixOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 11/28/2010 12:07'!getStdInHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard input for the	OS process in which I am currently executing."	^ self primGetStdInHandle		ifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]! !!UnixOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 11/28/2010 12:08'!getStdOutHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard output for the	OS process in which I am currently executing."	^ self primGetStdOutHandle		ifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]! !!UnixOSProcessAccessor methodsFor: 'pthreads' stamp: 'dtl 3/17/2007 23:14'!getThreadID	"Answer the ID of the pthread that is currently executing (the interpreter thread).	A thread ID may be a 64 bit value on some platforms, so answer a byte array	containing the value in machine-dependent byte order."	"OSProcess accessor getThreadID"	| osppVer |	[osppVer := OSProcess accessor osppModuleVersionString asNumber]		on: Error		do: [^ nil].	(osppVer notNil and: [osppVer >= 4.2])		ifTrue: [^ self primGetThreadID]		ifFalse: [^ nil]! !!UnixOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 6/2/2015 20:54'!grimReaperProcess	"This is a process which waits for the death of a child OSProcess, and 	informs any dependents of the change. Use SIGCHLD events if possible,	otherwise a Delay to poll for exiting child processes."	| eventWaiter processSynchronizationDelay |	^ self canAccessSystem		ifTrue:			[eventWaiter := (self canAccessSystem and: [self canForwardExternalSignals])				ifTrue: [self sigChldSemaphore "semaphore signaled by SIGCHLD" ]				ifFalse: [Delay forMilliseconds: 200 "simple polling loop" ].			processSynchronizationDelay := Delay forMilliseconds: 20.			grimReaper ifNil:				[grimReaper :=					[[(eventWaiter respondsTo: #waitTimeoutMSecs: )						ifTrue: [eventWaiter waitTimeoutMSecs: 1000 "semaphore with timeout"]						ifFalse: [eventWaiter wait].					processSynchronizationDelay wait. "Avoids lost signals in heavy process switching"					self changed: #childProcessStatus] repeat] newProcess.					grimReaper resume.					"name selected to look reasonable in the process browser"					grimReaper name: ((ReadStream on: grimReaper hash asString) next: 5)							, ': the child OSProcess watcher']]		ifFalse:			[nil]! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 8/8/2002 15:13'!handlesOsSignals	"True if OS signals can be handled and forwarded to the image"	^ true! !!UnixOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 7/7/2010 07:46'!initialize	"Call this method when an instance is first created, or to refresh after an image	restart to clean up from the previous session. Notify dependents of my singleton	instance if the image has restarted in a different OS process (this is not the case	when #startUp is called after a simple image save)."	self finalize.	super initialize.	ThisProcessPid ~~ self primGetPid		ifTrue: 			["Image has been restarted and is now running in a different OS process"			ThisProcessPid := self primGetPid.			self changed: #startUp].	self changed.	self restartChildWatcherProcess.! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 10/6/2001 12:08'!isExecutable: aPathName	"Answer true if file at aPathName has execute permission for this process."	"OSProcess accessor isExecutable: '/bin/sh'"	"OSProcess accessor isExecutable: '/no/such/file'"	^ self isExecutable: aPathName forUser: self primGetUid inGroup: self primGetGid! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 22:53'!isExecutable: aPathName forUser: uid inGroup: gid	"Answer true if file at aPathName has execute permission for a user	identified by user uid and group gid."	"OSProcess accessor		isExecutable: '/bin/sh'		forUser: OSProcess accessor primGetUid		inGroup: OSProcess accessor primGetGid"	| fStat suid sgid user group protectionMask |	fStat := self fileStat: aPathName.	(fStat isKindOf: String)		ifTrue: [self inform: aPathName, ': ', fStat. ^ nil].	protectionMask := fStat at: 3.	((protectionMask at: 4) allMask: 1)		ifTrue: [^ true]. "Test executable by any user ID"	sgid := (protectionMask at: 1) allMask: 2.	sgid		ifTrue: [group := gid]		ifFalse: [group := fStat at: 2].	((gid == group) and: [(protectionMask at: 3) allMask: 1])		ifTrue: [^ true]. "Test executable by my group ID"	suid := (protectionMask at: 1) allMask: 4.	suid		ifTrue: [user := uid]		ifFalse: [user := fStat at: 1].	((uid == user) and: [(protectionMask at: 2) allMask: 1])		ifTrue: [^ true]. "Test executable by my user ID"	^ false! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/14/2004 15:10'!isLockableFile: aFileStream	"Check for ability to place an exclusive lock on the entire file represented by	aFileStream. An exclusive lock (write lock) permits only one OS process to hold	the lock. Answer true if the region is lockable."	^ self isLockableFile: aFileStream exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'jf 2/22/2004 17:30'!isLockableFile: aFileStream exclusive: flag	"Check for ability to place an exclusive lock on the entire file represented by	aFileStream. An exclusive lock (write lock) permits only one OS process to hold	the lock. Answer true if the region is lockable."	| fileLock |	aFileStream ifNil: [^ false].	fileLock := OSFileLock onFile: aFileStream exclusive: flag.	^ self isLockableFileRegion: fileLock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/14/2004 15:09'!isLockableFile: aFileStream from: start to: end	"Pass a struct SQFile on the stack, and check for ability to lock the specified region.	If the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes     may hold  a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock).	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Answer true if the region is lockable."	^ self isLockableFile: aFileStream from: start to: end exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/22/2004 15:10'!isLockableFile: aFileStream from: start to: end exclusive: flag	"Pass a struct SQFile on the stack, and check for ability to lock the specified region.	If the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes     may hold  a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock).	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Answer true if the region is lockable."	| fileRegion |	aFileStream ifNil: [^ false].	fileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.	^ self isLockableFileRegion: fileRegion! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'jf 2/22/2004 18:42'!isLockableFileRegion: aFileLock	"Pass a struct SQFile on the stack, and check for ability to lock the specified region.	If the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes     may hold  a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock).	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Answer true if the region is lockable."	aFileLock ifNil: [^ false].	(self canAcquireLock: aFileLock) ifFalse: [^ false].		^ aFileLock test! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 23:09'!isReadable: aPathName	"Answer true if file at aPathName has read permission for this process."	"OSProcess accessor isWritable: '/bin/sh'"	^ self isReadable: aPathName forUser: self primGetUid inGroup: self primGetGid! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 23:00'!isReadable: aPathName forUser: uid inGroup: gid	"Answer true if file at aPathName has read permission for a user	identified by user uid and group gid."	"OSProcess accessor		isReadable: '/bin/sh'		forUser: OSProcess accessor primGetUid		inGroup: OSProcess accessor primGetGid"	| fStat user group protectionMask |	fStat := self fileStat: aPathName.	(fStat isKindOf: String)		ifTrue: [self inform: aPathName, ': ', fStat. ^ nil].	protectionMask := fStat at: 3.	((protectionMask at: 4) allMask: 4)		ifTrue: [^ true]. "Test readable by any user ID"	group := fStat at: 2.	((gid == group) and: [(protectionMask at: 3) allMask: 4])		ifTrue: [^ true]. "Test readable by my group ID"	user := fStat at: 1.	((uid == user) and: [(protectionMask at: 2) allMask: 4])		ifTrue: [^ true]. "Test readable by my user ID"	^ false! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 23:09'!isWritable: aPathName	"Answer true if file at aPathName has write permission for this process."	"OSProcess accessor isWritable: '/bin/sh'"	^ self isWritable: aPathName forUser: self primGetUid inGroup: self primGetGid! !!UnixOSProcessAccessor methodsFor: 'file testing' stamp: 'dtl 5/1/2001 23:08'!isWritable: aPathName forUser: uid inGroup: gid	"Answer true if file at aPathName has read permission for a user	identified by user uid and group gid."	"OSProcess accessor		isWritable: '/bin/sh'		forUser: OSProcess accessor primGetUid		inGroup: OSProcess accessor primGetGid"	| fStat user group protectionMask |	fStat := self fileStat: aPathName.	(fStat isKindOf: String)		ifTrue: [self inform: aPathName, ': ', fStat. ^ nil].	protectionMask := fStat at: 3.	((protectionMask at: 4) allMask: 2)		ifTrue: [^ true]. "Test writable by any user ID"	group := fStat at: 2.	((gid == group) and: [(protectionMask at: 3) allMask: 2])		ifTrue: [^ true]. "Test writable by my group ID"	user := fStat at: 1.	((uid == user) and: [(protectionMask at: 2) allMask: 2])		ifTrue: [^ true]. "Test writable by my user ID"	^ false! !!UnixOSProcessAccessor methodsFor: 'VM atexit' stamp: 'dtl 3/17/2007 18:39'!kill: listOfPids withSignal: signumOrNil	"On exit of the VM process, send signal to the external processes	identified by listOfPids. If signumOrNil is nil, the default SIGTERM	signal will be sent to listOfPids."	^ self primKill: listOfPids withSignal: signumOrNil! !!UnixOSProcessAccessor methodsFor: 'VM atexit' stamp: 'dtl 3/18/2007 10:39'!killOnVmExit: proxies withSignal: signumOrNil	"When Squeak uses OSProcess to start a long running external process, it	may be useful to guarantee that one or more child processes is killed when	the Squeak VM exits, regardless of whether the normal Squeak shutdown	processing has occurred. This method arranges for a collection of external	process proxies to receive a signal when the Squeak VM exits. If signumOrNil	is nil, the default SIGTERM will be used. Each invocation of this method will	override the effects of previous calls."	"OSProcess accessor killOnVmExit: OSProcess thisOSProcess allMyChildren withSignal: nil"	| pids |	pids := (proxies select: [:p | p isRunning] thenCollect: [:e | e pid]) asArray.	^ self kill: pids withSignal: signumOrNil! !!UnixOSProcessAccessor methodsFor: 'debugging' stamp: 'dtl 11/19/2006 09:05'!listSigHandlerAddressesOnConsole	"OSProcess accessor listSigHandlerAddressesOnConsole"	(0 to: 67) do: [:sigNum | | prev |		[prev := OSProcess accessor currentSigHandlerAddress: sigNum.		OSProcess debugMessage: 'signal ', sigNum asString,' hander is ', prev printString]			on: Error			do: [:ex | OSProcess debugMessage: ex printString]]! !!UnixOSProcessAccessor methodsFor: 'debugging' stamp: 'dtl 11/19/2006 09:07'!listSigHandlerAddressesOnTranscript	"OSProcess accessor listSigHandlerAddressesOnTranscript"	Transcript cr.	(0 to: 67) do: [:sigNum | | prev |		[prev := OSProcess accessor currentSigHandlerAddress: sigNum.		Transcript show: 'signal ', sigNum asString,' hander is ', prev printString; cr]			on: Error			do: [:ex | Transcript show: ex printString; cr]]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/14/2004 15:01'!lockFile: aFileStream	"Request an exclusive lock on the entire file represented by aFileStream. The	exclusive lock (write lock) permits only one OS process to hold the lock. Answer	a descriptor for the locked file region, an Array of file handle and region interval;	or answer nil on error.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self lockFile: aFileStream exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/11/2006 23:40'!lockFile: aFileStream exclusive: flag	"Request an exclusive lock on the entire file represented by aFileStream. The	exclusive lock (write lock) permits only one OS process to hold the lock. Answer	a descriptor for the locked file region, an Array of file handle and region interval;	or answer nil on error.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self lockFile: aFileStream exclusive: flag ifFail: nil! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/11/2006 23:39'!lockFile: aFileStream exclusive: flag ifFail: failBlock	"Request an exclusive lock on the entire file represented by aFileStream. The	exclusive lock (write lock) permits only one OS process to hold the lock. Answer	a descriptor for the locked file region, an Array of file handle and region interval;	or answer nil on error.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	| fileLock |	aFileStream ifNil: [^ failBlock value].	fileLock := OSFileLock onFile: aFileStream exclusive: flag.	^ self lockFileRegion: fileLock ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/14/2004 15:01'!lockFile: aFileStream from: start to: end	"Pass a struct SQFile on the stack, and request a lock on the specified region.	If the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes     may hold a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,	an Array of file handle and region interval; or answer nil on error.	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self lockFile: aFileStream from: start to: end exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/22/2004 15:10'!lockFile: aFileStream from: start to: end exclusive: flag	"Pass a struct SQFile on the stack, and request a lock on the specified region.	If the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes     may hold a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,	an Array of file handle and region interval; or answer nil on error.	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	| fileRegion |	aFileStream ifNil: [^ nil].	fileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.	^ self lockFileRegion: fileRegion! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 8/30/2009 14:51'!lockFile: fileStream from: start to: end exclusive: writeLockFlag ifFail: failBlock	| lock |	lock := OSFileRegionLock onFile: fileStream from: start to: end exclusive: writeLockFlag.	^ self lockFileRegion: lock ifFail: [failBlock value]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 11/28/2010 19:07'!lockFile: fileStream from: start to: end ifFail: failBlock	^ self lockFile: fileStream from: start to: end exclusive: true ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/11/2006 23:41'!lockFile: aFileStream ifFail: failBlock	"Request an exclusive lock on the entire file represented by aFileStream. The	exclusive lock (write lock) permits only one OS process to hold the lock. Answer	a descriptor for the locked file region, an Array of file handle and region interval;	or answer nil on error.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self lockFile: aFileStream exclusive: true ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/8/2006 07:04'!lockFileRegion: aFileLock	"Pass a struct SQFile on the stack, and request a lock on the specified region.	If the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes     may hold a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,	an Array of file handle and region interval; or answer nil on error.	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self lockFileRegion: aFileLock ifFail: [nil]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/8/2006 07:03'!lockFileRegion: aFileLock ifFail: failBlock	"Pass a struct SQFile on the stack, and request a lock on the specified region.	If the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes     may hold a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,	an Array of file handle and region interval; or answer nil on error.	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	aFileLock ifNil: [^ failBlock value].	"Check region lock overlap for Win32 compatibility"	(self canAcquireLock: aFileLock) ifFalse: [^ failBlock value].		aFileLock lock		ifFalse: [^ failBlock value]		ifTrue:			[self register: aFileLock.			^ aFileLock]! !!UnixOSProcessAccessor methodsFor: 'pipe open' stamp: 'dtl 1/31/2004 19:08'!makePipeHandles	"Create a pipe, and answer an array of two IO accessors for the pipe 	reader and writer. Set a signal handler to cause SIGPIPE signals to be	ignored. This will register a Semaphore to receive the SIGPIPE events,	but we will simply ignore the semaphore, effectively ignoring the	external OS signals. This is done instead of explicitly telling the OS to	ignore the signals because it allows the use of a uniform signal	forwarding mechanism in Squeak, even for signals that are ultimately	ignored."	self forwardSigPipe.	^ super makePipeHandles! !!UnixOSProcessAccessor methodsFor: 'temp files and directories' stamp: 'dtl 6/3/2013 22:05'!mkdtemp: templateString	"Call mkdtemp() to generate a uniquely named temporary directory from a template	string. The last six or more characters of template must be XXXXXX and these are	replaced with characters that make the directory name unique. The directory is then	created with permissions 0700. Answer the new directory name."	"OSProcess accessor mkdtemp: 'foodir.XXXXXX' "	^self primMkdtemp: templateString! !!UnixOSProcessAccessor methodsFor: 'temp files and directories' stamp: 'dtl 6/3/2013 22:36'!mkstemp: templateString	"Call mkstemp() to generate a unique temporary file from a template string.	The last six or more characters of template must be XXXXXX and these are	replaced with a string that make the filename unique. Contents of the template	string are modified. The file is created with permissions 0600, that is, read plus	write for owner only. Answer an opened file stream on the newly created file."	"OSProcess accessor mkstemp: 'foo.XXXXXX' "	" | s | { s := 'foo.XXXXXX' . OSProcess accessor mkstemp: s } "	| fileName sqFile |	fileName := templateString copy.	sqFile := self primMkstemp: fileName.	^ AttachableFileStream		name: fileName		attachTo: sqFile		writable: true! !!UnixOSProcessAccessor methodsFor: 'temp files and directories' stamp: 'dtl 6/3/2013 21:59'!mktemp: templateString	"Call mktemp() to generate a unique temporary filename from a template string.	The last six or more characters of template must be XXXXXX and these are replaced	with a string that make the filename unique. The templateString must be a mutable	string, because the primitive will change its contents.		Use primitiveMkstemp to avoid file creation race condition, see man 3 mktemp."	"OSProcess accessor mktemp: 'foo.XXXXXX' "	"OSProcess accessor mktemp: '/tmp/foo.XXXXXX' "	^ self primMktemp: templateString! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 10/8/2005 09:55'!nice: inc	"Change the scheduling priority of this OS process by the given nice increment.	A positive increment decreases the priority. Only the superuser can specify	a negative value to increase the priority. A typical use is to increase the	nice value by 1 in order to make the Squeak VM run at lower priority. This	may be useful for a background Squeak doing an image save or other non-	interactive process."	"OSProcess accessor nice: 1"	^ self primNice: inc! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:34'!oldPrimCanConnectToXDisplay: xDisplayName	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Open and close a connection to displayName. It the connection was successfully	opened, answer true; otherwise false. This is intended to check for the ability	to open an X display prior to actually making the attempt."	"OSProcess accessor primCanConnectToXDisplay: ':0.0' "	"OSProcess accessor primCanConnectToXDisplay: ':1' "	<primitive: 'primitiveCanConnectToXDisplay' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:34'!oldPrimGetXDisplayName	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Answer a string containing the name for the X display, or nil if the display was opened	using the $DISPLAY environment variable. This answers the name of the X display as of	the time it was last opened, which may be different from the current setting of $DISPLAY."	"OSProcess accessor primGetXDisplayName"	<primitive: 'primitiveGetXDisplayName' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:35'!oldPrimIsConnectedToXServer	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Answer true if VM is currently connected to an X server."	"OSProcess accessor primIsConnectedToXServer inspect"	"| x |	OSProcess accessor primKillDisplay.	x := OSProcess accessor primIsConnectedToXServer.	OSProcess accessor primOpenXDisplay.	x inspect"	<primitive: 'primitiveIsConnectedToXServer' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:35'!oldPrimKillDisplay	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Call an internal function which will disconnect the X display session."	"OSProcess thisOSProcess processAccessor primKillDisplay"	<primitive: 'primitiveKillDisplay' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:35'!oldPrimOpenXDisplay	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Call an internal function which will open the X display session."	"OSProcess thisOSProcess processAccessor primKillDisplay.	(Delay forSeconds: 5) wait.	OSProcess thisOSProcess processAccessor primOpenXDisplay"	<primitive: 'primitiveOpenXDisplay' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling - old plugin compatibility' stamp: 'dtl 8/3/2003 20:35'!oldPrimSetXDisplayName: aStringOrNil	"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"	"Set the name for the X display for use in the next call to primitiveOpenXDisplay.	aStringOrNil must be either a String (such as 'myhost:0') or nil, indicating that	the current value of $DISPLAY should be used."	"OSProcess accessor primSetXDisplayName: ':0.0' "	"OSProcess accessor primSetXDisplayName: nil "	<primitive: 'primitiveSetXDisplayName' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 11:48'!osppModuleName	"Answer a string containing the module name string for the OSPP plugin."	"OSProcess accessor osppModuleName"	^ self primOSProcessPluginModuleName! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 11:49'!osppModuleVersionString	"Answer a string containing the version string for the OSPP plugin."	"OSProcess accessor osppModuleVersionString"	^ self primOSProcessPluginModuleVersionString! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 10:37'!primAioPluginModuleName	"Answer a string containing the module name string for the AIO plugin."	"OSProcess accessor primAioPluginModuleName"	<primitive: 'primitiveModuleName' module: 'AioPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 10:38'!primAioPluginVersionString	"Answer a string containing the version string for the AIO plugin."	"OSProcess accessor primAioPluginVersionString"	<primitive: 'primitiveVersionString' module: 'AioPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/22/2000 17:19'!primArgumentAt: index	"Answer the argument string in the argument OS process argument list at position index.	In Unix, the first element of the list is the program name, and any additional elements	of the list are optional command line arguments passed to the program. This convention	may be simulated by the C runtime libraries on other operating systems, but argument	list handling should be assumed to be operating system dependent."	<primitive: 'primitiveArgumentAt' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/3/2003 18:26'!primCanConnectToXDisplay: xDisplayName	"Open and close a connection to displayName. It the connection was successfully	opened, answer true; otherwise false. This is intended to check for the ability	to open an X display prior to actually making the attempt."	"OSProcess accessor primCanConnectToXDisplay: ':0.0' "	"OSProcess accessor primCanConnectToXDisplay: ':1' "	<primitive: 'primitiveCanConnectToDisplay' module: 'XDisplayControlPlugin'>	^ self oldPrimCanConnectToXDisplay: xDisplayName! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 2/24/2001 14:28'!primCanReceiveSignals: anIntegerPid	"Answer true if an external OS process can receive signals. In most	cases, if the process identified by anIntegerPid cannot receive signals, it is	because the process does not exist and anIntegerPid is a stale reference (possibly	left over from a previous Squeak session). Answer nil if the primitive does	not exist (possibly because the VM is using an older version of the plugin)."	<primitive: 'primitiveCanReceiveSignals' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 3/31/2001 11:18'!primChdir: pathString	"Change current working directory. Does not update the $PWD environment variable."	<primitive: 'primitiveChdir' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 11/28/2010 12:31'!primCreatePipe	"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)	for the pipe reader and writer."	<primitive: 'primitiveCreatePipe' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 11/28/2010 12:32'!primCreatePipeWithSessionIdentifier: aByteArray	"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)	for the pipe reader and writer."	<primitive: 'primitiveCreatePipeWithSessionIdentifier' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/6/2003 06:24'!primDisconnectDisplay	"Disconnect the X display session. The actual Squeak window on the X server is not	effected, but this instance of Squeak will not have any further interaction with it."	"OSProcess thisOSProcess processAccessor primDisconnectDisplay"	<primitive: 'primitiveDisconnectDisplay' module: 'XDisplayControlPlugin'>	^ self oldPrimKillDisplay! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 9/10/2011 23:28'!primDup: fileDescriptor	"Call dup2 to duplicate a file descriptor to the next available descriptor. Answer	the new file descriptor or -1 on failure."	<primitive: 'primitiveDup' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 5/17/2009 21:57'!primDup: oldFileDescriptor to: newFileDescriptor	"Call dup2() to duplicate a file descriptor. Answer the duplicated file descriptor	or -1 on failure."	<primitive: 'primitiveDupTo' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/22/2000 17:20'!primEnvironmentAt: index	"Answer the environment string at index position in the OS process environment list.	This returns a 'KEY=value' string, which the caller is expected to parse into #KEY	and 'value' to be stored an environment dictionary."	<primitive: 'primitiveEnvironmentAt' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primEnvironmentAtSymbol: aSymbol	"Answer the value of an environment variable in the external OS process."	<primitive: 'primitiveEnvironmentAtSymbol' module: 'UnixOSProcessPlugin'>	^ nil ! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/31/2001 11:03'!primErrorMessageAt: anInteger	"Answer an error message string from the sys:=errlist array, indexed by anInteger."	"OSProcess accessor primErrorMessageAt: 0"	"OSProcess accessor primErrorMessageAt: 100"	"OSProcess accessor primErrorMessageAt: 1000"	"OSProcess accessor primErrorMessageAt: -1"	<primitive: 'primitiveErrorMessageAt' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 4/30/2001 05:49'!primFileProtectionMask: aPathString	"Call stat(2) to obtain the file protection mask for a file. Answer an Array of	four integers representing the protection mask, or answer errno on failure. The	protection mask is four Integers, each of which may be considered an octal digit	(0-7), with bit values 4, 2, and 1. The first digit selects the set user ID (4) and set	group ID (2) and save text image (1) attributes. The second digit selects permissions	for the user who owns the file: read (4), write (2), and execute (1); the third	selects permissions for other users in the file's group, with the same values; and	the fourth for other users not in the file's group, with the same values."	<primitive: 'primitiveFileProtectionMask' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 4/30/2001 20:56'!primFileStat: aPathString	"Call stat(2) to obtain the file protection mask for a file. Answer errno on failure,	or on success answer an array with: UID with: GID with: protectionMask. The		protectionMask is an Array of four integers representing the protection mask, or	answer errno on failure. The protection mask is four Integers, each of which may	be considered an octal digit (0-7), with bit values 4, 2, and 1. The first digit selects	the set user ID (4) and set group ID (2) and save text image (1) attributes. The second	digit selects permissions for the user who owns the file: read (4), write (2), and	execute (1); the third selects permissions for other users in the file's group, with	the same values; and the fourth for other users not in the file's group, with the	same values."	<primitive: 'primitiveFileStat' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/24/2003 10:13'!primFlushXDisplay	"Call an internal function to synchronize output to the X display."	"OSProcess thisOSProcess processAccessor primFlushXDisplay"	<primitive: 'primitiveFlushDisplay' module: 'XDisplayControlPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 11/28/2010 12:35'!primForkExec: executableFile	stdIn: inputFileHandle	stdOut: outputFileHandle	stdErr: errorFileHandle	argBuf: argVec	argOffsets: argOffsets	envBuf: envVec	envOffsets: envOffsets	workingDir: pathString	"Parameters are expected to have been properly prepared by the caller, including string	values which are to be null terminated strings. In other words, all strings should have	(Character value: 0) as the last element in the string.	Parameters should be:		executableFile: a string with the name of a file to execute.		stdIn: a fileID ByteArray (struct SQFile in C) to be used as standard input.		stdOut: a fileID ByteArray to be used as standard output.		stdErr: a fileID ByteArray to be used as standard error.		argVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.		argOffsets: an Array of offsets for fixing up the argVec addresses.		envVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.		envOffsets: an Array of offsets for fixing up the envVec addresses.		workingDir: a null terminated path name String, or nil.	The envVec parameter may be nil, in which case envOffsets is ignored. workingDir may be nil. The	other parameters are required. Parameters with nil value indicate that current values for this process	should be used."	<primitive: 'primitiveForkExec' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 11/28/2010 12:37'!primForkSqueak	"Clone this Squeak Smalltalk image in a child OSProcess. The child is the same as the	parent, except for its new X session connection, and the return value of this method,	which is zero for the child process, and a positive integer equal to the pid of the child	for the parent process.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	<primitive: 'primitiveForkSqueakWithoutSigHandler' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 8/3/2002 20:29'!primForwardSignal: signalNumber toSemaphore: semaphoreIndex	"Set a signal handler in the VM which will signal a Smalltalk semaphore at	semaphoreIndex whenever an external signal sigNum is received. Answer the	prior value of the signal handler. If semaphoreIndex is zero, the handler is	unregistered, and the VM returns to its default behavior for handling that	signal.	The Smalltalk semaphore is expected to be kept at the same index location	indefinitely during the lifetime of a Squeak session. If that is not the case, the	handler must be unregistered prior to unregistering the Smalltalk semaphore."	<primitive: 'primitiveForwardSignalToSemaphore' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 10/14/2001 11:15'!primGetChildExitStatus: childPid	"Clean up after the death of a child process, and answer the exit status of the child process."	<primitive: 'primitiveReapChildProcess' module: 'UnixOSProcessPlugin'>	^ Array with: childPid with: nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/22/2000 17:20'!primGetCurrentWorkingDirectory	"Call getcwd() to get the current working directory."	"OSProcess thisOSProcess processAccessor primGetCurrentWorkingDirectory"	<primitive: 'primitiveGetCurrentWorkingDirectory' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 4/30/2001 21:07'!primGetEGid	"Answer the effective group ID for the OS process in which I am currently executing."	"OSProcess accessor primGetEGid"	<primitive: 'primitiveGetEGid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 4/30/2001 21:01'!primGetEUid	"Answer the effective user ID for the OS process in which I am currently executing."	"OSProcess accessor primGetEUid"	<primitive: 'primitiveGetEUid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 4/30/2001 21:01'!primGetGid	"Answer the group ID for the OS process in which I am currently executing."	"OSProcess accessor primGetGid"	<primitive: 'primitiveGetGid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/15/2007 19:43'!primGetPGid: pid	"Answer the process group ID of the process identified by pid"	<primitive: 'primitiveGetPGid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/15/2007 19:39'!primGetPGrp	"Answer the process group ID of this OS process"	<primitive: 'primitiveGetPGrp' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/22/2000 17:20'!primGetPPid	"Answer the OS process ID for the parent process of the OS process in which I am	currently executing."	<primitive: 'primitiveGetPPid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 7/22/2000 17:20'!primGetPid	"Answer the OS process ID for the OS process in which I am currently executing."	<primitive: 'primitiveGetPid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/2/2002 08:15'!primGetSession	"Answer the unique identifier for this session of Smalltalk running in this OS Process."	"OSProcess accessor primGetSession"	<primitive: 'primitiveGetSession' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primGetStdErrHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard error for the	OS process in which I am currently executing."	<primitive: 'primitiveGetStdErrHandle' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primGetStdInHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard input for	the OS process in which I am currently executing."	<primitive: 'primitiveGetStdInHandle' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primGetStdOutHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard output for the	OS process in which I am currently executing."	<primitive: 'primitiveGetStdOutHandle' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'pthreads' stamp: 'dtl 3/5/2006 10:51'!primGetThreadID	"Answer the ID of the pthread that is currently executing (the interpreter thread).	A thread ID may be a 64 bit value on some platforms, so answer a byte array	containing the value in machine-dependent byte order."	"OSProcess accessor primGetThreadID"	<primitive: 'primitiveGetThreadID' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 4/30/2001 21:00'!primGetUid	"Answer the user ID for the OS process in which I am currently executing."	"OSProcess accessor primGetUid"	<primitive: 'primitiveGetUid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/3/2003 18:27'!primGetXDisplayName	"Answer a string containing the name for the X display, or nil if the display was opened	using the $DISPLAY environment variable. This answers the name of the X display as of	the time it was last opened, which may be different from the current setting of $DISPLAY."	"OSProcess accessor primGetXDisplayName"	<primitive: 'primitiveGetDisplayName' module: 'XDisplayControlPlugin'>	^ self oldPrimGetXDisplayName! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/3/2003 18:29'!primIsConnectedToXServer	"Answer true if VM is currently connected to an X server."	"OSProcess accessor primIsConnectedToXServer inspect"	"| x |	OSProcess accessor primKillDisplay.	x := OSProcess accessor primIsConnectedToXServer.	OSProcess accessor primOpenXDisplay.	x inspect"	<primitive: 'primitiveIsConnectedToDisplay' module: 'XDisplayControlPlugin'>	^ self oldPrimIsConnectedToXServer! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 3/18/2007 10:35'!primKill: listOfPids withSignal: signumOrNil	"Set a list of pids to kill with signum when VM exits. If the signum	parameter is nil, the default value of SIGTERM will be used."	<primitive: 'primitiveKillOnExit' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/6/2003 06:22'!primKillDisplay	"Disconnect the X display session and destroy the Squeak window on the X display."	"OSProcess thisOSProcess processAccessor primKillDisplay"	<primitive: 'primitiveKillDisplay' module: 'XDisplayControlPlugin'>	^ self oldPrimKillDisplay! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 1/3/2004 19:59'!primLockFileRegion: aSQFileStruct offset: begin length: len exclusive: flag	"Pass a struct SQFile on the stack, and request a lock on the specified region.	If the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes     may  hold  a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock). Answer the result of the call to fcntl()."	<primitive: 'primitiveLockFileRegion' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 6/1/2013 17:14'!primMkdtemp: templateString	"Call mkdtemp() to generate a uniquely named temporary directory from a template	string. The last six characters of template must be XXXXXX and these are replaced	with characters that make the directory name unique. The directory is then created	with permissions 0700. Answer the new directory name."	<primitive: 'primitiveMkdtemp' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 6/3/2013 22:33'!primMkstemp: templateString	"Call mkstemp() to generate a unique temporary file from a template string.	The last six characters of template must be XXXXXX and these are replaced with	a string that make the filename unique. Answer a SQFile descriptor for the file stream.		Contents of the template string are modified, and provide the name of the newly	created file.	The  file  is  created  with permissions 0600, that is, read plus write for owner only.	Sender must convert the file descriptor to a FileStream before it can be used."	<primitive: 'primitiveMkstemp' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 6/1/2013 17:14'!primMktemp: templateString	"Call mktemp() to generate a unique temporary filename from a template string.	The last six characters of template must be XXXXXX and these are replaced with	a string that make the filename unique. The templateString must be a mutable	string, because the primitive will change its contents.		Use primitiveMkstemp to avoid file creation race condition, see man 3 mktemp."	<primitive: 'primitiveMktemp' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 10/8/2005 09:55'!primNice: inc	"Change the scheduling priority of this OS process by the given nice increment."	<primitive: 'primitiveNice' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 11:48'!primOSProcessPluginModuleName	"Answer a string containing the module name string for the OSPP plugin."	"OSProcess accessor primOSProcessPluginModuleName"	<primitive: 'primitiveModuleName' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 11:48'!primOSProcessPluginModuleVersionString	"Answer a string containing the version string for the OSPP plugin."	"OSProcess accessor primOSProcessPluginModuleVersionString"	<primitive: 'primitiveVersionString' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/3/2003 18:31'!primOpenXDisplay	"Call an internal function which will open the X display session."	"OSProcess thisOSProcess processAccessor primKillDisplay.	(Delay forSeconds: 5) wait.	OSProcess thisOSProcess processAccessor primOpenXDisplay"	<primitive: 'primitiveOpenDisplay' module: 'XDisplayControlPlugin'>	^ self oldPrimOpenXDisplay! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 7/19/2010 23:38'!primPrintAllStacksOnSignal: signalNumber	"Set a signal handler in the VM which will print all call stacks on the console	output whenever an external signal sigNum is received. Answer the	prior value of the signal handler."	"OSProcess accessor primPrintAllStacksOnSignal: OSProcess accessor primSigUsr1Number"	"OSProcess accessor primForwardSignal: OSProcess accessor primSigUsr1Number toSemaphore: nil"	<primitive: 'primitivePrintAllStacksOnSignal' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primPutEnv: aString	"Add or update an environment variable in the external OS process using a 'KEY=value'	string."	<primitive: 'primitivePutEnv' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 3/31/2001 15:44'!primRealpath: pathString	"Resolve pathString into a real path if possible, or answer nil."	<primitive: 'primitiveRealpath' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:28'!primSQFileFlush: aSQFileStruct	"Pass a struct SQFile on the stack, flush the external file stream."	<primitive: 'primitiveSQFileFlush' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:29'!primSQFileSetBlocking: aSQFileStruct	"Pass a struct SQFile on the stack, and call fcntl() to set the file non-blocking."	<primitive: 'primitiveSQFileSetBlocking' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:29'!primSQFileSetNonBlocking: aSQFileStruct	"Pass a struct SQFile on the stack, and call fcntl() to set the file non-blocking."	<primitive: 'primitiveSQFileSetNonBlocking' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 7/22/2000 17:29'!primSQFileSetUnbuffered: aSQFileStruct	"Pass a struct SQFile on the stack, set the file non-blocking."	<primitive: 'primitiveSQFileSetUnbuffered' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 8/4/2002 01:13'!primSemaIndexFor: sigNum	"Answer the registration index of the semaphore currently associated with the	signal handler for sigNum."	<primitive: 'primitiveSemaIndexFor' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:24'!primSendSigabrtTo: anIntegerPid	"Send SIGABRT (abort) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigabrtTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:24'!primSendSigalrmTo: anIntegerPid	"Send SIGALRM (alarm) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigalrmTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:24'!primSendSigchldTo: anIntegerPid	"Send SIGCHLD (child status has changed, usually death of child) to the OS process	identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigchldTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigcontTo: anIntegerPid	"Send SIGCONT (continue) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigcontTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSighupTo: anIntegerPid	"Send SIGHUP (hangup) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSighupTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigintTo: anIntegerPid	"Send SIGINT (interrupt) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigintTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigkillTo: anIntegerPid	"Send SIGKILL (kill, unblockable) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigkillTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigpipeTo: anIntegerPid	"Send SIGPIPE (broken pipe) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigpipeTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigquitTo: anIntegerPid	"Send SIGQUIT (quit) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigquitTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:25'!primSendSigstopTo: anIntegerPid	"Send SIGSTOP (stop, unblockable) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigstopTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:26'!primSendSigtermTo: anIntegerPid	"Send SIGTERM (termination) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigtermTo' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:26'!primSendSigusr1To: anIntegerPid	"Send SIGUSR1 (User-defined signal 1) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigusr1To' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'OS signal sending' stamp: 'dtl 7/22/2000 17:26'!primSendSigusr2To: anIntegerPid	"Send SIGUSR2 (User-defined signal 2) to the OS process identified by anIntegerPid.	Answer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."	<primitive: 'primitiveSendSigusr2To' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/15/2007 19:47'!primSet: pid pGid: processGroupId	"Set the process group ID of the process identified by pid to a new process	group ID."	<primitive: 'primitiveSetPGid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/15/2007 19:40'!primSetPGrp	"Set a new process group for this OS process. Newly created child processes	will be members of the new process group."	<primitive: 'primitiveSetPGrp' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/18/2007 10:50'!primSetSid	"Quoted from Linux man pages:	setsid() creates a new session if the calling process is not a process group leader.	The calling process is the leader of the new session, the process  group  leader  of	the new process group, and has no controlling tty.  The process group ID and session	ID of the calling process are set to the PID of the calling  process.   The  calling	process  will be the only process in this new process group and in this new session."	<primitive: 'primitiveSetSid' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'display handling' stamp: 'dtl 8/3/2003 18:32'!primSetXDisplayName: aStringOrNil	"Set the name for the X display for use in the next call to primitiveOpenXDisplay.	aStringOrNil must be either a String (such as 'myhost:0') or nil, indicating that	the current value of $DISPLAY should be used."	"OSProcess accessor primSetXDisplayName: ':0.0' "	"OSProcess accessor primSetXDisplayName: nil "	<primitive: 'primitiveSetDisplayName' module: 'XDisplayControlPlugin'>	^ self oldPrimSetXDisplayName: aStringOrNil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 8/3/2002 20:36'!primSigChldNumber	"Integer value corresponding to SIGCHLD"	<primitive: 'primitiveSigChldNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 12/6/2002 18:04'!primSigHupNumber	"Integer value corresponding to SIGHUP"	<primitive: 'primitiveSigHupNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 8/4/2002 00:19'!primSigIntNumber	"Integer value corresponding to SIGINT"	"OSProcess accessor primSigIntNumber"	<primitive: 'primitiveSigIntNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 12/6/2002 18:05'!primSigKillNumber	"Integer value corresponding to SIGKILL"	"OSProcess accessor primSigKillNumber"	<primitive: 'primitiveSigKillNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 8/3/2002 20:35'!primSigPipeNumber	"Integer value corresponding to SIGPIPE"	<primitive: 'primitiveSigPipeNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 12/6/2002 18:06'!primSigQuitNumber	"Integer value corresponding to SIGQUIT"	<primitive: 'primitiveSigQuitNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 12/6/2002 18:06'!primSigTermNumber	"Integer value corresponding to SIGTERM"	<primitive: 'primitiveSigTermNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 11/4/2005 06:41'!primSigUsr1Number	"Integer value corresponding to SIGUSR1"	<primitive: 'primitiveSigUsr1Number' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - signal forwarding' stamp: 'dtl 11/4/2005 06:42'!primSigUsr2Number	"Integer value corresponding to SIGUSR2"	<primitive: 'primitiveSigUsr2Number' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 8/7/2005 12:33'!primSizeOfInt	"Size of an integer for this C compiler on this machine."	<primitive: 'primitiveSizeOfInt' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 8/7/2005 12:33'!primSizeOfPointer	"Size of a void pointer for this C compiler on this machine."	<primitive: 'primitiveSizeOfPointer' module: 'UnixOSProcessPlugin'>	^ self primitiveFailed! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 11/28/2010 14:06'!primTestEndOfFileFlag: aSqFileStruct	"Answer whether the file represented by aSqFileStruct is at end of file, as determined	by a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers	true if the file pointer is at the end of the file, but which does not call feof() to	determine that an end of file condition has occurred. The difference is significant	if aSqFileStruct represents a pipe or a device file, which may not be positionable	in the sense of a conventional disk file."	<primitive: 'primitiveTestEndOfFileFlag' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 1/4/2004 15:29'!primTestLockableFileRegion: aSQFileStruct offset: begin length: len exclusive: flag	"Pass a struct SQFile on the stack, and check for ability to lock the specified region.	If the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes     may hold  a read lock (shared lock) on a file region, but only one process may     hold a write lock (exclusive lock).	If length is zero, then the request is for the entire file to be locked, including	region extents that have not yet been allocated for the file.	If the fcntl() call fails, answer -1 (the result of the failed call). Otherwise,	answer an array with the following six fields:		lockable (true or false)		l:=pid (pid of the process preventing this lock request, or nil)		l:=type (request type F:=WRLCK or F:=RDLOCK of the process preventing this lock request)		l:=whence (the SEEK:=SET, SEEK:=CUR, or SEEK:=END value of the lock preventing this lock request).		l:=start (offset of the region lock preventing this lock request)		l:=len (length of the region lock preventing this lock request)"	<primitive: 'primitiveTestLockableFileRegion' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 5/17/2009 21:07'!primUnixFileClose: integerFileNumber	"Close a file handle at the close(2) level, using a handle returned by	#primUnixFileNumber."	<primitive: 'primitiveUnixFileClose' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 2/11/2001 16:23'!primUnixFileNumber: aSQFileStruct	"Pass a struct SQFile on the stack, and answer the corresponding Unix file number."	<primitive: 'primitiveUnixFileNumber' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 1/3/2004 23:08'!primUnlockFileRegion: aSQFileStruct offset: begin length: len	"Pass a struct SQFile on tthe stack, and unlock the specified region.	Answer the result of the call to fcntl(). If the region is in the file lock cache,	remove it, but otherwise ignore the cache. The cache supports Win32 semantics	within a single Squeak image, but not across separate images, therefore the	unlock should be attempted regardless of whether this image thinks that the	region has previously been locked. Answer the result of the call to fcntl()."	<primitive: 'primitiveUnlockFileRegion' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/7/2001 00:37'!primUnsetEnv: aKeyString	"Remove an environment variable from the external OS process environment."	<primitive: 'primitiveUnsetEnv' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 8/30/2003 18:29'!primXDisplayControlPluginModuleName	"Answer a string containing the module name string for the display control plugin."	"OSProcess accessor primXDisplayControlPluginModuleName"	<primitive: 'primitiveModuleName' module: 'XDisplayControlPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 8/30/2003 18:32'!primXDisplayControlPluginModuleVersionString	"Answer a string containing the version string for the display control plugin."	"OSProcess accessor primXDisplayControlPluginModuleVersionString"	<primitive: 'primitiveVersionString' module: 'XDisplayControlPlugin'>	^ nil! !!UnixOSProcessAccessor methodsFor: 'printing' stamp: 'dtl 9/10/2000 10:16'!printOn: aStream	"In English, say 'a Unix' rather than 'an Unix'. Therefore do not use super printOn, which	treats $U as a vowel."	aStream		nextPutAll: 'a ';		nextPutAll: self class name;		nextPutAll: ' on pid ';		nextPutAll: self primGetPid printString! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 9/10/2000 11:59'!putPath: aString	"Convenience method. Set the environment PATH variable to aString."	| pathString |	pathString := 'PATH=', aString, ((Character value: 0) asString). 	^ self environmentPut: pathString! !!UnixOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 1/25/2013 18:59'!realpath: pathString	"Get the real path for pathString from the external OS process."	"OSProcess accessor realpath: '/tmp'"	"OSProcess accessor realpath: OSProcess defaultPathString"	"OSProcess accessor realpath: '/bogus/path/name'"	^ self primRealpath: pathString! !!UnixOSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 3/5/2005 13:10'!register: fileRegionLock	"If an object equal to fileRegionLock exists in the registry, answer it. Otherwise, add	fileRegionLock to the registry and answer fileRegionLock. Caching is enabled when	EmulateWin32FileLocking is true."	^ self emulateWin32FileLocking		ifTrue: [super register: fileRegionLock]		ifFalse: [fileRegionLock]! !!UnixOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 8/15/2010 15:30'!restartChildWatcherProcess	"OSProcess accessor restartChildWatcherProcess"	self finalize.	^ self grimReaperProcess! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:45'!restoreSigChld	"Unset a SIGCHLD signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigChld"	^ self restoreSignal: self primSigChldNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:47'!restoreSigHup	"Unset a SIGHUP signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigHup"	^ self restoreSignal: self primSigHupNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:46'!restoreSigInt	"Unset a SIGINT signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigInt"	^ self restoreSignal: self primSigIntNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:48'!restoreSigKill	"Unset a SIGKILL signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigKill"	self notify: 'SIGKILL and SIGSTOP signals cannot be caught, see man signal(2)'.	^ self restoreSignal: self primSigIntNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:48'!restoreSigPipe	"Unset a SIGPIPE signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigPipe"	^ self restoreSignal: self primSigPipeNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:49'!restoreSigQuit	"Unset a SIGQUIT signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigQuit"	^ self restoreSignal: self primSigQuitNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:49'!restoreSigTerm	"Unset a SIGTERM signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigTerm"	^ self restoreSignal: self primSigTermNumber! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:49'!restoreSigUsr1	"Unset a SIGUSR1 signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigUsr1"	^ self restoreSignal: self primSigUsr1Number! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 11/4/2005 06:50'!restoreSigUsr2	"Unset a SIGUSR2 signal handler and unregister the Smalltalk semaphore.	Answer the unregistered Semaphore, or nil if unable to restore the signal	(possibly because no handler had been set)."	"OSProcess accessor restoreSigUsr2"	^ self restoreSignal: self primSigUsr2Number! !!UnixOSProcessAccessor methodsFor: 'signal forwarding' stamp: 'dtl 12/28/2002 15:33'!restoreSignal: signalNumber 	"Unset a signal handler and unregister the Smalltalk semaphore. Answer	the unregistered Semaphore, or nil if unable to restore the signal (possibly	because no handler had been set)."	"OSProcess accessor restoreSignal: OSProcess accessor primSigIntNumber"	| semaphoreIndex sema |	semaphoreIndex := self primSemaIndexFor: signalNumber.	semaphoreIndex ifNotNil:		[sema := Smalltalk externalObjects at: semaphoreIndex ifAbsent: [].		sema ifNotNil:			[self primForwardSignal: signalNumber toSemaphore: nil.			Smalltalk unregisterExternalObject: sema]].	^ sema! !!UnixOSProcessAccessor methodsFor: 'fork and exec' stamp: 'dtl 8/18/2014 20:16'!safeToForkSqueak	"The forkSqueak method is currently supported only for X11 displays with	XDisplayControlPlugin available. If the plugin is not available, the child Squeak	VM will continue interacting with the X display, which leads to errors in the	parent Squeak, including VM crashes."	^self canControlXDisplay		or: [ ThisOSProcess isHeadless ]! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 11/28/2010 12:15'!setBlocking: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set for blocking I/O."	^ self primSQFileSetBlocking: (self handleFromAccessor: anIOHandle)! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 11/28/2010 12:16'!setNonBlocking: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."	^ self primSQFileSetNonBlocking: (self handleFromAccessor: anIOHandle)! !!UnixOSProcessAccessor methodsFor: 'signal print stack trace' stamp: 'dtl 7/20/2010 00:07'!setPrintAllStacksOnSigUsr1	"Set a signal handler in the VM that will print all call stacks on console output	whenever a SIGUSR1 is received. Answer an identifier for the previously	defined signal handler or nil if this signal handler has already been set."		"OSProcess accessor setPrintAllStacksOnSigUsr1"	"OSProcess accessor clearPrintAllStacksOnSigUsr1"	^self primPrintAllStacksOnSignal: self primSigUsr1Number	! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 11/28/2010 12:17'!setUnbuffered: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set unbuffered I/O."	^ self primSQFileSetUnbuffered: (self handleFromAccessor: anIOHandle)! !!UnixOSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 1/25/2004 21:31'!sigChldSemaphore	"Answer the value of sigChldSemaphore"	^ sigChldSemaphore ifNil: [sigChldSemaphore := self forwardSigChld].! !!UnixOSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 1/25/2004 21:29'!sigChldSemaphore: anObject	"Set the value of sigChldSemaphore"	sigChldSemaphore := anObject! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 3/25/2001 15:34'!sizeOfInt	"Size of an integer on this machine with this C compiler."	^ self primSizeOfInt! !!UnixOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 3/25/2001 20:55'!sizeOfPointer	"Size of a void pointer on this machine with this C compiler."	^ self primSizeOfPointer! !!UnixOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 10/6/2001 07:27'!unixFileNumber: anIOHandle	"Answer the integer Unix file number corresponding to anIOHandle."	^ anIOHandle ifNotNil: [self primUnixFileNumber: (self handleFromAccessor: anIOHandle)]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 4/10/2005 15:17'!unlockAllForFile: aFileStream	"Unlock and uncache all locks associated with aFileStream.  This could be called	before closing a stream, for example."	(self registeredLocksForFile: aFileStream) do: [:ea | self unlockFileRegion: ea]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/22/2004 15:02'!unlockFile: aFileStream	"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked	file region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self unlockFile: aFileStream exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'jf 2/22/2004 17:30'!unlockFile: aFileStream exclusive: flag	"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked	file region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	| fileLock |	aFileStream ifNil: [^ nil].	fileLock := OSFileLock onFile: aFileStream exclusive: flag.	^ self unlockFileRegion: fileLock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/12/2006 07:05'!unlockFile: aFileStream exclusive: flag ifFail: failBlock	"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked	file region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	| fileLock |	aFileStream ifNil: [^ failBlock value].	fileLock := OSFileLock onFile: aFileStream exclusive: flag.	^ self unlockFileRegion: fileLock ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/22/2004 15:01'!unlockFile: aFileStream from: start to: end	"Pass a struct SQFile on the stack, and unlock the specified region.	Answer the result of the call to fcntl(). If the region is in the file lock cache,	remove it, but otherwise ignore the cache. The cache supports Win32 semantics	within a single Squeak image, but not across separate images, therefore the	unlock should be attempted regardless of whether this image thinks that the	region has previously been locked. Answer a descriptor for the unlocked file	region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self unlockFile: aFileStream from: start to: end exclusive: true! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 2/22/2004 15:09'!unlockFile: aFileStream from: start to: end exclusive: flag	"Pass a struct SQFile on the stack, and unlock the specified region.	Answer the result of the call to fcntl(). If the region is in the file lock cache,	remove it, but otherwise ignore the cache. The cache supports Win32 semantics	within a single Squeak image, but not across separate images, therefore the	unlock should be attempted regardless of whether this image thinks that the	region has previously been locked. Answer a descriptor for the unlocked file	region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	| fileRegion |	aFileStream ifNil: [^ nil].	fileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.	^ self unlockFileRegion: fileRegion! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 8/30/2009 14:54'!unlockFile: fileStream from: start to: end exclusive: writeLockFlag ifFail: failBlock	| lock |	lock := OSFileRegionLock onFile: fileStream from: start to: end exclusive: writeLockFlag.	^ self unlockFileRegion: lock ifFail: [failBlock value]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 8/30/2009 16:25'!unlockFile: fileStream from: start to: end ifFail: failBlock	^ self unlockFile: fileStream from: start to: end exclusive: true ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/12/2006 07:06'!unlockFile: aFileStream ifFail: failBlock	"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked	file region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self unlockFile: aFileStream exclusive: true ifFail: failBlock! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/8/2006 07:12'!unlockFileRegion: aFileLock	"Pass a struct SQFile on the stack, and unlock the specified region.	Answer the result of the call to fcntl(). If the region is in the file lock cache,	remove it, but otherwise ignore the cache. The cache supports Win32 semantics	within a single Squeak image, but not across separate images, therefore the	unlock should be attempted regardless of whether this image thinks that the	region has previously been locked. Answer a descriptor for the unlocked file	region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	^ self unlockFileRegion: aFileLock ifFail: [nil]! !!UnixOSProcessAccessor methodsFor: 'file locking' stamp: 'dtl 5/20/2006 12:46'!unlockFileRegion: aFileLock ifFail: failBlock	"Pass a struct SQFile on the stack, and unlock the specified region.	Answer the result of the call to fcntl(). If the region is in the file lock cache,	remove it, but otherwise ignore the cache. The cache supports Win32 semantics	within a single Squeak image, but not across separate images, therefore the	unlock should be attempted regardless of whether this image thinks that the	region has previously been locked. Answer a descriptor for the unlocked file	region, an Array of file handle and region interval; or answer nil on error	or if the region did not appear in the cache.	Warning: The registry permits compatibility with Win32 file locking semantics,	but only within a single Squeak image. Multiple cooperating images must not	rely on the overlap checking, because the registry is local to this image and	cannot be shared across images in different OS process contexts."	aFileLock ifNil: [^ failBlock value].	"Check region lock overlap for Win32 compatibility"	self emulateWin32FileLocking		ifTrue: [ | unregisteredLock |				(unregisteredLock := self unregister: aFileLock)					ifNil: [^ failBlock value]					ifNotNil: [unregisteredLock unlock						ifTrue: [^ unregisteredLock]						ifFalse: [^ failBlock value]]]		ifFalse: [aFileLock unlock					ifTrue: [^ aFileLock]					ifFalse: [^ failBlock value]]! !!UnixOSProcessAccessor methodsFor: 'file lock registry' stamp: 'dtl 3/5/2005 13:10'!unregister: fileRegionLock	"If an object equal to fileRegionLock exists in the registry, remove it and	answer the object. Otherwise answer nil. Caching is enabled when	EmulateWin32FileLocking is true."	^ self emulateWin32FileLocking		ifTrue: [super unregister: fileRegionLock]		ifFalse: [nil]! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:45'!xdcpModuleName	"Answer a string containing the module name string for the display control plugin."	"OSProcess accessor xdcpModuleName"	^ self primXDisplayControlPluginModuleName! !!UnixOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 10:46'!xdcpVersionString	"Answer a string containing the version string for the display control plugin."	"OSProcess accessor xdcpVersionString"	^ self primXDisplayControlPluginModuleVersionString! !!WindowsOSProcessAccessor commentStamp: '<historical>' prior: 34393548!I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Win32 process model for Windows and Windows NT.!!WindowsOSProcessAccessor class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:50'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for the	Squeak VM running on the current platform."	^ OSProcess isWindows! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/26/2002 16:11'!activeHandles	"Answer an Array of handles for all children that are believed to be running."	^ OSProcess thisOSProcess activeHandles! !!WindowsOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 9/10/2002 09:24'!canAccessChildProcess: anExternalProcess	"Is the child process still there? Maybe not if we have restarted the image	and anExternalProcess refers to a process which died while we were not	watching."	| handle |	^ (handle := anExternalProcess handle) notNil		ifTrue: [self primCanAccessChildProcess: handle]		ifFalse: [false]! !!WindowsOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 2/22/2002 22:17'!canAccessSystem	"Answer true if it is possible to access the external process, else false. Failure	to access the external process is probably due to lack of a UnixOSProcessPlugin	module."	^ self primGetPid notNil! !!WindowsOSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 2/27/2002 11:56'!childWatcherThread	"A thread which signals my sigChldSemaphore when any child process exits."	^ childWatcherThread! !!WindowsOSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 2/27/2002 11:44'!childWatcherThread: aThreadObject	"A thread which signals my sigChldSemaphore when any child process exits."	childWatcherThread := aThreadObject! !!WindowsOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 2/26/2002 08:43'!finalize	"Clean up grimReaper and associated semaphore."	grimReaper ifNotNil:			[grimReaper terminate.			grimReaper := nil].	sigChldSemaphore ifNotNil:			[Smalltalk unregisterExternalObject: sigChldSemaphore.			sigChldSemaphore := nil].	semaIndex := nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/27/2002 13:22'!getMainThread	"Answer the main thread of this OS process. The handle for this thread is a	pseudo-handle, and cannot be used to terminate the thread."	"OSProcess accessor getMainThread"	^ WindowsThread threadID: self primGetPid handle: self primGetPidHandle running: true! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:09'!getStdErr	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	error for the OS process in which I am currently executing, or nil if the IO handle	cannot be obtained."	"OSProcess accessor getStdErr"	| error |	error := self primGetStdErrorForSession: self sessionIdentifier.	^ (error notNil and: [error last])		ifTrue: [self ioAccessorFromSQFile: error first]		ifFalse: [nil]! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:11'!getStdErrHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard error for the	OS process in which I am currently executing."	^ self ioAccessorFromSQFile: self getStdErr! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:11'!getStdIn	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	input for the OS process in which I am currently executing, or nil if the IO handle	cannot be obtained."	"OSProcess accessor getStdIn"	| input |	input := self primGetStdInputForSession: self sessionIdentifier.	^ (input notNil and: [input last])		ifTrue: [self ioAccessorFromSQFile: input first]		ifFalse: [nil]! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:10'!getStdInHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard input for the	OS process in which I am currently executing."	^ self ioAccessorFromSQFile: self getStdIn! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:11'!getStdOut	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	output for the OS process in which I am currently executing, or nil if the IO handle	cannot be obtained."	"OSProcess accessor getStdOut"	| output |	output := self primGetStdOutputForSession: self sessionIdentifier.	^ (output notNil and: [output last])		ifTrue: [self ioAccessorFromSQFile: output first]		ifFalse: [nil]! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/25/2005 16:09'!getStdOutHandle	"Answer the handle (a SQFile data structure in interp.c) for the standard output for the	OS process in which I am currently executing."	^ self ioAccessorFromSQFile: self getStdOut! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 9/3/2010 13:13'!grimReaperProcess	"This is a process which waits for the death of a child OSProcess, and 	informs any dependents of the change."	grimReaper ifNil: [grimReaper := [				[self sigChldSemaphoreSet wait.				self changed: #childProcessStatus] repeat] newProcess.				grimReaper resume.				"name selected to look reasonable in the process browser"				grimReaper name: ((ReadStream on: grimReaper hash asString) next: 5)						, ': the child OSProcess watcher'].	^ grimReaper! !!WindowsOSProcessAccessor methodsFor: 'initialize - release' stamp: 'dtl 3/2/2002 08:33'!initialize	"Create and register a semaphore to be used for signaling external process exits"	super initialize.	self sigChldSemaphoreSet.	self grimReaperProcess! !!WindowsOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 9/26/2005 07:45'!isExecutable: aPathName	"Answer true if file at aPathName has execute permission for this process."	"FIXME: Default to true for Windows"	^ true! !!WindowsOSProcessAccessor methodsFor: 'nonblocking read' stamp: 'dtl 10/1/2005 09:26'!lastReadFor: aSemaphoreIndex	"A character has been read into an external buffer corresponding to aSemaphoreIndex,	and is now available. Answer integer value of the character, or nil if no character	was read, or -1 if an error occurred on the read."	| c readResult |	readResult := Array new: 3.	c := self primLastReadFor: aSemaphoreIndex storeIn: readResult.	(c < 1) ifTrue: [self error: 'primLastReadFor: error, returned negative value'].	^ c! !!WindowsOSProcessAccessor methodsFor: 'nonblocking read' stamp: 'dtl 10/1/2005 09:26'!lastReadFor: aSemaphoreIndex storeIn: aThreeElementArray	"A character has been read into an external buffer corresponding to aSemaphoreIndex,	and is now available. Answer integer value of the character, or nil if no character	was read, or -1 if an error occurred on the read. The results of the read call are	stored in aThreeElementArray as a side effect."	^ self primLastReadFor: aSemaphoreIndex storeIn: aThreeElementArray! !!WindowsOSProcessAccessor methodsFor: 'nonblocking read' stamp: 'dtl 4/1/2002 11:02'!nextFrom: aFileStream signaling: aSemaphoreIndex	"Read the next character from aFileStream into a buffer in the VM. When the read completes,	signal the specified Semaphore to notify that the character is available."	| sqFile |	sqFile := UseIOHandle				ifTrue: [aFileStream ioHandle handle]				ifFalse: [aFileStream fileID].	^ self primNextFrom: sqFile signaling: aSemaphoreIndex! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:03'!openStdErr	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	error for the OS process in which I am currently executing. Open a console if necessary	to make standard error available."	"OSProcess accessor openStdErr"	| error |	error := self primGetStdErrorForSession: self sessionIdentifier.	error ifNil: [^ nil].	error last		ifFalse:			[self primAllocConsole.			error := self primGetStdOutputForSession: self sessionIdentifier].	^ self ioAccessorFromSQFile: error first! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:04'!openStdIn	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	input for the OS process in which I am currently executing. Open a console if necessary	to make standard input available."	"OSProcess accessor openStdIn"	| input |	input := self primGetStdInputForSession: self sessionIdentifier.	input ifNil: [^ nil].	input last		ifFalse:			[self primAllocConsole.			input := self primGetStdOutputForSession: self sessionIdentifier].	^ self ioAccessorFromSQFile: input first! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/7/2002 20:05'!openStdOut	"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard	output for the OS process in which I am currently executing. Open a console if necessary	to make standard input available."	"OSProcess accessor openStdOut"	| output |	output := self primGetStdOutputForSession: self sessionIdentifier.	output ifNil: [^ nil].	output last		ifFalse:			[self primAllocConsole.			output := self primGetStdOutputForSession: self sessionIdentifier].	^ self ioAccessorFromSQFile: output first! !!WindowsOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 11:46'!osppModuleName	"Answer a string containing the module name string for the OSPP plugin."	"OSProcess accessor osppModuleName"	^ self primOSProcessPluginModuleName! !!WindowsOSProcessAccessor methodsFor: 'plugin identification' stamp: 'dtl 10/1/2005 11:46'!osppModuleVersionString	"Answer a string containing the version string for the OSPP plugin."	"OSProcess accessor osppModuleVersionString"	^ self primOSProcessPluginModuleVersionString! !!WindowsOSProcessAccessor methodsFor: 'console' stamp: 'dtl 3/25/2002 06:28'!primAllocConsole	"Allocate a console if not already allocated."	"OSProcess accessor primAllocConsole"	<primitive: 'primitiveAllocConsole' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 8/17/2002 12:46'!primBufferValuesAt: aSemaphoreIndex	"For debugging only. Answer the current values of readCharBufferArray,	readCharCountArray, and readCharStatusArray at index, an integer corresponding	to a semaphore for one read handler thread. Answer an Array with the buffered	character, the character count, and the status value."	"OSProcess accessor primBufferValuesAt: 1"	<primitive: 'primitiveBufferValuesAt' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 9/10/2002 09:19'!primCanAccessChildProcess: handleObject	"Answer true if the OS process represented by a HANDLE can be accessed by this OS process."	<primitive: 'primitiveCanAccessChildProcess' module: 'Win32OSProcessPlugin'>	^ false! !!WindowsOSProcessAccessor methodsFor: 'handles' stamp: 'dtl 2/25/2002 07:37'!primCloseHandle: handleObject	"Close the specified handle, which may refer to a process, a thread, or	some other Win32 object."	"| procInfo |	procInfo := OSProcess accessor primCommand: 'SOL'.	OSProcess accessor primCloseHandle: procInfo first"	<primitive: 'primitiveCloseHandle' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'deprecated' stamp: 'dtl 9/9/2002 09:24'!primCommand: commandString	"Run a command in a new external process. Answer a result array with	hProcess, hThread, dwProcessId, dwThreadId.	This primitive has been replaced by #primCommand:stdIn:stdOut:stdErr:, and	will be removed in future versions of OSProcess."	"OSProcess accessor primCommand: 'C:\WINDOWS\SOL'"	"OSProcess accessor primCommand: 'SOL'"	"OSProcess accessor primCommand: 'NoSuchProgram'"	<primitive: 'primitiveCommand' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'process creation' stamp: 'dtl 9/9/2002 09:19'!primCommand: commandString stdIn: inputFileIoHandle stdOut: outputFileIoHandle stdErr: errorFileIoHandle	"Run a command in a new external process. The standard input, output and error	stream handles are sqFile byte arrays (not Win32 HANDLE arrays), and may be nil.	Answer a result array with hProcess, hThread, dwProcessId, dwThreadId."	"OSProcess accessor primCommand: 'C:\WINDOWS\SOL' stdIn: nil stdOut: nil stdErr: nil"	"OSProcess accessor primCommand: 'SOL' stdIn: nil stdOut: nil stdErr: nil"	"OSProcess accessor primCommand: 'NoSuchProgram' stdIn: nil stdOut: nil stdErr: nil"	"OSProcess accessor primCommand: 'SOL' stdIn: (FileStream fileNamed: 'output.tmp') fileID stdOut: nil stdErr: nil"	<primitive: 'primitiveCommandWithInputOutputError' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'pipe open' stamp: 'dtl 11/28/2010 12:51'!primCreatePipe	"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)	for the pipe reader and writer."	<primitive: 'primitiveCreatePipe' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'pipe open' stamp: 'dtl 11/28/2010 12:52'!primCreatePipeWithSessionIdentifier: aByteArray	"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)	for the pipe reader and writer."	<primitive: 'primitiveCreatePipeWithSessionIdentifier' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'console' stamp: 'dtl 3/25/2002 06:27'!primFreeConsole	"Deallocate the console if allocated."	"OSProcess accessor primFreeConsole"	<primitive: 'primitiveFreeConsole' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 9/6/2002 14:58'!primGetCurrentWorkingDirectory	"Call getcwd() to get the current working directory."	"OSProcess accessor primGetCurrentWorkingDirectory"	<primitive: 'primitiveGetCurrentWorkingDirectory' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/22/2002 18:23'!primGetEnvironmentStrings	"Answer the environment block in the form of an Array of Strings. The	caller is expected to parse the strings into a dictionary of keys and values."	<primitive: 'primitiveGetEnvironmentStrings' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/25/2002 08:23'!primGetExitStatusForHandle: handleObject	"Answer the exit status for the process represented by a HANDLE. Fail if	the process is still active, or if the GetExitCodeProcess call fails."	"| procInfo |	procInfo := OSProcess accessor primCommand: 'SOL'.	(Delay forSeconds: 5) wait.	OSProcess accessor primGetExitStatusForHandle: procInfo first"	<primitive: 'primitiveGetExitStatusForHandle' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/27/2002 13:20'!primGetMainThreadHandle	"Answer a pseudo-handle for my main thread."	"OSProcess accessor primGetMainThreadHandle"	<primitive: 'primitiveGetMainThreadHandle' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 3/4/2006 17:57'!primGetMainThreadID	"Answer the ID of my main thread."	"OSProcess accessor primGetMainThreadID"	<primitive: 'primitiveGetMainThreadID' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/22/2002 16:06'!primGetPid	"Answer the OS process ID for the OS process in which I am currently executing."	<primitive: 'primitiveGetPid' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'external process access' stamp: 'dtl 2/27/2002 13:21'!primGetPidHandle	"Answer the pseudo-handle for my OS process"	"OSProcess accessor primGetPidHandle"	<primitive: 'primitiveGetPidHandle' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'session identification' stamp: 'dtl 3/2/2002 08:15'!primGetSession	"Answer the unique identifier for this session of Smalltalk running in this OS Process."	"OSProcess accessor primGetSession"	<primitive: 'primitiveGetSession' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 9/7/2002 14:55'!primGetStdErrorForSession: sessionIdentifierByteArray	"Answer a two element array containing the sqFile data structure representing	standard error stream for my OS process, and a flag (true or false) to indicate	whether the sqFile data structure contains a valid HANDLE. If no standard error	stream is available for this OS process, the sqFile data structure will contain an	invalid HANDLE value, which will result in failures on subsequent accesses."	"OSProcess accessor primGetStdError"	<primitive: 'primitiveGetStdError' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 9/7/2002 14:55'!primGetStdInputForSession: sessionIdentifierByteArray	"Answer a two element array containing the sqFile data structure representing	standard input stream for my OS process, and a flag (true or false) to indicate	whether the sqFile data structure contains a valid HANDLE. If no standard input	stream is available for this OS process, the sqFile data structure will contain an	invalid HANDLE value, which will result in failures on subsequent accesses."	"OSProcess accessor primGetStdInput"	<primitive: 'primitiveGetStdInput' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 9/7/2002 14:55'!primGetStdOutputForSession: sessionIdentifierByteArray	"Answer a two element array containing the sqFile data structure representing	standard output stream for my OS process, and a flag (true or false) to indicate	whether the sqFile data structure contains a valid HANDLE. If no standard output	stream is available for this OS process, the sqFile data structure will contain an	invalid HANDLE value, which will result in failures on subsequent accesses."	"OSProcess accessor primGetStdOutput"	<primitive: 'primitiveGetStdOutput' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 09:26'!primLastReadFor: aSemaphoreIndex	"A character has been read into an external buffer corresponding to aSemaphoreIndex,	and is now available. Answer integer value of the character, or nil if no character	was read, or -1 if an error occurred on the read."	<primitive: 'primitiveLastReadFor' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 09:27'!primLastReadFor: aSemaphoreIndex storeIn: aThreeElementArray	"A character has been read into an external buffer corresponding to aSemaphoreIndex,	and is now available. Answer integer value of the character, or nil if no character	was read, or -1 if an error occurred on the read. Contents of the aThreeElementArray	will be status of the read call, character read, and character count (which should	always be 1)."	<primitive: 'primitiveLastReadForStoreIn' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 4/1/2002 10:58'!primNextFrom: anIOHandle signaling: aSemaphoreIndex	"Read the next character from anIOHandle (a SQFile struct) into a buffer in the VM. When	the read completes, signal the specified Semaphore to notify that the character is available."	<primitive: 'primitiveNextFromSignaling' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 11:50'!primOSProcessPluginModuleName	"Answer a string containing the module name string for the OSPP plugin."	"OSProcess accessor primOSProcessPluginModuleName"	<primitive: 'primitiveModuleName' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 10/1/2005 11:51'!primOSProcessPluginModuleVersionString	"Answer a string containing the version string for the OSPP plugin."	"OSProcess accessor primOSProcessPluginModuleVersionString"	<primitive: 'primitiveVersionString' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'testing' stamp: 'dtl 10/10/2012 08:05'!primOneShot	"Answer true the first time this is called in a Squeak session, and false thereafter."	"OSProcess accessor primOneShot"	<primitive: 'primitiveOneShot' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'handles' stamp: 'dtl 3/29/2002 17:47'!primSetStdErr: anIOHandle	"Set the standard error handle to that of anIOHandle, where anIOHandle is a	ByteArray representation of a SQFile structure."	<primitive: 'primitiveSetStdErr' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'handles' stamp: 'dtl 3/29/2002 17:48'!primSetStdIn: anIOHandle	"Set the standard input handle to that of anIOHandle, where anIOHandle is a	ByteArray representation of a SQFile structure."	<primitive: 'primitiveSetStdIn' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'handles' stamp: 'dtl 3/29/2002 17:48'!primSetStdOut: anIOHandle	"Set the standard output handle to that of anIOHandle, where anIOHandle is a	ByteArray representation of a SQFile structure."	<primitive: 'primitiveSetStdOut' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/26/2002 16:14'!primSetWaitForAnyProcessExit: arrayOfProcessHandleObjects thenSignalSemaphoreWithIndex: index	"Set up a thread to wait for a process HANDLE to exit, then signal the Semaphore	at index. This provides asychronous notification of an external process exit."	<primitive: 'primitiveSetWaitForAnyProcessExitThenSignalSemaphoreWithIndex' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/27/2002 11:34'!primTerminateThread: aThreadHandle	"Kill the thread. No cleanup is performed, so use with caution for a thread which	is (for example) manipulating a mutex. Answer true for success, else false."	<primitive: 'primitiveTerminateThread' module: 'Win32OSProcessPlugin'>	^ nil! !!WindowsOSProcessAccessor methodsFor: 'private - primitive access' stamp: 'dtl 4/8/2007 10:54'!primTestEndOfFileFlag: aSqFileStruct	"Answer whether the file represented by aSqFileStruct is at end of file, as determined	by a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers	true if the file pointer is at the end of the file, but which does not call feof() to	determine that an end of file condition has occurred. The difference is significant	if aSqFileStruct represents a pipe or a device file, which may not be positionable	in the sense of a conventional disk file."	<primitive: 'primitiveTestEndOfFileFlag' module: 'Win32OSProcessPlugin'>	self flag: 'FIXME'. "not yet implemented in OSPP for Windows"	^ self primitiveFailed! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 3/2/2015 20:03'!restartChildWatcherProcess	grimReaper ifNotNilDo: [ :p | p terminate. grimReaper := nil ].	self grimReaperProcess! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 1/13/2007 09:48'!restartChildWatcherThread: arrayOfProcessHandleObjects	"Start a new child watcher thread. If a thread is alread active, terminate	it before starting a new one."	self childWatcherThread ifNotNil: [childWatcherThread terminate].	self childWatcherThread: (self setWaitForAnyProcessExit: arrayOfProcessHandleObjects).	^ childWatcherThread! !!WindowsOSProcessAccessor methodsFor: 'accessing' stamp: 'dtl 2/25/2002 21:17'!semaIndex	"Index of the registered Semaphore"	semaIndex ifNil: [self initialize].	^ semaIndex! !!WindowsOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 9/26/2005 07:35'!setBlocking: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set for blocking I/O."	"FIXME: need to implement this for Win32"	"self notify: 'there is no general mechanism to set blocking IO on Win32'"! !!WindowsOSProcessAccessor methodsFor: 'file control' stamp: 'dtl 9/26/2005 07:36'!setNonBlocking: anIOHandle	"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."	"FIXME: need to implement this for Win32"	"self notify: 'there is no general mechanism to set nonblocking IO on Win32'"! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/9/2002 07:22'!setStdErr: aFileStream	"Set the standard error handle for this OSProcess to be that of aFileStream"	"| fs |	fs := FileStream fileNamed: 'stdError.tmp'.	OSProcess accessor setStdErr: fs"	| sqFile |	aFileStream ifNil: [^ false].	sqFile := UseIOHandle				ifTrue: [aFileStream ioHandle handle]				ifFalse: [aFileStream fileID].	^ self primSetStdErr: sqFile! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/9/2002 07:22'!setStdIn: aFileStream	"Set the standard input handle for this OSProcess to be that of aFileStream"	"| fs |	fs := FileStream fileNamed: 'stdInput.tmp'.	fs nextPutAll: 'this is a line of text'; cr.	fs position: 0.	OSProcess accessor setStdIn: fs"	| sqFile |	aFileStream ifNil: [^ false].	sqFile := UseIOHandle				ifTrue: [aFileStream ioHandle handle]				ifFalse: [aFileStream fileID].	^ self primSetStdIn: sqFile! !!WindowsOSProcessAccessor methodsFor: 'standard IO handles' stamp: 'dtl 9/9/2002 07:22'!setStdOut: aFileStream	"Set the standard output handle for this OSProcess to be that of aFileStream"	"| fs |	fs := FileStream fileNamed: 'stdOutput.tmp'.	OSProcess accessor setStdOut: fs"	| sqFile |	aFileStream ifNil: [^ false].	sqFile := UseIOHandle				ifTrue: [aFileStream ioHandle handle]				ifFalse: [aFileStream fileID].	^ self primSetStdOut: sqFile! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/26/2002 19:08'!setWaitForAnyProcessExit: arrayOfProcessHandleObjects	"Set up a thread to wait for a process HANDLE to exit, then signal the Semaphore	at index. This provides asychronous notification of an external process exit. The	caller should close the thread handle when it is no longer needed."	"OSProcess command: 'SOL'.	OSProcess accessor setWaitForAnyProcessExit: OSProcess thisOSProcess activeHandles."	| threadInfo |	arrayOfProcessHandleObjects isEmpty ifTrue: [^ nil].	threadInfo := self		primSetWaitForAnyProcessExit: arrayOfProcessHandleObjects		thenSignalSemaphoreWithIndex: self semaIndex.	^ WindowsThread		threadID: threadInfo last		handle: threadInfo first		running: true! !!WindowsOSProcessAccessor methodsFor: 'child process management' stamp: 'dtl 2/25/2002 21:12'!sigChldSemaphoreSet	sigChldSemaphore ifNil:		[sigChldSemaphore := Semaphore new.		semaIndex := Smalltalk registerExternalObject: sigChldSemaphore].	^ sigChldSemaphore! !!PseudoAioEventHandler commentStamp: 'dtl 11/25/2006 10:42' prior: 34393799!PseudoAioEventHandler is a replacement for AioEventHandler for use when an AioPlugin is not present. It creates a polling loop by generating #changed: events periodically. With a real AioEventHandler, events are generated only when actual IO activity occurs, while the PseudoAioEventHandler produces regularly timed events regardless of whether any actual IO changes have happened.!!PseudoAioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 11/25/2006 10:49'!close	"When the FileStream or Socket handled by this aio handler is closed,	it should send #close to this handler."	eventGenerator ifNotNil: [eventGenerator terminate]! !!PseudoAioEventHandler methodsFor: 'accessing' stamp: 'dtl 11/25/2006 13:17'!eventGenerator	"Answer the value of eventGenerator"	^ eventGenerator ifNil: [eventGenerator := self eventGeneratorProcess]! !!PseudoAioEventHandler methodsFor: 'initialize-release' stamp: 'RB 9/3/2010 11:52'!eventGeneratorProcess	"A process that generates periodic #changed events"	| d p|	d := Delay forMilliseconds: 125.	p := [[self changed.	d wait] repeat] newProcess.	^p resume.! !!PseudoAioEventHandler methodsFor: 'initialize-release' stamp: 'dtl 11/25/2006 13:15'!initialize	self eventGenerator.	^ super initialize! !!ExternalPipe commentStamp: 'dtl 3/10/2006 11:06' prior: 34394242!I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.Subclasses implement buffering behavior for the reader end of a pipe.!!ExternalPipe class methodsFor: 'instance creation' stamp: 'dtl 4/2/2006 21:34'!blockingPipe	"Warning: a read on a blocking pipe will hang the VM if there is insufficient	data in the pipe to fulfill the read request."	"OSPipe blockingPipe"	^ super basicNew initialize; setBlocking! !!ExternalPipe class methodsFor: 'instance creation' stamp: 'dtl 4/2/2006 21:34'!bufferedBlockingPipe	"Warning: a read on a blocking pipe will hang the VM if there is insufficient	data in the pipe to fulfill the read request."	"OSPipe bufferedBlockingPipe"	^ (super basicNew initialize; setBlocking) setBufferedReader; yourself! !!ExternalPipe class methodsFor: 'instance creation' stamp: 'dtl 4/2/2006 21:33'!bufferedNonBlockingPipe	"OSPipe bufferedNonBlockingPipe"	^ (super basicNew initialize; setNonBlocking) setBufferedReader; yourself! !!ExternalPipe class methodsFor: 'instance creation' stamp: 'dtl 4/2/2006 21:35'!new	"ExternalPipe new"	^ self nonBlockingPipe! !!ExternalPipe class methodsFor: 'instance creation' stamp: 'dtl 3/25/2006 14:14'!nonBlockingPipe	"OSPipe nonBlockingPipe"	^ super basicNew initialize; setNonBlocking! !!ExternalPipe class methodsFor: 'examples' stamp: 'dtl 3/7/2006 19:44'!testPipe	"OSPipe testPipe inspect"	| pipe result |	pipe := self new.	pipe nextPutAll: 'string to send through an OSPipe'.	pipe writer close.	result := pipe upToEnd.	pipe close.	^ result! !!ExternalPipe methodsFor: 'testing' stamp: 'dtl 4/2/2006 21:14'!atEnd	"Answer whether the receiver can access any more objects."	^ writer closed and: [self peek == nil]! !!ExternalPipe methodsFor: 'testing' stamp: 'dtl 6/4/2006 16:01'!atEndOfFile	"Answer whether the receiver is at its end based on the result of	the last read operation. This uses feof() to test the underlying file	stream status, and can be used as an alternative to #atEnd, which	does not properly report end of file status for an OSPipe."	^ reader atEndOfFile! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 20:00'!blocking	"True if reader end is set to blocking mode."	^ blocking ifNil: [blocking := true]! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 20:00'!blocking: trueOrFalse	"True if reader end is set to blocking mode."	blocking := trueOrFalse! !!ExternalPipe methodsFor: 'finalization' stamp: 'dtl 3/7/2006 19:44'!close	self closeWriter; closeReader! !!ExternalPipe methodsFor: 'finalization' stamp: 'dtl 3/7/2006 19:44'!closeReader	reader ifNotNil: [reader close]! !!ExternalPipe methodsFor: 'finalization' stamp: 'dtl 3/7/2006 19:44'!closeWriter	writer ifNotNil: [writer close]! !!ExternalPipe methodsFor: 'testing' stamp: 'dtl 9/16/2002 17:35'!closed	^ reader closed! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 4/16/2003 06:01'!contents	"Answer contents of the pipe, and return the contents to the pipe so it can still be read."	"ExternalPipe new nextPutAll: 'hello'; contents"	| s |	self closed ifTrue:		[self notify: self printString, ' ', self reader printString, ' closed'.		^ nil].	s := self reader upToEnd.	s isEmpty ifFalse:		[self writer closed			ifTrue: [self notify: self printString, ' ', self writer printString,								' closed, cannot replace contents']			ifFalse: [self nextPutAll: s]].	^ s! !!ExternalPipe methodsFor: 'character writing' stamp: 'dtl 3/7/2006 19:44'!cr	"Append a return character to the receiver."	self writer cr! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 4/12/2014 16:04'!flush	^writer flush! !!ExternalPipe methodsFor: 'initialize-release' stamp: 'dtl 3/25/2006 14:08'!initialize	^ self makePipe! !!ExternalPipe methodsFor: 'testing' stamp: 'dtl 3/26/2006 15:48'!isPipe	^ true! !!ExternalPipe methodsFor: 'initialize-release' stamp: 'dtl 3/7/2006 19:44'!makePipe	"Create an OS pipe and attach it to my input and output streams."	| handleArray |	handleArray := OSProcess accessor makePipeHandles.	handleArray isNil		ifTrue:			[self error: 'cannot create OS pipe']		ifFalse:			[self reader: (AttachableFileStream							name: 'pipeReader'							attachTo: (handleArray at: 1)							writable: false).			self writer: (AttachableFileStream							name: 'pipeWriter'							attachTo: (handleArray at: 2)							writable: true)]! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 9/16/2002 17:33'!next	"Answer the next object accessible by the receiver."	^ reader next! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 9/16/2002 17:33'!next: anInteger 	"Answer the next anInteger elements of my collection."	^ reader next: anInteger! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!nextPut: anObject 	"Insert the argument, anObject, as the next object accessible by the 	receiver. Answer anObject."	^ writer nextPut: anObject! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!nextPutAll: aCollection 	"Append the elements of aCollection to the sequence of objects accessible 	by the receiver. Answer aCollection."	^ writer nextPutAll: aCollection! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 9/16/2002 17:34'!peek	^ reader peek! !!ExternalPipe methodsFor: 'printing' stamp: 'dtl 4/2/2006 11:40'!printOn: aStream	"The implementation of Stream>>printOn: has bad side effects when used	for OSPipe. This implementation is copied from Object."	| title |	title := self class name.	aStream		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);		nextPutAll: title! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!reader	"Answer a stream on the read end of the pipe."	^ reader! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!reader: aReadStream	reader := aReadStream! !!ExternalPipe methodsFor: 'initialize-release' stamp: 'dtl 3/9/2006 06:40'!setBlocking	"Set the reader side of the pipe for blocking reads."	reader ifNotNil: [OSProcess accessor setBlocking: reader ioHandle].	self blocking: true! !!ExternalPipe methodsFor: 'initialize-release' stamp: 'dtl 4/2/2006 19:06'!setBufferedReader	"Use an event driven AsyncFileReadStream to represent the reader end of the pipe.	This should be used if the pipe will be read by a Smalltalk process. It should not	be used if the pipe is to be read by an external OS process."	reader ifNotNil:		[reader removeDependent: self.		reader unregister.		self reader: reader asBufferedAsyncFileReadStream.		self setNonBlocking.		reader addDependent: self.		^ true].	^ false! !!ExternalPipe methodsFor: 'initialize-release' stamp: 'dtl 3/9/2006 06:40'!setNonBlocking	"Set the reader side of the pipe for non-blocking reads."	reader ifNotNil: [OSProcess accessor setNonBlocking: reader ioHandle].	self blocking: false! !!ExternalPipe methodsFor: 'updating' stamp: 'dtl 3/15/2006 07:17'!triggerDataReady	"Notify any object waiting for data ready on the pipe."	self triggerEvent: #dataReady.! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 9/18/2002 20:29'!upToEnd	"Answer the remaining elements in the string"	reader closed		ifTrue: [^ '']		ifFalse: [^ reader upToEnd]! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 11/11/2011 09:27'!upToEndOfFile	"Answer the remaining elements in the pipe.  Use #isAtEndOfFile: to	determine end of file status with feof(), required for reliable end of	file test on OS pipes."	reader closed		ifTrue: [^ '']		ifFalse: [^ reader upToEndOfFile]! !!ExternalPipe methodsFor: 'updating' stamp: 'dtl 1/18/2003 14:31'!update: aParameter	"Notify any object waiting for data ready on the pipe."	self changed.	self triggerDataReady.	^ super update: aParameter! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!writer	"Answer a stream on the write end of the pipe."	^ writer! !!ExternalPipe methodsFor: 'accessing' stamp: 'dtl 3/7/2006 19:44'!writer: aWriteStream	writer := aWriteStream! !!OSPipe commentStamp: 'dtl 3/8/2006 07:27' prior: 34394572!I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.I use a single-character buffer to implement #peek without losing data from the external OS pipe.!!OSPipe methodsFor: 'accessing' stamp: 'dtl 10/14/2001 12:16'!next	"Answer the next object accessible by the receiver."	| c |	nextChar isNil		ifTrue:			[^ [reader next]				on: Error				do: [nil]]		ifFalse:			[c := nextChar.			nextChar := nil.			^ c]! !!OSPipe methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:24'!next: anInteger 	"Answer the next anInteger elements of my collection."	| c strm |	strm := WriteStream on: String new.	(1 to: anInteger) do:		[:index |		c := self next.		c isNil			ifTrue: [^ strm contents]				ifFalse: [strm nextPut: c. false]].	^ strm contents! !!OSPipe methodsFor: 'accessing' stamp: 'dtl 5/16/2006 06:52'!peek	^ nextChar isNil		ifTrue: [reader closed				ifFalse: [nextChar := reader next]]		ifFalse: [nextChar]! !!OSPipe methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:24'!upToEnd	"Answer the remaining elements in the string. This method is retained for backward	compatibility with older versions of CommandShell."	| strm s |	strm := WriteStream on: String new.	[(s := self next: 2000) isEmpty		ifTrue: [^ strm contents]		ifFalse: [strm nextPutAll: s]] repeat! !!OSPipe methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:24'!upToEndOfFile	"Answer the remaining elements in the pipe. Use #atEndOfFile to	determine end of file status with feof(), required for reliable end of	file test on OS pipes. Compare #upToEnd, which uses the generic end	of file test in FilePlugin."	| strm d s |	strm := WriteStream on: String new.	d := Delay forMilliseconds: 200.	[(s := self next: 2000) isEmpty		ifTrue: [self atEndOfFile			ifTrue: [^ strm contents]			ifFalse: [d wait]]		ifFalse: [strm nextPutAll: s]] repeat! !!AioEventHandlerExample commentStamp: 'dtl 7/5/2003 18:38' prior: 34394946!Demonstrate asynchronous read handers for file streams, OS pipes, standard input, and sockets. See class category "examples". Some examples require OSProcess.!!AioEventHandlerExample class methodsFor: 'examples' stamp: 'dtl 9/4/2003 06:22'!osPipeExample	"Demonstrate an asynchronous read hander on an OS pipe. Output will	be displayed on the Transcript."	"self osPipeExample"	| pipe aio |	(Smalltalk hasClassNamed: #OSProcess)		ifFalse:			[self notify: 'this example requires OSProcess']		ifTrue:			[pipe := (Smalltalk at: #OSPipe) new.			aio := super new handler: (AioEventHandler for: pipe reader); ioStream: pipe reader.			aio handler addDependent: aio.			(1 to: 10) do:				[:i |				pipe nextPutAll: 'this is line ', i asString; cr.				(Delay forMilliseconds: 500) wait].			^ aio handler close]! !!AioEventHandlerExample class methodsFor: 'examples' stamp: 'dtl 9/4/2003 06:22'!showTtyOnTranscript: ttyName	"Enter lines on /dev/tty, and watch them show up on the Transcript. Normally,	/dev/tty corresponds to standard input for the Squeak process, so if you have	a serial port connected to something that generates data, try this example with	/dev/whatever to demonstrate asych input on a serial port.	Warning: This method does not set the file stream for nonblocking input, so	it can block the Squeak VM. The #getAvailableData attempts to work around this,	but save your image before testing with another serial interfaces."	"self showTtyOnTranscript: '/dev/tty'"	| inputStream handler example |	inputStream := FileStream readOnlyFileNamed: '/dev/tty'.	handler := AioEventHandler for: inputStream				exceptions: true				readEvents: true				writeEvents: false.	example := super new handler: handler; ioStream: inputStream.	handler addDependent: example.	Transcript cr; show: ''.	self notify: 'Enter lines on ', ttyName, ', watch the Transcript, and select "Proceed" when done'.	^ example handler close! !!AioEventHandlerExample class methodsFor: 'examples' stamp: 'dtl 9/4/2003 06:23'!standardInputExample	"Enter lines on stdin, and watch them show up on the Transcript."	"self standardInputExample"	| aio stdin |	(Smalltalk hasClassNamed: #OSProcess)		ifFalse:			[self notify: 'this example requires OSProcess']		ifTrue:			[Transcript cr; show: ''.			stdin := (Smalltalk at: #OSProcess) thisOSProcess stdIn.			aio := super new handler: (AioEventHandler for: stdin); ioStream: stdin.			aio handler addDependent: aio.			self notify: 'Enter lines on standard input, watch the Transcript, and select "Proceed" when done'.			^ aio handler close]! !!AioEventHandlerExample class methodsFor: 'examples' stamp: 'dtl 9/4/2003 06:24'!tcpSocketExample	"Loosely based on OldSocket>>remoteTestServerTCP. Output is displayed on the Transcript."	"self tcpSocketExample"	| port serverTcpSocket serverName clientTcpSocket handler example useOldStyleSockets |	port := 8086.	serverName := '127.0.0.1'.	"The networking code was updated for Squeak 3.6. This checks for which version to use."	useOldStyleSockets := Socket respondsTo: #initializeNetworkIfFail:.	Transcript show: 'initializing network ... '.	useOldStyleSockets		ifTrue:			[Socket initializeNetworkIfFail: [^Transcript show:'failed']]		ifFalse:			[[Socket initializeNetwork]				on: Error				do: [:ex | ^Transcript show:'failed']].	Transcript show:'ok';cr.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	[Transcript show: 'server endpoint created on port ', port asString; cr.	useOldStyleSockets		ifTrue:			[serverTcpSocket waitForConnectionUntil: Socket standardDeadline]		ifFalse:			[serverTcpSocket waitForConnectionFor: 10]] fork.	(Delay forMilliseconds: 1000) wait.	"Create the client (writer) socket"	clientTcpSocket := Socket newTCP.	clientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.	useOldStyleSockets		ifTrue:			[clientTcpSocket waitForConnectionUntil: Socket standardDeadline]		ifFalse:			[clientTcpSocket waitForConnectionFor: 10].	Transcript show: 'client endpoint connected to ', serverName, ' port ', port asString; cr.	"Set up a read event handler on the server socket"	handler := AioEventHandler for: serverTcpSocket				exceptions: true				readEvents: true				writeEvents: false.	example := super new handler: handler; ioStream: serverTcpSocket.	handler addDependent: example.	Transcript show: 'event handler started'; cr.	"Send a few lines of data to the client socket, waiting briefly between lines.	The event handler will watch the server socket, and copy data to the Transcript	each time a new line of data is available to the server."	(1 to: 10) do:		[:i |		clientTcpSocket sendData: 'this is line ', i asString, Character cr asString.		(Delay forMilliseconds: 500) wait].	clientTcpSocket closeAndDestroy.	Transcript show: 'client endpoint closed'; cr.	serverTcpSocket closeAndDestroy.	Transcript show: 'server endpoint closed'; cr.	example close.	Transcript show: 'event handler stopped'; cr.	^ Array with: example with: serverTcpSocket with: clientTcpSocket! !!AioEventHandlerExample methodsFor: 'initialize-release' stamp: 'dtl 9/4/2003 06:20'!close	self handler close.	self handler removeDependent: self! !!AioEventHandlerExample methodsFor: 'updating' stamp: 'dtl 2/24/2013 10:22'!getAvailableData	"Obtain all available data from ioStream. For a FileStream, keep reading until	a line terminator is reached. This allows use with a FileStream that has not been	set for nonblocking input."	| ws c buffer n |	buffer := String new: 4000.	(self ioStream isKindOf: FileStream)		ifTrue:			[ws := WriteStream on: String new.			[c := ioStream next.			(c == Character lf)				ifTrue: [ws nextPut: Character cr]				ifFalse: [ws nextPut: c].			(c ~= Character lf) and: [c ~= Character cr]] whileTrue.			^ ws contents]		ifFalse:			[ioStream dataAvailable				ifTrue:					[n := ioStream receiveDataInto: buffer.					^ buffer copyFrom: 1 to: n]				ifFalse:					[^ '']]! !!AioEventHandlerExample methodsFor: 'accessing' stamp: 'dtl 7/5/2003 09:40'!handler	^ handler! !!AioEventHandlerExample methodsFor: 'accessing' stamp: 'dtl 7/5/2003 09:40'!handler: anAioHandler	handler := anAioHandler! !!AioEventHandlerExample methodsFor: 'accessing' stamp: 'dtl 7/5/2003 09:57'!ioStream	^ ioStream! !!AioEventHandlerExample methodsFor: 'accessing' stamp: 'dtl 7/5/2003 09:57'!ioStream: aFileStream	ioStream := aFileStream! !!AioEventHandlerExample methodsFor: 'updating' stamp: 'dtl 7/5/2003 18:23'!update: anObject	(anObject isKindOf: AioEventHandler)		ifTrue: [Transcript show: self getAvailableData]! !!OSFileLock commentStamp: 'dtl 2/23/2004 19:36' prior: 34395164!I describe the region representing the entire addressable space of an external file, including regions that have not yet been allocated for use by the file. On platforms that support file locking, an OSFileLock is used to describe a lock on the entire file.!!OSFileLock class methodsFor: 'instance creation' stamp: 'jf 2/22/2004 17:35'!onFile: aFileStream exclusive: writeLockFlag	"A region representing the whole file"	^ super new onFile: aFileStream exclusive: writeLockFlag! !!OSFileLock methodsFor: 'comparing' stamp: 'dtl 11/28/2010 09:18'!= aFileLock	^ ((self species = aFileLock species)		and: [self fileStream == aFileLock fileStream])			and: [self exclusive == aFileLock exclusive]! !!OSFileLock methodsFor: 'conflict testing' stamp: 'jf 2/22/2004 16:38'!conflictsWith: otherFileLock	^ (self isExclusive or: [otherFileLock isExclusive])		and: [self overlaps: otherFileLock]! !!OSFileLock methodsFor: 'accessing' stamp: 'jf 2/22/2004 16:00'!exclusive	"Answer the value of exclusive. Default is true, indicating a read-write lock	as opposed to a shared read lock."	^ exclusive ifNil: [exclusive := true].! !!OSFileLock methodsFor: 'accessing' stamp: 'jf 2/22/2004 16:00'!exclusive: anObject	"Set the value of exclusive"	exclusive := anObject! !!OSFileLock methodsFor: 'accessing' stamp: 'jf 2/22/2004 16:00'!fileStream	"Answer the value of fileStream"	^ fileStream! !!OSFileLock methodsFor: 'accessing' stamp: 'jf 2/22/2004 16:00'!fileStream: anObject	"Set the value of fileStream"	fileStream := anObject! !!OSFileLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 18:32'!hash	^ (self fileStream hash + self exclusive hash) hashMultiply! !!OSFileLock methodsFor: 'testing' stamp: 'jf 2/22/2004 18:13'!isActive	^ self fileStream closed not! !!OSFileLock methodsFor: 'testing' stamp: 'jf 2/22/2004 16:01'!isExclusive	^ self exclusive! !!OSFileLock methodsFor: 'private' stamp: 'jf 2/22/2004 18:07'!length	^ 0! !!OSFileLock methodsFor: 'system locking' stamp: 'dtl 5/8/2006 06:52'!lock	"Answer true on success"	^ self lockIfFail: [false]! !!OSFileLock methodsFor: 'system locking' stamp: 'dtl 5/8/2006 06:57'!lockIfFail: failBlock	| handle result |	handle := ThisOSProcess accessor handleFromFileStream: self fileStream.	result := ThisOSProcess accessor		primLockFileRegion: handle		offset: self offset		length: self length		exclusive: self isExclusive.	result == 0		ifTrue: [^ true]		ifFalse: [^ failBlock value]! !!OSFileLock methodsFor: 'private' stamp: 'jf 2/22/2004 18:02'!offset	^ 0! !!OSFileLock methodsFor: 'initialize-release' stamp: 'jf 2/22/2004 16:02'!onFile: aFileStream exclusive: writeLockFlag	self fileStream: aFileStream.	self exclusive: writeLockFlag! !!OSFileLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 16:31'!overlaps: aFileLock	"Answer true if the receiver represents an addressable region that overlaps aFileLock"		^ aFileLock fileStream fullName = self fileStream fullName! !!OSFileLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 16:35'!overlapsRegion: aFileRegionLock	^ aFileRegionLock fileStream fullName = self fileStream fullName! !!OSFileLock methodsFor: 'system locking' stamp: 'dtl 5/8/2006 07:00'!test	"Answer true if this is a lockable file or region"	| handle result |	handle := ThisOSProcess accessor handleFromFileStream: self fileStream.	result := ThisOSProcess accessor		primTestLockableFileRegion: handle		offset: self offset		length: self length		exclusive: self isExclusive.			^ (result == -1 or: [result isNil])		ifTrue: [false]		ifFalse: [result first]! !!OSFileLock methodsFor: 'system locking' stamp: 'dtl 5/8/2006 06:58'!unlock	"Answer true on success"	^ self unlockIfFail: [false]! !!OSFileLock methodsFor: 'system locking' stamp: 'dtl 5/8/2006 06:57'!unlockIfFail: failBlock	| handle result |	handle := ThisOSProcess accessor handleFromFileStream: self fileStream.	result := ThisOSProcess accessor		primUnlockFileRegion: handle		offset: self offset		length: self length.	result == 0		ifTrue: [^ true]		ifFalse: [^ failBlock value]! !!OSFileRegionLock commentStamp: 'jf 2/22/2004 19:50' prior: 34395487!I describe an addressable region of contiguous bytes in an external file. On platforms that support file locking, an OSFileRegionLock is used to specify a portion of the file to be locked.!!OSFileRegionLock class methodsFor: 'instance creation' stamp: 'dtl 2/22/2004 13:58'!onFile: aFileStream from: start to: end exclusive: writeLockFlag	"A region representing part of a file"	^ self onFile: aFileStream interval: (start to: end) exclusive: writeLockFlag! !!OSFileRegionLock class methodsFor: 'instance creation' stamp: 'dtl 2/22/2004 13:59'!onFile: aFileStream interval: anInterval exclusive: writeLockFlag	"A region representing part of a file"	^ super new onFile: aFileStream interval: anInterval exclusive: writeLockFlag! !!OSFileRegionLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 18:33'!= aFileRegion	^ (super = aFileRegion) and: [self interval = aFileRegion interval]! !!OSFileRegionLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 18:33'!hash	^ (super hash + self interval hash) hashMultiply! !!OSFileRegionLock methodsFor: 'accessing' stamp: 'dtl 3/10/2005 20:23'!interval	"Answer the value of interval"	^ interval! !!OSFileRegionLock methodsFor: 'accessing' stamp: 'dtl 3/10/2005 20:23'!interval: anObject	"Set the value of interval"	interval := anObject! !!OSFileRegionLock methodsFor: 'private' stamp: 'jf 2/22/2004 18:02'!length	^ self interval size! !!OSFileRegionLock methodsFor: 'private' stamp: 'jf 2/22/2004 18:02'!offset	^ self interval first! !!OSFileRegionLock methodsFor: 'initialize-release' stamp: 'jf 2/22/2004 16:03'!onFile: aFileStream interval: anInterval exclusive: writeLockFlag	self onFile: aFileStream exclusive: writeLockFlag.	self interval: anInterval.! !!OSFileRegionLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 19:47'!overlaps: aFileLock	"Call #overlapsRegion: on aFileLock since we know we're a region but we don't know whether aFileLock is"		^ aFileLock overlapsRegion: self! !!OSFileRegionLock methodsFor: 'comparing' stamp: 'jf 2/22/2004 18:56'!overlapsRegion: aFileRegionLock	^ (super overlapsRegion: aFileRegionLock) and: [(self interval intersection: aFileRegionLock interval) isEmpty not]! !!OSProcess commentStamp: '<historical>' prior: 34395728!I represent an operating system process, such as the process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems.!!ExternalOSProcess commentStamp: '<historical>' prior: 34395997!I represent an OSProcess other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process.!!ExternalMacOSProcess commentStamp: '<historical>' prior: 34396251!I represent an external MacOS process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton MacOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent MacOSProcess (a singleton) to check the status of all its ExternalMacOSProcess children, and #update: them accordingly.!!ExternalMacOSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:45'!isResponsibleForThisPlatform	"Answer true if, for the current platform, this class is responsible for representing	an OS process other than that in which the Squeak VM is currently running."	^ self isNonUnixMac! !!ExternalOS2Process commentStamp: '<historical>' prior: 34396986!I represent an external OS2 process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton OS2ProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent OS2Process (a singleton) to check the status of all its ExternalOS2Process children, and #update: them accordingly.!!ExternalOS2Process class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:47'!isResponsibleForThisPlatform	"Answer true if, for the current platform, this class is responsible for representing	an OS process other than that in which the Squeak VM is currently running."	^ self isOS2! !!ExternalOSProcess class methodsFor: 'concrete subclasses' stamp: 'dtl 3/5/2005 12:02'!concreteClass	"ExternalOSProcess concreteClass"	^ self subclasses		detect: [:c | c isResponsibleForThisPlatform]		ifNone: [self notify: self printString,					': No concrete class implementation available for system type ',					self platformName printString.				nil]! !!ExternalOSProcess class methodsFor: 'instance creation' stamp: 'dtl 1/16/2001 05:36'!exec: programName	"Run a program in an external OS process, and answer an instance of myself	which represents the external process."	"ExternalOSProcess exec: '/bin/ls'"	^ self concreteClass exec: programName! !!ExternalOSProcess class methodsFor: 'shell' stamp: 'SeanDeNigris 12/27/2013 12:30'!shellFlags	^ '-c'.! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2000 21:41'!accessor	"Answer an OSProcessAccessor which may be used to obtain information about	the external OS process which I represent."	^ OSProcess thisOSProcess processAccessor! !!ExternalOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/1/2002 06:41'!closeInitialStdErr	initialStdErr ifNotNil: [initialStdErr close]! !!ExternalOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/1/2002 06:42'!closeInitialStdIn	initialStdIn ifNotNil: [initialStdIn close]! !!ExternalOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/1/2002 06:42'!closeInitialStdOut	initialStdOut ifNotNil: [initialStdOut close]! !!ExternalOSProcess methodsFor: 'initialize - release' stamp: 'dtl 11/21/2006 14:04'!closeStreams	self closeInitialStdIn; closeInitialStdOut; closeInitialStdErr! !!ExternalOSProcess methodsFor: 'setting run state' stamp: 'dtl 3/4/2001 18:55'!complete	"Process has exited and has been reaped. It no longer exists in the external operating system."	self runState: #complete! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:38'!initialStdErr	"The stderr stream at the time the child process is invoked. If the same as	stderr for the current Squeak process, it may change as a result of Squeak	using its stderr stream. The child process may also modify its actual stderr;	therefore this is not an accurate representation of the child process stderr	during the life of the child process."	^ initialStdErr! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:38'!initialStdErr: anExternalStream	initialStdErr := anExternalStream! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:39'!initialStdIn	"The stdin stream at the time the child process is invoked. If the same as	stdin for the current Squeak process, it may change as a result of Squeak	using its stdin stream. The child process may also modify its actual stdin;	therefore this is not an accurate representation of the child process stdin	during the life of the child process."	^ initialStdIn! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:39'!initialStdIn: anExternalStream	initialStdIn := anExternalStream! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:39'!initialStdOut	"The stdout stream at the time the child process is invoked. If the same as	stdout for the current Squeak process, it may change as a result of Squeak	using its stdout stream. The child process may also modify its actual stdout;	therefore this is not an accurate representation of the child process stdout	during the life of the child process."	^ initialStdOut! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/1/2002 06:40'!initialStdOut: anExternalStream	initialStdOut := anExternalStream! !!ExternalOSProcess methodsFor: 'initialize - release' stamp: 'dtl 10/6/2000 21:01'!initialize	self notYetRunning! !!ExternalOSProcess methodsFor: 'testing' stamp: 'dtl 10/7/2000 14:45'!isAccessible	^ self accessor canAccessChildProcess: self! !!ExternalOSProcess methodsFor: 'testing' stamp: 'dtl 1/20/2001 11:40'!isComplete	^ self runState == #complete! !!ExternalOSProcess methodsFor: 'testing' stamp: 'dtl 1/20/2001 11:40'!isNotYetRunning	^ self runState == #notYetRunning! !!ExternalOSProcess methodsFor: 'testing' stamp: 'dtl 1/20/2001 11:40'!isRunning	^ self runState == #running! !!ExternalOSProcess methodsFor: 'setting run state' stamp: 'dtl 3/26/2000 15:23'!notYetRunning	"Process has not yet entered running state."	self runState: #notYetRunning! !!ExternalOSProcess methodsFor: 'printing' stamp: 'dtl 3/18/2000 14:07'!printOn: aStream	super printOn: aStream.	self isComplete ifTrue: [ aStream nextPutAll: ' (', self runState, ' with status ', self exitStatus printString, ')' ]		ifFalse: [ aStream nextPutAll: ' (', self runState asString, ')' ]! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 1/25/2004 11:01'!runState	^ runState ifNil: [self unknownRunState]! !!ExternalOSProcess methodsFor: 'accessing' stamp: 'dtl 3/18/2000 12:30'!runState: aSymbol	runState := aSymbol.	self changed: #runState! !!ExternalOSProcess methodsFor: 'setting run state' stamp: 'dtl 3/26/2000 15:23'!running	"Process is actively running."	self runState: #running! !!ExternalOSProcess methodsFor: 'testing' stamp: 'dtl 12/22/2001 18:32'!succeeded	"Answer true if my process completed successfully. Be optimistic here, and let	my subclasses implement the details."	^ self isComplete! !!ExternalOSProcess methodsFor: 'setting run state' stamp: 'dtl 10/6/2000 20:59'!unknownRunState	"Unable to determine the current run state of the process, possibly because	this is a stale reference to a process which no longer exists."	self runState: #unknownRunState! !!ExternalOSProcess methodsFor: 'updating' stamp: 'dtl 2/27/2002 09:45'!update: aParameter	"Notify any dependents if my run state changes. My subclasses will do additional	updating when the run state changes."	aParameter == #runState ifTrue: [self changed: #runState]! !!ExternalRiscOSProcess commentStamp: '<historical>' prior: 34397716!I represent an external RiscOS task other than the process in which this Squeak is executing. I maintain information about the state of the external task during and after the lifetime of the task. In particular, I hold the exit status of the task after it completes execution. When the external task changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton RiscOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent RiscOSProcess (a singleton) to check the status of all its ExternalRiscOSProcess children, and #update: them accordingly.!!ExternalRiscOSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:48'!isResponsibleForThisPlatform	"Answer true if, for the current platform, this class is responsible for representing	an OS process other than that in which the Squeak VM is currently running."	^ self isRiscOS! !!ExternalUnixOSProcess commentStamp: '<historical>' prior: 34398444!I represent an external Unix process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton UnixProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent UnixProcess (a singleton) to check the status of all its ExternalUnixProcess children, and #update: them accordingly.!!ExternalUnixOSProcess class methodsFor: 'shells' stamp: 'dtl 1/23/2013 20:21'!bashShellPath	"A more full-featured shell from the Free Software Foundation"	| path |	path := '/bin/bash'.	(OSProcess fileExists: path)		ifTrue: [^ path]		ifFalse: [self notify: path, ' not found']! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 7/12/2003 11:38'!command: aCommandString	"ExternalUnixOSProcess command: 'ls -l /etc'"	^ self forkAndExec: self defaultShellPath		arguments: (Array with: '-c' with: aCommandString)		environment: nil! !!ExternalUnixOSProcess class methodsFor: 'shells' stamp: 'dtl 1/23/2013 20:30'!defaultShellPath	"Default shell to run"	| path |	path := '/bin/sh'.	(OSProcess fileExists: path)		ifTrue: [^ path]		ifFalse: [self notify: path, ' not found']! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 1/16/2001 05:33'!exec: programName	"Run a program in an external OS process, and answer an instance of myself	which represents the external process."	^ self forkAndExec: programName! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/27/2002 15:25'!forkAndExec: executableFile	"ExternalUnixOSProcess forkAndExec: '/bin/ls'"	^ super new		programName: executableFile;		initialize;		forkChild! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/27/2002 15:25'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary 	"Run a program in an external OS process, and answer an instance of 	myself which represents the external process."	"ExternalUnixOSProcess forkAndExec: '/bin/ls' arguments: (Array with: '-l') environment: (UnixProcess env)"	^ super new		programName: executableFile;		arguments: arrayOfStrings;		initialEnvironment: stringDictionary;		initialize;		forkChild! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/27/2002 15:25'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Run a program in an external OS process, and answer an instance of myself	which represents the external process."	"ExternalUnixOSProcess		forkAndExec: '/bin/ls'		arguments: (Array with: '-l')		environment: (UnixProcess env)		descriptors: nil"	| proc |	proc := super new		programName: executableFile;		arguments: arrayOfStrings;		initialEnvironment: stringDictionary.	arrayOf3Streams ifNotNil:		[proc initialStdIn: (arrayOf3Streams at: 1).		proc initialStdOut: (arrayOf3Streams at: 2).		proc initialStdErr: (arrayOf3Streams at: 3)].	^ proc initialize forkChild! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/27/2002 15:25'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString	"Run a program in an external OS process, and answer an instance of myself	which represents the external process."	"ExternalUnixOSProcess forkAndExec: '/bin/ls' arguments: nil environment: nil descriptors: nil workingDir: '/etc'"	| proc |	proc := super new		programName: executableFile;		arguments: arrayOfStrings;		initialEnvironment: stringDictionary.	arrayOf3Streams ifNotNil:		[proc initialStdIn: (arrayOf3Streams at: 1).		proc initialStdOut: (arrayOf3Streams at: 2).		proc initialStdErr: (arrayOf3Streams at: 3)].	pathString ifNotNil: [proc pwd: pathString].	^ proc initialize forkChild! !!ExternalUnixOSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:48'!isResponsibleForThisPlatform	"Answer true if, for the current platform, this class is responsible for representing	an OS process other than that in which the Squeak VM is currently running."	^ self isUnix! !!ExternalUnixOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/28/2002 10:15'!programName: executableFile arguments: arrayOfStrings initialEnvironment: stringDictionary	"Answer an instance not yet running."	^ super new		programName: executableFile;		arguments: arrayOfStrings;		initialEnvironment: stringDictionary! !!ExternalUnixOSProcess class methodsFor: 'shells' stamp: 'dtl 1/23/2013 20:21'!remoteShellPath	"A remote shell processor. This may need to be edited for different systems."	| path |	path := '/usr/bin/rsh'.	(OSProcess fileExists: path)		ifTrue: [^ path]		ifFalse: [self notify: path, ' not found']! !!ExternalUnixOSProcess class methodsFor: 'shells' stamp: 'dtl 1/23/2013 20:21'!tkShellPath	"The wish command shell for Tk/Tcl. This tends to be installed in a wide variety	of places, so you may need to edit this method for your system."	| path |	path := '/usr/bin/wish'.	(OSProcess fileExists: path)		ifTrue: [^ path]		ifFalse: [self notify: path, ' not found']! !!ExternalUnixOSProcess methodsFor: 'comparing' stamp: 'dtl 11/15/2013 10:31'!= processProxy	"True if this is a proxy that represents the same OS process as processProxy"	^ ((processProxy isKindOf: ExternalUnixOSProcess)			and: [pid = processProxy pid])				and: [ppid = processProxy ppid]! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 1/20/2001 12:48'!arguments	^ arguments! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 1/20/2001 12:49'!arguments: arrayOfArgumentStrings	arguments := arrayOfArgumentStrings! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 7/3/1999 12:34'!exitStatus	^ exitStatus! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 10/22/1999 22:21'!exitStatus: anInteger	exitStatus := anInteger! !!ExternalUnixOSProcess methodsFor: 'initialize - release' stamp: 'dtl 4/4/2006 21:16'!forkChild	"Start the external OS process. All instances variables except for pid  	should have been set. The pid will be set following creation of the new 	external process. Creating a child process is the responsibility of the	currently executing OS process, so request it to do so on behalf of this	instance of ExternalUnixOSProcess."	^ OSProcess thisOSProcess		processProxy: self		forkAndExec: programName		arguments: arguments		environment: initialEnvironment		descriptors: (Array				with: initialStdIn				with: initialStdOut				with: initialStdErr)! !!ExternalUnixOSProcess methodsFor: 'comparing' stamp: 'dtl 6/28/2010 22:26'!hash	^ (pid ifNil: [self identityHash]) + (ppid ifNil: [self identityHash])! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 3/11/2001 09:17'!initialEnvironment	^ initialEnvironment! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 1/21/2001 11:31'!initialEnvironment: aDictionary	initialEnvironment := aDictionary! !!ExternalUnixOSProcess methodsFor: 'initialize - release' stamp: 'dtl 2/11/2001 19:07'!initialize	super initialize.	^ self setDefaults! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 7/3/1999 12:51'!pid	^ pid! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 10/22/1999 22:21'!pid: aPid	pid := aPid! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 7/3/1999 12:33'!ppid	^ ppid! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 10/22/1999 22:21'!ppid: aPid	ppid := aPid! !!ExternalUnixOSProcess methodsFor: 'printing' stamp: 'dtl 8/23/2012 22:45'!printOn: aStream	self programName isNil		ifTrue:			[^ super printOn: aStream]		ifFalse:			[aStream				nextPutAll: 'an ';				nextPutAll: self class name, ' with pid ';				nextPutAll: self pid printString;				nextPutAll: ' on ';				nextPutAll: programName;				nextPutAll: ' (';				nextPutAll: self runState asString.			self isComplete				ifTrue: [aStream nextPutAll: ', ';					nextPutAll: (UnixProcessExitStatus for: exitStatus) printString].			aStream nextPut: $)].! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 1/20/2001 12:51'!programName	^ programName! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 1/20/2001 12:51'!programName: fileName	programName := fileName! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 3/31/2001 17:08'!pwd	pwd ifNil: [pwd := self accessor primGetCurrentWorkingDirectory].	^ pwd! !!ExternalUnixOSProcess methodsFor: 'accessing' stamp: 'dtl 3/31/2001 17:08'!pwd: pathString	pwd := pathString! !!ExternalUnixOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/31/2001 17:10'!setDefaults	| this |	this := OSProcess thisOSProcess.	initialEnvironment ifNil: [self initialEnvironment: this environment].	initialStdIn ifNil: [self initialStdIn: this stdIn].	initialStdOut ifNil: [self initialStdOut: this stdOut].	initialStdErr ifNil: [self initialStdErr: this stdErr].		self pwd! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:44'!sigabrt	"Send a SIGABRT signal to the external process which I represent."	OSProcess thisOSProcess sigabrt: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:52'!sigalrm	"Send a SIGALRM signal to the external process which I represent."	OSProcess thisOSProcess sigalrm: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:52'!sigchld	"Send a SIGCHLD signal to the external process which I represent."	OSProcess thisOSProcess sigchld: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:52'!sigcont	"Send a SIGCONT signal to the external process which I represent."	OSProcess thisOSProcess sigcont: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:53'!sighup	"Send a SIGHUP signal to the external process which I represent."	OSProcess thisOSProcess sighup: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:53'!sigint	"Send a SIGINT signal to the external process which I represent."	OSProcess thisOSProcess sigint: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:54'!sigkill	"Send a SIGKILL signal to the external process which I represent."	OSProcess thisOSProcess sigkill: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:54'!sigpipe	"Send a SIGPIPE signal to the external process which I represent."	OSProcess thisOSProcess sigpipe: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:55'!sigquit	"Send a SIGQUIT signal to the external process which I represent."	OSProcess thisOSProcess sigquit: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:55'!sigstop	"Send a SIGSTOP signal to the external process which I represent."	OSProcess thisOSProcess sigstop: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:55'!sigterm	"Send a SIGTERM signal to the external process which I represent."	OSProcess thisOSProcess sigterm: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:56'!sigusr1	"Send a SIGUSR1 signal to the external process which I represent."	OSProcess thisOSProcess sigusr1: self! !!ExternalUnixOSProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:56'!sigusr2	"Send a SIGUSR2 signal to the external process which I represent."	OSProcess thisOSProcess sigusr2: self! !!ExternalUnixOSProcess methodsFor: 'testing' stamp: 'dtl 12/22/2001 18:30'!succeeded	^ self isComplete and: [self exitStatus == 0]! !!ExternalUnixOSProcess methodsFor: 'terminating child' stamp: 'dtl 2/11/2001 16:08'!terminate	"Kill the child process which I represent."	self sigkill.	self finalize! !!ExternalUnixOSProcess methodsFor: 'updating' stamp: 'dtl 7/6/2006 10:06'!update: aParameter 	| accessible |	aParameter == #runState		ifTrue: [| statusArray | 			"Has the process exited?"			statusArray := self accessor primGetChildExitStatus: self pid.			statusArray notNil				ifTrue: [self exitStatus: (statusArray at: 2).						^ self complete]].	aParameter == #accessibility		ifTrue: ["Does the process still exist, and is it reachable?"			((accessible := self isAccessible) notNil and: [accessible])				ifFalse: [^ self isRunning ifTrue: [self unknownRunState]]].	super update: aParameter! !!ExternalUnixOSProcess methodsFor: 'evaluating' stamp: 'dtl 11/21/2006 14:09'!value	"Start the external process"	self isNotYetRunning ifTrue: [self forkChild; closeStreams]! !!ExternalWindowsOSProcess commentStamp: '<historical>' prior: 34399181!I represent an external Windows process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton WindowsOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent WindowsOSProcess (a singleton) to check the status of all its ExternalWindowsOSProcess children, and #update: them accordingly.!!ExternalWindowsOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/28/2002 10:56'!command: aCommandString	"ExternalWindowsOSProcess command: 'SOL'"	"ExternalWindowsOSProcess command: 'NoSuchProgram'"	^ (self commandNoEvaluate: aCommandString) value! !!ExternalWindowsOSProcess class methodsFor: 'instance creation' stamp: 'dtl 2/28/2002 10:49'!commandNoEvaluate: aCommandString	"Answer an instance not yet running."	"ExternalWindowsOSProcess commandNoEvaluate: 'SOL'"	^ super new		commandLine: aCommandString;		ppid: OSProcess thisOSProcess pid;		notYetRunning! !!ExternalWindowsOSProcess class methodsFor: 'shells' stamp: 'SeanDeNigris 12/27/2013 10:17'!defaultShellPath	^ 'C:\Windows\System32\cmd.exe'.! !!ExternalWindowsOSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:50'!isResponsibleForThisPlatform	"Answer true if, for the current platform, this class is responsible for representing	an OS process other than that in which the Squeak VM is currently running."	^ self isWindows! !!ExternalWindowsOSProcess class methodsFor: 'instance creation' stamp: 'dtl 3/1/2002 07:02'!programName: executableFile arguments: arrayOfStrings initialEnvironment: stringDictionary	"This is for protocol compatibility with ExternalUnixOSProcess. For now, just reassemble	a command line string and ignore the environment argument."	| commandLine |	commandLine := WriteStream on: String new.	commandLine nextPutAll: executableFile.	arrayOfStrings ifNotNil:		[arrayOfStrings do: [:arg | commandLine nextPut: Character space; nextPutAll: arg]].	^ self commandNoEvaluate: commandLine contents! !!ExternalWindowsOSProcess class methodsFor: 'shell' stamp: 'SeanDeNigris 12/27/2013 12:31'!shellFlags	^ '/c'.! !!ExternalWindowsOSProcess methodsFor: 'comparing' stamp: 'dtl 11/15/2013 10:30'!= processProxy	"True if this is a proxy that represents the same OS process as processProxy"	^ ((processProxy isKindOf: ExternalWindowsOSProcess)			and: [pid = processProxy pid])				and: [ppid = processProxy ppid]! !!ExternalWindowsOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/1/2002 07:44'!closeHandles	"Clean up after process exits."	self threads do: [:thread | thread closeHandle].	handle ifNotNil:		[OSProcess accessor primCloseHandle: handle.		handle := nil]! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/26/2002 10:09'!commandLine	^ commandLine! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/26/2002 10:09'!commandLine: aCommandLineString	commandLine := aCommandLineString! !!ExternalWindowsOSProcess methodsFor: 'setting run state' stamp: 'dtl 6/24/2006 08:41'!complete	"Process has exited and has been reaped. It no longer exists in the external operating system."	(threads notNil and: [threads size > 0]) ifTrue: [threads do: [:t | t complete]].	self closeHandles.	super complete! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 08:32'!exitStatus	^ exitStatus! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 08:33'!exitStatus: status	exitStatus := status! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:24'!handle	"A Windows HANDLE for this OS process, represented as a ByteArray. The	handle should be closed when the process exits."	^ handle! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:32'!handle: aHandleObject	"A Windows HANDLE for this OS process, represented as a ByteArray. The	handle should be closed when the process exits."	handle := aHandleObject! !!ExternalWindowsOSProcess methodsFor: 'comparing' stamp: 'dtl 6/28/2010 22:27'!hash	^ (pid ifNil: [self identityHash]) + (ppid ifNil: [self identityHash])! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:29'!ppid	^ ppid! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:29'!ppid: aProcessID	ppid := aProcessID! !!ExternalWindowsOSProcess methodsFor: 'printing' stamp: 'dtl 2/26/2002 10:42'!printOn: aStream	self commandLine isNil		ifTrue:			[^ super printOn: aStream]		ifFalse:			[aStream				nextPutAll: 'a ';				nextPutAll: self class name, ' with pid ';				nextPutAll: self pid printString.			(self isComplete and: [handle isNil])				ifTrue:					[aStream nextPutAll: ' (handle closed)']				ifFalse:					[aStream nextPutAll: ' handle ';						nextPutAll: (handle isNil							ifTrue: [handle printString]							ifFalse: [handle asArray printString])].			aStream				nextPutAll: ' on ''';				nextPutAll: commandLine;				nextPutAll: ''' (';				nextPutAll: self runState asString;				nextPut: $)]! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 10:28'!pwd	"Answer the current working directory string."	^ pwd! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 10:28'!pwd: pathString	"The current working directory string."	pwd := pathString! !!ExternalWindowsOSProcess methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:09'!threads	"One or more threads of execution within the OS process"	^ threads ifNil: [threads := OrderedCollection new]! !!ExternalWindowsOSProcess methodsFor: 'updating' stamp: 'dtl 2/27/2002 09:45'!update: aParameter 	| accessible stat |	aParameter == #runState		ifTrue:			["Has the process exited?"	 		stat := self accessor primGetExitStatusForHandle: self handle.			stat ifNotNil: [self complete closeHandles exitStatus: stat]].	aParameter == #accessibility		ifTrue: ["Does the process still exist, and is it reachable?"			((accessible := self isAccessible) notNil and: [accessible])				ifFalse: [self isRunning ifTrue: [self unknownRunState]]].	super update: aParameter! !!ExternalWindowsOSProcess methodsFor: 'evaluating' stamp: 'dtl 1/11/2015 13:43'!value	"Start the external process"	| procInfo mainThread |	self isNotYetRunning ifTrue:		[procInfo := OSProcess accessor primCommand: self commandLine.		procInfo isNil			ifTrue:				[self initialStdErr ifNotNilDo: [ :err |					err nextPutAll: 'cannot execute ', self commandLine; cr ].				self exitStatus: #cannotExecuteCommandLine.				"FIXME: Close the OSPipes now, otherwise the image will block on a read"				self closeStreams.				[self complete] fork "defer execution so OSPipes stay in place for now"]			ifFalse:				[self pid: (procInfo at: 3).				self handle: (procInfo at: 1).				mainThread := WindowsThread						threadID: (procInfo at: 4)						handle: (procInfo at: 2)						running: true.				self threads add: mainThread. 				self running.				OSProcess thisOSProcess registerChildProcess: self.				"FIXME: Close the initial pipe handles. For now, I have not implemented				passing these to the child, and there is no support yet for nonblocking				Windows OS pipes. Once those are available, this method needs to change				to support."				self closeStreams]].! !!OSProcess class methodsFor: 'external process access' stamp: 'dtl 11/8/2000 22:04'!accessor	"Answer an OSProcessAccessor for this OS process."	^ self thisOSProcess processAccessor! !!OSProcess class methodsFor: 'sUnit' stamp: 'dtl 6/17/2015 19:31'!allTestResults	"Run all available sUnit tests and save the results in a file named	'OSProcessTestResults-<platform>.txt'. Display results on the Transcript as	tests are run. Answer a string with the test results."	"OSProcess allTestResults"	| resultsFileName writeStream resultString results fs problems result wordSize |	self listLoadedModules		detect: [:e | '*OSProcessPlugin*' match: e]		ifNone: [self notify: 'no OSProcessPlugin loaded'].	wordSize := (Smalltalk respondsTo: #wordSize)		ifTrue: [Smalltalk wordSize]		ifFalse: [4].	resultsFileName := 'OSProcessTestResults-' , OSProcess platformName , '-' ,		(wordSize * 8) asString , 'bitImage-' ,		(OSProcess accessor sizeOfPointer * 8) asString , 'bitHw.txt'.	[fs := FileStream newFileNamed: resultsFileName.	problems := false.	writeStream := WriteStream on: String new.	writeStream nextPutAll: self authorInitials , ' running OSProcess unit tests ' , DateAndTime now asString; cr.	writeStream nextPutAll: 'OSProcess platformName => ' , OSProcess platformName; cr.	writeStream nextPutAll: 'OSProcess platformSubtype => ' , OSProcess platformSubtype; cr.	writeStream nextPutAll: 'OSProcess osVersion => ' , OSProcess osVersion; cr.	writeStream nextPutAll: 'OSProcess vmVersion => ' , OSProcess vmVersion; cr.	writeStream nextPutAll: 'size of C int: OSProcess accessor sizeOfInt ==> ' , OSProcess accessor sizeOfInt asString; cr.	writeStream nextPutAll: 'size of C pointer: OSProcess accessor sizeOfPointer ==> ' , OSProcess accessor sizeOfPointer asString; cr.	writeStream nextPutAll: 'OSProcess versionInformation asString => ' , OSProcess versionInformation asString; cr.	Transcript show: writeStream contents.	(((Class allSubInstances select: [:class | #'OSProcess-Tests' = class category]) ,		(Class allSubInstances select: [:class | #'CommandShell-Tests' = class category]))			reject: [:class | 'Abstract*' match: class name])		do: [:testCase | 			writeStream nextPutAll: 'running tests in ' , testCase name; cr.			Transcript show: 'running tests in ' , testCase name; cr.			testCase allTestSelectors				do: [:testSelector |					OSProcess thisOSProcess stdOut nextPutAll:						testCase name, '>>',testSelector, String lf; flush.					resultString := (testSelector								-> ([result := (testCase selector: testSelector) run.									result hasPassed										ifFalse: [problems := true].									result]										on: Error										do: [:ex | problems := true.											'caught exception ' , ex printString])) printString.					writeStream nextPutAll: resultString; cr.					Transcript show: resultString; cr]].	problems		ifTrue: [writeStream nextPutAll: 'one or more problems found'; cr.			Transcript show: 'one or more problems were found, see results file'; cr]		ifFalse: [writeStream nextPutAll: 'all tests completed without problems'; cr.			Transcript show: 'all tests completed without problems'; cr].	results := writeStream contents copyReplaceAll: String cr with: String lf.	fs nextPutAll: results]		ensure: [fs close].	Transcript show: 'tests results have been saved in a file named ''' , resultsFileName , ''''; cr.	^ results! !!OSProcess class methodsFor: 'external system access' stamp: 'dtl 1/7/2001 12:32'!arguments	"OSProcess arguments"	^ self thisOSProcess arguments! !!OSProcess class methodsFor: 'sUnit' stamp: 'ThierryGoubier 10/11/2013 11:16'!authorInitials	"Get the author initials from the system."	((Smalltalk respondsTo: #metacelloPlatformAttributes)		and: [ 			(Smalltalk metacelloPlatformAttributes includes: #'pharo3.x')				or: [ Smalltalk metacelloPlatformAttributes includes: #'pharo2.x' ] ])		ifTrue: [ ^ (Smalltalk at: #Author) fullName select: [ :c | c isUppercase ] ].	^ (Smalltalk at: #Utilities) authorInitials! !!OSProcess class methodsFor: 'private' stamp: 'dtl 1/7/2001 13:13'!classForThisOSProcess	"Answer the class which represents the OS process in which Squeak runs."	^ ThisOSProcess concreteClass! !!OSProcess class methodsFor: 'external command processing' stamp: 'dtl 1/7/2001 12:09'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library,	except that aCommandString runs asynchronously in a child process."	"OSProcess command: 'ls -l /etc'"	^ self thisOSProcess command: aCommandString! !!OSProcess class methodsFor: 'debugging' stamp: 'dtl 4/2/2005 12:32'!debugMessage: aString	"Print aString on standard output. The debug message is prefixed with the	identity of the process in which the method is being evaluated, and the	identity of the object which received the message. Useful for debugging	timing or deadlock problems."	[self thisOSProcess stdOut		"The process in which the traced message is being evaluated"		nextPutAll: Processor activeProcess hash printString, ':';		"The identity of the object being traced"		nextPutAll: thisContext sender sender sender receiver hash printString, ':';		"The debug message"		nextPutAll: aString asString; nextPut: Character lf; flush]			on: Error			do: []! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 21:48'!defaultPathString	^ self useFileSystem		ifTrue: [(((Smalltalk at: #Path) perform: #workingDirectory) perform: #asFileReference) pathString]		ifFalse: [(Smalltalk at: #FileDirectory) default pathName]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 9/5/2013 21:11'!deleteFileNamed: fileName	"Delete the file with the given name."	self useFileSystem		ifTrue: [ | file |			file := fileName perform: #asFileReference.			( {	#ensureDelete "preferred selector" .				#ensureDeleted "pharo 2, now deprecated in favor of ensureDelete" .				#delete "fallback (earlier pharo versions?)" }					detect: [ :e | file respondsTo: e ]					ifNone: [ self error: 'do not know how to ensureDelete' ] )				ifNotNilDo: [ :sel | file perform: sel ].			(file respondsTo: #ensureDelete)				ifTrue: [ file perform: #ensureDelete ]				ifFalse: [ file perform: #ensureDeleted ] ]		ifFalse: [ (Smalltalk at: #FileDirectory) default				deleteFileNamed: fileName ]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 21:49'!directoryEntryNames: path	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) children collect: [:e | e perform: #basename] ]		ifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries collect: [:e | e name] ]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 21:49'!directoryExists: path	"Answer true if a directory of the given name exists. The given name may	be either a full path name or a local directory within this directory."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) exists ]		ifFalse: [ (Smalltalk at: #FileDirectory) default directoryExists: path ]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 21:49'!fileExists: path	"Answer true if a file of the given name exists. The given name may be	either a full path name or a local file within this directory."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) exists ]		ifFalse: [ (Smalltalk at: #FileDirectory) default fileExists: path ]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 3/5/2005 11:32'!getSystemAttribute: attributeID 	"After Squeak version 3.6, #getSystemAttribute was moved to SmalltalkImage "	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk getSystemAttribute: attributeID]) current getSystemAttribute: attributeID! !!OSProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 21:52'!helloStdErr	"Write a message on the standard error stream of the OS process, normally	the terminal or window from which Squeak is being run. Most operating	systems implement stdin, stdout, and stderr in some manner, so this shown	as an OSProcess example even though the implemention is in my subclasses."	"OSProcess helloStdErr"	| this |	this := self thisOSProcess.	this stdErr ifNil: [self noAccessorAvailable. ^ nil].	^ this stdErr nextPutAll: 'Hello stderr'; nextPut: (Character lf); yourself! !!OSProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 21:53'!helloWorld	"Write a message on the standard output stream of the OS process, normally	the terminal or window from which Squeak is being run. Most operating	systems implement stdin, stdout, and stderr in some manner, so this shown	as an OSProcess example even though the implemention is in my subclasses."	"OSProcess helloWorld"	| this |	this := self thisOSProcess.	this stdOut ifNil: [self noAccessorAvailable. ^ nil].	^ this stdOut nextPutAll: 'Hello world'; nextPut: Character lf; yourself! !!OSProcess class methodsFor: 'initialize-release' stamp: 'dtl 10/19/2001 18:44'!initialize	"OSProcess initialize"	UseIOHandle := (Smalltalk hasClassNamed: #IOHandle)! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:41'!isNonUnixMac	"True if the platform is Mac OS prior to OSX"	"OSProcess isNonUnixMac"	| numericOsVersion |	numericOsVersion := self osVersion asInteger ifNil: [0].	^ (self platformName = 'Mac OS') and: [numericOsVersion < 1000]! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:42'!isOS2	"True if the platform is OS2"	"FIXME please - What is the correct platform name for OS2?"	"OSProcess isOS2"	^ self platformName = 'OS2'! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 9/4/2013 08:35'!isPharo3AndLater	"True if this image is a pharo of major version 3 or greater"	Smalltalk		at: #SystemVersion		ifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])			ifTrue: [^ cls current type = 'Pharo' and: [ cls current major >= 3 ]]].	^false! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/24/2003 09:52'!isResponsibleForThisPlatform	"Answer true if this class has responsibilities for the platform on which the	Squeak VM is currently running."	^ self subclassResponsibility! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:43'!isRiscOS	"True if the platform is RiscOS"	"OSProcess isRiscOS"	^ self platformName = 'RiscOS'! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:43'!isUnix	"True if the platform is Unix (including Linux, Mac OS X, or other unix-like OS).	Note: Keep this method in sync with UnixOSProcessPlugin>>isResponsibleForThisPlatform."	"OSProcess isUnix"	| numericOsVersion |	^ (self platformName = 'unix') or:		[numericOsVersion := self osVersion asInteger ifNil: [0].		(self platformName = 'Mac OS') and: [numericOsVersion >= 1000]]! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:46'!isUnixMac	"True if the platform is Mac OS on OSX"	"OSProcess isUnixMac"	| osVersion numericOsVersion |	osVersion := self osVersion.	^ ('darwin*' match: osVersion "Ian's VM")		or: [numericOsVersion := osVersion asInteger ifNil: [0].			(self platformName = 'Mac OS') and: [numericOsVersion >= 1000] "John's VM"]! !!OSProcess class methodsFor: 'platform identification' stamp: 'dtl 3/5/2005 11:46'!isWindows	"True if the platform is an MS Windows OS"	"OSProcess isWindows"	^ self platformName = 'Win32'! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 10/27/2007 10:55'!listLoadedModules	"After Squeak version 3.6, #listLoadedModules was moved to SmalltalkImage "	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk listLoadedModules]) current listLoadedModules! !!OSProcess class methodsFor: 'utility' stamp: 'dtl 1/24/2013 19:59'!makeVM	"Rebuild the virtual machine and plugins, assuming that this Squeak	is running from a home directory in the appropriate place in the	source code tree. If the build is successful, save the image and	restart using the new VM."	"OSProcess makeVM"	^ self makeVmIn: OSProcess defaultPathString, OSProcess pathSeparator, 'build'! !!OSProcess class methodsFor: 'utility' stamp: 'dtl 1/25/2013 18:58'!makeVmIn: buildDirectoryPathName	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart using the	new VM. This assumes that the currently executing VM is either located in,	or linked to, the buildDirectoryPathName directory."	"OSProcess makeVmIn: OSProcess defaultPathString, OSProcess pathSeparator, 'build'"	^ self classForThisOSProcess makeVmIn: buildDirectoryPathName! !!OSProcess class methodsFor: 'private' stamp: 'dtl 6/29/2005 14:18'!noAccessorAvailable	self notify: 'process accessor module not available'! !!OSProcess class methodsFor: 'version dependent' stamp: 'ThierryGoubier 9/5/2013 11:13'!osVersion	"After Squeak version 3.6, #osVersion was moved to SmalltalkImage. Some	versions of Pharo move this to OSPlatform and issue deprecation warnings	about the other usages. Pharo3 deprecated OSPlatform direct access."	"self osVersion"		self isPharo3AndLater		ifTrue: [ ^ (Smalltalk perform: #os) version ].	^ (((Smalltalk hasClassNamed: #OSPlatform)			and: [(Smalltalk at: #OSPlatform)					respondsTo: #osVersion])		ifTrue: [Smalltalk at: #OSPlatform]		ifFalse: [((Smalltalk classNamed: 'SmalltalkImage')				ifNil: [^ Smalltalk osVersion]) current]) osVersion! !!OSProcess class methodsFor: 'version dependent' stamp: 'SeanDeNigris 2/13/2013 09:46'!pathSeparator	^ self useFileSystem		ifTrue: [((Smalltalk at: #DiskStore) current perform: #delimiter) asString]		ifFalse: [(Smalltalk at: #FileDirectory) slash]! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/2/2014 20:54'!platformName 	"After Squeak version 3.6, #platformName was moved to SmalltalkImage Some	versions of Pharo move this to OSPlatform and issue deprecation warnings	about the other usages. The original idiom (Squeak 3.6 and earlier) is the sensible	default, but here we attempt to support other implementations if the sensible	default is not available."	"OSProcess platformName"	(Smalltalk respondsTo: #platformName)		ifTrue: [^ Smalltalk platformName].	self isPharo3AndLater		ifTrue: [ ^ (Smalltalk perform: #os) name ].	^ (((Smalltalk hasClassNamed: #OSPlatform)			and: [(Smalltalk at: #OSPlatform)					respondsTo: #platformName])		ifTrue: [Smalltalk at: #OSPlatform]		ifFalse: [((Smalltalk classNamed: 'SmalltalkImage')				ifNil: [^ Smalltalk osVersion]) current]) platformName! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 9/4/2013 08:00'!platformSubtype 	"After Squeak version 3.6, #platformSubtype was moved to SmalltalkImage "	"OSProcess platformSubtype"	self isPharo3AndLater		ifTrue: [ ^ (Smalltalk perform: #os) perform: #subtype ].	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk platformSubtype]) current platformSubtype! !!OSProcess class methodsFor: 'external system access' stamp: 'dtl 1/7/2001 12:32'!programName	"OSProcess programName"	^ self thisOSProcess programName! !!OSProcess class methodsFor: 'utility' stamp: 'dtl 1/7/2001 12:35'!quitAndRestart	"Save image, start a new instance from the saved image, and quit this instance.	This is useful if the VM has been recompiled or if a new pluggable primitive	has been added."	"OSProcess quitAndRestart"	| firstPid this |	firstPid := OSProcess thisOSProcess pid.	firstPid ifNil: 			[self noAccessorAvailable.			^ nil].	Smalltalk saveSession.	"Value of firstPid gets saved in the image"	this := OSProcess thisOSProcess.	this pid = firstPid ifTrue: [self squeak ifNotNil: [Smalltalk quitPrimitive]].	^ this! !!OSProcess class methodsFor: 'examples' stamp: 'dtl 11/8/2000 23:23'!readFromStdIn	"Type some text on the standard input terminal, followed by <return> or <enter>,	then call this method. Any available input text in the stdin stream will be read.	This method sets standard input for the Squeak OS process for non-blocking reads	in order to prevent the Smalltalk image from blocking on the read. After the read,	standard input is set back to its normal blocking I/O mode.	Most operating systems implement stdin, stdout, and stderr in some manner, so this	is shown as an OSProcess example even though the implemention is in my subclasses."	"OSProcess readFromStdIn inspect"	| input ioHandle resultString |	input := self thisOSProcess stdIn.	input ifNil: [self noAccessorAvailable. ^ nil].	ioHandle := input ioHandle.	self accessor setNonBlocking: ioHandle.	resultString := self thisOSProcess stdIn next: 10000.	self accessor setBlocking: ioHandle.	^ resultString! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 12/15/2013 14:53'!snapshot: save andQuit: quit	"After Squeak version 3.6, #snapshot:andQuit: was moved to SmalltalkImage "	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk snapshot: save andQuit: quit embedded: false]) current snapshot: save andQuit: quit! !!OSProcess class methodsFor: 'external command processing' stamp: 'dtl 1/7/2001 13:06'!squeak	"Start a new instance of Squeak running in a child OS process. The new instance	will restart from the image file, so it is a clone of this image as it existed at the	most recent image save. Note that subclasses can implement additional methods of	starting Squeak images, especially for Unix systems."	"OSProcess squeak"	^ self thisOSProcess squeak! !!OSProcess class methodsFor: 'utility' stamp: 'dtl 3/5/2005 11:34'!systemAttributes	"Answer a Dictionary of all of the system attributes which can be obtained from	SystemDictionary>>getSystemAttribute."	"OSProcess systemAttributes"	| args idx a |	args := Dictionary new.	idx := -1.	[a := self getSystemAttribute: idx.	a notNil and: [a size > 0]]		whileTrue: [args at: idx put: a. idx := idx - 1].	a := self getSystemAttribute: 0.	(a notNil and: [a size > 0]) ifTrue: [args at: 0 put: a. idx := idx - 1].	a := self getSystemAttribute: 1.	(a notNil and: [a size > 0]) ifTrue: [args at: 1 put: a. idx := idx - 1].	a := self getSystemAttribute: 2.	(a notNil and: [a size > 0]) ifTrue: [args at: 2 put: a. idx := idx - 1].	idx := 2.	[a := self getSystemAttribute: idx.	a notNil and: [a size > 0]]		whileTrue: [args at: idx put: a. idx := idx + 1].	idx := 1001.	[a := self getSystemAttribute: idx.	a notNil and: [a size > 0]]		whileTrue: [args at: idx put: a. idx := idx + 1].	^ args.! !!OSProcess class methodsFor: 'instance creation' stamp: 'dtl 1/7/2001 12:03'!thisOSProcess	"Answer the single instance of the class corresponding to the OS process in which	this Smalltalk image is executing."	"OSProcess thisOSProcess"	^ ThisOSProcess thisOSProcess! !!OSProcess class methodsFor: 'debugging' stamp: 'dtl 4/2/2005 12:32'!trace	"Print the sender's context on standard output. The debug message is	prefixed with the identity of the process in which the method is being	evaluated, and the identity of the object which received the message.	Useful for debugging timing or deadlock problems."	[self thisOSProcess stdOut		"The process in which the traced message is being evaluated"		nextPutAll: Processor activeProcess hash printString, ':';		"The identity of the object being traced"		nextPutAll: thisContext sender sender sender receiver hash printString, ':';		"The method context describing the method being evaluated"		nextPutAll: thisContext sender sender sender printString;		nextPut: Character lf;		flush]			on: Error			do: []! !!OSProcess class methodsFor: 'debugging' stamp: 'dtl 4/2/2005 12:30'!trace: debugMessageString	"Print trace information followed by a debug message"	[self thisOSProcess stdOut		"The process in which the traced message is being evaluated"		nextPutAll: Processor activeProcess hash printString, ':';		"The identity of the object being traced"		nextPutAll: thisContext sender sender sender receiver hash printString, ':';		"The method context describing the method being evaluated"		nextPutAll: thisContext sender sender sender printString, ':';		nextPutAll: debugMessageString;		nextPut: Character lf;		flush]			on: Error			do: []! !!OSProcess class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 21:48'!useFileSystem	"If true use FileSystem, otherwise use traditional FileDirectory. See senders	for methods with file system dependencies."	^ Smalltalk hasClassNamed: #FileReference! !!OSProcess class methodsFor: 'version testing' stamp: 'dtl 8/7/2003 07:28'!versionInformation	"OSProcess versionInformation"	| osppVersion |	osppVersion := (Smalltalk hasClassNamed: #OSProcessPlugin)		ifTrue:			[(Smalltalk at: #OSProcessPlugin) versionInformation]		ifFalse:			['(not installed in this image)'].	^ Array		with: (self name, ' version ', self versionString)		with: ((Smalltalk hasClassNamed: #CommandShell)				ifTrue:					[((Smalltalk at: #CommandShell) respondsTo: #versionString)						ifTrue:							['CommandShell version ', (Smalltalk at: #CommandShell) versionString]						ifFalse:							['CommandShell installed (old version, no versionString)']]				ifFalse:					['CommandShell is not installed'])		with:  osppVersion! !!OSProcess class methodsFor: 'version testing' stamp: 'dtl 6/17/2015 21:38'!versionString	"OSProcess versionString"	^'4.6.4'! !!OSProcess class methodsFor: 'version dependent' stamp: 'ThierryGoubier 9/5/2013 11:12'!vmVersion 	"After Squeak version 3.6, #vmVersion was moved to SmalltalkImage. Pharo3 deprecated vmVersion."	self isPharo3AndLater		ifTrue: [ ^ (Smalltalk perform: #vm) version ].	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk vmVersion]) current vmVersion! !!OSProcess class methodsFor: 'external command processing' stamp: 'dtl 1/7/2001 12:11'!waitForCommand: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process."	"OSProcess waitForCommand: 'echo sleeping...; sleep 3; echo I just slept for three seconds'"	^ self thisOSProcess waitForCommand: aCommandString! !!OSProcess methodsFor: 'initialize - release' stamp: 'dtl 5/31/1999 13:54'!initialize	self subclassResponsibility! !!OSProcess methodsFor: 'testing' stamp: 'dtl 7/14/2001 21:12'!isExternalProcess	^ true! !!OSProcess methodsFor: 'private' stamp: 'dtl 8/30/2003 10:11'!noAccessorAvailable	^ self class noAccessorAvailable! !!OSProcess methodsFor: 'accessing' stamp: 'dtl 3/18/2000 13:57'!pid	^ pid! !!OSProcess methodsFor: 'accessing' stamp: 'dtl 3/18/2000 13:58'!pid: processIdentifier	pid := processIdentifier! !!OSProcess methodsFor: 'printing' stamp: 'dtl 10/17/1999 21:12'!printOn: aStream	super printOn: aStream. aStream nextPutAll: ' with pid '. self pid printOn: aStream! !!ThisOSProcess commentStamp: '<historical>' prior: 34399925!I represent the operating system process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems by collaborating with corresponding subclasses of OSProcessAccessor to provide primitive access to the external operating system.!!MacProcess commentStamp: '<historical>' prior: 34400296!I represent a Macintosh operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of MacOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my MacOSProcessAccessor.!!MacProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:46'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for	the Squeak VM running on the current platform."	^ self isNonUnixMac! !!MacProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in	the standard C library, except that aCommandString runs asynchronously	in a child process. Answer an instance of ExternalMacOSProcess which	is a proxy for the new MacOS process."	self notYetImplemented! !!MacProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Use my processAccessor to call vfork() and execve() and create a	new child task. Answer a proxy for the new task, an instance of	ExternalMacOSProcess."	self notYetImplemented! !!MacProcess methodsFor: 'environment' stamp: 'dtl 1/23/2013 21:10'!getCwd	"Not yet implemented - answer a reasonable default."	^ OSProcess defaultPathString! !!MacProcess methodsFor: 'initialize - release' stamp: 'dtl 10/14/2001 14:03'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is executing."! !!MacProcess methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:46'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isNonUnixMac! !!OS2Process commentStamp: '<historical>' prior: 34400818!I represent an OS2 operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of OS2OSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my OS2OSProcessAccessor.!!OS2Process class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:47'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for	the Squeak VM running on the current platform."	^ self isOS2! !!OS2Process methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in	the standard C library, except that aCommandString runs asynchronously	in a child process. Answer an instance of ExternalOS2OSProcess which	is a proxy for the new OS2 process."	self notYetImplemented! !!OS2Process methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Use my processAccessor to call vfork() and execve() and create a	new child task. Answer a proxy for the new task, an instance of	ExternalOS2OSProcess."	self notYetImplemented! !!OS2Process methodsFor: 'environment' stamp: 'dtl 1/23/2013 21:09'!getCwd	"Not yet implemented - answer a reasonable default."	^ OSProcess defaultPathString! !!OS2Process methodsFor: 'initialize - release' stamp: 'dtl 10/14/2001 14:03'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is executing."! !!OS2Process methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:47'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isOS2! !!RiscOSProcess commentStamp: '<historical>' prior: 34401338!I represent an Acorn RiscOS operating system task, such as the task in which the Squeak VM is currently running. I collaborate with a singleton instance of RiscOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of a RiscOSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my RiscOSProcessAccessor.!!RiscOSProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:48'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for	the Squeak VM running on the current platform."	^ self isRiscOS! !!RiscOSProcess class methodsFor: 'utility' stamp: 'dtl 3/11/2001 11:47'!makeVmIn: buildDirectoryPathName	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart	using the new VM. This assumes that the currently executing VM is	either located in, or linked to, the buildDirectoryPathName directory."! !!RiscOSProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in	the standard C library, except that aCommandString runs asynchronously	in a child process. Answer an instance of ExternalRiscOSProcess which	is a proxy for the new RiscOS task."	self notYetImplemented! !!RiscOSProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:18'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Use my processAccessor to call vfork() and execve() and create a	new child task. Answer a proxy for the new task, an instance of	ExternalRiscOSProcess."	self notYetImplemented! !!RiscOSProcess methodsFor: 'environment' stamp: 'dtl 1/23/2013 21:10'!getCwd	"Not yet implemented - answer a reasonable default."	^ OSProcess defaultPathString! !!RiscOSProcess methodsFor: 'initialize - release' stamp: 'dtl 10/14/2001 14:04'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is executing."! !!RiscOSProcess methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:48'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isRiscOS! !!ThisOSProcess class methodsFor: 'concrete subclasses' stamp: 'dtl 3/5/2005 12:08'!concreteClass	"ThisOSProcess concreteClass"	^ self subclasses		detect: [:c | c isResponsibleForThisPlatform]		ifNone: [self notify: self printString,					': No concrete class implementation available for system type ',					self platformName printString.				nil]! !!ThisOSProcess class methodsFor: 'concrete subclasses' stamp: 'dtl 6/28/2010 21:14'!concreteClassOrNil	"ThisOSProcess concreteClassOrNil"	^ self subclasses		detect: [:c | c isResponsibleForThisPlatform]		ifNone: [nil]! !!ThisOSProcess class methodsFor: 'initialize-release' stamp: 'dtl 2/6/2015 20:53'!initialize	"ThisOSProcess initialize"	OSProcess initialize. "required to ensure the change sets file in smoothly"	AttachableFileStream initialize.	OSProcessAccessor initialize.	ChildListSize := 20. "list will be pruned to this size, except for any children still running"	self initializeThisOSProcess.	Smalltalk addToStartUpList: ThisOSProcess.	Smalltalk addToShutDownList: ThisOSProcess! !!ThisOSProcess class methodsFor: 'initialize-release' stamp: 'dtl 8/25/2010 22:58'!initializeThisOSProcess	"Initialize the singleton instance, creating a new instance only if the	platform type has changed since shutdown (running on a different	type of computer)."	(ThisInstance isNil or: [ThisInstance isResponsibleForThisPlatform not])		ifTrue: [ | cls |			(cls := self concreteClassOrNil)				ifNil: [ThisInstance := nil "no concrete class for this platform"]				ifNotNil: [ThisInstance := cls basicNew]].	ThisInstance initialize! !!ThisOSProcess class methodsFor: 'initialize-release' stamp: 'dtl 7/5/2010 11:56'!initializeThisOSProcessWithNotifier	"Initialize the singleton instance, creating a new instance only if the	platform type has changed since shutdown (running on a different	type of computer). Warn if no implementation is available for this platform."	(ThisInstance isNil or: [ThisInstance isResponsibleForThisPlatform not])		ifTrue: [ThisInstance := self concreteClass basicNew].	ThisInstance initialize! !!ThisOSProcess class methodsFor: 'testing' stamp: 'dtl 8/18/2014 20:08'!isHeadless	"Answer true if the image is known to be headless, otherwise assume	that a user interface is present."	(Smalltalk respondsTo: #isHeadless)		ifTrue: [ ^Smalltalk perform: #isHeadless ].	^ false "assume that a UI is present"! !!ThisOSProcess class methodsFor: 'instance creation' stamp: 'dtl 11/5/2000 16:10'!new	self notify: self name, ': Only one instance of ThisOSProcess or any of its subclasses should exist in the image. Use #thisOSProcess to obtain the singleton instance.'.	self shouldNotImplement! !!ThisOSProcess class methodsFor: 'system startup' stamp: 'dtl 3/8/2013 18:42'!shutDown: quitting	"Break dependency on my OSProcessAccessor. This is done explicitly at	shutDown time in order to prevent possible problems when an image is	restarted on another platform type, in which case a new ThisOSProcess	instance is created and the old instance could still have an unwanted	dependency on an OSProcessAccessor."	quitting ifTrue: [OSProcess accessor				ifNotNilDo: [:acc | acc breakDependents]]! !!ThisOSProcess class methodsFor: 'system startup' stamp: 'dtl 2/6/2015 20:19'!startUp: resuming	"Initialize my singleton instance, and the singleton instance of my	OSProcessAccessor. On Unix, set the signal handler in my process	accessor to respond to externally generated sigchld signals. This	must be done after each image restart in order to call a primitive	which informs the VM of the identity of the semaphore to signal.	When not running on a Unix system, the primitive fails and the	method has no effect. Notify dependents of the singleton instance	if the image has restarted in a different OS process (this is not the	case when #startUp is called after a simple image save). The	notification is done in the initialization of my OSProcessAccessor."	| aio |	(aio := Smalltalk at: #AioEventHandler)		ifNotNil: [ aio startUp: resuming ].	resuming ifTrue: [ self initializeThisOSProcess ]! !!ThisOSProcess class methodsFor: 'instance creation' stamp: 'dtl 10/1/2006 08:38'!thisOSProcess	"Answer a single instance of the class corresponding to the OS process in 	which this Smalltalk image is executing."	"ThisOSProcess thisOSProcess"	^ ThisInstance! !!ThisOSProcess methodsFor: 'comparing' stamp: 'dtl 11/15/2013 10:30'!= processProxy	"True if this is a proxy that represents the same OS process as processProxy"	^ ((processProxy isKindOf: ThisOSProcess)			and: [pid = processProxy pid])		and: [sessionID = processProxy sessionID]! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 6/5/2015 20:13'!activeChildren	"Answer child processes which are currently believed to be running."	"OSProcess thisOSProcess activeChildren"	^ accessProtect critical: [ childProcessList select: [ :p | p isComplete not ] ].! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 19:50'!allMyChildren	^ Dictionary withAll: (childProcessList collect: [ :e | e pid -> e ])! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/5/2003 21:59'!canConnectToXDisplay: xDisplayName	"Open and close a connection to displayName. It the connection was successfully	opened, answer true; otherwise false. This is intended to check for the ability	to open an X display prior to actually making the attempt."	"self thisOSProcess canConnectToXDisplay: ':0.0' "	"self thisOSProcess canConnectToXDisplay: ':1' "	"self thisOSProcess canConnectToXDisplay: 'bogus:0' " "<-make sure network is running first!!"	(xDisplayName isKindOf: String) ifFalse: [^ false].	^ self processAccessor primCanConnectToXDisplay: xDisplayName! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 20:11'!childPids	^ childProcessList collect: [ :p | p pid ]! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/6/2003 06:35'!closeXDisplay	"Become headless by closing the X session. All subsequent processing should involve	no further display interaction."	"self thisOSProcess closeXDisplay"	| proc |	proc := self processAccessor primKillDisplay.	proc ifNil: [self noAccessorAvailable].	^ proc! !!ThisOSProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:15'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in	the standard C library, except that aCommandString runs asynchronously	in a child process. Answer an instance of ExternalMacOSProcess which	is a proxy for the new OS process."	self subclassResponsibility! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/5/2003 22:05'!currentXDisplayName	"self thisOSProcess currentXDisplayName"	^ self processAccessor primGetXDisplayName! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/6/2003 06:35'!decapitate	"Become headless by closing the X session. All subsequent processing should involve	no further display interaction."	"self thisOSProcess decapitate"	^ self closeXDisplay! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 20:12'!discardExitedChildren	"Remove entries for completed child processed from dictionary."	self updateAllMyChildren.	childProcessList		select: [ :p | p isComplete ]		thenDo: [ :e | self unregisterChildProcess: e ].	^ childProcessList! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/6/2003 06:30'!disconnectXDisplay	"Disconnect from the X server, but do not close the existing Squeak window. A new	display medium must be opened before further interaction with the display."	"self thisOSProcess disconnectXDisplay"	| proc |	proc := self processAccessor primDisconnectDisplay.	proc ifNil: [self noAccessorAvailable].	^ proc! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/5/2003 22:12'!displayOnXServer: xDisplayName	"Check if it is possible to open a display on the X server identified by	xDisplayName. If so, close the current X display and reopen it on	the new server. On success, answer the previous display name. On	failure, answer a string with an error message. This method is expected	to be called by a web server or other application which may wish to	make use of the result string."	"self thisOSProcess displayOnXServer: ':0.0' "	"self thisOSProcess displayOnXServer: 'unix:0' "	"self thisOSProcess displayOnXServer: ':1' "	"self thisOSProcess displayOnXServer: 'noSuchMachine'"	"self thisOSProcess displayOnXServer: 'noSuchMachine:0'" "<-make sure network is running first!!"	| previousDisplayName |	(xDisplayName isKindOf: String)		ifFalse: [^ 'expected display name string'].	previousDisplayName := self currentXDisplayName.	(self canConnectToXDisplay: xDisplayName)		ifTrue:			[self decapitate.			self setXDisplayName: xDisplayName.			self recapitate.			^ previousDisplayName]		ifFalse:			[^ 'cannot connect to display ', xDisplayName]! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 20:14'!exitedChildren	"Answer child processes which have exited and are no longer running."	"OSProcess thisOSProcess exitedChildren"	^ accessProtect critical: [ childProcessList select: [ :p | p isComplete ]].! !!ThisOSProcess methodsFor: 'finalization' stamp: 'dtl 11/4/2000 15:49'!finalize	processAccessor		ifNotNil: 			[processAccessor removeDependent: self.			processAccessor finalize].	processAccessor := nil! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 9/1/2003 13:15'!flushXDisplay	"Synchronize output to the X display."	"self thisOSProcess flushXDisplay"	^ self processAccessor primFlushXDisplay! !!ThisOSProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:16'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Use my processAccessor to call vfork() and execve() and create a	new child task. Answer a proxy for the new task, an instance of	ExternalOSProcess."	self subclassResponsibility! !!ThisOSProcess methodsFor: 'environment' stamp: 'dtl 10/18/2001 20:10'!getCwd	self subclassResponsibility! !!ThisOSProcess methodsFor: 'private - IOHandle' stamp: 'dtl 9/25/2005 16:23'!handleFromAccessor: aByteArrayOrIOAccessor	UseIOHandle		ifTrue: [aByteArrayOrIOAccessor isNil			ifTrue: [^ nil]			ifFalse: [^ aByteArrayOrIOAccessor asSQFileStruct]]		ifFalse: [^ aByteArrayOrIOAccessor]! !!ThisOSProcess methodsFor: 'private - IOHandle' stamp: 'dtl 9/25/2005 16:22'!handleFromFileStream: aFileStream	UseIOHandle		ifTrue: [^ aFileStream ioHandle asSQFileStruct]		ifFalse: [^ aFileStream fileID]! !!ThisOSProcess methodsFor: 'comparing' stamp: 'dtl 6/27/2010 22:38'!hash	^ (pid ifNil: [self identityHash])		+ (sessionID				ifNil: [0]				ifNotNil: [sessionID sum])! !!ThisOSProcess methodsFor: 'initialize - release' stamp: 'dtl 7/26/2010 13:51'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is. executing."	accessProtect := Semaphore forMutualExclusion.	self initializeAllMyChildren.	processAccessor ifNotNil:		[processAccessor breakDependents.		processAccessor := nil].	((self processAccessor notNil		and: [processAccessor canAccessSystem])			and: [pid ~= processAccessor primGetPid])		ifTrue: [self resetChildProcessDictionary]! !!ThisOSProcess methodsFor: 'initialize - release' stamp: 'dtl 2/4/2015 23:35'!initializeAllMyChildren	"Use a Dictionary if process identifiers are unique. On Windows, the	process ID is not unique, so use an OrderedCollection instead."	^ childProcessList := OrderedCollection new! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/24/2003 10:12'!isConnectedToXServer	"Answer true if VM is currently connected to an X server."	"self thisOSProcess isConnectedToXServer"	^ self processAccessor primIsConnectedToXServer! !!ThisOSProcess methodsFor: 'platform identification' stamp: 'dtl 10/10/2001 21:24'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self subclassResponsibility! !!ThisOSProcess methodsFor: 'private - IOHandle' stamp: 'dtl 9/25/2005 16:23'!isStdErr: anIOHandle	"Answer true if anIOHandle represents stderr."	| realHandle |	anIOHandle ifNil: [^ false].	realHandle := self processAccessor getStdErrHandle.	realHandle ifNil: [^ false].	UseIOHandle		ifTrue: [^ anIOHandle handle = realHandle handle]		ifFalse: [^ anIOHandle = realHandle]! !!ThisOSProcess methodsFor: 'private - IOHandle' stamp: 'dtl 9/25/2005 16:23'!isStdIn: anIOHandle	"Answer true if anIOHandle represents stdin."	| realHandle |	anIOHandle ifNil: [^ false].	realHandle := self processAccessor getStdInHandle.	realHandle ifNil: [^ false].	UseIOHandle		ifTrue: [^ anIOHandle handle = realHandle handle]		ifFalse: [^ anIOHandle = realHandle]! !!ThisOSProcess methodsFor: 'private - IOHandle' stamp: 'dtl 9/25/2005 16:23'!isStdOut: anIOHandle	"Answer true if anIOHandle represents stdout."	| realHandle |	anIOHandle ifNil: [^ false].	realHandle := self processAccessor getStdOutHandle.	realHandle ifNil: [^ false].	UseIOHandle		ifTrue: [^ anIOHandle handle = realHandle handle]		ifFalse: [^ anIOHandle = realHandle]! !!ThisOSProcess methodsFor: 'updating' stamp: 'dtl 2/26/2002 08:37'!needsRefresh	"Answer true if the sessionID variable is out of date with respect to the running	OS Process. Subclasses should provide implementation, answer true as default."	^ true! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/6/2003 06:36'!openXDisplay	"Restore headful display opening the X session."	"self thisOSProcess closeXDisplay. (Delay forSeconds: 5) wait. self thisOSProcess openXDisplay."	| proc |	proc := self processAccessor primOpenXDisplay.	proc ifNil: [self noAccessorAvailable].	^ proc! !!ThisOSProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 13:30'!processAccessor	| a |	processAccessor		ifNil: 			[a := OSProcessAccessor forThisOSProcess.			a isResponsibleForThisPlatform ifTrue:				[processAccessor := a.				processAccessor addDependent: self]].	^ processAccessor! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 20:03'!pruneExitedChildrenAfter: size	"Limit the size of the child process registry. Select the last entries, and unregister	them if they are no longer active."	"OSProcess thisOSProcess pruneExitedChildrenAfter: 5"	(accessProtect critical: [childProcessList allButFirst: size])		do: [ :e |			e isComplete ifTrue: [ self unregisterChildProcess: e ]]! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/6/2003 06:34'!recapitate	"Restore headful display opening the X session."	"self thisOSProcess decapitate. (Delay forSeconds: 5) wait. self thisOSProcess recapitate."	^ self openXDisplay! !!ThisOSProcess methodsFor: 'updating' stamp: 'dtl 2/26/2002 08:32'!refreshFromProcessAccessor	"Set my instance variables to reflect the state of the OS process in which this Smalltalk	virtual machine is executing."	self subclassResponsibility! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 20:54'!registerChildProcess: anOSProcess	"Unregister anOSProcess, and trim the child process registry to prevent excessive	accumulation of exited children."	accessProtect critical: [ childProcessList addFirst: anOSProcess ].	self pruneExitedChildrenAfter: ChildListSize.	^ anOSProcess! !!ThisOSProcess methodsFor: 'updating' stamp: 'dtl 2/27/2015 07:25'!resetChildProcessDictionary	"Forget all the entries in the allMyChildren dictionary. This method may be called	when a new session is started, since the child processes of the previous session are	no longer children of this process."	self allMyChildren do: [ :p | self unregisterChildProcess: p ]! !!ThisOSProcess methodsFor: 'accessing' stamp: 'dtl 9/26/2005 20:04'!sessionID	^ sessionID! !!ThisOSProcess methodsFor: 'private' stamp: 'dtl 9/25/2005 13:28'!setStdErr	"If stdErr is nil, then set it. If not nil, check to see if it is has a valid connection to	stderr. If not valid, then replace it, otherwise answer the existing valid stream.	Obscure bug warning: If a valid AttachableFileStream on stderr is garbage collected,	then stderr will be closed. It is advisable (but not necessary) to treat the stream	on stderr as a singleton, but in any case, any extra instances attached to stderr	should not be allowed to be garbage collected."	| stdErrHandle |	stdErr ifNotNil:			[(self isStdErr: stdErr ioHandle) ifTrue: [^ stdErr]].	stdErrHandle := self processAccessor getStdErrHandle.	stdErrHandle ifNotNil:			[stdErr := AttachableFileStream name: 'stderr' attachTo: stdErrHandle writable: true].	^ stdErr! !!ThisOSProcess methodsFor: 'private' stamp: 'dtl 9/25/2005 13:28'!setStdIn	"If stdIn is nil, then set it. If not nil, check to see if it is has a valid connection to	stdin. If not valid, then replace it, otherwise answer the existing valid stream.	Obscure bug warning: If a valid AttachableFileStream on stdin is garbage collected,	then stdin will be closed. It is advisable (but not necessary) to treat the stream	on stdin as a singleton, but in any case, any extra instances attached to stdin	should not be allowed to be garbage collected."	| stdInHandle |	stdIn ifNotNil:			[(self isStdIn: stdIn ioHandle) ifTrue: [^ stdIn]].	stdInHandle := self processAccessor getStdInHandle.	stdInHandle ifNotNil:			[stdIn := AttachableFileStream name: 'stdin' attachTo: stdInHandle writable: false].	^ stdIn! !!ThisOSProcess methodsFor: 'private' stamp: 'dtl 9/25/2005 13:29'!setStdOut	"If stdOut is nil, then set it. If not nil, check to see if it is has a valid connection to	stdout. If not valid, then replace it, otherwise answer the existing valid stream.	Obscure bug warning: If a valid AttachableFileStream on stdout is garbage collected,	then stdout will be closed. It is advisable (but not necessary) to treat the stream	on stdout as a singleton, but in any case, any extra instances attached to stdout	should not be allowed to be garbage collected."	| stdOutHandle |	stdOut ifNotNil:			[(self isStdOut: stdOut ioHandle) ifTrue: [^ stdOut]].	stdOutHandle := self processAccessor getStdOutHandle.	stdOutHandle ifNotNil:			[stdOut := AttachableFileStream name: 'stdout' attachTo: stdOutHandle writable: true].	^ stdOut! !!ThisOSProcess methodsFor: 'display management' stamp: 'dtl 8/5/2003 22:16'!setXDisplayName: xDisplayName	"Set X display name for use by the next call to recapitate"	"self thisOSProcess setXDisplayName: 'unix:0' "	"self thisOSProcess setXDisplayName: ':1' "	self processAccessor primSetXDisplayName: xDisplayName! !!ThisOSProcess methodsFor: 'accessing' stamp: 'dtl 9/25/2005 13:30'!stdErr	^ stdErr! !!ThisOSProcess methodsFor: 'accessing' stamp: 'dtl 9/25/2005 13:30'!stdIn	^ stdIn! !!ThisOSProcess methodsFor: 'accessing' stamp: 'dtl 9/25/2005 13:31'!stdOut	^ stdOut! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/6/2015 19:49'!unregisterChildProcess: anOSProcess	accessProtect		critical: [childProcessList remove: anOSProcess ifAbsent: [] ].	^ anOSProcess! !!ThisOSProcess methodsFor: 'updating' stamp: 'dtl 10/15/2001 21:27'!update: aParameter	aParameter == #invalidProcessAccessor ifTrue: [processAccessor := nil].	^ super update: aParameter! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/25/2002 23:23'!updateActiveChildren	"Test each active child for its completion status and update runState and exitStatus	accordingly. This method may be called when a semaphore is set indicating that	some child OSProcess has died. A better approach might be to use an event queue	for death of child events; however, until event queues are part of Squeak image,	this polling mechanism is sufficient."	self activeChildren do:		[:child | child update: #runState]! !!ThisOSProcess methodsFor: 'child process management' stamp: 'dtl 2/4/2015 23:38'!updateAllMyChildren	"Test each child to make sure that it is still accessible. If the child is believed to be	running, check to see if it has exited, and update runState and exitStatus accordingly."	| children |	accessProtect critical: [children := self allMyChildren asArray].	children do:		[:child |		child update: #accessibility.		child isRunning ifTrue: [child update: #runState]]! !!UnixProcess commentStamp: '<historical>' prior: 34401874!I represent the Unix operating system process in which this Squeak session is running. I collaborate with an instance of UnixOSProcessAccessor to provide access to the external operating system. My instance variables are updated when my process accessor changes, allowing them to be monitored with a Smalltalk inspector.!!UnixProcess class methodsFor: 'utility' stamp: 'dtl 3/10/2001 09:52'!arguments	"UnixProcess arguments"	^ self thisOSProcess arguments! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 2/24/2013 10:26'!backgroundProcessInHeadlessSqueak	"Demonstrate running a ''batch job'' in a low priority background Squeak,	with output written to an OSPipe. This Squeak image reads data from the	pipe and displays it on the Transcript. The background Squeak will write	enough data to block an OSPipe, so the foreground Squeak loops while	reading available data up to end of file.	Open a Transcript, then '' inspect it '' on this method. Process runs	indefinitely, so terminate the process to end demo."	"UnixProcess backgroundProcessInHeadlessSqueak"	^ [[| pipe backgroundJob ws s | 	pipe := OSPipe new.	backgroundJob := OSProcess thisOSProcess	forkHeadlessSqueakAndDoThenQuit: [| beers | 		OSProcess accessor nice: 1. "lower priority of background OS process"		beers := [:i | (i < 1 ifTrue: ['no more'] ifFalse: [i asString])					, ' bottle' , (i = 1 ifTrue: [''] ifFalse: ['s'])].		(99 to: 1 by: -1) do: [:count | pipe nextPutAll:			(beers value: count) , ' of beer on the wall, '			, (beers value: count) , ' of beer' , String cr			, 'take one down and pass it around, '			, (beers value: count - 1) , ' of beer on the wall'; cr].		pipe close].	WorldState addDeferredUIMessage:		[Transcript show: backgroundJob asString , ' started'; cr].	pipe closeWriter. "don't need writer end, close it before the #upToEnd"	"pipe writer blocks when pipe full, so we need to loop while reading to end "	ws := WriteStream on: String new.	[backgroundJob isComplete] whileFalse:		[(Delay forMilliseconds: 200) wait.		(s := pipe upToEnd) ifNotNil: [ws nextPutAll: s]].	pipe close.	WorldState addDeferredUIMessage:		[Transcript show: backgroundJob asString			, ' completed, display results in 2 seconds'; cr].	(Delay forSeconds: 2) wait.	WorldState addDeferredUIMessage:		[Transcript show: ws contents.		Transcript cr; show: 'delay 5 seconds before forking next Squeak job'; cr].	(Delay forSeconds: 5) wait] repeat]		forkAt: Processor userBackgroundPriority! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:10'!canConnectToXDisplay: xDisplayName	"Deprecated. See ThisOSProcess>canConnectToXDisplay:"	"self canConnectToXDisplay: ':0.0' "	^ self thisOSProcess canConnectToXDisplay: xDisplayName! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:17'!catAFile	"Copy contents of a file to standard output. This demonstrates reassigning stdin to an open FileStream."	"UnixProcess catAFile"	| in proc |	in := FileStream readOnlyFileNamed: '/etc/hosts'.	proc := self forkJob: '/bin/cat'			arguments: nil			environment: nil			descriptors: (Array with: in with: nil with: nil).	in close.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:28'!catFromFileToFiles	"Copy contents of a file to another file, with any error messages going 	to a third file."	"UnixProcess catFromFileToFiles"	| in out err proc |	in := FileStream readOnlyFileNamed: '/etc/hosts'.	out := FileStream newFileNamed: '/tmp/deleteMe.out'.	err := FileStream newFileNamed: '/tmp/deleteMe.err'.	proc := UnixProcess				forkJob: '/bin/cat'				arguments: nil				environment: nil				descriptors: (Array						with: in						with: out						with: err).	in close.	out close.	err close.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 11/14/2000 00:07'!clientServerDemo	"Start a new headless instance of Squeak running in a child OS process. The new	instance is a nearly identical copy of its parent, resuming execution at the same	point as the parent. The child process will run a TCP server process in the headless	image, then exit. Test results are written to the Transcript.	Answer '127 0 0 1' in response to the host address dialog."	"UnixProcess clientServerDemo"	| proc |	proc := self forkHeadlessSqueakAndDoThenQuit: [Socket remoteTestServerTCP].	proc ifNotNil: [Socket remoteTestClientTCP].	^ proc! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 1/7/2001 12:55'!clientServerDemo2	"Start a new instance of Squeak running in a child OS process. The new 	instance is a nearly identical copy of its parent, resuming execution at	the same point as the parent. The child process will run a TCP server	process, then exit. Test results are written to the Transcript. "	"UnixProcess clientServerDemo2"	| remotePort remoteHost serverBlock socket buffer n bytesToSend sendBuf	receiveBuf done bytesSent bytesReceived packetsSent packetsReceived t |	remotePort := 54321.	remoteHost := 'localhost'.	serverBlock := 			[Transcript clear; cr; show: 'This is the server Squeak session'; cr.			Socket initializeNetworkIfFail: [^ nil].			socket := Socket newTCP.			socket listenOn: remotePort.			buffer := String new: 4000.			socket waitForConnectionUntil: Socket standardDeadline.			[socket isConnected]				whileTrue: [socket dataAvailable						ifTrue: 							[n := socket receiveDataInto: buffer.							socket sendData: buffer count: n]].			socket closeAndDestroy].	(UnixProcess forkSqueakAndDoThenQuit: serverBlock)		ifNil: [self noAccessorAvailable. ^ nil].	Transcript cr; show: 'This is the client Squeak session'; cr.	Transcript show: 'starting client/server TCP test'; cr.	Transcript show: 'initializing network ... '.	Socket initializeNetworkIfFail: [^ Transcript show: 'failed'].	Transcript show: 'ok'; cr.	socket := Socket newTCP.	socket connectTo: (NetNameResolver addressForName: remoteHost) port: remotePort.	socket waitForConnectionUntil: Socket standardDeadline.	Transcript show: 'client endpoint created'; cr.	bytesToSend := 1000000.	sendBuf := String new: 4000 withAll: $x.	receiveBuf := String new: 50000.	done := false.	bytesSent := bytesReceived := packetsSent := packetsReceived := 0.	t := Time				millisecondsToRun: 					[[done]						whileFalse: 							[(socket sendDone and: [bytesSent < bytesToSend])								ifTrue: 									[packetsSent := packetsSent + 1.									bytesSent := bytesSent + (socket sendData: sendBuf)].							socket dataAvailable								ifTrue: 									[packetsReceived := packetsReceived + 1.									bytesReceived := bytesReceived + (socket receiveDataInto: receiveBuf)].							done := bytesSent >= bytesToSend].					[bytesReceived < bytesToSend]						whileTrue: [socket dataAvailable								ifTrue: 									[packetsReceived := packetsReceived + 1.									bytesReceived := bytesReceived + (socket receiveDataInto: receiveBuf)]]].	socket closeAndDestroy.	Transcript show: 'remoteClient TCP test done; time = ' , t printString; cr.	Transcript show: packetsSent printString , ' packets, ' , bytesSent printString ,		' bytes sent (' , (bytesSent * 1000 // t) printString , ' bytes/sec)'; cr.	Transcript show: packetsReceived printString , ' packets, ' , bytesReceived printString ,		' bytes received (' , (bytesReceived * 1000 // t) printString , ' bytes/sec)'; cr.	^ bytesReceived! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 9/9/2000 16:00'!cloneSqueak	"Start a new instance of Squeak running in a child OS process. The new instance is a	nearly identical copy of its parent, resuming execution at the same point as the	parent, and differentiated only by the return value of this method."	"UnixProcess cloneSqueak"	| proc |	proc := self forkSqueak.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:10'!currentXDisplayName	"Deprecated. See ThisOSProcess>>currentXDisplayName"	"self currentXDisplayName"	^ self thisOSProcess currentXDisplayName! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:09'!decapitate	"Deprecated. See ThisOSProcess>>decapitate"	"self decapitate"	^ OSProcess thisOSProcess decapitate! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:18'!displayOnXServer: xDisplayName	"Deprecated. See ThisOSProcess>>displayOnXServer"	"self displayOnXServer: ':0.0' "	"self displayOnXServer: 'unix:0' "	"self displayOnXServer: ':1' "	"self displayOnXServer: 'noSuchMachine'"	"self displayOnXServer: 'noSuchMachine:0'" "<-make sure network is running first!!"	^ OSProcess thisOSProcess displayOnXServer: xDisplayName! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:31'!eightLeafSqueakTree	"Clone this squeak three times, resulting in a total of (2 raisedTo: 3) nearly identical	squeaks. Have a look at the pidArray inspectors and to the debug messages on stdout	in order to see what is going on. The tree of processes looks like this:	111	 +--------+--------+	 |		 |		 |	011		101		110	 +---+	 |	 |	 |	100	010	001		 |		000	"	"UnixProcess eightLeafSqueakTree inspect"	| depth this pidArray debugString |	depth := 3.	this := OSProcess thisOSProcess.	this stdOut ifNil: [self noAccessorAvailable. ^ nil].	pidArray := Array new: depth.	(1 to: depth) do: [ :e | | p pid |		p := this forkSqueak.		pid := (p == this) ifTrue: [0] ifFalse: [p pid].	"Use Unix fork(2) convention"		pidArray at: e put: pid].	debugString := 'pid ', (this pid printString), ' ppid ', (this ppid printString), ' ',		(pidArray printString), (Character lf asString).	this stdOut nextPutAll: debugString.	^ pidArray! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 12/27/2000 17:18'!env	"Note: The #environment selector has special meaning for classes, so use #env."	"UnixProcess env"	^ self thisOSProcess environment! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 12/27/2000 16:57'!forkHeadlessSqueakAndDo: aBlock 	"Start a new instance of Squeak running in a child OS process, and  	execute aBlock in the child instance. The new instance is a clone of 	this image, but without a connection to the X display. The child instance 	executes aBlock, which hopefully does not involve interaction with the 	X display; and the parent continues normally.  	  	The child should not depend on using existing connections to external  	resources. For example, the child may lose its connections to stdin, 	stdout, and stderr after its parent exits."	"UnixProcess forkHeadlessSqueakAndDo: [UnixProcess helloWorld]"	^ self thisOSProcess forkHeadlessSqueakAndDo: aBlock! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 12/27/2000 17:00'!forkHeadlessSqueakAndDoThenQuit: aBlock 	"Start a new instance of Squeak running in a child OS process, and 	execute aBlock in the child instance. The new instance is a clone of	this image, but without a connection to the X display. The child instance	executes aBlock, which hopefully does not involve interaction with the	X display; and the parent continues normally.	The child should not depend on using existing connections to external 	resources. For example, the child may lose its connections to stdin, stdout,	and stderr after its parent exits."	"UnixProcess forkHeadlessSqueakAndDoThenQuit: [UnixProcess helloWorld]"	^ self thisOSProcess forkHeadlessSqueakAndDoThenQuit: aBlock! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 12/27/2000 16:48'!forkJob: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams 	"Call Unix vfork() and execve() to create a child process, and answer the 	child process. Delegate this to the singleton OSProcess>>thisOSProcess."	^ self thisOSProcess		forkJob: executableFile		arguments: arrayOfStrings		environment: stringDictionary		descriptors: arrayOf3Streams! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 7/5/2000 07:19'!forkSqueak	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	"UnixProcess forkSqueak"	^ self thisOSProcess forkSqueak.! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 10/8/2001 20:40'!forkSqueakAndDo: aBlock	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	"UnixProcess forkSqueakAndDo:		[Object inform: 'Hi, I am the child Squeak process.']"	^ self thisOSProcess forkSqueakAndDo: aBlock! !!UnixProcess class methodsFor: 'child process creation' stamp: 'dtl 10/8/2001 20:41'!forkSqueakAndDoThenQuit: aBlock	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	"UnixProcess forkSqueakAndDoThenQuit:		[Object inform: 'Hi, I am the child Squeak process. Click OK to exit the child Squeak.']"	^ self thisOSProcess forkSqueakAndDoThenQuit: aBlock! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 05:11'!headlessChild	"Start a new instance of Squeak running in a child OS process. The new	instance is a nearly identical copy of its parent, resuming execution at the	same point as the parent, and differentiated only by the return value of	this method. The child squeak will write a message to standard output,	then exit."	"UnixProcess headlessChild"	| this childBlock |	this := OSProcess thisOSProcess.	childBlock :=		[this stdOut nextPutAll: 'hello world from child process '.		this pid printOn: OSProcess thisOSProcess stdOut.		this stdOut nextPut: Character lf ].	^ self forkHeadlessSqueakAndDoThenQuit: childBlock! !!UnixProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:49'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for	the Squeak VM running on the current platform."	^ self isUnix! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:34'!listDirectory	"Execute a simple command, sending output to standard output."	"UnixProcess listDirectory"	| proc |	proc := self			forkJob: '/bin/ls'			arguments: nil			environment: nil			descriptors: nil.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'utility - VM building' stamp: 'dtl 10/19/2001 13:31'!makeVmIn: buildDirectoryPathName	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart using the	new VM. This assumes that the currently executing VM is either located in,	or linked to, the buildDirectoryPathName directory."	"UnixProcess makeVmIn: '/usr/local/squeak/Squeak-2.8/build'"	"UnixProcess makeVmIn: nil"	^ self makeVmIn: (buildDirectoryPathName ifNil: ['']) interactive: true! !!UnixProcess class methodsFor: 'utility - VM building' stamp: 'dtl 10/19/2001 11:41'!makeVmIn: buildDirectoryPathName interactive: aBoolean	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart using the	new VM. This assumes that the currently executing VM is either located in,	or linked to, the buildDirectoryPathName directory. If aBoolean is true,	display interactive dialogs, otherwise output goes only to the Transcript."	"UnixProcess makeVmIn: '/usr/local/squeak/Squeak-2.8/build' interactive: true"	| commandString result |	commandString := 'cd ', buildDirectoryPathName, '; make'.	Transcript cr; show: 'running external command "', commandString, '"'; cr.	result := self waitForCommandOutputArray: commandString.	((result at: 3) == 0 and: [(result at: 2) isEmpty])		ifTrue:			[Transcript show: 'make completed successfully, restarting VM'; cr.			aBoolean ifTrue:				[self inform: 'make completed successfully, restarting VM'].			self quitAndRestart]		ifFalse:			[Transcript show: (result at: 2); cr.			Transcript show: 'make did not succeed, VM will not be restarted'; cr.			aBoolean ifTrue:				[self inform: 'make did not succeed, VM will not be restarted'.				self inform: (result at: 2)]].	^ result! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 12/27/2000 17:16'!path	"UnixProcess path"	^ self thisOSProcess path! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 3/10/2001 09:53'!programName	"UnixProcess programName"	^ self thisOSProcess programName! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:15'!recapitate	"Deprecated. See ThisOSProcess>>recapitate"	"self decapitate. (Delay forSeconds: 5) wait. self recapitate."	^ OSProcess thisOSProcess recapitate! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 3/17/2002 13:38'!restartVirtualMachine	"Fork a new instance and quit this one. This moves the running VM into a new	OS process, and starts a new X display for the new process. It does not reload the	VM program text, so this cannot be used to restart the VM after rebuild."	"UnixProcess restartVirtualMachine"	| proc |	proc := self forkSqueak.	proc isNil		ifTrue: 			[self noAccessorAvailable.			nil]		ifFalse:			[OSProcess thisOSProcess == proc				ifFalse:					["Quit if this is the parent process"					Smalltalk quitPrimitive]].	^ proc! !!UnixProcess class methodsFor: 'unit tests' stamp: 'dtl 3/5/2005 14:19'!runTests	"Run a few tests to see if things are working correctly on Unix/Linux. 	Output is on stdout, stderr, and the Squeak Transcript. One of the tests 	requires input from stdin, so Squeak should be run from a shell command	line and not as a background process.	Warning: This test will crash your VM if your are using the -xshm command	line option. For reasons which I do not quite understand, the X shared	memory segment becomes invalid when the Squeak VM which initially	opened the shared memory exits. The remaining Squeak children will crash	when then then next try to update the display.	Note: If you see 'select: Bad file descriptor' messages on your console standard	output, these are occuring while running headless in the decapitate/recapitate	tests.	Important: Prior to evaluating this method, please type one line of text	followed by a <cr> on the terminal standard input. This provides the	input for the stdin test. Failing to provide this input prior to evaluating	the tests will cause one of the test cases to fail."	"UnixProcess runTests"	| this s p failures result a |	failures := 0.	Transcript show: 'Begin OSProcess tests'; cr.	Transcript show: 'Test for working ProcessAccessor ... '.	this := OSProcess thisOSProcess.	(this pid isKindOf: Integer)		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'Echo one line of text previously entered from stdin ... '.	s := OSProcess readFromStdIn.	s size > 0		ifTrue: [Transcript show: 'OK'; cr; show: s; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'Message to stdout ... '.	(OSProcess helloWorld isKindOf: AttachableFileStream)		ifTrue: [Transcript show: 'OK'; cr; show: s; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'Message to stderr ... '.	(OSProcess helloStdErr isKindOf: AttachableFileStream)		ifTrue: [Transcript show: 'OK'; cr; show: s; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess cataFile ... '.	p := UnixProcess catAFile.	(Delay forSeconds: 1) wait.	p exitStatus == 0		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess testEnvSet ... '.	p := UnixProcess testEnvSet.	(Delay forSeconds: 1) wait.	p exitStatus == 0		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess catFromFileToFiles ... '.	OSProcess command: 'rm /tmp/deleteMe.out'.	OSProcess command: 'rm /tmp/deleteMe.err'.	p := UnixProcess catFromFileToFiles.	(Delay forSeconds: 1) wait.	p exitStatus == 0		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess testRunCommand ... '.	OSProcess command: 'rm /tmp/deleteMe.out'.	OSProcess command: 'rm /tmp/deleteMe.err'.	p := UnixProcess testRunCommand.	(Delay forSeconds: 1) wait.	p exitStatus == 256		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess testPipe ... '.	UnixProcess testPipe = 'this is some text to write into the pipe'		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess testPipeLine ... '.	UnixProcess testPipeLine = 'This is the text to write out through one pipe, copy through an external cat command, and then read back in through another pipe.'		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess spawnTenHeadlessChildren ... '.	p := UnixProcess spawnTenHeadlessChildren.	(p size == 10 and: [(p select: [:e | (e runState == #running) | (e exitStatus == 0)]) size == 10])		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess cloneSqueak ... '.	p := UnixProcess cloneSqueak.	(p isKindOf: UnixProcess)		ifTrue: 			[(Delay forSeconds: 1) wait.			OSProcess snapshot: false andQuit: true].	(Delay forSeconds: 5) wait.	p exitStatus == 0		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess squeakSqueak ... '.	p := UnixProcess squeakSqueak.	(Delay forSeconds: 5) wait.	OSProcess thisOSProcess sigkill: p.	(Delay forSeconds: 1) wait.	p exitStatus == 9		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess restartVirtualMachine ... '.	p := UnixProcess restartVirtualMachine.	p pid == OSProcess thisOSProcess pid		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess command: ''cat'' input: ''this is some test data'' ... '.	p := (OSProcess thisOSProcess		command: 'cat'		input: 'this is some test data').	(Delay forSeconds: 1) wait.	p upToEnd = 'this is some test data'		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'UnixProcess waitForCommandOutput: ''echo sleeping...; sleep 1; echo I just slept for one second'' ... '.	('*I just slept for one second*' match:		(OSProcess thisOSProcess			waitForCommandOutput: 'echo sleeping...; sleep 1; echo I just slept for one second'))		ifTrue: [Transcript show: 'OK'; cr]		ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1].	Transcript show: 'Unix command pipeline with output and error returned in an array ... '.	(Smalltalk hasClassNamed: #PipeableOSProcess)		ifTrue:			[a := (((Smalltalk at: #PipeableOSProcess) command: 'echo this is a test; BOGUS') | 'cut -c11-14') outputAndError.			(((a isKindOf: Array)				and: ['test*' match: (a at: 1)])					and: ['*BOGUS*' match: (a at: 2)])						ifTrue: [Transcript show: 'OK'; cr]						ifFalse: [Transcript show: 'NFG'; cr. failures := failures + 1]]		ifFalse:			[Transcript show: 'skipping PipeableOSProcess test (requires CommandShell)'; cr].	Transcript show: 'UnixProcess decapitate and recapatiate five times'; cr.	5 timesRepeat:		[UnixProcess decapitate.		UnixProcess recapitate].	failures == 1		ifTrue: [result := 'OSProcess tests completed with ', failures printString, ' failure']		ifFalse: [result := 'OSProcess tests completed with ', failures printString, ' failures'].	Transcript show: result; cr.	^ result! !!UnixProcess class methodsFor: 'utility - image save' stamp: 'dtl 7/23/2010 07:50'!saveImageInBackground	"Save image in a background OS process."	"UnixProcess saveImageInBackground"	^ self saveImageInBackground: self uniqueNameForSavedImage nice: false! !!UnixProcess class methodsFor: 'utility - image save' stamp: 'dtl 1/8/2008 22:39'!saveImageInBackground: savedImageName nice: niceFlag	"When Squeak is used as a server it is sometimes desirable to periodically	save image snapshots. This method forks a headless Squeak to perform a	snapshot without impacting the server Squeak. Very little additional memory	is required to do this because Unix copy-on-write memory management allows	the two Squeak images to share object memory while the save is performed.	The saved image is given a time stamped name, and the image name of	the main server Squeak remains unchanged. If niceFlag is true, the	background OS process runs at lowered scheduling priority."	^ self forkHeadlessSqueakAndDo:		[| st |		"Delay is required in the background process when forking a headless		Squeak, probably necessary to permit X session stuff to settle down."		(Delay forMilliseconds: 500) wait.		(niceFlag notNil and: [niceFlag]) ifTrue:			["lower priority of background OS process"			OSProcess accessor nice: 1].		st := SmalltalkImage current.		(SourceFiles at: 2) ifNotNil:			["ensure that copying the changes file will always work"			st closeSourceFiles.			st saveChangesInFileNamed: (st fullNameForChangesNamed: savedImageName)].		st changeImageNameTo: savedImageName,'.image';			closeSourceFiles;			openSourceFiles;  "so SNAPSHOT appears in new changes file"			saveImageSegments;			snapshot: true andQuit: true]! !!UnixProcess class methodsFor: 'utility - image save' stamp: 'dtl 7/23/2010 07:50'!saveImageInBackgroundNicely	"Save image in a background OS process with lowered scheduling priority."	"UnixProcess saveImageInBackgroundNicely"	^ self saveImageInBackground: self uniqueNameForSavedImage nice: true! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 3/10/2001 09:53'!sessionID	"UnixProcess sessionID"	^ self thisOSProcess sessionID! !!UnixProcess class methodsFor: 'X display - deprecated' stamp: 'dtl 8/5/2003 22:18'!setXDisplayName: xDisplayName	"Deprecated. See ThisOSProcess>>setXDisplayName"	"self setXDisplayName: 'unix:0' "	"self setXDisplayName: ':1' "	^ OSProcess thisOSProcess setXDisplayName: xDisplayName! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:35'!spawnTenHeadlessChildren	"Spawn ten Squeak children, each of which writes a message to standard 	output, then exits. Answer an array of pid values for the child 	processes. "	"UnixProcess spawnTenHeadlessChildren"	| childBlock count children this |	this := OSProcess thisOSProcess.	this stdOut ifNil: [self noAccessorAvailable. ^ nil].	count := 10.	children := Array new: count.	childBlock := 			[this stdOut nextPutAll: 'hello world from child process '.			this pid printOn: this stdOut.			this stdOut nextPut: Character lf.			this stdOut flush].	(1 to: count)		do: 			[:e | 			OSProcess thisOSProcess stdOut flush.			children at: e put: (self forkHeadlessSqueakAndDoThenQuit: childBlock)].	^ children! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:38'!squeakSqueak	"Start a new instance of Squeak running in a child OS process. The new instance	will restart from the image file, so it is a clone of this image as it existed at the	most recent image save. See cloneSqueak for an example of how to clone the	running image without going back to the saved image file."	"UnixProcess squeakSqueak"	| proc |	proc := self squeak.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 7/13/2003 14:47'!startSwiki: aSwiki onPort: num loggingTo: aFileName	"Start a swiki in a headless Squeak image."	"UnixProcess startSwiki: 'myswiki' onPort: 8081 loggingTo: 'log.txt'"	| proc |	(Smalltalk hasClassNamed: #SwikiAction)		ifTrue:			[proc := self forkSqueakAndDo:				[(Smalltalk at: #SwikiAction) new restore: 'myswiki'.				(Smalltalk at: #PWS) serveOnPort: num loggingTo: aFileName.				UnixProcess decapitate].			proc ifNil: [self noAccessorAvailable].			^ proc]		ifFalse:		[self notify: 'PWS not installed in this image']! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 12/27/2000 17:12'!stdErr	"UnixProcess stdErr"	^ self thisOSProcess stdErr! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 12/27/2000 17:11'!stdIn	"UnixProcess stdIn"	^ self thisOSProcess stdIn! !!UnixProcess class methodsFor: 'utility' stamp: 'dtl 12/27/2000 17:11'!stdOut	"UnixProcess stdOut"	^ self thisOSProcess stdOut! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:41'!testEnvSet	"Set up a new environment for a child process. Exec a shell to show the 	environment variables on the terminal standard output. Note that many 	shells will set other environment variables in addition to those which we	set up prior to executing the shell."	"UnixProcess testEnvSet"	| e proc |	e := Dictionary new.	e at: #KEY1 put: 'value1';	 at: #KEY2 put: 'value2';	 at: #KEY3 put: 'value3'.	proc := self			forkJob: '/bin/sh'			arguments: #('-c' 'env' )			environment: e			descriptors: nil.	proc ifNil: [self noAccessorAvailable].	^ proc! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 2/11/2001 14:03'!testPipe	"Create an OS pipe, write some text to it, and read the text back from the 	other end of the pipe."	"UnixProcess testPipe inspect"	| s p r |	s := 'this is some text to write into the pipe'.	p := OSPipe new.	p ifNil: 		[self noAccessorAvailable.		^ p].	p writer nextPutAll: s.	p writer close.	r := p reader next: s size.	p reader close.	^ r! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 2/24/2001 16:28'!testPipeLine	"Create two OS pipes, and a child OS process with its input connected to 	one pipe and its  output connected to the other pipe. Write some text to	the input pipe, and read the resulting output (just echoed back by the	Unix cat command) back through the output pipe. Send a SIGHUP signal	to the child process to tell it to exit.	This test verifies the ability of Squeak to send text to an external OS process	through a pipe, and read the output text back from another pipe.	See ConnectedUnixProcess for a more useful implementation."	"UnixProcess testPipeLine inspect"	| testString pipe1 pipe2 input output src dest desc result child |	OSProcess accessor canAccessSystem ifFalse: [^ nil].	testString := 'This is the text to write out through one pipe, copy through an external cat command, and then read back in through another pipe.'.	pipe1 := OSPipe blockingPipe.	pipe2 := OSPipe nonBlockingPipe.	input := pipe1 reader.	output := pipe2 writer.	src := pipe1 writer.	dest := pipe2 reader.	desc := Array				with: input				with: output				with: nil.	child := self				forkJob: '/bin/cat'				arguments: nil				environment: nil				descriptors: desc.	input close.	output close.	src nextPutAll: testString.	src close.	(Delay forSeconds: 1) wait.	result := dest next: testString size.	dest close.	child sigterm. "Tell the child to exit"	^ result! !!UnixProcess class methodsFor: 'examples' stamp: 'dtl 7/12/2000 04:46'!testRunCommand	"Run the command 'ls -l /etc /etc/noSuchFile'. The output of the 	command will be in the file '/tmp/deleteMe.out', and the error output	will be in '/tmp/deleteMe.err'. "	"UnixProcess testRunCommand"	| out err desc args proc |	out := FileStream newFileNamed: '/tmp/deleteMe.out'.	err := FileStream newFileNamed: '/tmp/deleteMe.err'.	desc := Array				with: nil				with: out				with: err.	args := Array				with: '-l'				with: '/etc'				with: '/etc/noSuchFile'				with: '/etc/anotherNonexistentFile'.	proc := self				forkJob: '/bin/ls'				arguments: args				environment: nil				descriptors: desc.	proc ifNil: [self noAccessorAvailable].	out close.	err close.	^ proc! !!UnixProcess class methodsFor: 'utility - image save' stamp: 'dtl 11/8/2005 11:39'!uniqueNameForSavedImage	"A time stamped image name that will sort in date order in a directory listing"	"UnixProcess uniqueNameForSavedImage"	| now month day hour minute second |	now := DateAndTime now.	month := now month asString.	day := now dayOfMonth asString.	hour := now hour24 asString.	minute := now minute asString.	second := now second asString.	^ 'squeak-',		now year asString,		(month size < 2 ifTrue: ['0', month] ifFalse: [month]),		(day size < 2 ifTrue: ['0', day] ifFalse: [day]),		(hour size < 2 ifTrue: ['0', hour] ifFalse: [hour]),		(minute size < 2 ifTrue: ['0', minute] ifFalse: [minute]),		(second size < 2 ifTrue: ['0', second] ifFalse: [second])! !!UnixProcess class methodsFor: 'external command processing' stamp: 'dtl 1/18/2001 23:14'!waitForCommandOutput: aCommandString 	"Run a command in a shell process. Similar to the system(3) call in the 	standard C library. The active Smalltalk process waits for completion of	the external command process."	"UnixProcess waitForCommandOutput: 'echo sleeping...; sleep 1; echo I just slept for one second'"	"UnixProcess waitForCommandOutput: 'ThisIsABogusCommand'"	^ self thisOSProcess waitForCommandOutput: aCommandString! !!UnixProcess class methodsFor: 'external command processing' stamp: 'dtl 1/18/2001 23:14'!waitForCommandOutputArray: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process."	"UnixProcess waitForCommandOutputArray: 'echo Hello world!!; ls /NOSUCHFILE'"	^ self thisOSProcess waitForCommandOutputArray: aCommandString! !!UnixProcess methodsFor: 'private' stamp: 'djr 4/6/2009 14:31'!argsAsFlatArrayAndOffsets: anArrayOfNullTerminatedStrings	"Given anArrayOfNullTerminatedStrings, flatten the array into a string buffer,	leaving space at the beginning of the buffer for a list of C pointers. Answer	the string buffer and an array of address offsets. The address offsets may later	be converted to C pointers and overlaid on the beginning of the buffer, resulting	in a data structure which can be treated as a C array of strings suitable for	use as a Unix argv vector."	"OSProcess thisOSProcess argsAsFlatArrayAndOffsets:		(UnixProcess arguments collect:			[:e | e, (Character value: 0) asString])"	| offset arraySize flatStringArray ws addresses |	"Preserve offset space to hold address pointers."	offset := (anArrayOfNullTerminatedStrings size + 1) * self processAccessor sizeOfPointer.	"Allocate flat strings buffer"	arraySize := (anArrayOfNullTerminatedStrings collect: [:e | e size]) sum		+ ((anArrayOfNullTerminatedStrings size + 1) * self processAccessor sizeOfPointer).	"Flatten the strings out into a buffer, leaving room at the	beginning of the buffer for an array of addresses."	flatStringArray := String new: arraySize.	ws := WriteStream on: flatStringArray.	offset timesRepeat: [ws nextPut: (Character value: 0)].	anArrayOfNullTerminatedStrings do: [:e | ws nextPutAll: e].	"Find address offsets to be used in creating the addresses for the strings."	ws := WriteStream on: (Array new: anArrayOfNullTerminatedStrings size).	(anArrayOfNullTerminatedStrings collect: [:e | e size])		inject: offset into: [:p :e | ws nextPut: p. p + e].	addresses := ws contents.	"Results"	^ Array with: flatStringArray with: addresses! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:09'!arguments	^ arguments! !!UnixProcess methodsFor: 'environment' stamp: 'dtl 1/25/2013 19:00'!chDir: pathString	"Change current working directory, and update $PWD if it exists in the environment.	Answer nil for success, or an error message."	"OSProcess thisOSProcess chDir: '/tmp'"	"OSProcess thisOSProcess chDir: '/no/such/path'"	"OSProcess thisOSProcess chDir: OSProcess defaultPathString"	| realPath result |	realPath := self processAccessor realpath: pathString.	realPath ifNil: [realPath := pathString].	result := self processAccessor chDir: realPath.	result isNil		ifTrue:			[(self environmentAt: #PWD)				ifNotNil:					[self environmentAt: #PWD put: realPath.					^ nil]]		ifFalse:			[self inform: realPath, ': ', result.			^ result]! !!UnixProcess methodsFor: 'external command processing' stamp: 'dtl 2/27/2002 15:24'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library,	except that aCommandString runs asynchronously in a child process. The command is	run by a ConnectedUnixProcess in order to facilitate command pipelines within Squeak."	"UnixProcess thisOSProcess command: 'ls -l /etc'"	| proc |	pid isNil		ifTrue:			[self class noAccessorAvailable. ^nil]		ifFalse:			[proc := self					forkJob: ExternalUnixOSProcess defaultShellPath					arguments: (Array with: '-c' with: aCommandString)					environment: nil					descriptors: nil.			proc ifNil: [self class noAccessorAvailable].			^ proc]! !!UnixProcess methodsFor: 'external command processing' stamp: 'dtl 7/12/2003 11:51'!command: aCommandString input: aStreamOrString	"Run a command in a shell process. Similar to the system(3) call in the standard C library,	except that aCommandString runs asynchronously in a child process."	"OSProcess thisOSProcess		command: 'cat'		input: 'this is some test data'"	"OSProcess thisOSProcess		command: 'cat'		input: (ReadStream on: 'this is some test data')"	| proc |	(Smalltalk hasClassNamed: #PipeableOSProcess)		ifTrue:			[proc := (Smalltalk at: #PipeableOSProcess) command: aCommandString.			proc ifNil: [^ nil].			proc nextPutAll: aStreamOrString contents.			proc pipeToInput close.			^ proc]		ifFalse:			[self notify: 'the #command:input: method requires CommandShell, using #command: instead'.			^ self command: aStreamOrString contents]! !!UnixProcess methodsFor: 'private' stamp: 'djr 4/6/2009 14:31'!envAsFlatArrayAndOffsets: anEnvironmentDictionary	"Given anEnvironmentDictionary, flatten the dictionary into a string buffer,	leaving space at the beginning of the buffer for a list of C pointers. Answer	the string buffer and an array of address offsets. The address offsets may later	be converted to C pointers and overlaid on the beginning of the buffer, resulting	in a data structure which can be treated as a C array of strings suitable for	use as a Unix process environment."	"OSProcess thisOSProcess envAsFlatArrayAndOffsets: UnixProcess env"	| offset envArray arraySize flatStringArray ws addresses |	"Preserve offset space to hold address pointers."	offset := (anEnvironmentDictionary size + 1) * self processAccessor sizeOfPointer.	"Build collection of environment strings"	envArray := OrderedCollection new.	anEnvironmentDictionary keysAndValuesDo: [:k :v | envArray add: (k, '=', v)].	"Allocate flat strings buffer"	arraySize := ((envArray collect: [:e | e size + 1]) sum) + offset.	"Flatten the strings out into a buffer, leaving room at the beginning of	the buffer for an array of addresses."	flatStringArray := String new: arraySize.	ws := WriteStream on: flatStringArray.	offset timesRepeat: [ws nextPut: (Character value: 0)].	envArray do: [:e | ws nextPutAll: e; nextPut: (Character value: 0)].	"Find address offsets to be used in creating the addresses for the strings."	ws := WriteStream on: (Array new: anEnvironmentDictionary size).	(envArray collect: [:e | e size + 1])		inject: offset into: [:p :e | ws nextPut: p. p + e].	addresses := ws contents.	"Results"	^ Array with: flatStringArray with: addresses! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:09'!environment	^ environment! !!UnixProcess methodsFor: 'environment' stamp: 'dtl 3/6/2001 21:30'!environmentAt: aSymbol	"Answer an environment variable for the external OS process, and update the dictionary	in this Smalltalk object."	^ environment at: aSymbol asSymbol ifAbsent: []! !!UnixProcess methodsFor: 'environment' stamp: 'dtl 3/6/2001 21:30'!environmentAt: aSymbol put: aString	"Set an environment variable for the external OS process, and update the dictionary in	this Smalltalk object."	| s |	self initialize.	s := self processAccessor environmentAt: aSymbol put: aString.	s ifNotNil: [ self environment at: aSymbol asSymbol put: aString ].	^ s! !!UnixProcess methodsFor: 'finalization' stamp: 'dtl 2/4/2015 23:39'!finalize	"Use this to release any external resources prior to reinitializing."	super finalize.	stdIn := stdIn ifNotNil:		[[stdIn close] on: Error do: [:ex | ].		nil].	stdIn := stdOut ifNotNil:		[[stdOut close] on: Error do: [:ex | ].		nil].	stdIn := stdErr ifNotNil:		[[stdErr close] on: Error do: [:ex | ].		nil].	sessionID := nil.	ppid := nil.	programName := nil.	arguments := nil.	path := nil.	environment := nil.	self updateAllMyChildren.	childProcessList := nil.	processAccessor		ifNotNil: 			[processAccessor removeDependent: self.			processAccessor := nil]! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 2/27/2002 15:24'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams 	"Call Unix vfork() and execve() to create a child process, and answer the 	child process. This method is expected to be called by class side methods."	^ ExternalUnixOSProcess		forkAndExec: executableFile		arguments: arrayOfStrings		environment: stringDictionary		descriptors: arrayOf3Streams! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 2/27/2015 20:04'!forkHeadlessSqueak	"Just like forkSqueak, except that the child Squeak continues headless."	| thisPid childPid child connected |	stdOut ifNil: [^ nil].	self stdOut flush.	self stdErr flush.	thisPid := self pid.	connected := self processAccessor canControlXDisplay					and: [self flushXDisplay notNil].	childPid := self processAccessor forkSqueak.	^ childPid ifNotNil: [		childPid == 0			ifTrue:				[connected ifTrue: [self disconnectXDisplay].				OSProcess thisOSProcess processAccessor newPid.				^ self]			ifFalse:				[child := ExternalUnixOSProcess new.				child pid: childPid.				child ppid: thisPid.				child programName: self programName.				child initialStdIn: self stdIn.					child initialStdOut: self stdOut.				child initialStdErr: self stdErr.				child arguments: self arguments.				child initialEnvironment: self environment.				child notYetRunning.				self registerChildProcess: child.				child running.				^ child]]! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 1/7/2001 12:59'!forkHeadlessSqueakAndDo: aBlock 	"Start a new instance of Squeak running in a child OS process, and  	execute aBlock in the child instance. The new instance is a clone of 	this image, but without a connection to the X display. The child instance 	executes aBlock, which hopefully does not involve interaction with the 	X display; and the parent continues normally.  	  	The child should not depend on using existing connections to external  	resources. For example, the child may lose its connections to stdin, 	stdout, and stderr after its parent exits."	| childOrThisProc |	childOrThisProc := self forkHeadlessSqueak.	childOrThisProc		ifNil: 			[self class noAccessorAvailable.			^ nil].	childOrThisProc == self		ifTrue:			["Child process"			aBlock value].	^ childOrThisProc! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 8/7/2003 07:17'!forkHeadlessSqueakAndDoThenQuit: aBlock 	"Start a new instance of Squeak running in a child OS process, and 	execute aBlock in the child instance. The new instance is a clone of	this image, but without a connection to the X display. The child instance	executes aBlock, which hopefully does not involve interaction with the	X display; and the parent continues normally.	The child should not depend on using existing connections to external 	resources. For example, the child may lose its connections to stdin, stdout,	and stderr after its parent exits."	"self thisOSProcess forkHeadlessSqueakAndDoThenQuit:		[OSProcess thisOSProcess stdOut nextPutAll: 'hello world!!'; nextPut: Character lf]"	"self thisOSProcess forkHeadlessSqueakAndDoThenQuit: [OSProcess thisOSProcess command: 'xeyes']"	| childOrThisProc |	childOrThisProc := self forkHeadlessSqueak.	childOrThisProc		ifNil: 			[self class noAccessorAvailable.			^ nil].	childOrThisProc == self		ifTrue:			["Child process"			aBlock value.			Smalltalk quitPrimitive].	^ childOrThisProc! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 12/27/2000 16:47'!forkJob: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Call Unix vfork() and execve() to create a child process, and answer the child process.	Delegate this to the singleton OSProcess>>thisOSProcess."	^ self forkAndExec: executableFile		arguments: arrayOfStrings		environment: stringDictionary		descriptors: arrayOf3Streams! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 2/27/2015 20:04'!forkSqueak	"Fork a child and continue running this Squeak image in both the parent and the child.	Parent and child are distinguished by the pid returned by primForkSqueak.	If continuing as the parent process, answer the ExternalUnixOSProcess which	represents the child. This can be inspected to watch the run state of the child	process from the parent.	If continuing as the child process, answer OSProcess thisOSProcess. This can be	inspected to watch the full state of the child process from the child. The	child cannot directly view the state of its parent.	Parent and child should be cautious about using shared connections to external	resources."	"self thisOSProcess forkSqueak"	| thisPid childPid child connected |	stdOut ifNil: [^ nil].	self stdOut flush.	self stdErr flush.	thisPid := self pid.	connected := self processAccessor canControlXDisplay					and: [self flushXDisplay notNil].	childPid := self processAccessor forkSqueak.	^ childPid ifNotNil: [		childPid == 0			ifTrue:				[connected ifTrue: [self disconnectXDisplay; recapitate].				OSProcess thisOSProcess processAccessor newPid.				^ self]			ifFalse:				[child := ExternalUnixOSProcess new.				child pid: childPid.				child ppid: thisPid.				child programName: self programName.				child initialStdIn: self stdIn.					child initialStdOut: self stdOut.				child initialStdErr: self stdErr.				child arguments: self arguments.				child initialEnvironment: self environment.				child notYetRunning.				self registerChildProcess: child.				child running.				^ child]]! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 10/8/2001 19:56'!forkSqueakAndDo: aBlock	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	"UnixProcess thisOSProcess forkSqueakAndDo:		[Object inform: 'Hi, I am the child Squeak process.']"	| childOrThisProc |	childOrThisProc := self forkSqueak.	(childOrThisProc == self) ifTrue: [aBlock value]. "Child process"	^ childOrThisProc! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 10/8/2001 19:56'!forkSqueakAndDoThenQuit: aBlock	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock.	The child should not depend on using existing connections to external resources. For	example, the child may lose its connections to stdin, stdout, and stderr after its parent	exits."	"UnixProcess thisOSProcess forkSqueakAndDoThenQuit:		[Object inform: 'Hi, I am the child Squeak process.']"	| childOrThisProc |	childOrThisProc := self forkSqueak.	(childOrThisProc == self)		ifTrue:			[ aBlock value.			Smalltalk quitPrimitive]. "Child process"	^ childOrThisProc! !!UnixProcess methodsFor: 'private' stamp: 'dtl 3/31/2001 14:16'!getArgumentList	"Answer the argument list using anOSProcessAccessor. For Unix, the first element of the list	would be the program name. This element will not be treated as an argument; rather, it is	stored as the programName instance variable."	| index val list |	list := OrderedCollection new.	index := 2.	[(val := processAccessor primArgumentAt: index) notNil] whileTrue: [		list add: val.		index := index + 1].	^ list asArray! !!UnixProcess methodsFor: 'environment' stamp: 'dtl 3/22/2000 05:55'!getCwd	"Get current working directory. At image startup, this is equivalent to	evaluating environmentAt: #PWD"	"OSProcess thisOSProcess getCwd"	^ self processAccessor primGetCurrentWorkingDirectory! !!UnixProcess methodsFor: 'private' stamp: 'dtl 3/31/2001 14:14'!getEnvironmentDictionary	"Answer an environment dictionary using an OSProcessAccessor."	| index str key val env |	env := Dictionary new.	index := 1.	[(str := processAccessor primEnvironmentAt: index) notNil] whileTrue: [		key := (str copyUpTo: $=) asSymbol.		val := (str copyFrom: ((str indexOf: $=) + 1) to: (str size)).		env at: key put: val.		index := index + 1].	^ env! !!UnixProcess methodsFor: 'private' stamp: 'dtl 3/31/2001 14:16'!getProgramName	"Answer the name of the program which is being run by this OS process. Assume the	Unix convention where the first element of (char **)argv is the program name."	^ programName := processAccessor primArgumentAt: 1! !!UnixProcess methodsFor: 'initialize - release' stamp: 'dtl 7/6/2010 21:55'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is executing."	super initialize.	(self processAccessor notNil and: [processAccessor canAccessSystem])		ifTrue: 			[self refreshFromProcessAccessor]		ifFalse: 			[stdIn := nil.			stdOut := nil.			stdErr := nil].	processAccessor restartChildWatcherProcess! !!UnixProcess methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:49'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isUnix! !!UnixProcess methodsFor: 'VM atexit' stamp: 'dtl 2/6/2015 20:38'!killCurrentChildrenAtExit	"Arrange for the currently active child processes to receive a SIGTERM	signal then the Squeak VM exits. Each invokation of this method overrides	the effects of any previous calls."	"OSProcess thisOSProcess killCurrentChildrenAtExit"	self processAccessor killOnVmExit: self activeChildren withSignal: nil! !!UnixProcess methodsFor: 'private' stamp: 'dtl 11/7/2000 09:26'!needsRefresh	"Answer true if the sessionID variable is out of date with respect to the running OS Process."	^ ((sessionID ~= (self processAccessor primGetSession)) | (pid ~= (self processAccessor primGetPid)))! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:10'!path	^ path := self pathString! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:10'!path: aPathString	self environmentAt: #PATH put: aPathString.	path := self pathString! !!UnixProcess methodsFor: 'private' stamp: 'dtl 3/6/2001 21:46'!pathString	"Answer the path string from the environment. Assume Unix convention in which the	path name is a colon delimited string stored in the PATH environment variable."	^ self environment at: #PATH ifAbsent: [nil]! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 10/18/2001 20:01'!pid	^ pid := self processAccessor primGetPid! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:10'!ppid	"Always refresh ppid from the processAccessor, because it is possible for a child	to be reparented when the parent exits. The child does not know about this, so	we refresh ppid on every access."	^ ppid := processAccessor primGetPPid! !!UnixProcess methodsFor: 'printing' stamp: 'dtl 7/7/2010 07:37'!printOn: aStream	"In English, say 'a Unix' rather than 'an Unix'. Therefore do not use super printOn, which	treats $U as a vowel."	self ppid.		"Force update of ppid, in case parent may have exited."	aStream nextPutAll: 'a ';			nextPutAll: self class name;			nextPutAll: ' with pid ';			nextPutAll: self pid printString! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 1/25/2004 12:40'!processProxy: anExternalProcess forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Call Unix vfork() and execve() to create a child process, and answer the child process.	This method is expected to be called by class side methods. Prepare the arguments before	calling the primitive, including null termination of all strings. anExternalProcess is an	object which represents the new child process, and which responds to the #pid: message."	| nullString progName args argVecAndOffsets argVec argOffsets	envVecAndOffsets envVec envOffsets in out err childPid pwd |	stdOut ifNil: [^ nil].	nullString := (Character value: 0) asString.	progName := executableFile, nullString.		"Null terminated string"	arrayOfStrings isNil							"Should be a (possibly empty) array"		ifTrue:			[args := Array with: progName]		"First argument is the program name (Unix convention)"		ifFalse:			[args := (OrderedCollection new: arrayOfStrings size + 2)						add: progName;						addAll: (arrayOfStrings collect: [:e | e, nullString ]);	"Null terminate each string"						yourself;						asArray].	argVecAndOffsets := self argsAsFlatArrayAndOffsets: args.	argVec := argVecAndOffsets at: 1.	argOffsets := argVecAndOffsets at: 2.	(stringDictionary notNil and: [stringDictionary ~= (self environment)])		ifTrue:			[envVecAndOffsets := self envAsFlatArrayAndOffsets: stringDictionary.			envVec := envVecAndOffsets at: 1.			envOffsets := envVecAndOffsets at: 2]		ifFalse:			[envVec := nil.			envOffsets := nil].	"Same as current environment, so just pass nil."	arrayOf3Streams isNil		ifTrue:			[in := self handleFromAccessor: (self stdIn ioHandle).			out := self handleFromAccessor: (self stdOut ioHandle).			err := self handleFromAccessor: (self stdIn ioHandle)]		ifFalse:			[(arrayOf3Streams at: 1)				isNil					ifTrue: [in := self handleFromAccessor: (self stdIn ioHandle)]					ifFalse: [in := self handleFromFileStream: (arrayOf3Streams at: 1)].						(arrayOf3Streams at: 2)				isNil					ifTrue: [ out := self handleFromAccessor: (self stdOut ioHandle)]					ifFalse: [ out := self handleFromFileStream: (arrayOf3Streams at: 2)].			(arrayOf3Streams at: 3)				isNil					ifTrue: [ err := self handleFromAccessor: (self stdErr ioHandle)]					ifFalse: [ err := self handleFromFileStream: (arrayOf3Streams at: 3)]].	pwd := anExternalProcess pwd.	(pwd = self getCwd)		ifTrue: [pwd := nil]		ifFalse: [pwd := pwd, nullString].	childPid := self processAccessor				forkAndExec: progName				stdIn: in				stdOut: out				stdErr: err				argBuf: argVec				argOffsets: argOffsets				envBuf: envVec				envOffsets: envOffsets				workingDir: pwd.	anExternalProcess pid: childPid.	anExternalProcess ppid: self pid.	((childPid == 0) or: [childPid isNil])		ifTrue:			[anExternalProcess unknownRunState]		ifFalse:			[anExternalProcess running.			self registerChildProcess: anExternalProcess].	^ anExternalProcess! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 11/7/2000 09:10'!programName	^ programName! !!UnixProcess methodsFor: 'accessing' stamp: 'dtl 3/17/2007 22:54'!pthread	"The identity of the pthread in which the interpreter executes.	Always refresh pthread from the processAccessor, because it is possible for a child	to be reparented when the parent exits. The child does not know about this, so	we refresh pthread on every access."	^ pthread := processAccessor getThreadID! !!UnixProcess methodsFor: 'IO redirection' stamp: 'dtl 5/18/2009 21:07'!redirect: aFileStream to: newFileStream	| oldfd newfd |	oldfd := self processAccessor unixFileNumber: aFileStream fileID.	newfd := self processAccessor unixFileNumber: newFileStream fileID.	self processAccessor primUnixFileClose: oldfd.	^ self processAccessor primDup: newfd to: oldfd! !!UnixProcess methodsFor: 'IO redirection' stamp: 'dtl 5/17/2009 23:12'!redirectStdErrTo: fileStream	"Redirect the standard error stream to another output stream."	^ self redirect: self stdErr to: fileStream! !!UnixProcess methodsFor: 'IO redirection' stamp: 'dtl 5/17/2009 23:12'!redirectStdInTo: fileStream	"Redirect the standard input stream to another input stream."	^ self redirect: self stdIn to: fileStream! !!UnixProcess methodsFor: 'IO redirection' stamp: 'dtl 5/17/2009 23:11'!redirectStdOutTo: fileStream	"Redirect the standard output stream to another output stream."	"| pipe |	pipe := OSPipe nonBlockingPipe.	OSProcess thisOSProcess redirectStdOutTo: pipe writer.	pipe"		^ self redirect: self stdOut to: fileStream! !!UnixProcess methodsFor: 'updating' stamp: 'dtl 7/4/2010 22:35'!refreshFromProcessAccessor	"Set my instance variables to reflect the state of the OS process in which this Smalltalk	virtual machine is executing."	self needsRefresh ifTrue: [		sessionID := self processAccessor getSessionIdentifier.		pid := processAccessor primGetPid.		ppid := processAccessor primGetPPid.		pthread := processAccessor getThreadID.		self setStdIn.		self setStdOut.		self setStdErr.		programName := self getProgramName.		arguments := self getArgumentList.		environment := self getEnvironmentDictionary.		path := self pathString.		self updateAllMyChildren]! !!UnixProcess methodsFor: 'child process management' stamp: 'dtl 2/5/2015 20:06'!registerChildProcess: anOSProcess	self processAccessor sigChldSemaphore.	self processAccessor grimReaperProcess.	 "Start the reaper process if it is not running."	^ super registerChildProcess: anOSProcess! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:49'!sigabrt: anExternalOSProcess	"Send a SIGABRT signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigabrtTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:49'!sigalrm: anExternalOSProcess	"Send a SIGALRM signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigalrmTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sigchld: anExternalOSProcess	"Send a SIGCHLD signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigchldTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sigcont: anExternalOSProcess	"Send a SIGCONT signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigcontTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sighup: anExternalOSProcess	"Send a SIGHUP signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSighupTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sigint: anExternalOSProcess	"Send a SIGINT signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigintTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sigkill: anExternalOSProcess	"Send a SIGKILL signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigkillTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:48'!sigpipe: anExternalOSProcess	"Send a SIGPIPE signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigpipeTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:49'!sigquit: anExternalOSProcess	"Send a SIGQUIT signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigquitTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:50'!sigstop: anExternalOSProcess	"Send a SIGSTOP signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigstopTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:50'!sigterm: anExternalOSProcess	"Send a SIGTERM signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigtermTo: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:50'!sigusr1: anExternalOSProcess	"Send a SIGUSR1 signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigusr1To: anExternalOSProcess pid! !!UnixProcess methodsFor: 'OS signal sending' stamp: 'dtl 7/6/2000 16:51'!sigusr2: anExternalOSProcess	"Send a SIGUSR2 signal to the external process represented by anExternalOSProcess."	^ self processAccessor primSendSigusr2To: anExternalOSProcess pid! !!UnixProcess methodsFor: 'child process creation' stamp: 'dtl 1/21/2001 11:47'!squeak	"Start a new instance of Squeak running in a child OS process. The new 	instance will restart from the image file, so it is a clone of this image 	as it existed at the most recent image save."	"OSProcess thisOSProcess squeak"	^ self		forkJob: self programName		arguments: self arguments		environment: nil		descriptors: nil! !!UnixProcess methodsFor: 'updating' stamp: 'dtl 10/20/2001 09:05'!update: aParameter	"Framework to update some or all of the instance variables based on external events,	such as receipt of a sigchd signal when a child process exits."	(aParameter == (self processAccessor)) ifTrue:		[^ self refreshFromProcessAccessor; yourself].	(aParameter == #pid) ifTrue:		[^ self resetChildProcessDictionary. "Forget children of prior process"].	(aParameter == #childProcessStatus) ifTrue:		[^ self updateActiveChildren; changed; yourself].	(aParameter == #startUp) ifTrue:		[^ self update: #pid].	aParameter == #invalidProcessAccessor ifTrue:		[processAccessor := processAccessor ifNotNil: [processAccessor removeDependent: self. nil].		^ self].	self error: 'Unexpected update parameter'! !!UnixProcess methodsFor: 'external command processing' stamp: 'dtl 2/27/2002 15:24'!waitForCommand: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process. This just	uses a simple polling loop, which is not very elegant but works well enough for most purposes."	"OSProcess thisOSProcess waitForCommand: 'echo sleeping...; sleep 3; echo I just slept for three seconds'"	| proc d |	d := Delay forMilliseconds: 50.	proc := self		forkJob: ExternalUnixOSProcess defaultShellPath		arguments: (Array with: '-c' with: aCommandString)		environment: nil		descriptors: nil.	proc ifNil: [self class noAccessorAvailable].	[proc runState == #complete] whileFalse: [d wait].	^ proc! !!UnixProcess methodsFor: 'external command processing' stamp: 'dtl 7/12/2003 12:06'!waitForCommandOutput: aCommandString 	"Run a command in a shell process. Similar to the system(3) call in the 	standard C library. The active Smalltalk process waits for completion of	the external command process."	"OSProcess thisOSProcess waitForCommandOutput: 'echo sleeping...; sleep 1; echo I just slept for one second'"	"OSProcess thisOSProcess waitForCommandOutput: 'ThisIsABogusCommand'"	"OSProcess thisOSProcess waitForCommandOutput: '/bin/ls -l /etc /bin'"	"OSProcess thisOSProcess waitForCommandOutput: 'echo Hello world!!; ls /NOSUCHFILE'"	(Smalltalk hasClassNamed: #PipeableOSProcess)		ifTrue:			[^ ((Smalltalk at: #PipeableOSProcess) command: aCommandString) output]		ifFalse:			[self notify: 'the #waitForCommandOutput: method requires CommandShell'.			^ '']! !!UnixProcess methodsFor: 'external command processing' stamp: 'dtl 7/12/2003 12:08'!waitForCommandOutputArray: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process."	"OSProcess thisOSProcess waitForCommandOutputArray: 'echo Hello world!!; ls /NOSUCHFILE'"	| proc |	(Smalltalk hasClassNamed: #PipeableOSProcess)		ifTrue:			[proc := (Smalltalk at: #PipeableOSProcess) command: aCommandString.			^ Array				with: proc output				with: proc errorUpToEnd				with: proc processProxy exitStatus]		ifFalse:			[self notify: 'the #waitForCommandOutputArray: method requires CommandShell'.			^ Array with: '' with: '' with: nil]! !!WindowsProcess commentStamp: 'dtl 9/25/2005 16:31' prior: 34402259!I represent a Windows operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of WindowsOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my WindowsOSProcessAccessor.My process ID and process handle (a Win32 HANDLE) are held by my pid and processHandle variables. The main thread for this process is held by my mainThread variable.Standard input, output, and error streams are available, and my be used when the console is open (WindowsProcess>>openConsole). They can also be reassigned to file streams (WindowsOSProcessAccessor>>setStdOut:).When external processes are created, they are added to my allMyChildren collection, and a thread is created to wait for any of them to exit. This thread is held by my childWatcherThread instance variable while the thread is active, and is also added to my threads collection.Whenever a child process exits, the childWatcherThread will signal a Semaphore (a Smalltalk Semaphore, not a Windows semaphore), then exit. A Squeak process in my processAccessor waits on this Semaphore, and sends an 'update: #childProcessStatus' message to me. In response to this, I update the status of my active child processes, one or more of which will have exited. If any of my child processes are still active, I set a new childWatcherThread to wait for them to exit.Note that some Windows applications will exit their main process after creating another application process. These applications will appear to Squeak as if they have exited immediately, even though the application is running.!!WindowsProcess class methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:50'!isResponsibleForThisPlatform	"Answer true if this class is responsible for representing the OS process for	the Squeak VM running on the current platform."	^ self isWindows! !!WindowsProcess methodsFor: 'child process management' stamp: 'dtl 2/26/2002 16:08'!activeHandles	"Answer an Array of handles for all children that are believed to be running."	^ (self activeChildren collect: [:c | c handle]) asArray! !!WindowsProcess methodsFor: 'console' stamp: 'dtl 9/7/2002 20:57'!closeConsole	"Close the console. The standard input, output and error streams will no longer be available."	"OSProcess thisOSProcess closeConsole"	self processAccessor primFreeConsole.	self refreshFromProcessAccessor! !!WindowsProcess methodsFor: 'child process creation' stamp: 'dtl 2/28/2002 14:48'!command: aCommandString	"Run a command in a shell process. Similar to the system(3) call in	the standard C library, except that aCommandString runs asynchronously	in a child process. Answer an instance of ExternalWindowsProcess which	is a proxy for the new Windows process."	"OSProcess command: 'SOL'"	^ ExternalWindowsOSProcess command: aCommandString! !!WindowsProcess methodsFor: 'accessing' stamp: 'dtl 2/22/2002 22:02'!environment	^ environment! !!WindowsProcess methodsFor: 'environment' stamp: 'DamienCassou 5/3/2012 11:53'!environmentAt: aSymbol	"Answer an environment variable for the external OS process, and update the dictionary	in this Smalltalk object."	^ environment at: aSymbol asSymbol ifAbsent: []! !!WindowsProcess methodsFor: 'environment' stamp: 'DamienCassou 5/3/2012 11:53'!environmentAt: aSymbol put: aString	"Set an environment variable for the external OS process, and update the dictionary in	this Smalltalk object."	| s |	self initialize.	s := self processAccessor environmentAt: aSymbol put: aString.	s ifNotNil: [ self environment at: aSymbol asSymbol put: aString ].	^ s! !!WindowsProcess methodsFor: 'child process creation' stamp: 'dtl 10/18/2001 20:19'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams	"Use my processAccessor to call vfork() and execve() and create a	new child task. Answer a proxy for the new task, an instance of	ExternalWindowsProcess."	self notYetImplemented! !!WindowsProcess methodsFor: 'environment' stamp: 'dtl 1/24/2013 19:23'!getCwd	"Get current working directory. If this cannot be obtained from the	environment, answer a reasonable default."	"OSProcess thisOSProcess getCwd"	^ self processAccessor primGetCurrentWorkingDirectory		ifNil: [OSProcess defaultPathString]! !!WindowsProcess methodsFor: 'private' stamp: 'dtl 2/22/2002 22:00'!getEnvironmentDictionary	"Answer an environment dictionary using an OSProcessAccessor."	"OSProcess thisOSProcess getEnvironmentDictionary"	| strings env |	strings := processAccessor primGetEnvironmentStrings.	strings isNil		ifTrue:			[^ nil]		ifFalse:			[env := Dictionary new.			strings do: [:s |				env at: (s copyUpTo: $=) asSymbol put: (s copyAfterLast: $=)].			^ env]! !!WindowsProcess methodsFor: 'initialize - release' stamp: 'dtl 8/25/2010 20:49'!initialize	"Set my instance variables to reflect the state of the OS process in which 	this Smalltalk virtual machine is executing. On Windows, we cannot rely	on the pid to have changed when the VM is restarted, so use a one-shot	function to determine if we are restarting the VM (as opposed to returning	from an image save)."	super initialize.	(self processAccessor canAccessSystem not or: [processAccessor primOneShot]) ifTrue:		["Restarting the VM in a new process"		self resetThreads.		self threads; mainThread.		processHandle := nil.		self processHandle].	self refreshFromProcessAccessor! !!WindowsProcess methodsFor: 'platform identification' stamp: 'dtl 8/30/2003 17:50'!isResponsibleForThisPlatform	"Answer true is this is an instance of the class which is responsible for representing	the OS process for the Squeak VM running on the current platform. A false answer is	usually the result of running the image on a different platform and VM."	^ self class isWindows! !!WindowsProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 07:15'!mainThread	"The main thread for this OS process. The handle for this thread is a	pseudo-handle, and cannot be used to close the main thread."	^ mainThread ifNil: [mainThread := processAccessor getMainThread]! !!WindowsProcess methodsFor: 'console' stamp: 'dtl 9/7/2002 20:57'!openConsole	"Open a console. This makes the standard input, output and error streams available."	"OSProcess thisOSProcess openConsole"	self processAccessor primAllocConsole.	self refreshFromProcessAccessor! !!WindowsProcess methodsFor: 'environment' stamp: 'dtl 9/25/2005 05:11'!path	"Newer versions of Windows mixed case"	^ self environment		at: #PATH		ifAbsent: [environment				at: #Path				ifAbsent: ['']]! !!WindowsProcess methodsFor: 'accessing' stamp: 'dtl 2/22/2002 16:43'!pid	^ pid := self processAccessor primGetPid! !!WindowsProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 07:26'!processHandle	"The handle for this OS process. This is a pseudo-handle, a constant provided	by Windows to represent the process. Note that the main thread handle is also	represented by a pseudo-handle."	^ processHandle ifNil: [processHandle := self processAccessor primGetPidHandle]! !!WindowsProcess methodsFor: 'updating' stamp: 'dtl 9/7/2002 20:47'!refreshFromProcessAccessor	"Set my instance variables to reflect the state of the OS process in which this Smalltalk	virtual machine is executing."	sessionID := self processAccessor getSessionIdentifier.	pid := processAccessor primGetPid.	self setStdIn.	self setStdOut.	self setStdErr.	environment := self getEnvironmentDictionary! !!WindowsProcess methodsFor: 'child process management' stamp: 'dtl 2/5/2015 20:06'!registerChildProcess: anOSProcess	"Register the external process and set an exit handler thread to signal when	the process exits."	super registerChildProcess: anOSProcess.	self threads add: self restartChildWatcherThread.	^ anOSProcess! !!WindowsProcess methodsFor: 'initialize - release' stamp: 'dtl 2/28/2002 07:16'!resetThreads	"If any cleanup is required, do it here."	threads := nil.	mainThread := nil! !!WindowsProcess methodsFor: 'child process management' stamp: 'dtl 1/13/2007 09:49'!restartChildWatcherThread	"Set an exit handler thread to signal when the process exits."	^ self processAccessor restartChildWatcherThread: self activeHandles! !!WindowsProcess methodsFor: 'private' stamp: 'dtl 9/7/2002 20:55'!setStdErr	"Reset to nil if the console has been closed"	^ self processAccessor getStdErr isNil		ifTrue: [stdErr := nil]		ifFalse: [super setStdErr]! !!WindowsProcess methodsFor: 'private' stamp: 'dtl 9/7/2002 20:55'!setStdIn	"Reset to nil if the console has been closed"	^ self processAccessor getStdIn isNil		ifTrue: [stdIn := nil]		ifFalse: [super setStdIn]! !!WindowsProcess methodsFor: 'private' stamp: 'dtl 9/7/2002 20:55'!setStdOut	"Reset to nil if the console has been closed"	^ self processAccessor getStdOut isNil		ifTrue: [stdOut := nil]		ifFalse: [super setStdOut]! !!WindowsProcess methodsFor: 'accessing' stamp: 'dtl 2/28/2002 08:04'!threads	"One or more threads of execution within the OS process. The main	thread for the process is held by the mainThread variable and is not	included in this collection. Threads are created to wait for the exit of	child processes, so this collection grows as child processes are created."	^ threads ifNil: [threads := OrderedCollection new]! !!WindowsProcess methodsFor: 'updating' stamp: 'dtl 2/25/2002 08:29'!update: aParameter	"Framework to update some or all of the instance variables based on external events,	such as receipt of a sigchd signal when a child process exits."	(aParameter == (self processAccessor)) ifTrue:		[^ self refreshFromProcessAccessor; yourself].	(aParameter == #pid) ifTrue:		[^ self resetChildProcessDictionary. "Forget children of prior process"].	(aParameter == #childProcessStatus) ifTrue:		[^ self updateActiveChildren; changed; yourself].	(aParameter == #startUp) ifTrue:		[^ self update: #pid].	aParameter == #invalidProcessAccessor ifTrue:		[processAccessor := processAccessor ifNotNil: [processAccessor removeDependent: self. nil].		^ self].	self error: 'Unexpected update parameter'! !!WindowsProcess methodsFor: 'child process management' stamp: 'dtl 2/28/2002 08:17'!updateActiveChildren	super updateActiveChildren.	self restartChildWatcherThread! !!WindowsProcess methodsFor: 'child process creation' stamp: 'dtl 11/24/2008 17:47'!waitForCommand: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process. This just	uses a simple polling loop, which is not very elegant but works well enough for most purposes."	| proc d |	d := Delay forMilliseconds: 50.	proc := self command: aCommandString.		proc ifNil: [self class noAccessorAvailable].	[proc runState == #complete] whileFalse: [d wait].	^ proc! !!UnixProcessExitStatus commentStamp: 'dtl 8/23/2012 22:48' prior: 34404166!A UnixProcessExitStatus represents the exit status of a unix process. This is an integer bit field answered by the wait() system call that contains information about exit status of the process. The meaning of the bit field varies according to the cause of process exit. Following a normal process exit, the status may be decoded to provide a small positive integer value in the range 0 - 255, which is the value that is presented by a unix shell as the exit status of a program. If terminated by a signal, the corresponding value is the signal number of the signal that caused process exit.UnixExitStatus decodes the process exit status in a manner compatible with a typical GNU unix implementation. It is not guaranteed to be portable and may produce misleading results on other unix systems.!!UnixProcessExitStatus class methodsFor: 'instance creation' stamp: 'dtl 8/22/2012 21:24'!for: integerValue	^self new for: integerValue! !!UnixProcessExitStatus methodsFor: 'accessing' stamp: 'dtl 8/22/2012 23:10'!exitStatus	self isExited ifTrue: [^self statusIfExited].	self isSignaled ifTrue: [^self statusIfSignaled].	self isStopped ifTrue: [^self statusIfStopped].	self notify: 'cannot decode exit status ', intValue asString.	^intValue! !!UnixProcessExitStatus methodsFor: 'initialize-release' stamp: 'dtl 8/22/2012 23:10'!for: anInteger	intValue := anInteger! !!UnixProcessExitStatus methodsFor: 'testing' stamp: 'dtl 8/22/2012 22:32'!isExited	"	/* Nonzero if STATUS indicates normal termination.  */	#define __WIFEXITED(status)     (__WTERMSIG(status) == 0)	"	^ self statusIfSignaled = 0! !!UnixProcessExitStatus methodsFor: 'testing' stamp: 'dtl 8/22/2012 23:11'!isSignaled	"	/* Nonzero if STATUS indicates termination by a signal.  */	#define __WIFSIGNALED(status) \	  (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)	"	^(((intValue bitAnd: 16r7F) + 1) >> 1) > 0! !!UnixProcessExitStatus methodsFor: 'testing' stamp: 'dtl 8/22/2012 23:11'!isStopped	"	/* Nonzero if STATUS indicates the child is stopped.  */	#define __WIFSTOPPED(status)    (((status) & 0xff) == 0x7f)	"	^(intValue bitAnd: 16rFF) = 16r7F! !!UnixProcessExitStatus methodsFor: 'testing' stamp: 'dtl 8/22/2012 23:31'!isSuccess	^self exitStatus = 0! !!UnixProcessExitStatus methodsFor: 'printing' stamp: 'dtl 8/22/2012 23:18'!printOn: aStream	self isExited		ifTrue: [aStream nextPutAll: 'normal termination with status ';				 nextPutAll: self statusIfExited asString].	self isSignaled		ifTrue: [aStream nextPutAll: 'exit due to signal ';				nextPutAll: self statusIfSignaled asString].	self isStopped		ifTrue: [aStream nextPutAll: 'stopped due to signal ';				nextPutAll: self statusIfStopped].! !!UnixProcessExitStatus methodsFor: 'accessing' stamp: 'dtl 8/22/2012 23:11'!statusIfExited	"	/* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */	#define __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)	"	^(intValue bitAnd: 16rFF00) >> 8! !!UnixProcessExitStatus methodsFor: 'accessing' stamp: 'dtl 8/22/2012 23:11'!statusIfSignaled	"	/* If WIFSIGNALED(STATUS), the terminating signal.  */	#define __WTERMSIG(status)      ((status) & 0x7f)	"	^intValue bitAnd: 16r7F! !!UnixProcessExitStatus methodsFor: 'accessing' stamp: 'dtl 8/22/2012 22:28'!statusIfStopped	"	/* If WIFSTOPPED(STATUS), the signal that stopped the child.  */	#define __WSTOPSIG(status)      __WEXITSTATUS(status)	"	^self statusIfExited! !!UnixProcessExitStatus methodsFor: 'accessing' stamp: 'dtl 8/22/2012 23:11'!value	^intValue! !!WindowsThread commentStamp: '<historical>' prior: 34405020!I represent a thread of execution within a Windows process. May threadID is a uniqueidentifier for the thread, and my handle is a Windows HANDLE to the thread. My handleshould be closed when the thread exits.!!WindowsThread class methodsFor: 'instance creation' stamp: 'dtl 2/25/2002 07:00'!threadID: anInteger handle: aHandleObject	^ super new threadID: anInteger; handle: aHandleObject; initialize! !!WindowsThread class methodsFor: 'instance creation' stamp: 'dtl 2/26/2002 07:17'!threadID: anInteger handle: aHandleObject running: trueOrFalse	| thread |	thread := super new threadID: anInteger; handle: aHandleObject; initialize.	trueOrFalse ifTrue: [thread running].	^ thread! !!WindowsThread methodsFor: 'initialize - release' stamp: 'dtl 2/25/2002 07:38'!closeHandle	"Clean up after thread exits."	OSProcess accessor primCloseHandle: handle.	handle := nil! !!WindowsThread methodsFor: 'setting run state' stamp: 'dtl 2/26/2002 10:45'!complete	"Thread has exited."	self closeHandle; runState: #complete! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 2/25/2002 06:39'!handle	"A Windows HANDLE represented as a ByteArray."	^ handle! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 2/25/2002 06:38'!handle: aHandleObject	"A Windows HANDLE represented as a ByteArray."	handle := aHandleObject! !!WindowsThread methodsFor: 'initialize - release' stamp: 'dtl 2/25/2002 07:03'!initialize	self runState! !!WindowsThread methodsFor: 'testing' stamp: 'dtl 2/25/2002 06:37'!isComplete	^ self runState == #complete! !!WindowsThread methodsFor: 'testing' stamp: 'dtl 2/25/2002 06:37'!isRunning	^ self runState == #running! !!WindowsThread methodsFor: 'printing' stamp: 'dtl 2/27/2002 12:02'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self threadID printString, ', ', self runState, ')'! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 1/25/2004 11:01'!runState	^ runState ifNil: [self unknownRunState]! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 2/25/2002 07:02'!runState: aSymbol	runState := aSymbol! !!WindowsThread methodsFor: 'setting run state' stamp: 'dtl 2/25/2002 06:36'!running	"Thread is scheduled to run."	self runState: #running! !!WindowsThread methodsFor: 'initialize - release' stamp: 'dtl 2/27/2002 11:35'!terminate	"Force an exit. No cleanup is performed. Use with caution for a thread which	is (for example) manipulating a mutex."	(self isRunning and: [self handle notNil]) ifTrue:		[OSProcess accessor primTerminateThread: self handle.		self complete]! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 2/25/2002 06:40'!threadID	"A unique identifier for the thread."	^ threadID! !!WindowsThread methodsFor: 'accessing' stamp: 'dtl 2/25/2002 06:40'!threadID: anInteger	"A unique identifier for the thread."	threadID := anInteger! !!WindowsThread methodsFor: 'setting run state' stamp: 'dtl 2/25/2002 06:36'!unknownRunState	"Unable to determine the current run state of the thread, possibly because	this is a stale reference to a thread which no longer exists."	self runState: #unknownRunState! !"OSProcess-AIO"!"OSProcess-Base"!"OSProcess-OS2"!"OSProcess-Win32"!"OSProcess-Unix"!"OSProcess-Mac"!"OSProcess-RiscOS"!!CommandShell commentStamp: '<historical>' prior: 0!I am a command shell, similar to /bin/sh, with a simple command line user interface. I collaborate with process proxies to provide command execution, and I provide a limited set of built in commands similar to those in /bin/sh. My built in commands are implemented in Smalltalk, and any other commands are passed to process proxies to be executed either internally as Smalltalk "doIt" expressions, or externally as commands passed to the external operating system. I am similar to a TranscriptStream (some methods are copied directly from TranscriptStream), but I also know how to accept lines of command input, parse them, and hand them off to process proxies for execution.Three types of commands may be executed from a CommandShell: internal "builtin" commands implemented in Smalltalk; internal Smalltalk "doIt" commands; and external commands. Internal commands (builtin commands or doIt commands) may be freely mixed with external operating system commands in a command pipeline. See CommandShell class>>commandProcessing for more information.Each command line is first evaluated as a Smalltalk expression, and is subject to further parsing only if the Smalltalk evaluation fails. In practice, this permits complete Smalltalk expressions to be evaluated easily without conflicting with shell syntax, and allows Smalltalk and unix shell commands to be freely mixed.Simple command scripting is supported (method category 'command scripting'). Any mix of internal and external commands may be included in a script. Conditional branching is supported based on command exit status.Open a new shell window with "CommandShell open". Type 'help' followed by <return> or <enter> for help on builtin commands.Things that work reasonably well:- Simple command execution for running command line programs or starting  X programs.- Command pipelines. Built in commands can be mixed with external  commands, as in "help sqsh | wc -l".- Command IO redirection with '<',  '>', '>>', '2>', and '2>>'.- Command history and command history recall.- Background command execution, as in "xterm&".- <ctl-C> to interrupt a running external command.- <ctl-D> to indicate end of file in terminal input.Limitations include:- Dumb tty only. Do not try to run vi.- Standard Unix shell syntax is not completely implemented.Race conditions are possible for certain command pipelines. See CommandShell class>>raceConditions for more information.!!ShellSyntax commentStamp: 'dtl 9/7/2009 12:36' prior: 0!My instances implement parsing of strings in a manner similar to a simple Unix command shell. I provide path name expansion in the context of an external file system, and support the syntax required for IO redirection. All file name globbing and PATH searching are implemented in Smalltalk rather than in C library functions or an external command shell.Most of my syntax is applicable for any operating system. Where needed, platform specific methods are in my "platform dependent" category. Currently, Unix and Windows are supported, and other platforms have not been tested. The primary difference between Unix and Windows support is that device names (such as 'C:') are used in Windows path strings. Separate current working directory strings are maintained for all Windows device names. For Unix, a single current working directory path is used. On Windows, this permits the CommandShell 'cd' command to support changing directories to another device without losing track of the current working directory for the previous device.Command pipeline syntax is not supported here. See CommandShell for the implementation of command pipelines.!!CommandShell commentStamp: '<historical>' prior: 34786228!I am a command shell, similar to /bin/sh, with a simple command line user interface. I collaborate with process proxies to provide command execution, and I provide a limited set of built in commands similar to those in /bin/sh. My built in commands are implemented in Smalltalk, and any other commands are passed to process proxies to be executed either internally as Smalltalk "doIt" expressions, or externally as commands passed to the external operating system. I am similar to a TranscriptStream (some methods are copied directly from TranscriptStream), but I also know how to accept lines of command input, parse them, and hand them off to process proxies for execution.Three types of commands may be executed from a CommandShell: internal "builtin" commands implemented in Smalltalk; internal Smalltalk "doIt" commands; and external commands. Internal commands (builtin commands or doIt commands) may be freely mixed with external operating system commands in a command pipeline. See CommandShell class>>commandProcessing for more information.Each command line is first evaluated as a Smalltalk expression, and is subject to further parsing only if the Smalltalk evaluation fails. In practice, this permits complete Smalltalk expressions to be evaluated easily without conflicting with shell syntax, and allows Smalltalk and unix shell commands to be freely mixed.Simple command scripting is supported (method category 'command scripting'). Any mix of internal and external commands may be included in a script. Conditional branching is supported based on command exit status.Open a new shell window with "CommandShell open". Type 'help' followed by <return> or <enter> for help on builtin commands.Things that work reasonably well:- Simple command execution for running command line programs or starting  X programs.- Command pipelines. Built in commands can be mixed with external  commands, as in "help sqsh | wc -l".- Command IO redirection with '<',  '>', '>>', '2>', and '2>>'.- Command history and command history recall.- Background command execution, as in "xterm&".- <ctl-C> to interrupt a running external command.- <ctl-D> to indicate end of file in terminal input.Limitations include:- Dumb tty only. Do not try to run vi.- Standard Unix shell syntax is not completely implemented.Race conditions are possible for certain command pipelines. See CommandShell class>>raceConditions for more information.!!CommandShell class methodsFor: 'instance creation' stamp: 'dtl 12/11/2007 21:22'!command: aCommandString	"Evaluate aCommandString in the context of a CommandShell, using a	CommandShellTranscript to display the results."	"CommandShell command: 'help'"	"CommandShell command: 'ls'"	| cs w |	cs := self new.	w := cs openLabel: self defaultWindowName.	w scheduleToEvaluate: [w nextPutAll: aCommandString; cr].	w processCommand: aCommandString.	^ w! !!CommandShell class methodsFor: 'documentation' stamp: 'dtl 12/29/2001 14:18'!commandProcessing	"Explanation of the command parsing and evaluation."	"CommandShell new pipeline: 'CommandShell commandProcessing!! | edit'"	^'CommandShell behaves similarly to a Unix command shell. One or more Morphic or MVC views can be opened on an instance of CommandShell. Command lines are accepted in the view, passed to the CommandShell instance (the model), and the results are displayed in the view(s). The overall behavior can be thought of as a Transcript acting like an xterm window, and the CommandShell acting like a /bin/sh shell.A command line is first evaluated as a Smalltalk expression if possible. If this evaluation fails, either as a result of a sytax error or a runtime error, it is assumed to be a command string with syntax similar to that of a Unix command shell.The command line is parsed by CommandShell to break command lines into elements of a command pipeline. All further parsing, such as file name expansion, is performed by an instance of ShellSyntax.Three types of commands may be executed from a CommandShell:1) Internal "builtin" commands are implemented in Smalltalk, and behave similarly to the shell builtin commands of a typical Unix command shell. See protocol category "shell builtins" for the implementation of these builtin shell commands.2) Internal "doIt" commands are simple Smalltalk expression strings, terminated by a $!! character, which are evaluated as Smalltalk expressions, and which recognize the tokens "stdin", "stdout", and "stderr" as temporary variables in the doIt expression. An internal doIt command is evaluated such that it may be incorporated into a command pipeline with access to the stdin/stdout/stderr streams used in the command pipeline. In the current implementation, a doIt command may not include a $| character, which has meaning both for Smalltalk syntax and for Unix command line processor syntax.3) External commands. Any command expression not recognized as a shell builtin or as a doIt expression is passed to an external process proxy for execution by the external operating system, with stdin/stdout/stderr incorporated into the command pipeline.Internal and external commands can be freely mixed in a command pipeline, with results which should be familiar to users of Unix command shells. Pipes are implemented as instances of OSPipe or InternalPipe, and are capable of passing streams of characters from one process proxy to the next. All commands (internal or external) evaluate to strings, such that their results can either be passed through a pipe to the next command proxy in a pipeline, or displayed in the terminal window view if the proxy represents the last command in a command pipeline. Error messages (also strings) are written to an errorPipelineStream which is shared by all proxies in a command pipeline, such that any error messages are accumulated for the entire command pipeline.'! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/26/2013 15:37'!defaultPathString	^ self useFileSystem		ifTrue: [(((Smalltalk at: #Path) perform: #workingDirectory) perform: #asFileReference) pathString]		ifFalse: [(Smalltalk at: #FileDirectory) default pathName]! !!CommandShell class methodsFor: 'defaults' stamp: 'dtl 4/2/2001 20:48'!defaultWindowName	^ 'Squeak Shell'! !!CommandShell class methodsFor: 'version dependent' stamp: 'SeanDeNigris 2/13/2013 09:51'!deleteFileNamed: fileName	"Delete the file with the given name."	self useFileSystem		ifTrue: [ | file |			file := fileName perform: #asFileReference.			(file respondsTo: #ensureDeleted)				ifTrue: [ file perform: #ensureDeleted ]				ifFalse: [ file perform: #delete ] ]		ifFalse: [ (Smalltalk at: #FileDirectory) default				deleteFileNamed: fileName ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 18:00'!deleteFileNamed: fileName inDirectory: directoryOrFileReference	"Delete the file with the given name in the given directory."	^ self useFileSystem		ifTrue: [(directoryOrFileReference files						detect: [:e | e basename = fileName ]						ifNone: [ ])					ifNotNilDo: [:f | f delete ]]		ifFalse: [ directoryOrFileReference deleteFileNamed: fileName ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:59'!dirPathFor: path	"Return the directory part the given name."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) parent fullName ]		ifFalse: [(Smalltalk at: #FileDirectory) perform: #dirPathFor: with: path]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/26/2013 15:38'!directoryEntryNames: path	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) children collect: [:e | e perform: #basename] ]		ifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries collect: [:e | e name] ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:59'!directoryExists: path	"Answer true if a directory of the given name exists. The given name may	be either a full path name or a local directory within this directory."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) exists ]		ifFalse: [ (Smalltalk at: #FileDirectory) default directoryExists: path ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 22:31'!directoryForPath: path	^ self useFileSystem		ifTrue: [path perform: #asFileReference]		ifFalse: [(Smalltalk at: #FileDirectory) on: path]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/26/2013 15:38'!directoryNamesInPath: path	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) children						select: [:e | e isDirectory ]					thenCollect: [:e | e perform: #basename] ]		ifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries					select: [:e | e isDirectory ]					thenCollect: [:e | e name] ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/28/2013 20:12'!entryName: directoryEntry	"Answer the name of a directory entry."	^ self useFileSystem		ifTrue: [ directoryEntry basename ]		ifFalse: [ directoryEntry name ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:57'!fileExists: path	"Answer true if a file of the given name exists. The given name may be	either a full path name or a local file within this directory."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) exists ]		ifFalse: [ (Smalltalk at: #FileDirectory) default fileExists: path ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:57'!fileExists: fileName inDirectory: directoryOrFileReference	"Answer true if a file of the given name exists in this directory."	^ self useFileSystem		ifTrue: [ (directoryOrFileReference entries					detect: [:e | e basename = fileName] ifNone: []) notNil ]		ifFalse: [ directoryOrFileReference fileExists: fileName ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:58'!fileExists: fileName inPath: path	"Answer true if a file of the given name exists in the directory named by path."	^ self useFileSystem		ifTrue: [ self fileExists: fileName inDirectory: (path perform: #asFileReference) ]		ifFalse: [ self fileExists: fileName inDirectory: ((Smalltalk at: #FileDirectory) on: path) ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:52'!fileNamed: fileName inDirectory: directoryOrFileReference	"Open the file with the given name in this directory for writing."	^ self useFileSystem		ifTrue: [(directoryOrFileReference files						detect: [:e | e basename = fileName ]						ifNone: [ ])					ifNotNilDo: [:f | f writeStream ]]		ifFalse: [ directoryOrFileReference fileNamed: fileName ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:56'!fullNameFor: fileName	"Return a corrected, fully-qualified name for the given file name."	^ self useFileSystem		ifTrue: [ (fileName perform: #asFileReference) perform: #fullName ]		ifFalse: [ (Smalltalk at: #FileDirectory) default fullNameFor: fileName ]! !!CommandShell class methodsFor: 'documentation' stamp: 'dtl 8/30/2011 07:30'!htmlOverview	"A general overview"	^'<html><head><title>Introduction to CommandShell</title></head><body><h3>CommandShell</h3> CommandShell is a Smalltalk implementation of a command processor shell and terminal window. It is intended to behave like to a simple terminal window (like xterm) running a Unix command shell (like /bin/sh). It lacks some elements of Unix shell syntax, and does not provide terminal emulation, but it adds some nice Smalltalk enhancements such as a text editor which works in a command pipeline, and the ability to evalute Smalltalk expressions in a command pipeline with Unix commands.<h3>How to use CommandShell</h3>  Evaluate "CommandShell open" or, if you have loaded the change set to put CommandShell  in your world menu, just select "Squeak Shell" from the "open..." menu entry.  To use the command shell window, enter commands on the command line (after  the "$ " command prompt, followed by cr to accept the command. The "help" command  gives some clues as to what can be done. In general, just try any command which  you might otherwise enter into a Unix shell or xterm window. Then try some of  the Smalltalk features such as mixing Smalltalk expressions with Unix commands, and  piping commands into Smalltalk editors.<h3>Basic Concepts</h3><ul><li><h4>  Commands</h4>    Smalltalk uses objects and messages, with expressions arranged in a natural    Noun-Verb-Predicate sentence structure, similar to that of some spoken languages.    In contrast, many other computer systems use a style in which users issue    a command to the system, in which the "command" (a verb) is followed by various    (predicate) modifiers. In the case of a traditional command-line interface, such    as a Unix shell, the command is usualy the name of a program, and the modifiers    are parameters passed to the program to influence its behavior. CommandShell attempts    to provide a command line interface for executing commands within Squeak, in    a style and environment which is comforable for someone accustomed to the    Smalltalk style of expression.<p><li><h4>  Process Proxies</h4>    A command line user interface, such as a Unix shell or a "DOS window" in    Windows, revolves around the notion of executing programs from user commands.    When Squeak is hosted in another operating system, it is useful to be able to    execute an external program from a command line expression. A process proxy    is an object which represents the evaluation of such an external command    in a command line environment.<p>    From the point of view of Squeak, a process proxy might just as well represent    the evaluation of a Smalltalk expression in the context of a command line    environment. Thus a process proxy can be an object which represents the execution    of an external program or an internal Smalltalk expression. It is created from a    command line expression, and provides a representation of certain aspects of the    external (or internal) process execution, such as process run state, exit status, and    the input, output and error streams for the process.<p>    External process proxies are used to evaluate programs in the external operating    system (this requires the OSProcess change set in addition to CommandShell). Internal    process proxies are used to evaluate "built in" commands for a command shell,    such as the "cd" command to change the working directory for the command shell.    Internal proxies are also used for evaluating "doIt" expressions within a command    pipeline. In this case, the variables "stdin", "stdout", and "stderr" are pre-defined    such that the doIt expression can directly access the input, output and error    pipes for the internal process proxy (in other words, the doIt expression    "stdout nextPutAll: ''Hello world'' !!" will write ''Hello world'' on the output pipe    of the proxy).<p><li><h4> Pipelines</h4>    Powerful computing systems may be built upon simple design metaphors. In    Smalltalk, the concept of objects communicating through messages is generalized    and extended to produce the Squeak system. In Unix systems, the metaphor of a    pipe with data flowing between two programs is generalized to produce a mechanism    for connecting small programs to produce complex systems. The command line shells    for Unix support this metaphor by providing syntax for connecting two or more    commands together into more complex command pipelines.<p>    CommandShell provides a framework for connecting several process proxies into a    command pipeline, using command syntax similar to that of a Unix shell. Since the    process proxies are implemented in Smalltalk, the "programs" in a command pipeline    may consist of process proxies representing external programs, or of proxies representing    the evaluation of internal Smalltalk expressions. The objects which flow through    the pipes in a command pipeline are assumed to be characters, such that the external    commands can operate on the streams of characters in the usual way, and the internal    Smalltalk commands read and write streams of characters.<p>    Just as programs (or internal expressions) are represented by process proxies, the    pipes which interconnect two process proxies are represented by pipe objects. The    pipe may be either an OSPipe (a proxy representing a Unix system FIFO pipe) or an    InternalPipe (a Smalltalk object which behaves similarly to an OSPipe). The combination    of process proxies and pipes is a command pipeline, which may be created and    evaluated from a command line expression using conventional Unix shell syntax.</ul><h3>Command Line Syntax</h4>    A command or command pipeline may be created from a string expression, and    evaluated using Unix shell syntax. CommandShell accepts command line strings and    does some high level processing to set up process proxy execution. For most of the    command parsing, it relies on a ShellSyntax object to do the syntax evaluation.    In particular, a real Unix shell interprets command line parameters in the context of the    Unix file system, expanding "wildcard" characters and searching for files in the context    of a "current working directory" location in the file system tree. A CommandShell,    collaborating with an instance of ShellSyntax, implements this syntax parsing    and evaluation in Smalltalk.<h3>Command Execution</h4>    Beginning with a command line (which may represent a pipeline of several    commands), a CommandShell first attempts to treat the entire command line as    a Smalltalk expression. The command line string is used to create an instance of    PipeableEvaluator (a kind of process process). If the expression is successfully    compiled and evaluated in the PipeableEvaluator, the command line is executed    just as if it were an external Unix command, with the result of the evaluation    written as a string to the output stream of the process proxy.<p>    If the complete command line cannot be treated as a Smalltalk expression,    CommandShell assumes that it must be a Unix style command pipeline. If the    command line is a comment (starting with ''#'') it is discarded; otherwise it    is broken down into a series of process proxies connected by pipes, with    command line parameters and other aspects of the command line parsing handled    by a ShellSyntax object.<p>    The process proxies in the command pipeline may represent internal or external    commands. CommandShell parses the command line to create the proxies by breaking    the command pipeline into segments (separated by the "|" pipe character), with    different kinds of process proxy created according to the following priorities:<ul><li>      If the command segment is a simple Smalltalk expression terminated by "!!", it      is treated as a "doIt" expression, evaluated in a PipeableEvaluator proxy. This      kind of simple doIt expression is limited to commands with characters which      are unambiguous in a shell command. For example, "|" has special meaning in      a command line, and cannot be used in a doIt expression (command line quoting      and escape characters have not yet been implemented in the CommandShell syntax).<li>      If the command segment is not a doIt expression, CommandShell checks to see      if it matches one of several "shell builtin" commands. These are special commands      implemented in class ShellBuiltin and evaluated in a PipeableEvaluator proxy.      They behave analogously to shell builtin commands in a conventional Unix shell.      A number of commands such as "cd" and "pwd" are implemented as internal builtin      commands, rather than relying on Unix external equivalents. In addition, other      builtin commands such as "edit" do things which are useful in Squeak and have      no real equivalent in Unix (the "edit" builtin opens an editor within Squeak, taking      its input from files or directly from the output of a command pipeline such as      "Smalltalk !! | edit" or "who | edit").<li>      If the command segment is not a shell builtin command, it is assumed to be an      external command. It this case, the command line segment is fully parsed, then      used to create an external OS process proxy to run the external command. The      external process proxy responds to a #value message by running the external      program, with output and error written to pipes connected to the command      pipeline.<li>      Finally, if no external program can be found to execute the command, an error      message is provided to the command window, and no command is evaluated.</ul>    Once the command proxy pipeline has been created, the individual process proxies    are evaluated in such a way that they appear to execute in parallel, with each    proxy reading its input from a pipe connected to its predecessor in the pipeline,    and writing its output to a pipe connected to its successor in the pipeline. An    additional error pipe is shared by all process proxies in the pipeline, such that    any error output is accumulated in the shared error pipe stream.<p>    A command shell can obtain the output and error of a complex command pipeline    simply by evaluating the last process proxy in the chain, and reading up to the    end of its output and error pipes. Since a process proxy knows its run state, and    a pipe is not "at end" until a process proxy closes one end of the pipe, the pipeline    can be constructed in such a way that the command shell is assured that all process    proxies have completed their evaluation when the output of the last proxy is read    up to the end of the pipe.<p>    As the last process proxy in a command pipeline is evaluated, CommandShell reads    its output and error pipes, and displays the text in the View or Morph which it uses    as its terminal window. When complete, it issues a new prompt string, and waits for    another command line to be entered by the user.<p><h3>Exercise for the Reader:</h4>Which one of the following five command lines will generatean error, and why?<ol><li>  $ stdout nextPutAll: ''hello world''<li>  $ stdout nextPutAll: ''hello world''; cr<li>  $ stdout nextPutAll: ''hello world''!!<li>  $ stdout nextPutAll: ''hello world''; cr!!<li>  $ stdout nextPutAll: ''hello world''!!; stdout cr!!</ol><h3>Answer:</h4>The fourth command will generate an error.<ul><li>  Line one is evaluated as a complete Smalltalk expression, and succeeds.<li>  Line two is evaluated as a complete Smalltalk expression, and succeeds.<li>  Line three is evaluated as a pipeline after failing evaluation as a complete Smalltalk  expression. It succeeds as a pipeline with one internal doIt proxy, and produces  the same output as line one.<li>  Line four cannot be evaluated as a complete Smalltalk expression. The ";" token  causes the command line to be evaluated as two pipelines. The expression for the  first pipeline does not have a trailing "!!" token, so it is assumed to be an external  command, and fails. The second pipeline is evaluated as a doIt on the string ''cr!!'',  which fails as an invalid Smalltalk expression. The error messages for both failures  are accumulated on the shared error pipe, and are displayed in the terminal window.<li>  Line five is evaluated successfully as two pipelines, each consisting of one doIt  proxy. The output is the same as for line two.</ul></body></html>'! !!CommandShell class methodsFor: 'class initialization' stamp: 'dtl 2/3/2012 22:06'!initialize	"CommandShell initialize"	| preferencesClass |	Smalltalk addToStartUpList: self.	(Smalltalk hasClassNamed: #Preferences)		ifTrue: ["Pharo deprecates Preference in favor of pragma registration mechanism"			preferencesClass := Smalltalk at: #Preferences.			(preferencesClass respondsTo: #setWindowColorFor:to: )				ifTrue: ["Squeak"					preferencesClass 						setWindowColorFor: #CommandShell 						to: (Color colorFrom: self windowColorSpecification pastelColor)]				ifFalse: ["Pharo images use some other preferences protocol"]].	Smalltalk at: #TheWorldMenu ifPresent: [ :class |		class class methodDict at: #registerOpenCommand: ifPresent: [ :method |			(method hasLiteral: #deprecated:) "n.b.  use #hasLiteral: rather than #sendsSelector: for Squeak 3.8"				ifTrue: ["Pharo issues deprecation and tells you to do it their way. Ignore the warning."]				ifFalse: [ class unregisterOpenCommand: 'Squeak shell'. "if previously registered"					class registerOpenCommand: {'Squeak Shell'. {CommandShell . #open}}]]]! !!CommandShell class methodsFor: 'version testing' stamp: 'dtl 6/29/2010 21:06'!isMorphic	"Squeak traditionally used #isMorphic to distinguish between Morphic	and MVC user interfaces. In newer Squeak images, the current project	knows its active user interface, so requests are vectored through the	current project. Pharo images pretend to be unaware of the fact that	they are running Morphic, refusing to respond to #isMorphic. This 	implementation does reasonable things in any of the above scenarios."	^(Smalltalk respondsTo: #isMorphic) not or: [Smalltalk isMorphic]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 17:55'!localNameFor: path	"Return the local part the given name."	^ self useFileSystem		ifTrue: [ (path perform: #asFileReference) perform: #basename ]		ifFalse: [(Smalltalk at: #FileDirectory) perform: #localNameFor: with: path]! !!CommandShell class methodsFor: 'VM building' stamp: 'dtl 1/25/2013 19:08'!makeVmIn: buildDirectoryPathName	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart using the	new VM. This assumes that the currently executing VM is either located in,	or linked to, the buildDirectoryPathName directory."	"CommandShell makeVmIn: CommandShell defaultPathString, CommandShell pathSeparator, 'build'"	| shell |	shell := self new.	shell open.	^ shell makeVmIn: buildDirectoryPathName! !!CommandShell class methodsFor: 'instance creation' stamp: 'dtl 12/27/2001 23:36'!open	"CommandShell open"	^ self new open! !!CommandShell class methodsFor: 'instance creation' stamp: 'dtl 3/17/2003 21:19'!openLabel: aString	"CommandShell openLabel: self defaultWindowName"	^ self new openLabel: aString! !!CommandShell class methodsFor: 'instance creation' stamp: 'dtl 6/27/2010 16:08'!openWithHelp	"CommandShell openWithHelp"	self open processCommand: 'help'! !!CommandShell class methodsFor: 'documentation' stamp: 'dtl 12/1/2001 18:51'!overview	"A general overview"	"CommandShell new pipeline: 'CommandShell overview!! | edit'"	| rs ws |	rs := ReadStream on: self htmlOverview.	ws := WriteStream on: String new.	[rs atEnd]		whileFalse:			[ws nextPutAll: (rs upTo: $<).			rs upTo: $>].	^ ws contents! !!CommandShell class methodsFor: 'version dependent' stamp: 'SeanDeNigris 2/13/2013 09:46'!pathNameDelimiter	^ self useFileSystem		ifTrue: [(Smalltalk at: #DiskStore) current perform: #delimiter]		ifFalse: [(Smalltalk at: #FileDirectory) pathNameDelimiter]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/27/2013 18:17'!pathNameForDirectory: directoryOrFileReference	"Return the full name of this directory."	^ self useFileSystem		ifTrue: [directoryOrFileReference fullName]		ifFalse: [ directoryOrFileReference pathName ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'SeanDeNigris 2/13/2013 09:46'!pathSeparator	^ self useFileSystem		ifTrue: [((Smalltalk at: #DiskStore) current perform: #delimiter) asString]		ifFalse: [(Smalltalk at: #FileDirectory) slash]! !!CommandShell class methodsFor: 'proxy creation' stamp: 'dtl 12/31/2007 14:51'!pipeableProxyFor: commandString 	"Create a new proxy for a PipeJunction. The proxy may be any type	of PipeJunction, such as a PipeableOSProcess or ExpressionEvaluator.	Send #value to evaluate the newly created proxy."	"(CommandShell pipeableProxyFor: 'ls -l') value upToEndOfFile"	"(CommandShell pipeableProxyFor: 'Array new: 4 !!') value upToEndOfFile"	"(CommandShell pipeableProxyFor: 'help') value upToEndOfFile"	^ self new		pipeableProxyFor: commandString		input: nil		output: nil		error: nil		predecessorProxy: nil! !!CommandShell class methodsFor: 'proxy creation' stamp: 'dtl 12/31/2007 14:55'!pipeline: aCommand	"Find the individual commands in a command pipeline string, and evaluate	them as a command pipeline. Answer a ProxyPipeline collection of processes	in the pipeline."	"(CommandShell pipeline: 'ps | grep ps | wc') upToEndOfFile"	"(CommandShell pipeline: 'ls NOSUCHFILE * | dd | cat') errorUpToEndOfFile"	"(CommandShell pipeline: 'ls NOSUCHFILE * | dd | cat') upToEndOfFile"	^ self new pipeline: aCommand! !!CommandShell class methodsFor: 'documentation' stamp: 'dtl 12/15/2007 12:25'!raceConditions	"CommandShell new pipeline: 'CommandShell raceConditions!! | edit'"	^'It may be possible to hang the Squeak VM in an IO race condition when doing certain command pipelines. These conditions have been largely eliminated for Unix platforms through the use of nonblocking pipes in conjunction with asynchronous IO or polling processes on the Smalltalk side of the pipes. However, these notes are provided to describe possible deadlock scenarios.Note that nonblocking OS pipes are not yet available on Windows. Command pipelines with external OS processes on Windows are not supported. Blocking on read or write to an OSPipe in Windows will definitely lock the VM.Two kinds of deadlock are possible. In both cases, deadlock occurs when the single-threaded Squeak VM is blocked on a read or write to an OS pipe, and the blocked condition can only be cleared by another process running in the blocked VM.1) Block on write. The Squeak VM can block on a write to an OS pipe if the external process at the other end of the pipe does not keep up with reading it. One internal process proxy writes on an pipe to an external process proxy, and fills the pipe up to some capacity limit, after which the write blocks. The external proxy is writing its output to another internal process proxy in the command pipeline, which never executes because the VM is still blocked trying to write to the full pipe.2) Block on read. The Squeak VM can block on a read from an OS pipe if the external process writing to the pipe never closes the pipe. The internal proxy will post a read on the output pipe from the external command. If the external command has exited, the read will return with a (possibly empty) string. However, if the external command either does not exit, or exits without Squeak being notified, the read on the output pipe will block indefinitely.2a) In the case where the external command exits while the Squeak VM is blocked on a read, Squeak is unable to respond to the notification of the external process exiting. The process stays in a zombie state, the pipes therefore never get closed, and the VM stays in a blocked condition.Here are things to try if a deadlock occurs:Squeak will be blocked and will not respond to the mouse or keyboard. Open a command shell outside of Squeak (perhaps an xterm, or log in to another virtual terminal on Linux or FreeBSD). Using the "ps" command, find the Squeak VM process and its subprocesses. Kill the subprocess. In many cases this will free up the deadlock, and Squeak will come back to life. If this does not work, then you will probably find that one of the processes which you just killed is now in a "zombie" state, which means that the Squeak VM is deadlocked in such a way that it cannot recognize that its child process exited (and therefore cannot properly close the associated file handles). In this case, if your operating system supports a /proc file system, you may be able to break things free by emptying the pipes. On Linux, go to /proc/<pidOfTheSqueakVMProcess>/fd/ and do "cat" commands on all the pipe files in this directory. If none of this works, you are just plain stuck, and you will need to kill your Squeak session and recover anything valuable from the changes log.'! !!CommandShell class methodsFor: 'system startup' stamp: 'dtl 7/12/2002 19:26'!startUp: resuming	"A CommandShell may be running external processes in background, and waiting	for those processes to complete. If the Squeak image is stopped and restarted, the	background processes are no longer children of the Squeak process, and there is	no way to receive notification when the processes exit. This would result in leftover	Smalltalk processes associated with the CommandShell waiting forever for the	external processes to exit. The simplest way to prevent this is to terminate all	the Smalltalk processes unconditionally after an image restart."	resuming ifTrue: [self allSubInstances do: [:e | e startUpInNewSession]]! !!CommandShell class methodsFor: 'class initialization' stamp: 'dtl 2/3/2012 22:06'!unload	Smalltalk at: #TheWorldMenu ifPresent: [ :class |		class class methodDict at: #unregisterOpenCommandWithReceiver: ifPresent: [ :method |			(method hasLiteral: #deprecated:) "n.b.  use #hasLiteral: rather than #sendsSelector: for Squeak 3.8"				ifFalse: [ class unregisterOpenCommandWithReceiver: self ] ] ]! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/26/2013 15:38'!useFileSystem	"If true use FileSystem, otherwise use traditional FileDirectory. See senders	for methods with file system dependencies."	^ Smalltalk hasClassNamed: #FileReference! !!CommandShell class methodsFor: 'version testing' stamp: 'dtl 7/1/2015 21:19'!versionString	"CommandShell versionString"	^'4.6.15'! !!CommandShell class methodsFor: 'window color' stamp: 'dtl 6/29/2010 00:07'!windowColorSpecification	"Answer a WindowColorSpec object that declares my preference"	| windowColorSpec |	windowColorSpec := Smalltalk				at: #WindowColorSpec				ifAbsent: [^ self error: 'this image does not support WindowColorSpec'].	^ windowColorSpec		classSymbol: self name		wording: 'Squeak Shell'		brightColor: (Color lightGray lighter paler)		pastelColor: (Color lightGray lighter lighter paler paler)		helpMessage: 'CommandShell window for evaluating Smalltalk and OS commands'! !!CommandShell class methodsFor: 'version dependent' stamp: 'dtl 1/29/2013 20:40'!withBlanksTrimmed: aString	^ (aString respondsTo: #withBlanksTrimmed)		ifFalse: [aString perform: #trimBoth "Pharo"]		ifTrue: [aString perform: #withBlanksTrimmed]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/24/2001 19:09'!activeController	"In Morphic, alway nil. In MVC, the controller which most recently invoked	a command."	^ activeController! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/24/2001 19:09'!activeController: aController	"In Morphic, alway nil. In MVC, the controller which most recently invoked	a command."	activeController := aController! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/19/2002 07:13'!backgroundMessageQueue	"When a background pipeline completes, it places a message in this queue.	The message will be displayed the next time the user accepts a line of	text (presses CR)."	^ backgroundMessageQueue ifNil: [backgroundMessageQueue := OrderedCollection new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!backgroundMessageQueue: anObject	"Set the value of backgroundMessageQueue"	backgroundMessageQueue := anObject! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 12/11/2007 21:33'!backgroundPipelineComplete: aPipeline commandIndex: index	"This message is sent when aPipeline has completed evaluation.	Ensure that the output and error event handlers have had a chance	to completely empty the pipes prior to cleaning things up."	self waitUntilPipesAreEmpty: aPipeline.	aPipeline closePipes; release.	self backgroundMessageQueue addLast:		((WriteStream on: String new)			nextPutAll: '[', index asString, ']+ Done                     ';			nextPutAll: aPipeline commandLine;			cr;			contents).	self backgroundProxies removeAll: aPipeline.	self unRegisterBackgroundPipeline: aPipeline at: index.	self notifyRestorePrompt! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/15/2002 16:23'!backgroundPipelines	"The pipelines which are currently being evaluated in background. This	collection is used to keep track of the background command lines by giving	each background pipeline an index number corresponding to its position in	this collection. New pipelines are inserted at the first available nil position	in the collection, and the collection is expanded as needed."	^ backgroundPipelines ifNil: [backgroundPipelines := OrderedCollection new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!backgroundPipelines: anObject	"Set the value of backgroundPipelines"	backgroundPipelines := anObject! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/9/2006 10:23'!backgroundProxies	"All of my process proxies that are being evaluated in the background."	backgroundProxies ifNil: [backgroundProxies := OrderedCollection new].	^ backgroundProxies! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/9/2006 10:23'!backgroundProxies: aCollection	"All of my process proxies that are being evaluated in the background."	backgroundProxies := aCollection! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 11/21/2006 09:20'!builtinCommandProxyFor: aCommandString input: in output: out error: err	"Answer a PipeableEvaluator on a built in command, or nil."	"CommandShell new initialize builtinCommandProxyFor: 'help' input: nil output: nil error: nil"	| args command commandAndArgs |	^ (self isBuiltInCommand: aCommandString)		ifTrue:			[commandAndArgs := self shellSyntax									programNameAndArgumentsFrom: aCommandString									inDirectoryPath: nil									findExecutable: false.			command := self builtinCommands at: commandAndArgs first.			args := commandAndArgs last.			^ ShellBuiltinEvaluator				command: command				withArguments: args				shell: self				pipeFrom: in				pipeTo: out				errorPipelineStream: err]		ifFalse: [nil]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/27/2001 12:24'!builtinCommands	^ builtinCommands ifNil: [builtinCommands := Dictionary new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 7/14/2002 11:54'!builtinCommands: aCommandDictionary	builtinCommands := aCommandDictionary! !!CommandShell methodsFor: 'testing' stamp: 'dtl 8/7/2002 11:45'!canAccessOSProcess	"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"	"CommandShell new canAccessOSProcess"	| osp |	^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 3/16/2001 05:58'!characterLimit	"Tell the views how much to retain on screen"	^ 20000! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 2/18/2007 15:37'!checkSttyFor: characterValue	"Check for interrupt characters and such. Consume interrupt character and	answer nil, otherwise answer characterValue."	(self isInterrupt: characterValue)		ifTrue:			[self changed: #interruptCharacter.			^ nil].	(self isEndOfFile: characterValue)		ifTrue:			[self doEndOfFile.			^ nil].	^ characterValue! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/2/2001 12:05'!clearSemaphore	[self readSyncSemaphore isEmpty] whileFalse: [readSyncSemaphore terminateProcess].	readSyncSemaphore signal! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:48'!command: aCommandString	"Evaluate aCommandString. Answer a collection of evaluated pipelines,	or nil if nothing was done."	"CommandShell new command: 'ls -l | cat'"	"CommandShell new open; command: 'ls -l | cat'"	"CommandShell new open; command: 'who'"	"CommandShell new open; command: 'who&'"	"CommandShell new open; command: 'sol'"	"CommandShell new command: 'sol'"	^self command: aCommandString echo: true! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:47'!command: aCommandString echo: showCommand	"Evaluate aCommandString. Answer a collection of evaluated pipelines,	or nil if nothing was done. If showCommand is true, update dependent	views in order to display the command."	showCommand ifTrue: [self changed: aCommandString].	^ self evaluatePipelines: (self evaluateOrMakePipelinesFrom: aCommandString)! !!CommandShell methodsFor: 'command scripting' stamp: 'dtl 3/18/2003 20:33'!command: aCommandString onFailureDo: aBlockWithZeroOrOneParameter	"Evaluate aCommandString. On failure, answer the result of evaluating	aBlockWithOneParameter with the collection of evaluated pipelines as	its parameter. Otherwise, answer a collection of evaluated pipelines or	nil if nothing was done."	"CommandShell new open;		command: 'who'		onFailureDo: [:p | 'the proxy pipeline collection which failed was ', p printString]"	"CommandShell new open;		command: 'ls NOSUCHFILE'		onFailureDo: [:p | 'the proxy pipeline collection that failed was ', p printString]"	"CommandShell new open;		command: 'ls NOSUCHFILE'		onFailureDo: ['the command failed']"	| pipelines |	pipelines := self command: aCommandString.	(pipelines anySatisfy: [:p | p succeeded not])		ifTrue:			[(aBlockWithZeroOrOneParameter numArgs == 0)				ifTrue: [^ aBlockWithZeroOrOneParameter value]				ifFalse: [^ aBlockWithZeroOrOneParameter value: pipelines]]		ifFalse: [^ pipelines]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 4/7/2001 12:48'!commandHistory	"Automatically trim the history list, and answer the resulting list."	| trimIncrement |	trimIncrement := 1.	"Could be a larger number to copy the collection less often"	commandHistory isNil		ifTrue:			[commandHistory := OrderedCollection new]		ifFalse:			[(commandHistory size > (self historyDepth * 2 + (trimIncrement * 2) - 2))				ifTrue:					[commandHistory := commandHistory						copyFrom: (trimIncrement * 2 + 1) to: commandHistory size]].	^ commandHistory! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/15/2002 09:21'!commandLineProcesses	"The Smalltalk processes associated with currently executing command lines. Keep	track of them here so that they can be conveniently terminated if something gets	out of whack and needs cleaning up."	commandLineProcesses ifNil: [commandLineProcesses := OrderedCollection new].	^ commandLineProcesses! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!commandLineProcesses: anObject	"Set the value of commandLineProcesses"	commandLineProcesses := anObject! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 1/13/2007 19:10'!copyAllErrorFrom: aProxy	"An event driven data source may send this message to cause its available	error stream characters to be processed."	| s |	self readSyncSemaphore critical:		[s := aProxy errorUpToEnd.		s isEmpty ifFalse:			[[self errorStream nextPutAll: s]				on: Error				do: [:ex | ex retryUsing:						["If the error pipe overflows we get an unhandled error,						so wait a while and retry the write."						(Delay forMilliseconds: self pollingDelayTime) wait.						self errorStream nextPutAll: s]]]]! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 1/16/2007 07:05'!copyAllOutputFrom: aProxy	"An event driven data source may send this message to cause its available	characters to be processed."	| s |	self readSyncSemaphore critical:		[s := aProxy upToEnd.		s isEmpty ifFalse:			[[self outputStream nextPutAll: s]				on: Error				do: [:ex | ex retryUsing:						["If the output pipe overflows we get an unhandled error,						so wait a while and retry the write."						(Delay forMilliseconds: self pollingDelayTime) wait.						self outputStream nextPutAll: s]]]]! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 1/13/2007 19:10'!copyErrorToEofFrom: aProxy	"An event driven data source may send this message to cause its available	error stream characters to be processed."	| s |	self readSyncSemaphore critical:		[s := aProxy errorUpToEndOfFile.		s isEmpty ifFalse:			[[self errorStream nextPutAll: s]				on: Error				do: [:ex | ex retryUsing:						["If the error pipe overflows we get an unhandled error,						so wait a while and retry the write."						(Delay forMilliseconds: self pollingDelayTime) wait.						self errorStream nextPutAll: s]]]]! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 1/13/2007 19:11'!copyOutputToEofFrom: aProxy	"An event driven data source may send this message to cause its available	characters to be processed."	| s |	self readSyncSemaphore critical:		[s := aProxy upToEndOfFile.		s isEmpty ifFalse:			[[self outputStream nextPutAll: s]				on: Error				do: [:ex | ex retryUsing:						["If the output pipe overflows we get an unhandled error,						so wait a while and retry the write."						(Delay forMilliseconds: self pollingDelayTime) wait.						self outputStream nextPutAll: s]]]]! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 7/14/2002 12:42'!defaultBuiltinCommands	^ #(cd: clear: copyToError: copyToOutput: edit: snapshot: exit: fc: help: history: inspect: pwd: sls: sqsh: type:)! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 6/17/2002 23:43'!defaultPromptString	^ '$ '! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 6/17/2002 23:45'!defaultPromptStringTwo	^ '> '! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 9/3/2010 17:02'!doEndOfFile	"EOF character detected, close stdin to pipeline."	| pipelineInput |	(pipelineInput := self keyboardConnector)		ifNotNil: [pipelineInput closeWriter]! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 3/9/2002 18:22'!doInterrupt	"Interrupt character detected, do interrupt stuff."	| msgStrm children answer |	children := self externalChildren collect: [:e | e processProxy].	(children size > 0)		ifTrue:			[msgStrm := WriteStream on: String new.			(children size > 1)				ifTrue: [msgStrm nextPutAll: 'kill processes']				ifFalse: [msgStrm nextPutAll: 'kill process'].			children do: [:e | msgStrm nextPutAll: ' ', e pid printString, ' (', e programName, ')'].			msgStrm nextPut: $?.			self readSyncSemaphore critical:				[self pauseStProcesses.				answer := self confirm: msgStrm contents.				self unpauseStProcesses.				answer ifTrue:					[children reverseDo: [:e | e sigkill].					self terminateStProcesses]]]! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 1/20/2007 14:18'!doItProxyFor: aCommandString input: in output: out error: err	"Answer a PipeableEvaluator on a doIt command, or nil."	"CommandShell new doItProxyFor: '#thisIsADoIt !! ' input: nil output: nil error: nil"	^ (self shellSyntax isDoItCommand: aCommandString)		ifTrue: [self evaluationProxyFor: (self shellSyntax doItStringFrom: aCommandString)					input: in					output: out					error: err]! !!CommandShell methodsFor: 'command history' stamp: 'dtl 1/28/2013 21:40'!editCommand: aString	^ UIManager default		request: 'edit command'		initialAnswer: aString! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 6/7/2001 23:17'!endOfFileCharacterValue	"<ctl>-D"	^ 4! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 5/18/2008 11:36'!environment	^ environment ifNil:		[environment := (Smalltalk at: #OSProcess ifPresent:			[:osp | osp thisOSProcess environment deepCopy]) ifNil: [Dictionary new]].! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!environment: anObject	"Set the value of environment"	environment := anObject! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:23'!errorStream	"Answer the value of errorStream"	^ errorStream ifNil: [errorStream := WriteStream on: String new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!errorStream: anObject	"Set the value of errorStream"	errorStream := anObject! !!CommandShell methodsFor: 'command line parsing' stamp: 'dtl 1/22/2007 07:04'!evaluateOrMakePipelinesFrom: aCommandString	"Convert aCommandString into a structured collection of process proxies,	possibly after evaluating aCommandString as Smalltalk."	"CommandShell new evaluateOrMakePipelinesFrom: 'who | cat | wc; ps -aef | cat& pwd | cat'"	"CommandShell new evaluateOrMakePipelinesFrom: 'Array new: 10' "	| process |	"Ignore trivial case of a single word starting with $#"	(self isOneWordCommentString: aCommandString)		ifTrue:			[^ #()]		ifFalse:			[process := self tryEvaluatingAsSmalltalk: aCommandString.			(process exitStatus == #success)				ifTrue: "aCommandString was successfully evaluated as a Smalltalk expression"					[self outputStream nextPutAll: process upToEnd.					self errorStream nextPutAll: process errorUpToEnd.					self saveInHistoryList: aCommandString.					^ #()]				ifFalse: "Treat aCommandString as a command pipeline"					[^ self pipelineCollectionFrom: aCommandString]]! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 12/11/2007 18:39'!evaluatePipeline: aPipeline	"Evaluate aPipeline with event handlers to process output and error data."	"CommandShell new evaluatePipeline: 			(CommandShell new				pipelineCollectionFrom: 'ls NOSUCHFILE * | cat | dd | cat | wc; ps -aef | cat& pwd | cat') first"	| index |	self registerOutputEventsFor: aPipeline.	self registerErrorEventsFor: aPipeline.	aPipeline background		ifTrue:			[index := self registerBackgroundPipeline: aPipeline.			self registerBackgroundCompletionEventsFor: aPipeline				commandIndex: index.			self backgroundProxies addAll: aPipeline.			aPipeline value.			"Print the index of the background process."			self errorStream nextPutAll: '[', index asString, '] '.			aPipeline last isExternalProcess ifTrue:				[aPipeline last processProxy pid printOn: self errorStream].			self errorStream cr; nextPut: Character lf]		ifFalse:			[self keyboardConnector: aPipeline pipeToInput.			self registerForegroundCompletionEventsFor: aPipeline.			self foregroundProxies addAll: aPipeline.			aPipeline value].	^ aPipeline! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/3/2010 17:04'!evaluatePipelines: aPipelineCollection	"Evaluate the process proxies in aPipelineCollection, and process their output and error	streams. Answer aPipelineCollection."	| lastForegroundPipeline completionSemaphore |	lastForegroundPipeline := nil.	aPipelineCollection isEmpty ifFalse:		[lastForegroundPipeline := aPipelineCollection reversed			detect: [:p | p background not]			ifNone: [].		lastForegroundPipeline ifNotNil: [self registerPromptEventFor: lastForegroundPipeline].		aPipelineCollection do: [:pipeline |			completionSemaphore := Semaphore new.			pipeline background				ifTrue: [completionSemaphore signal "no wait"]				ifFalse: [pipeline when: #complete send: #signal to: completionSemaphore].			self evaluatePipeline: pipeline.			completionSemaphore wait]].	lastForegroundPipeline ifNil: [self notifyPrompt].	self resetSafeToExitFlag.	^ aPipelineCollection! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 11/21/2006 09:21'!evaluationProxyFor: aCommandString input: in output: out error: err	"Answer a PipeableEvaluator on a doIt command, or nil."	"CommandShell new evaluationProxyFor: 'Smalltalk' input: nil output: nil error: nil"	"CommandShell new evaluationProxyFor: 'BOGUS' input: nil output: nil error: nil"	| proxy |	proxy := ExpressionEvaluator				command: aCommandString				pipeFrom: in				pipeTo: out				errorPipelineStream: err.	^ proxy! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 6/9/2001 16:13'!filterAndForward: aCharacter	"Filter aCharacter, taking special action if needed. If a child process is active,	forward aCharacter to the child and answer nil. Otherwise answer aCharacter."	^ (self checkSttyFor: aCharacter asciiValue) ifNotNil:		[keyboardConnector isNil			ifTrue:				[aCharacter]			ifFalse:				[keyboardConnector closed					ifTrue:						[aCharacter]					ifFalse:						[keyboardConnector nextPut: aCharacter; flush.						nil]]]! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 11/7/2007 07:01'!filterAndForwardEvent: keyboardEvent 	"Filter keyboardEvent, taking special action if needed. If a child process	is active, forward keyboardEvent to the child and answer nil. Otherwise	answer keyboardEvent."	(keyboardConnector isNil or: [keyboardConnector closed])		ifTrue: [^ keyboardEvent]		ifFalse: [keyboardConnector					nextPut: keyboardEvent keyValue asCharacter;					flush.			^ nil]! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 7/7/2006 09:19'!foregroundPipelineComplete: aPipeline	"This message is sent when aPipeline has completed evaluation.	Ensure that the output and error event handlers have had a chance	to completely empty the pipes prior to cleaning things up."	self waitUntilPipesAreEmpty: aPipeline.	aPipeline closePipes; release.	self keyboardConnector: nil.	[self foregroundProxies removeAll: aPipeline]		on: Error		do: ["exit command may cause the collection to be eliminated, hence an error"]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/9/2006 10:23'!foregroundProxies	"All of my process proxies that are being evaluated in the foreground."	^ foregroundProxies ifNil: [foregroundProxies := OrderedCollection new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/9/2006 10:23'!foregroundProxies: aCollection	"All of my process proxies that are being evaluated in the foreground."	foregroundProxies := aCollection! !!CommandShell methodsFor: 'command history' stamp: 'dtl 4/22/2001 10:48'!historyAt: anInteger	| bufferSize index |	bufferSize := commandHistory size / 2.	(anInteger > 0)		ifTrue:			[index := bufferSize + 1 - historyIndex + anInteger * 2]		ifFalse:			[index := bufferSize + anInteger * 2].	((index > commandHistory size) | (index < 1))		ifTrue: [^ '']		ifFalse: [^ commandHistory at: index]! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 4/8/2001 15:26'!historyDepth	"Number of commands to retain in the command history list"	^ 100! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 4/3/2001 22:48'!historyIndex	historyIndex ifNil: [historyIndex := 1].	^ historyIndex! !!CommandShell methodsFor: 'working directory' stamp: 'dtl 12/29/2002 20:14'!home	"Home directory. Use the environment variable, and set it in #initialize."	^ self environment at: #HOME! !!CommandShell methodsFor: 'command scripting' stamp: 'dtl 3/18/2003 23:12'!if: aCommandStringOrScript then: successBlock else: failureBlock	"Evaluate aCommandStringOrScript, then evaluate successBlock or failureBlock	depending on the exit status of the command or script. The blocks may use	either zero or one argument. If a single argument is used, the collection of	evaluated pipelines is passed to the block as an argument."	"CommandShell new open;		if: 'who'		then: ['the command succeeded']		else: ['the command failed']"	"CommandShell new		if: 'who			ls NOSUCHFILE			pwd'		then: ['the script succeeded']		else: ['the script failed']"	"CommandShell new		if: 'who			ls NOSUCHFILE			pwd'		then: [:p | 'the script succeeded ', p printString]		else: [:p | 'the script failed ', p printString]"	| pipelines |	pipelines := self script: aCommandStringOrScript		onFailureDo: [:p | (failureBlock numArgs == 0)						ifTrue: [^ failureBlock value]						ifFalse: [^ failureBlock value: p]].	(successBlock numArgs == 0)		ifTrue: [^ successBlock value]		ifFalse: [^ successBlock value: pipelines]! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/29/2002 20:00'!initialize	self installCommands.	self setHomeDirectory! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/27/2001 12:24'!installCommand: aShellBuiltin	self builtinCommands at: aShellBuiltin name put: aShellBuiltin! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 7/14/2002 12:05'!installCommands	self installCommands: self defaultBuiltinCommands! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 7/14/2002 12:05'!installCommands: aCommandArray	self builtinCommands: (ShellBuiltin commandDictionaryFor: self commands: aCommandArray)! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 6/7/2001 23:17'!interruptCharacterValue	"<ctl>-C"	^ 3! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 4/8/2001 15:11'!invalidCommandMessage	^ 'invalid command', Character cr asString! !!CommandShell methodsFor: 'testing' stamp: 'dtl 9/26/2009 13:15'!isBuiltInCommand: aCommandString	"Answer true if aCommandString can be evaluated as a built in command."	"CommandShell new initialize isBuiltInCommand: 'help this should answer true'"	"CommandShell new initialize isBuiltInCommand: 'this should answer false'"	^ self builtinCommands includesKey: (aCommandString copyUpTo: Character space)! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 6/7/2001 23:20'!isEndOfFile: anInteger	^ anInteger == self endOfFileCharacterValue! !!CommandShell methodsFor: 'testing' stamp: 'dtl 4/7/2001 13:04'!isExcludedFromHistory: commandString	"Answer true if commandString should not be remembered in the history list. The 'fc'	and 'history' commands should be excluded."	^ ('fc*' match: commandString)		or: ['history*' match: commandString]! !!CommandShell methodsFor: 'testing' stamp: 'dtl 4/19/2003 09:13'!isExternalProcess	"Answer true if the process which I represent is an external OSProcess. For protocol	compatibility with PipeJunction."	^ false! !!CommandShell methodsFor: 'input character filtering' stamp: 'dtl 6/7/2001 23:21'!isInterrupt: anInteger	^ anInteger == self interruptCharacterValue! !!CommandShell methodsFor: 'testing' stamp: 'dtl 1/29/2013 20:24'!isOneWordCommentString: aCommandString	"Answer true if aCommandString is one word beginning with $#, or if it is an empty string."	"CommandShell new isOneWordCommentString: '#oneWordComment'"	"CommandShell new isOneWordCommentString: ' #oneWordComment'"	"CommandShell new isOneWordCommentString: ' #oneWordComment '"	"CommandShell new isOneWordCommentString: '#three word comment'"	"CommandShell new isOneWordCommentString: 'not a comment'"	"CommandShell new isOneWordCommentString: 'notAComment'"	"CommandShell new isOneWordCommentString: ''"	| s |	s := CommandShell withBlanksTrimmed: aCommandString.	^ s isEmpty		or: [(s first == self shellSyntax commentChar)			and: [(Scanner new scanTokens: s) size == 1]]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 4/22/2001 18:49'!keyboardConnector	"If nil, then my views should behave normally. If a WriteStream, then my	views should attempt to forward all keyboard inputs to the WriteStream.	This is to permit the keyboard to be connected to an externally executing	process, then reconnected to its normal functions when the external process	is complete."	^ keyboardConnector! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 4/22/2001 18:56'!keyboardConnector: aWriteStreamOrNil	"If nil, then my views should behave normally. If a WriteStream, then my	views should attempt to forward all keyboard inputs to the WriteStream.	This is to permit the keyboard to be connected to an externally executing	process, then reconnected to its normal functions when the external process	is complete."	keyboardConnector := aWriteStreamOrNil! !!CommandShell methodsFor: 'VM building' stamp: 'dtl 1/25/2013 19:06'!makeVmIn: buildDirectoryPathName	"Rebuild the virtual machine and plugins in the buildDirectoryPathName	directory. If the build is successful, save the image and restart using the	new VM. This assumes that the currently executing VM is either located in,	or linked to, the buildDirectoryPathName directory."	"CommandShell makeVmIn: CommandShell defaultPathString, CommandShell pathSeparator, 'build'"	self canAccessOSProcess		ifFalse:			[^ self notify: 'OSProcess not available or OSProcess plugin not functioning'].	self if: 'cd ', buildDirectoryPathName		then:			[self if: 'make'				then:					[self script: 'echo make completed successfully, restarting VM; OSProcess quitAndRestart !!']				else:					[self script: 'echo make failed']]		else:			[self script: 'echo cannot change directory to ', buildDirectoryPathName]! !!CommandShell methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 10:49'!notifyAlternatePrompt	"Display $PS2"	self changed: #alternatePrompt! !!CommandShell methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 10:48'!notifyPrompt	"Display $PS1"	self changed: #prompt! !!CommandShell methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 10:49'!notifyRestorePrompt	"Restore last prompt display"	self changed: #restorePrompt! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 1/20/2007 09:26'!open	| tty |	tty := CommandShellTranscript commandShell: self.	tty open.	^ tty! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/11/2007 18:46'!openLabel: aString 	| tty |	tty := CommandShellTranscript commandShell: self.	tty openLabel: aString.	^ tty! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:23'!outputStream	"Answer the value of outputStream"	^ outputStream ifNil: [outputStream := WriteStream on: String new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 8/19/2006 13:14'!outputStream: anObject	"Set the value of outputStream"	outputStream := anObject! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 10/13/2008 21:22'!pipeableProxyFor: aCommandString input: in output: out error: err predecessorProxy: lastProxy	"Answer a proxy for an external OS process, or for an internal builtin command,	or for an evaluation string. The proxy is suitable for use in a command pipeline,	possibly mixing internal and external commands."	"(CommandShell new pipeableProxyFor: '#''this is a doIt'' !! ' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"	"(CommandShell new pipeableProxyFor: 'help' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"	"(CommandShell new pipeableProxyFor: 'cat /etc/hosts' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"	| errorPipelineStream cmd |	errorPipelineStream := lastProxy ifNotNil: [lastProxy errorPipeForNextProxy].	^ (((self doItProxyFor: aCommandString						"try entire line as a Smalltalk expression"			input: in			output: out			error: (err ifNil: [errorPipelineStream]))		ifNil: [self builtinCommandProxyFor: aCommandString	"is it a shell builtin?"				input: in				output: out				error: (err ifNil: [errorPipelineStream])])			ifNil: [self processProxyFor: aCommandString			"then it must be an external command"					input: in					output: out					error: err					predecessorProxy: lastProxy])				ifNil: [cmd := (aCommandString findTokens: ' ') first.		"otherwise create evaluator to print error message"					self evaluationProxyFor: 'stderr nextPutAll: ''sqsh: ', cmd, ': command not found''; cr. self fail'						input: in						output: out						error: err]! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 11/20/2006 08:10'!pipeline: aCommand	"Find the individual commands in a command pipeline string, and execute them	as a command pipeline. Answer a ProxyPipeline collection of processes in the pipeline."	"(CommandShell new pipeline: 'ps | grep ps | wc') last output"	"CommandShell new pipeline: 'ls NOSUCHFILE * | dd | cat'"	| sema pipeline |	sema := Semaphore new.	pipeline := ProxyPipeline fromString: aCommand shell: self.	pipeline when: #complete send: #signal to: sema.	pipeline value.	sema wait.	^ pipeline! !!CommandShell methodsFor: 'command line parsing' stamp: 'dtl 1/29/2013 20:25'!pipelineCollectionFrom: aCommandString	"Break aCommandString into individual pipeline command strings, and answer a	collection of process proxy pipelines."	"CommandShell new pipelineCollectionFrom: 'who | cat | wc; ps -aef | cat& pwd | cat'"	| str pipelineCollection tokens strm cmd cmdWithTerm pipeline lastProxy |	str := CommandShell withBlanksTrimmed: aCommandString.	pipelineCollection := OrderedCollection new.	(self shellSyntax isComment: str)		ifFalse:			[tokens := str findTokens: ';&' keep: ';&'.			strm := ReadStream on: tokens.			[strm atEnd]				whileFalse:					[cmd := CommandShell withBlanksTrimmed: strm next.					(self shellSyntax isComment: cmd)						ifFalse:							[strm atEnd								ifTrue:									[((cmd size == 1) and: [((cmd at: 1) == $;) | ((cmd at: 1) == $&)])										ifTrue:											["Special case, user has entered ';<cr>' or '&<cr>'"											cmd := cmdWithTerm := '']										ifFalse:											[cmdWithTerm := cmd]]								ifFalse:									[cmdWithTerm := cmd, strm peek].							self saveInHistoryList: cmdWithTerm.							(cmdWithTerm size > 0)								ifTrue:									[pipeline := ProxyPipeline fromString: cmd shell: self.									pipeline background:										(strm next = self shellSyntax noWaitToken).									lastProxy := pipeline last.									lastProxy ifNil:										[self inform: 'cannot access system'.										^ nil].									lastProxy outputPipeForNextProxy										ifNotNil:											[lastProxy setNonBlockingOutput].									pipelineCollection add: pipeline]]]].	^ pipelineCollection! !!CommandShell methodsFor: 'defaults' stamp: 'dtl 6/4/2006 18:01'!pollingDelayTime	"For various polling loops, number of milliseconds to delay"	^ 50! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:59'!processCommand: aCommandString	"Evaluate aCommandString in a separate Smalltalk process. This permits the	user interface to remain responsive."	^self processCommand: aCommandString echo: true! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:55'!processCommand: aCommandString echo: showCommand	"Evaluate aCommandString in a separate Smalltalk process. This permits the	user interface to remain responsive. If showCommand is true, update dependent	views in order to display the command."	self commandLineProcesses add:		([self command: aCommandString echo: showCommand.		self commandLineProcesses				remove: Processor activeProcess				ifAbsent: []] forkAt: Processor userBackgroundPriority)! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 11/23/2002 13:31'!processProxies	"All of my process proxies."	^ self foregroundProxies, self backgroundProxies! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 10/14/2008 20:11'!processProxyFor: aCommandString input: in output: out error: err predecessorProxy: lastProxy	"Answer a proxy for an external OS command process. Note that the sender is	responsible for closing the input pipe. Under certain conditions, reading up to	end on a proxy can deadlock the VM if the input pipe remains open."	"CommandShell new processProxyFor: '/bin/sh' input: nil output: nil error: nil predecessorProxy: nil"	| input newInputPipe errorPipelineStream p proxy |	self canAccessOSProcess		ifFalse:			["Answer a doIt proxy with an error message. Call it this way to make sure that			the error streams get wired up correctly"			p := self pipeableProxyFor: 'String new: 0 !! '					input: in					output: out					error: err					predecessorProxy: lastProxy.			p errorPipelineStream nextPutAll:				'cannot access system to run ''', aCommandString, '''', Character cr asString.			^ p].	((in isNil or: [lastProxy isNil]) or: [in isPipe not])		ifTrue:			[input := in]		ifFalse:			["Input from a command pipeline"			(in isKindOf: InternalPipe)				ifTrue:					["The input stream is not an external OS pipe. Need to create one,					and move the contents of the in stream into the new OSPipe prior					to starting the external OS process."					newInputPipe := PipeJunction externalPipeClass blockingPipe.					lastProxy replaceOutputStreamWith: newInputPipe writer.					input := newInputPipe reader]				ifFalse:					[input := in reader]].	errorPipelineStream := lastProxy ifNotNil: [lastProxy errorPipeForNextProxy].	proxy := PipeableOSProcess		commandNoEvaluate: aCommandString		environment: self environment		workingDir: self workingDirectory		input: input		output: out		error: err		errorPipelineStream: errorPipelineStream		shellSyntax: self shellSyntax.	(proxy isNil and: [newInputPipe notNil])		ifTrue: [newInputPipe closeReader]. "replacement pipe will not be read, so close its output"	^ proxy! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/17/2002 23:45'!promptString	"The primary command prompt string, equivalent to $PS1 in a Unix shell"	^ promptString ifNil: [promptString := self defaultPromptString]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/17/2002 23:47'!promptString: aString	"The primary command prompt string, equivalent to $PS1 in a Unix shell"	promptString := aString! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/17/2002 23:46'!promptStringTwo	"The secondary command prompt string, equivalent to $PS2 in a Unix shell"	^ promptStringTwo ifNil: [promptStringTwo := self defaultPromptStringTwo]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/17/2002 23:48'!promptStringTwo: aString	"The secondary command prompt string, equivalent to $PS2 in a Unix shell"	promptStringTwo := aString! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 1/20/2007 13:41'!promptWhenComplete: aPipeline	self waitUntilPipesAreEmpty: aPipeline.	self notifyPrompt! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/25/2001 23:07'!readSyncSemaphore	"Used in MVC to pause the screen output when presenting a dialogue to the user"	readSyncSemaphore ifNil: [readSyncSemaphore := Semaphore forMutualExclusion].	^ readSyncSemaphore! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 6/25/2001 20:34'!readSyncSemaphore: aSemaphore	"Used in MVC to pause the screen output when presenting a dialogue to the user"	readSyncSemaphore := aSemaphore! !!CommandShell methodsFor: 'process proxy creation' stamp: 'dtl 4/8/2006 18:18'!redirectedPipeableProxyFor: aCommandString predecessorProxy: lastProxy	"Answer a proxy for an external OS process, or for an internal builtin command,	or for an evaluation string. The proxy is suitable for use in a command pipeline,	possibly mixing internal and external commands."	"(CommandShell new redirectedPipeableProxyFor: '#''this is a doIt'' !! '							predecessorProxy: nil) value upToEnd"	"(CommandShell new redirectedPipeableProxyFor: 'help'							predecessorProxy: nil) value upToEnd"	"(CommandShell new redirectedPipeableProxyFor: 'cat /etc/hosts'							predecessorProxy: nil) value upToEnd"	| redirectedCommand nextProxy input |	redirectedCommand := self shellSyntax								redirectIOFor: aCommandString								inDirectoryPath: self workingDirectory.	lastProxy isNil		ifTrue:			[input := redirectedCommand at: 2]		ifFalse:			[(redirectedCommand at: 2) isNil				ifTrue:					[input := lastProxy outputPipeForNextProxy]				ifFalse:					[lastProxy replaceOutputStreamWith: nil.					input := redirectedCommand at: 2]].	nextProxy := self pipeableProxyFor: (redirectedCommand at: 1)		input: input		output: (redirectedCommand at: 3)		error: (redirectedCommand at: 4)		predecessorProxy: lastProxy.	^ nextProxy handleRedirectedOutputOf: lastProxy! !!CommandShell methodsFor: 'event registration' stamp: 'dtl 1/20/2007 13:46'!registerBackgroundCompletionEventsFor: aPipeline commandIndex: index	"When an event driven pipeline is complete, it will trigger #complete."	aPipeline when: #complete		send: #backgroundPipelineComplete:commandIndex:		to: self		withArguments: {aPipeline . index}! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 12/15/2002 16:48'!registerBackgroundPipeline: aPipeline	"Register aPipeline and answer an index number identifier."	| index |	aPipeline background		ifTrue:			["Find available slot in registry, expanding if needed"			index := self backgroundPipelines identityIndexOf: nil.			(index > 0)				ifTrue:					[self backgroundPipelines at: index put: aPipeline.					^ index]				ifFalse:					[self backgroundPipelines addLast: aPipeline.					^ backgroundPipelines size]]		ifFalse:			[self error: 'expected a background pipeline']! !!CommandShell methodsFor: 'event registration' stamp: 'dtl 1/13/2007 17:22'!registerErrorEventsFor: aPipeline	"When an event driven PipeJunction has error data available, it will	trigger #errorDataReady."	aPipeline when: #errorDataReady		send: #copyAllErrorFrom:		to: self		with: aPipeline! !!CommandShell methodsFor: 'event registration' stamp: 'dtl 12/15/2002 13:29'!registerForegroundCompletionEventsFor: aPipeline	"When an event driven pipeline is complete, it will trigger #complete."	aPipeline when: #complete		send: #foregroundPipelineComplete:		to: self		with: aPipeline! !!CommandShell methodsFor: 'event registration' stamp: 'dtl 1/13/2007 17:22'!registerOutputEventsFor: aPipeline	"When an event driven PipeJunction has new data available, it will	trigger #outputDataReady."	aPipeline when: #outputDataReady		send: #copyAllOutputFrom:		to: self		with: aPipeline! !!CommandShell methodsFor: 'event registration' stamp: 'dtl 1/20/2007 13:45'!registerPromptEventFor: aPipeline	aPipeline when: #complete		send: #promptWhenComplete:		to: self		with: aPipeline! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 6/24/2002 07:02'!release	self startUpInNewSession.	^ super release! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 6/4/2006 17:44'!resetSafeToExitFlag	"When all foreground and background proxies are complete, the safeToExit	flag may be set to true. The flag is set false when a snaphot command is	evaluated, and is checked by any command which would cause Squeak to	exit. This prevents Squeak from automatically exiting when restarting the	image."	[[self foregroundProxies isEmpty not or: [self backgroundProxies isEmpty not]]		whileTrue: [(Delay forMilliseconds: self pollingDelayTime * 2) wait].	self safeToExit: true] forkAt: Processor userBackgroundPriority! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 7/14/2002 15:56'!safeToExit	"This is a guard variable to prevent the user from running a command line containing both	a snapshot command and an exit command. This prevents the user from entering a command	such as 'snapshot; exit' which would cause the image to immediately exit when next restarted."	^ safeToExit ifNil: [safeToExit := true]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 7/14/2002 15:56'!safeToExit: trueOrFalse	"This is a guard variable to prevent the user from running a command line containing both	a snapshot command and an exit command. This prevents the user from entering a command	such as 'snapshot; exit' which would cause the image to immediately exit when next restarted."	safeToExit := trueOrFalse! !!CommandShell methodsFor: 'command history' stamp: 'dtl 4/7/2001 13:05'!saveInHistoryList: aCommandString	((aCommandString size == 0) or: [self isExcludedFromHistory: aCommandString])		ifFalse:			[self commandHistory add: self historyIndex printString; add: aCommandString.			historyIndex := historyIndex + 1]! !!CommandShell methodsFor: 'command support' stamp: 'ThierryGoubier 9/20/2013 15:19'!scheduleToEvaluate: aBlock	"Evaluate aBlock, typically to create a new scheduled window. Make it work in	both Morphic and MVC. In Morphic, just evaluate aBlock, but in MVC, put it in	a queue for evaluation within a control loop. This method may be sent from	a process running independent of MVC controller scheduling.		Newer Squeak images implement #addDeferredUIMessage in the current	project, eliminating the need for an #isMorphic test. This mechanism is not	available for older images or for Pharo."	CommandShell isMorphic		ifTrue: [WorldState addDeferredUIMessage: aBlock]		ifFalse: [(Smalltalk at: #ScheduledControllers) activeController addDeferredUIMessage: aBlock]! !!CommandShell methodsFor: 'command scripting' stamp: 'dtl 12/15/2002 18:50'!script: aScriptString	"A script is a String containing a list of commands separated by Character cr.	Evaluate each command string in the array until a failure is encountered.	Answer the last collection of pipelines to have been evaluated."	"CommandShell new open; 		script: 'who				help				ls -l NOSUCHFILE				help'"	^ self script: aScriptString onFailureDo: [:p | p]! !!CommandShell methodsFor: 'command scripting' stamp: 'dtl 1/21/2007 20:19'!script: aScriptString onFailureDo: aBlockWithZeroOrOneParameter	"A script is a String containing a list of commands separated by Character cr.	Evaluate each command in aScriptString until a failure is encountered.	On failure, answer the result of evaluating aBlockWithOneParameter with	the collection of evaluated pipelines as its parameter. Otherwise, answer the	last collection of pipelines to have been evaluated."	"CommandShell new open; 		script: 'who				help				ls -l NOSUCHFILE				help'		onFailureDo: [:p | 'the pipeline collection that failed was ', p printString]"	"CommandShell new open; 		script: 'who				help				ls				help'		onFailureDo: [:p | 'the pipeline collection that failed was ', p printString]"	"CommandShell new open; 		script: 'who				help				ls -l NOSUCHFILE				help'		onFailureDo: ['the pipeline collection failed']"	| commandStream pipelines |	commandStream := ReadStream on:						(aScriptString							copyReplaceAll: Character lf asString							with: Character cr asString).	pipelines := nil.	[commandStream atEnd]		whileFalse:			[pipelines := self				command: commandStream nextLine				onFailureDo:					[:p | (aBlockWithZeroOrOneParameter numArgs == 0)						ifTrue: [^ aBlockWithZeroOrOneParameter value]						ifFalse: [^ aBlockWithZeroOrOneParameter value: p]]].	^ pipelines! !!CommandShell methodsFor: 'command scripting' stamp: 'dtl 12/15/2002 18:47'!scriptDoAll: aScriptString	"A script is a String containing a list of commands separated by Character cr.	Evaluate each command in aScriptString. Ignore failures and force evaluation of	all commands in the script. Answer the last pipeline collection to have been	evaluated."	"CommandShell new open; 		scriptDoAll: 'who				help				ls -l NOSUCHFILE				help'"	| commandStream lastPipelineCollection |	commandStream := ReadStream on:						(aScriptString							copyReplaceAll: Character lf asString							with: Character cr asString).	[commandStream atEnd]		whileFalse:			[lastPipelineCollection := self command: commandStream nextLine].	^ lastPipelineCollection! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 1/25/2013 19:07'!setHomeDirectory	self environment.	^ environment at: #HOME put: CommandShell defaultPathString! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 12/17/2001 11:34'!shellSyntax	"A pluggable instance of a command processing syntax"	^ shellSyntax ifNil: [shellSyntax := ShellSyntax new]! !!CommandShell methodsFor: 'accessing' stamp: 'dtl 9/8/2001 11:10'!shellSyntax: aSyntax	"A pluggable instance of a command processing syntax"	shellSyntax := aSyntax! !!CommandShell methodsFor: 'command support' stamp: 'dtl 1/20/2007 14:09'!splitPipelineCommands: aCommand	"Answer a list of the individual commands in a command pipeline string,	delimited by the pipe character."	^ self shellSyntax splitPipelineCommands: aCommand! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/31/2002 11:53'!startUpInNewSession	"Do this if the image has been restarted, in which case all external process	references are invalid."	self clearSemaphore.	self terminateCommandLineProcesses.	foregroundProxies := backgroundProxies := backgroundPipelines := nil.	self keyboardConnector: nil! !!CommandShell methodsFor: 'initialize-release' stamp: 'dtl 12/15/2002 17:33'!terminateCommandLineProcesses	(self commandLineProcesses reject: [:e | e == Processor activeProcess])		do: [:p | p terminate].	commandLineProcesses := nil! !!CommandShell methodsFor: 'command line parsing' stamp: 'dtl 4/20/2003 15:35'!tryEvaluatingAsSmalltalk: aCommandString	"Attempt to treat aCommandString as a Smalltalk expression running in an	evaluation process. Evaluate the proxy and set exit status to reflect failure	on either the expression compilation or the runtime evaluation. Answer the	process proxy."	"CommandShell new tryEvaluatingAsSmalltalk: 'this expression should fail in the compiler'"	"CommandShell new tryEvaluatingAsSmalltalk: '#this expressionShouldFailInRuntimeEvaluation'"	"CommandShell new tryEvaluatingAsSmalltalk: '#thisIsAValidSymbolExpression'"	"CommandShell new tryEvaluatingAsSmalltalk: 'Smalltalk'"	"CommandShell new tryEvaluatingAsSmalltalk: '#oneWordCommentShouldFail'"	| process |	process := self evaluationProxyFor: aCommandString input: nil output: nil error: nil.	process value.	process closeErrorPipeline. "Last process in pipeline, so it can be closed."	^ process! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 12/15/2002 16:34'!unRegisterBackgroundPipeline: aPipeline at: index	(self backgroundPipelines at: index) == aPipeline		ifTrue: [self backgroundPipelines at: index put: nil]		ifFalse: [self error: 'inconsistent registry']! !!CommandShell methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:25'!waitForCommand: aCommandString	"Evaluate aCommandString in a separate Process, and signal completionSemaphore	when complete. Answer a collection of evaluated pipelines, or nil if nothing was done."	| sema pipelines lastPipeline |	self changed: aCommandString.	pipelines := self evaluateOrMakePipelinesFrom: aCommandString.	pipelines isEmpty ifFalse:		[lastPipeline := pipelines last.		lastPipeline isComplete ifFalse:			[sema := Semaphore new.			lastPipeline when: #complete				send: #signal				to: sema.			[self evaluatePipelines: pipelines] forkAt: Processor userBackgroundPriority.			lastPipeline isComplete ifFalse: [sema wait].			self waitUntilPipesAreEmpty: lastPipeline]].	^ pipelines! !!CommandShell methodsFor: 'event handling' stamp: 'dtl 10/3/2006 07:21'!waitUntilPipesAreEmpty: aPipeline	"Some other Smalltalk process may be updating the pipes, or we may be	waiting for data in an external OS pipe to be read into the image. Wait	for these to reach completion."	[aPipeline pipesAreEmpty] whileFalse: [(Delay forMilliseconds: 100) wait]! !!CommandShell methodsFor: 'working directory' stamp: 'dtl 1/25/2013 19:07'!workingDirectory	^ self shellSyntax workingDirectory		ifNil:			[shellSyntax workingDirectory: CommandShell defaultPathString; workingDirectory]! !!CommandShell methodsFor: 'working directory' stamp: 'dtl 12/16/2001 20:15'!workingDirectory: aPathString	self shellSyntax workingDirectory: aPathString! !!ShellSyntax commentStamp: 'dtl 9/7/2009 12:36' prior: 34788734!My instances implement parsing of strings in a manner similar to a simple Unix command shell. I provide path name expansion in the context of an external file system, and support the syntax required for IO redirection. All file name globbing and PATH searching are implemented in Smalltalk rather than in C library functions or an external command shell.Most of my syntax is applicable for any operating system. Where needed, platform specific methods are in my "platform dependent" category. Currently, Unix and Windows are supported, and other platforms have not been tested. The primary difference between Unix and Windows support is that device names (such as 'C:') are used in Windows path strings. Separate current working directory strings are maintained for all Windows device names. For Unix, a single current working directory path is used. On Windows, this permits the CommandShell 'cd' command to support changing directories to another device without losing track of the current working directory for the previous device.Command pipeline syntax is not supported here. See CommandShell for the implementation of command pipelines.!!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/25/2013 19:12'!appendPath: aPathString toPath: startingPathString 	"ShellSyntax new appendPath: 'hosts' toPath: '/etc'"	"ShellSyntax new appendPath: 'etc' toPath: '/'"	"ShellSyntax new appendPath: 'hosts' toPath: '/etc'"	"ShellSyntax new appendPath: 'WINDOWS' toPath: 'C:\'"	"ShellSyntax new appendPath: 'someFileName' toPath: 'C:\WINDOWS'"	| newPath |	^ (aPathString findTokens: CommandShell pathSeparator)		inject: startingPathString		into: [:dirPath :nextPart | 			nextPart = '..'				ifTrue: [newPath := self upOneDirectoryLevel: dirPath]				ifFalse: [nextPart = '.'						ifTrue: [newPath := dirPath]						ifFalse: [newPath := (self isAtFileSystemRoot: dirPath)										ifTrue: [dirPath , nextPart]										ifFalse: [dirPath , CommandShell pathSeparator , nextPart]]].			newPath]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 5/11/2002 20:15'!argsFromCommand: aString	"Answer a collection of strings from a whitespace delimited string. Single quote characters	protect substrings from expansion to tokens. Single quote characters may be escaped by	the backslash character to prevent this interpretation."	^ (self stringTokensFrom: aString) first! !!ShellSyntax methodsFor: 'private' stamp: 'dtl 8/7/2002 13:09'!canAccessOSProcess	"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"	"ShellSyntax new canAccessOSProcess"	| osp |	^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 3/10/2001 18:07'!character: aCharacter matches: aToken	"Test if aCharacter is included in the characters of aToken, or if aToken is a #matchAny"	(aToken == #matchAny) ifTrue: [^ true].	^ aToken includes: aCharacter! !!ShellSyntax methodsFor: 'defaults' stamp: 'dtl 9/8/2001 10:15'!commentChar	^ $#! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 1/25/2013 19:23'!containsExpansionTokens: aString	"Answer true if aString contains wildcard expansion characters, or if it contains	anything that might be construed as a regular expression for globbing, or if it	contains path separator characters. If false, the sender may safely skip normal	glob expansion on aString."	^ aString includesAnyOf: {$? . $* . $[ . CommandShell pathNameDelimiter}! !!ShellSyntax methodsFor: 'accessing' stamp: 'dtl 12/16/2001 20:04'!cwdDictionary	"Current working directory paths indexed by device or file system name"	^ cwdDictionary ifNil: [cwdDictionary := Dictionary new]! !!ShellSyntax methodsFor: 'accessing' stamp: 'dtl 1/25/2013 19:08'!cwdIndex	"Key to current cwd path name in cwdDictionary"	^ cwdIndex ifNil: [cwdIndex := self cwdIndexFor: CommandShell defaultPathString]! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 12/16/2001 20:06'!cwdIndex: aSymbol	"Key to current cwd path name in cwdDictionary"	cwdIndex := aSymbol! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 12/17/2001 09:56'!cwdIndexFor: aPathStringWithPrefix	"Answer key to use for aPathStringWithPrefix"	| prefix |	prefix := (self splitLocationPrefixFromPath: aPathStringWithPrefix) first.	^ prefix isEmpty		ifTrue: [#default]		ifFalse: [prefix]! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 1/3/2002 19:15'!defaultPathFor: aPathStringWithPrefix	"Answer a reasonable path string to use as a default"	^ self pathRoot: aPathStringWithPrefix! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/29/2013 20:29'!doItStringFrom: aCommandString	"Answer a string which can be evaluated as Smalltalk doIt, or nil."	| s |	s := CommandShell withBlanksTrimmed: aCommandString.	s last == $!!		ifTrue: [^ aCommandString copyUpToLast: $!!]		ifFalse: [^ nil]! !!ShellSyntax methodsFor: 'defaults' stamp: 'dtl 4/28/2002 16:09'!escapeChar	"The character to use to escape the normal interpretation of the following character	in a string."	^ $\! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/25/2013 19:12'!expandArgument: aString inDirectoryPath: aDefaultFileDirectoryPath	"Perform globbing expansion of a command argument. If argument is not a	pathname, use aDefaultFileDirectory as the context for globbing. Answer a	(possibly empty) collection of all matching paths relative to the default	directory path."	"ShellSyntax new expandArgument: 'ho?ts' inDirectoryPath: '/etc'"	"ShellSyntax new expandArgument: '/b?n/s?' inDirectoryPath: '/etc'"	"ShellSyntax new expandArgument: 'fs*' inDirectoryPath: '/etc'"	"ShellSyntax new expandArgument: 'NOSUCHFILE' inDirectoryPath: '/etc'"	"ShellSyntax new expandArgument: '/us*/b?n/v?' inDirectoryPath: '/etc'"	"ShellSyntax new expandArgument: 'b?n/v?' inDirectoryPath: '/usr'"	"ShellSyntax new expandArgument: nil inDirectoryPath: '/etc'"	| dirPath pathNames newArgs |	aString ifNil: [^ Array new: 0].	dirPath := (aDefaultFileDirectoryPath				ifNil: [self workingDirectory])					ifNil: [CommandShell defaultPathString].	pathNames := (self containsExpansionTokens: aString)				ifTrue: [self expandedPathsFrom: aString beginningAt: dirPath]				ifFalse: [OrderedCollection new].	newArgs := pathNames collect:				[:p | (aDefaultFileDirectoryPath notNil and: [p beginsWith: aDefaultFileDirectoryPath, CommandShell pathSeparator])					ifTrue: [(ReadStream on: p) next: aDefaultFileDirectoryPath size + CommandShell pathSeparator size; upToEnd]					ifFalse: [p]].	newArgs isEmpty ifTrue: [newArgs add: aString].	^ newArgs! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/25/2013 19:09'!expandArgumentsFrom: argArray inDirectoryPath: aDefaultFileDirectoryPath	"Perform globbing expansion of command arguments. For each argument which is not a	pathname, use aDefaultFileDirectory as the context for globbing."	"ShellSyntax new		expandArgumentsFrom: #('-help' '/b?n/s?' 'ho?ts' 'fs*' 'NOSUCHFILE')		inDirectoryPath: '/etc'"	"ShellSyntax new		expandArgumentsFrom: #('this' 'is' 'a' 'test' 'Sq*log' '/us*/b?n/v?')		inDirectoryPath: CommandShell defaultPathString"	"ShellSyntax new		expandArgumentsFrom: #('this' 'is' 'a' 'test' 'Sq*log' '/us*/b?n/v?')		inDirectoryPath: nil"	| newArgs |	newArgs := OrderedCollection new.	argArray do:		[:arg |		(self isFlagParameter: arg)			ifTrue:				[newArgs add: arg]			ifFalse:				[newArgs addAll: (self					expandArgument: arg					inDirectoryPath: aDefaultFileDirectoryPath)]].	^ newArgs! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/26/2013 15:40'!expandPathParts: pathParts beginningAt: root	"Walk directory tree and answer a collection of matching path strings."	| firstPart remainder dirPaths names dirNames basePath |	(pathParts size == 0)		ifTrue:			["Should never get here, but just in case"			^ Array with: root].	firstPart := pathParts first.	remainder := pathParts allButFirst.	(firstPart = '.')		ifTrue: "Stay at the current directory level"			[dirPaths := Array with: root]		ifFalse:			[(firstPart = '..') "Move up a directory level if possible"				ifTrue:					[dirPaths := Array with: (self upOneDirectoryLevel: root)]				ifFalse: "Normal case, a directory name"					[remainder isEmpty						ifTrue:							["This condition terminates recursion"							names := self glob: firstPart inDirectory: root.							^ (root = CommandShell pathSeparator)								ifTrue: [^ names collect: [:n | root, n]]								ifFalse: [^ names collect: [:n | root, CommandShell pathSeparator, n]]]						ifFalse:							["Continue recursion until no more elements"							CommandShell directoryNamesInPath: root.							dirNames := self glob: firstPart											names: (CommandShell directoryNamesInPath: root).							(('*', CommandShell pathSeparator) match: root)								ifTrue: [basePath := root]								ifFalse: [basePath := root, CommandShell pathSeparator].							dirPaths := dirNames collect: [:d | basePath, d]]]].		^ dirPaths			inject: OrderedCollection new			into: [:result :dir |				result addAll: (self expandPathParts: remainder beginningAt: dir).				result]! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 12/28/2002 09:48'!expandedPathsFrom: aPathString beginningAt: firstPartOfPath	"Answer a collection of all paths which match aPathString. If aPathString is a relative path,	expand the path relative to firstPartOfPath."	 "ShellSyntax new expandedPathsFrom: '/e*c/h*s' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: 'e*c/h*s' beginningAt: '/'"	 "ShellSyntax new expandedPathsFrom: '/usr/bin/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: 'bin/vi' beginningAt: '/usr'"	 "ShellSyntax new expandedPathsFrom: '/usr/*/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: '/usr/bin/../bin/./../bin/../../usr/bin/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: '/bin/../bin/./../bin/../../usr/bin/vi' beginningAt: '/usr'"	 "ShellSyntax new expandedPathsFrom: '/usr/bin/../bin/./../bin/../../../../../usr/bin/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: '../../../../../../usr/bin/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: '/' beginningAt: '/'"	 "ShellSyntax new expandedPathsFrom: '*.image' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: 'C:\WINDOWS\*.*' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: '*.*' beginningAt: 'C:\WINDOWS'"	 "ShellSyntax new expandedPathsFrom: 'C:\*.*' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: 'C:\CONFIG.*' beginningAt: nil"	 "ShellSyntax new expandedPathsFrom: 'C:\CONFIG.*' beginningAt: '\'"	^ (self isAbsolutePath: aPathString)		ifTrue: [self expandedPathsFromAbsolutePath: aPathString]		ifFalse: [self expandedPathsFromRelativePath: aPathString beginningAt: firstPartOfPath]! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/25/2013 19:12'!expandedPathsFromAbsolutePath: anAbsolutePathString	"Answer a collection of all paths which match anAbsolutePathString."	 "ShellSyntax new expandedPathsFromAbsolutePath: '/e*c/h*s'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'e*c/h*s'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/usr/bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/usr/*/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/usr/bin/../bin/./../bin/../../usr/bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/bin/../bin/./../bin/../../usr/bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/usr/bin/../bin/./../bin/../../../../../usr/bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '../../../../../../usr/bin/vi'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '/'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '*.image'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'C:\WINDOWS\*.*'"	 "ShellSyntax new expandedPathsFromAbsolutePath: '*.*'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'C:\*.*'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'C:\CONFIG.*'"	 "ShellSyntax new expandedPathsFromAbsolutePath: 'C:\CONFIG.*'"	| result pathParts a prefix dirPathString root |	result := OrderedCollection new.	a := self splitLocationPrefixFromPath: anAbsolutePathString.	prefix := a at: 1.	dirPathString := a at: 2.	pathParts := dirPathString findTokens: CommandShell pathSeparator.	root := prefix, CommandShell pathSeparator.	result addAll: (self expandPathParts: pathParts beginningAt: root).	^ result! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/25/2013 19:12'!expandedPathsFromRelativePath: aPathString beginningAt: firstPartOfPath	"Answer a collection of all paths which match aPathString. Expand the path relative to firstPartOfPath."	 "ShellSyntax new expandedPathsFromRelativePath: 'e*c/h*s' beginningAt: '/'"	 "ShellSyntax new expandedPathsFromRelativePath: 'usr/b?n/vi' beginningAt: '/'"	 "ShellSyntax new expandedPathsFromRelativePath: 'bin/vi' beginningAt: '/usr'"	 "ShellSyntax new expandedPathsFromRelativePath: 'usr/*/vi' beginningAt: nil"	 "ShellSyntax new expandedPathsFromRelativePath: 'usr/bin/../bin/./../bin/../../usr/bin/vi' beginningAt: '/'"	 "ShellSyntax new expandedPathsFromRelativePath: 'bin/../bin/./../bin/../../usr/bin/vi' beginningAt: '/usr'"	 "ShellSyntax new expandedPathsFromRelativePath: '../../../../../../usr/bin/vi' beginningAt: '/'"	 "ShellSyntax new expandedPathsFromRelativePath: '*.image' beginningAt: nil"	 "ShellSyntax new expandedPathsFromRelativePath: '*.*' beginningAt: 'C:\WINDOWS'"	| result pathParts root |	result := OrderedCollection new.	pathParts := aPathString findTokens: CommandShell pathSeparator.	root := firstPartOfPath isNil				ifTrue: [CommandShell defaultPathString]				ifFalse: [firstPartOfPath].	result addAll: (self expandPathParts: pathParts beginningAt: root).	^ result! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 4/19/2015 09:34'!findExecutablePathFor: aString inDirectoryPath: pathString	"Look for the executable, following Unix conventions for searching the PATH.	If no likely candidate is found, answer nil."	"ShellSyntax new findExecutablePathFor: 'bash' inDirectoryPath: nil"	"ShellSyntax new findExecutablePathFor: 'ReadMe.txt' inDirectoryPath: nil"	"ShellSyntax new findExecutablePathFor: 'SqueakDebug.log' inDirectoryPath: nil"	"ShellSyntax new findExecutablePathFor: 'noSuchFileName' inDirectoryPath: nil"	"ShellSyntax new findExecutablePathFor: 'a' inDirectoryPath: nil"	"ShellSyntax new findExecutablePathFor: 'sqcat' inDirectoryPath: '/home/lewis/bin'"	| delimiter path localNames fullName fileExists |	self canAccessOSProcess ifFalse: [^ nil].	delimiter := CommandShell pathNameDelimiter.	path := (pathString				ifNil: [self workingDirectory])					ifNil: [CommandShell defaultPathString].	"Unix compatibility note: If aString contains wildcard characters,	it is expanded in the context of the current working directory. Expansion	does not take place in the context of the PATH directories."	(aString includes: delimiter)		ifTrue:			["A fully or partially qualified path, do not search PATH"			^ (self expandedPathsFrom: aString beginningAt: pathString)				detect: [:fileName |					(CommandShell fileExists: fileName inPath: path) and: [self isExecutable: fileName]]				ifNone: [nil]]		ifFalse:			["Look for the file in the PATH locations"			localNames := self glob: aString inDirectory: path.			(localNames size == 0)				ifTrue:					["Name was not expanded, so use the unmodified value of aString"					localNames := Array with: aString].			(self pathEntriesInDirectoryPath: path)				do: [:pathName |					localNames						do: [:fileName |							fileExists := [ CommandShell useFileSystem									ifTrue: [ CommandShell fileExists: fileName inDirectory: (pathName perform: #asFileReference) ]									ifFalse: [ CommandShell fileExists: fileName inDirectory: ((Smalltalk at: #FileDirectory) on: pathName) ]								] on: (Smalltalk at: #InvalidDirectoryError ifAbsent: [ Error ]) "Pharo does not have InvalidDirectoryError"									do: [:e | false].							fileExists ifTrue:								[fullName := pathName, CommandShell pathSeparator, fileName.								(self isExecutable: fullName)									ifTrue: [^ fullName]]]].			^ nil]! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/29/2013 20:27'!firstExpandedArgument: aString inDirectoryPath: aPath	"Expand a single argument and answer a fully qualified path to the first matching	name. If no match, answer the literal path and file name (which does not exist).	If aString is nil, answer an empty string. This method may be used to expand a single	argument, such as the target for a command output redirection, where the target is	expected to resolve to a single file name."	"ShellSyntax new firstExpandedArgument: 'b?*h' inDirectoryPath: '/usr/bin'"	"ShellSyntax new firstExpandedArgument: 'b?*h' inDirectoryPath: '/no/such/directory'"	"ShellSyntax new firstExpandedArgument: 'no*such*file???' inDirectoryPath: '/usr/bin'"	"ShellSyntax new firstExpandedArgument: '/usr/bin/vi' inDirectoryPath: '/usr/bin'"	"ShellSyntax new firstExpandedArgument: '../bin/vi' inDirectoryPath: '/usr/bin'"	"ShellSyntax new firstExpandedArgument: '../b?n' inDirectoryPath: '/usr/bin'"	"ShellSyntax new firstExpandedArgument: nil inDirectoryPath: '/usr/bin'"	| expanded path trimmedString |	aString ifNil: [^ ''].	trimmedString := CommandShell withBlanksTrimmed: aString.	expanded := self expandArgument: trimmedString inDirectoryPath: aPath.	path := expanded isEmpty			ifTrue: [trimmedString]			ifFalse: [expanded first].	^ self newPathFor: path fromDefault: aPath! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 12/17/2001 09:52'!getCwdForPath: aPathString	| prefix |	prefix := (self splitLocationPrefixFromPath: aPathString) first.	^ prefix isEmpty		ifTrue: [self workingDirectory]		ifFalse: [self cwdDictionary at: prefix ifAbsentPut: [self defaultPathFor: aPathString]]! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 10/13/2008 20:02'!glob: aString	"Apply Unix shell globbing rules to aString, and answer an array of matching	file names."	"ShellSyntax new glob: 'ReadMe.txt'"	"ShellSyntax new glob: 'rEADmE.TXT'"	"ShellSyntax new glob: 'R*dM?.txt'"	^ self glob: aString inDirectory: self workingDirectory! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 1/26/2013 14:03'!glob: aString inDirectory: directoryPath	"Apply Unix shell globbing rules to aString, and answer an array of matching	file names."	"ShellSyntax new glob: 'ReadMe.txt' inDirectory: FileDirectory default pathName"	"ShellSyntax new glob: 'SqueakDebug.log' inDirectory: FileDirectory default pathName"	"ShellSyntax new glob: '?queak*.[0-9].log' inDirectory: FileDirectory default pathName"	"ShellSyntax new glob: '*image*' inDirectory: FileDirectory default pathName"	"ShellSyntax new glob: 'noSuchFileName' inDirectory: FileDirectory default pathName"	"ShellSyntax new glob: 'b?n' inDirectory: '/usr'"	[^ self glob: aString names: (CommandShell directoryEntryNames: directoryPath)]		on: Error		do: [:ex | ^ #()]! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 3/11/2001 17:37'!glob: aString names: fileNameArray	"Apply Unix shell globbing rules to aString with respect to the elements of fileNameArray,	and answer an array of matching file names. The fileNameArray is expected to have been	provided by a FileDirectory query."	| tokens |	tokens := self globTokensFrom: aString.	^ fileNameArray		select: [:n |			self tokenStream: (ReadStream on: tokens)				matches: (ReadStream on: n)]! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 2/24/2013 10:25'!globRangeFrom: aString tokenStream: aTokenStream	"Answer a string containing the characters specified by a range expression	such as [a-z]. Sorry, this is just a simple implementation which assumes ASCII."	| r w c t |	(aString includes: $-) ifFalse: [^ aString]. "Simple case"	r := ReadStream on: aString.	w := WriteStream on: String new.	(r peek == $!!) ifTrue:		[r next.		aTokenStream nextPut: #not].	[r atEnd] whileFalse: [		c := r next.		(r peek == $-)			ifTrue: [r next.					t := r next.					(c asciiValue to: t asciiValue) do:						[:e | w nextPut: (Character value: e)]]			ifFalse: [w nextPut: c]].	^ w contents! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 12/17/2001 11:41'!globTokensFrom: aString	"Answer a collection of tokens to be used for glob matching."	"ShellSyntax new globTokensFrom: 'abc?def\ghi\?jkl*mno\*pqr[hello]there[Xa-eY]Z[!!A-Z]end'"	| lastToken r w t |	lastToken := nil.	r := ReadStream on: aString.	w := WriteStream on: #().	[r atEnd] whileFalse:		[t := self nextGlobToken: r lastToken: lastToken tokenStream: w.		(t ~~ #escape) ifTrue: [w nextPut: t].		lastToken := t].	^ w contents! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:12'!isAbsolutePath: aPathString	"Answer true if aPathString is specified relative to the root of the file system."	"ShellSyntax new isAbsolutePath: 'not/absolute/path'"	"ShellSyntax new isAbsolutePath: '/absolute/path'"	"ShellSyntax new isAbsolutePath: '/'"	"ShellSyntax new isAbsolutePath: 'C:\'"	"ShellSyntax new isAbsolutePath: '\'"	"ShellSyntax new isAbsolutePath: 'C:'"	"ShellSyntax new isAbsolutePath: 'C:WINDOWS'"	"ShellSyntax new isAbsolutePath: 'C:\WINDOWS'"	| prefixAndPath path |	^ ((((CommandShell pathSeparator, '*') match: aPathString)		or:	[prefixAndPath := self splitLocationPrefixFromPath: aPathString.			(CommandShell pathSeparator, '*') match: (path := prefixAndPath last)])				or: [prefixAndPath first isEmpty not and: [path isEmpty]]) "One above the root of a Win32 file system tree"! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:12'!isAtFileSystemRoot: aPathString	"Answer true if aPathString is not a subdirectory."	"ShellSyntax new isAtFileSystemRoot: 'D:\'"	"ShellSyntax new isAtFileSystemRoot: 'D:'"	"ShellSyntax new isAtFileSystemRoot: 'D:\Windows'"	"ShellSyntax new isAtFileSystemRoot: '\'"	^ (CommandShell pathSeparator = (self splitLocationPrefixFromPath: aPathString) last) or: [aPathString isEmpty]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/21/2007 14:07'!isComment: aString	"Answer true if aString is empty or if its first non-space character is commentChar"	^ (aString size == 0)		or:			[aString do: [:e | (e isSeparator not)							ifTrue: [^ e == self commentChar]].			false]! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/28/2013 00:03'!isDirectoryPath: aPathString	| fullPath localName entry |	^ (('*', CommandShell pathSeparator) match: aPathString) or:		[fullPath := CommandShell fullNameFor: aPathString.		localName := CommandShell localNameFor: fullPath.		[entry := CommandShell useFileSystem			ifTrue: [entry := ((CommandShell dirPathFor: fullPath) perform: #asFileReference) entries						detect: [:e | e basename = localName] ifNone: [nil]]			ifFalse: [entry := ((Smalltalk at: #FileDirectory) on: (CommandShell dirPathFor: fullPath)) entries						detect: [:e | e name = localName] ifNone: [nil]]]					on: Error					do: [: ex | ^false].		entry notNil and: [entry isDirectory]]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/29/2013 20:29'!isDoItCommand: aCommandString	"Answer true if aCommandString should be evaluated as Smalltalk doIt."	^ (CommandShell withBlanksTrimmed: aCommandString) last == $!!! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 8/7/2002 13:36'!isExecutable: aPath 	"Answer true if aPath points to an executable file. This could be 	enhanced to support setting UID and GID for a CommandShell session. 	For now, just take the default for the current Squeak process."	^ aPath notNil		and: [(Smalltalk				at: #OSProcess				ifPresent: [:osp | osp accessor isExecutable: aPath])				ifNil: [false]]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/21/2007 14:12'!isFlagParameter: aString	"Answer true if aString begins with $- (the convention for command flags for Unix)"	^ (aString size > 0) and: [(aString at: 1) == $-]! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 9/4/2013 08:35'!isPharo3AndLater	"True if this image is a pharo of major version 3 or greater"	Smalltalk		at: #SystemVersion		ifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])			ifTrue: [^ cls current type = 'Pharo' and: [ cls current major >= 3 ]]].	^false! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 4/20/2003 11:31'!newDirPath: aPath from: initialPath	"Answer a path string for a change directory command. Change from initialPath	(usually the current working directory) to the new path, where aPath may be	either an absolute path name (fully specified from the root) or a relative path	name (relative to initialPath)."	"self new newDirPath: 'b?n' from: '/usr'"	"self new newDirPath: '..' from: '/usr/bin'"	"self new newDirPath: '.././bin' from: '/usr/bin'"	"self new newDirPath: '../../../../..' from: '/usr/bin'"	"self new newDirPath: '../../../../../usr' from: '/usr/bin'"	^ (self expandedPathsFrom: aPath beginningAt: initialPath)		at: 1		ifAbsent: [nil]! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/2/2002 22:09'!newPathFor: aPathString fromDefault: startingPathString	"Answer a new path starting from startingPathString if aPathString is a,	relative path, otherwise just answer aPathString unmodified."	"ShellSyntax new newPathFor: 'hosts' fromDefault: '/etc'"	"ShellSyntax new newPathFor: 'three' fromDefault: 'one/two'"	"ShellSyntax new newPathFor: 'one/two/three' fromDefault: ''"	"ShellSyntax new newPathFor: '/hosts' fromDefault: '/etc'"	"ShellSyntax new newPathFor: 'WINDOWS' fromDefault: 'C:\'"	"ShellSyntax new newPathFor: 'D:\WINDOWS' fromDefault: 'C:\'"	"ShellSyntax new newPathFor: 'D:WINDOWS' fromDefault: 'C:\'"	^ (self isAbsolutePath: aPathString)		ifTrue:			[aPathString]		ifFalse:			[self appendPath: (self splitLocationPrefixFromPath: aPathString) last					toPath: startingPathString]! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 12/15/2001 09:55'!nextGlobToken: aStream lastToken: aToken tokenStream: aTokenStream	"Escape character processing probably belongs elsewhere. Since it can conflict	with Win32 file name conventions, I have commented it out here. The code	is otherwise left alone here in case I change my mind later. -dtl"	| c |	(aToken == #escape)		ifTrue:			[^ aStream next]		ifFalse:			[c := aStream next.			(c == $[)				ifTrue:					["character range"					^ self globRangeFrom: (aStream upTo: $]) tokenStream: aTokenStream]				ifFalse:					[(c == $*) ifTrue: [^ #matchRun].					(c == $?) ifTrue: [^ #matchAny].					"(c == $\) ifTrue: [^ #escape].	Escape processing disabled here"					^ c asString]]! !!ShellSyntax methodsFor: 'defaults' stamp: 'dtl 1/20/2007 14:11'!noWaitToken	"This character at the end of a command string means execute as detached process."	^ '&'! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 4/20/2003 11:50'!nullDirectoryString	"String to display when the current directory is one level above the file system root."	^ '[]'! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:13'!pathAboveRoot	"Answer a path pointing to a location above the file system root. The	pathStringAboveRoot string refers to this location."	 "ShellSyntax new pathAboveRoot"	^ (self platformName = 'Win32')		ifTrue: ['']		ifFalse: [CommandShell pathSeparator].! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:09'!pathEntriesInDirectoryPath: basePath	"Answer a possibly empty collection of path entries from a colon-delimited path	string provided by the operating system. Relative path names are interpreted relative	to basePath"	"ShellSyntax new pathEntriesInDirectoryPath: CommandShell defaultPathString"	^ (Smalltalk at: #OSProcess ifPresent:		[:osp |		(osp thisOSProcess path findTokens: ':')			collect:				[:e | self newPathFor: e fromDefault: basePath]])		ifNil: [Array new].! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:13'!pathRoot: aPathString	"For aPathString pointing to a file in a file system, answer the root of the	file system. This method works fine for Unix and Windows, but may require	conditional code for other platforms."	| prefix |	prefix := (self splitLocationPrefixFromPath: aPathString) first.	^ prefix, CommandShell pathSeparator! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 1/4/2002 21:19'!pathStringAboveRoot	"Magic string indicating location above the file system root. For Unix, this just	points to the file system root. For Windows, it points to one level above the C: drive."	^ '[]'! !!ShellSyntax methodsFor: 'defaults' stamp: 'dtl 9/8/2001 10:16'!pipeCharToken	"The command pipeline character"	^ '|'! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 9/4/2013 08:34'!platformName 	"After Squeak version 3.6, #platformName was moved to SmalltalkImage Some	versions of Pharo move this to OSPlatform and issue deprecation warnings	about the other usages."	"self new platformName"	self isPharo3AndLater		ifTrue: [ ^ (Smalltalk perform: #os) name ].	^ (((Smalltalk hasClassNamed: #OSPlatform)			and: [(Smalltalk at: #OSPlatform)					respondsTo: #platformName])		ifTrue: [Smalltalk at: #OSPlatform]		ifFalse: [((Smalltalk classNamed: 'SmalltalkImage')				ifNil: [^ Smalltalk osVersion]) current]) platformName! !!ShellSyntax methodsFor: 'path name expansion' stamp: 'dtl 10/13/2008 06:26'!programNameAndArgumentsFrom: aString inDirectoryPath: pathString findExecutable: expandExePath	"Answer an array with the name of the program to run, and with the expanded	arguments list. If expandExePath is true, search the file system for an executable	program to run, otherwise use the literal command name."	"ShellSyntax new		programNameAndArgumentsFrom: 'sleep 6'		inDirectoryPath: '/etc'		findExecutable: true"	"ShellSyntax new		programNameAndArgumentsFrom: 'sleep 6'		inDirectoryPath: '/etc'		findExecutable: false"	"ShellSyntax new		programNameAndArgumentsFrom: 'ls -l h?s*'		inDirectoryPath: '/etc'		findExecutable: true"	| tokens tok args exe |	tokens := self argsFromCommand: aString.	tokens size == 0		ifTrue: [tok := '']		ifFalse: [tok := tokens at: 1].	args := self		expandArgumentsFrom: (tokens copyFrom: 2 to: tokens size)		inDirectoryPath: pathString.	exe := expandExePath		ifTrue: [self findExecutablePathFor: tok inDirectoryPath: pathString]		ifFalse: [tok].	^ exe ifNotNil: [Array with: exe with: args]! !!ShellSyntax methodsFor: 'defaults' stamp: 'dtl 4/27/2002 18:57'!quoteChar	"In a Unix shell, this character is used to delimit chunks of text which should not	be expanded with wildcards or shell variables. In a Smalltalk compiler, this character	delimits a String. ShellSyntax interprets it as a delimiter for a  literal string which	should not be expanded or interpreted in any way."	^ $'! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 12/22/2007 10:17'!redirectIOFor: commandString inDirectoryPath: dirPathString	"Handle IO redirection. Answer a four element array with the command string	(with IO tokens removed); and stdin, stdout and stderr if specified for	redirection."	"ShellSyntax new		redirectIOFor: 'ls /tmp /NOSUCHFILE > /tmp/sqTempOut.tmp 2> /tmp/sqTempErr.tmp'		inDirectoryPath: nil"	"ShellSyntax new		redirectIOFor: 'cat < /etc/hosts > /tmp/sqHosts.tmp'		inDirectoryPath: nil"	| cmd tokenStream tok target input output error |	cmd := nil.	input := output := error := nil.	"Default to nil unless overridden by commandString."	tokenStream := ReadStream on: (self tokenizeForRedirect: commandString).	[tokenStream atEnd]		whileFalse:			[tok := tokenStream next.			tok == #inputRedirect				ifTrue: ["Do input redirection"					target := self firstExpandedArgument: tokenStream next								inDirectoryPath: dirPathString.					"Use StandardFileStream to prevent multi-byte interpretation."					input := StandardFileStream readOnlyFileNamed: target.					input						ifNil: [self inform: 'Cannot open ' , target , ', using default stdin']]				ifFalse: [tok == #outputRedirect						ifTrue: ["Do output redirection"							target := self firstExpandedArgument: tokenStream next										inDirectoryPath: dirPathString.							output := self truncatedOutputFile: target.							output ifNil:									[self inform: 'Cannot open ' , target , ', using default stdout']]						ifFalse: [tok == #outputAppendRedirect								ifTrue: ["Do output redirection, appended to existing output file if any."									target := self firstExpandedArgument: tokenStream next												inDirectoryPath: dirPathString.									output := FileStream fileNamed: target.									output isNil										ifTrue: [self inform: 'Cannot open ' , target , ', using default stdout']										ifFalse: [output setToEnd]]								ifFalse: [tok == #errorRedirect										ifTrue: ["Do error redirection"											target := self firstExpandedArgument: tokenStream next														inDirectoryPath: dirPathString.											error := self truncatedOutputFile: target.											error ifNil:													[self inform: 'Cannot open ' , target , ', using default stdout']]										ifFalse: [tok == #errorAppendRedirect												ifTrue: ["Do error redirection, appended to existing error file if any. "													target := self firstExpandedArgument: tokenStream next																inDirectoryPath: dirPathString.													error := FileStream fileNamed: target.													error isNil														ifTrue: [self inform: 'Cannot open ' , target , ', using default stdout']														ifFalse: [error setToEnd]]												ifFalse: [cmd isNil														ifTrue: [cmd := tok]														ifFalse: [self inform: 'Ack!! Pfft!! IO redirection parsing error.']]]]]]].	^ Array		with: cmd		with: input		with: output		with: error! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 12/16/2001 21:26'!setCwdIndexFrom: aPathString	"Set the current working directory index to a string (Win32 device name) or to #default."	| prefix |	prefix := (self splitLocationPrefixFromPath: aPathString) first.	prefix isEmpty		ifTrue: [self cwdIndex: #default]		ifFalse: [self cwdIndex: prefix]! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 10/30/2007 18:59'!splitLocationPrefixFromPath: aPathString	"Split any leading prefix from a path string, such as the C: device name	for Win32. Answer an Array with prefix and path."	 "ShellSyntax new splitLocationPrefixFromPath: 'C:\u'"	 "ShellSyntax new splitLocationPrefixFromPath: 'C:\'"	 "ShellSyntax new splitLocationPrefixFromPath: 'C:'"	 "ShellSyntax new splitLocationPrefixFromPath: 'C:u'"	 "ShellSyntax new splitLocationPrefixFromPath: 'c:u'"	 "ShellSyntax new splitLocationPrefixFromPath: '\u'"	| prefix path |	(self platformName = 'Win32')		ifTrue:			[((aPathString at: 2 ifAbsent: []) == $:)				ifTrue:					[prefix := (String new: 2).					prefix at: 1 put: (aPathString at: 1) asUppercase.					prefix at: 2 put: $:.					path := aPathString copyAfter: $:]				ifFalse:					[prefix := ''.					path := aPathString]]		ifFalse:			[prefix := ''.			path := aPathString].	^ Array with: prefix with: path! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/29/2013 20:27'!splitPipelineCommands: aCommand	"Answer a list of the individual commands in a command pipeline string,	delimited by the pipe character."	^ (aCommand findTokens: self pipeCharToken) collect: [:e | CommandShell withBlanksTrimmed: e]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 1/21/2007 15:11'!stringTokensFrom: aString	"Answer a two element array with a collection of strings from a whitespace	delimited string, and with an optional error message. Single quote characters	protect substrings from expansion to tokens. Single quote characters may be	escaped by the backslash character to prevent this interpretation."	| result r w errorMessage quoteEnabled t |	result := OrderedCollection new.	r := ReadStream on: aString.	w := WriteStream on: String new.	errorMessage := nil.	(quoteEnabled := r peek == self quoteChar) ifTrue: [r next].	[r atEnd] whileFalse:		[t := r next.		(t == self quoteChar)			ifTrue:				[quoteEnabled := quoteEnabled not]			ifFalse:				[quoteEnabled					ifTrue:						[w nextPut: t]					ifFalse:						[(t == self escapeChar)							ifTrue:								["An escaped character is treated as a literal character."								t := r next.								t isNil									ifTrue: ["FIXME: This would indicate an escaped end of line"]									ifFalse: [w nextPut: t]]							ifFalse:								[t isSeparator									ifTrue:										["Whitespace delimits tokens."										(w isEmpty) ifFalse: [result add: w contents].										w := WriteStream on: String new.										[r peek notNil and: [r peek isSeparator]] whileTrue: [r next].]									ifFalse:										[w nextPut: t]]]]].	quoteEnabled ifTrue: [errorMessage := 'unbalanced quotes'].	(w isEmpty) ifFalse: [result add: w contents].	^ Array with: result with: errorMessage! !!ShellSyntax methodsFor: 'globbing' stamp: 'dtl 1/5/2002 09:52'!tokenStream: aTokenStream matches: aCharacterStream 	"Iterate over both streams. If each character in aCharacterStream 	matches its corresponding token in tokenStream, answer true."	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'a?c')) matches: (ReadStream on: 'abc')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'ab*cde')) matches: (ReadStream on: 'abcde')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'ab*cde')) matches: (ReadStream on: 'abXXXcde')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'ab*cdX')) matches: (ReadStream on: 'abXXXcde')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'abc*')) matches: (ReadStream on: 'abcde')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'abc*')) matches: (ReadStream on: 'abc')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'a?cde*jkl')) matches: (ReadStream on: 'abcdefghijkl')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'abc[A-C]xyz')) matches: (ReadStream on: 'abcBxyz')"	"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: 'abc[!!A-C]xyz')) matches: (ReadStream on: 'abcZxyz')"	| c tok |	[aCharacterStream atEnd]		whileFalse: [aTokenStream atEnd				ifTrue: [^ false].			c := aCharacterStream peek.			tok := aTokenStream next.			tok == #not				ifTrue: ["A negated character range follows"					tok := aTokenStream next.					(self character: c matches: tok)						ifTrue: [^ false].					aCharacterStream next]				ifFalse: ["The normal case"					tok == #matchRun						ifTrue:							["Skip characters until we resync the streams, or answer false"							[self tokenStream: aTokenStream copy matches: aCharacterStream copy]								whileFalse:									[aCharacterStream atEnd ifTrue: [^ false].									aCharacterStream next]]						ifFalse: [(self character: c matches: tok)								ifFalse: [^ false].							aCharacterStream next]]].	^ aTokenStream atEnd		or: [aTokenStream next == #matchRun				and: [aTokenStream atEnd]]! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 2/24/2013 10:25'!tokenizeForRedirect: aString	"Answer a collection of tokens for IO redirection. Answers a collection of	tokens, where each token is either a String, or a Symbol in:	#(#inputRedirect #outputRedirect #outputAppendRedirect #errorRedirect #errorAppendRedirect)"	"ShellSyntax new tokenizeForRedirect: 'one > two < three 2> four five six 2>> seven eight > nine ten >> eleven twelve 2 > thirteen'"	| oc rs ws c redirectToken tok |	oc := OrderedCollection new.	rs := ReadStream on: aString.	ws := WriteStream on: String new.	[rs atEnd]		whileFalse:			[c := rs next.			((c == $2) and: [rs peek == $>])				ifTrue:					[rs next.					(rs peek == $>)						ifTrue:							[rs next.							redirectToken := #errorAppendRedirect]						ifFalse:							[redirectToken := #errorRedirect].					c := ws contents.					(c size > 0)						ifTrue:							[oc add: c.							ws resetContents].					oc add: redirectToken]				ifFalse:					[(c == $>)						ifTrue:							[(rs peek == $>)								ifTrue:									[rs next.									redirectToken := #outputAppendRedirect]								ifFalse:									[redirectToken := #outputRedirect].							c := ws contents.							(c size > 0)								ifTrue:									[oc add: c.									ws resetContents].							oc add: redirectToken]						ifFalse:							[(c == $<)								ifTrue:									[c := ws contents.									(c size > 0)										ifTrue:											[oc add: c.											ws resetContents].									oc add: #inputRedirect]								ifFalse: [ws nextPut: c]]]].	tok := ws contents.	(tok size > 0) ifTrue: [oc add: tok].	^ oc! !!ShellSyntax methodsFor: 'command string parsing' stamp: 'dtl 12/17/2001 11:39'!truncatedOutputFile: fileName	"Attempt to do reasonable things to open a file of size zero. Better would be	to implement a file truncation primitive."	"ShellSyntax new truncatedOutputFile: '/tmp/delete.me'"	"ShellSyntax new truncatedOutputFile: '/dev/null'"	| strm |	[strm := FileStream concreteStream forceNewFileNamed: fileName]		on: Error		do: [:ex | ^ FileStream fileNamed: fileName].	^ strm! !!ShellSyntax methodsFor: 'platform dependent' stamp: 'dtl 1/25/2013 19:23'!upOneDirectoryLevel: aPathName	"Answer a path name for a directory one level up the directory tree"	 "ShellSyntax new upOneDirectoryLevel: 'C:\Windows\temp'"	 "ShellSyntax new upOneDirectoryLevel: 'C:\Windows'"	 "ShellSyntax new upOneDirectoryLevel: 'C:\'"	 "ShellSyntax new upOneDirectoryLevel: ''"	 "ShellSyntax new upOneDirectoryLevel: '/usr/bin'"	 "ShellSyntax new upOneDirectoryLevel: '/usr'"	 "ShellSyntax new upOneDirectoryLevel: '/'"	 "ShellSyntax new upOneDirectoryLevel: 'usr'"	 "ShellSyntax new upOneDirectoryLevel: ''"	| prefixAndPath prefix path newPath |	prefixAndPath := self splitLocationPrefixFromPath: aPathName.	prefix := prefixAndPath at: 1.	path := prefixAndPath at: 2.	(self isAtFileSystemRoot: aPathName)		ifTrue:			[(self isAbsolutePath: aPathName)				ifTrue:					[prefix isEmpty						ifTrue: "Normal case, unix. Do not go up a level."							[^ aPathName]						ifFalse: "A Win32 device name, go up a level above the file systems"							[^ '']]				ifFalse:					["One level above whererever we are. Unfortunately we have					no way to know where we are, so this probably should be treated					as a sytax error."					^ '..']]		ifFalse:			[newPath := (path includes: CommandShell pathNameDelimiter)				ifTrue: [path copyUpToLast: CommandShell pathNameDelimiter]				ifFalse: [''].			^ newPath isEmpty				ifTrue:					[(self isAbsolutePath: aPathName)						ifTrue: [prefix, CommandShell pathSeparator]						ifFalse: [prefix]]				ifFalse:					[prefix, newPath]]! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 8/7/2002 13:32'!workingDirectory	^ self cwdDictionary at: self cwdIndex ifAbsentPut:		[Smalltalk at: #OSProcess ifPresent: [:osp | osp thisOSProcess getCwd]]! !!ShellSyntax methodsFor: 'working directory' stamp: 'dtl 12/16/2001 21:32'!workingDirectory: aPathString	self setCwdIndexFrom: aPathString.	self cwdDictionary at: self cwdIndex put: aPathString! !"CommandShell-Base"!!TtyTextMorphForEditView commentStamp: '<historical>' prior: 0!I add a keyboard hook to a TextMorphForEditView to allow filtering of keystrokes for a simple tty terminal emulator.!!ShellWindowMorph commentStamp: '<historical>' prior: 0!I am a simple teletype shell session morph, providing a view on an instance of CommandShell.!!TtyTextMorphForEditView commentStamp: '<historical>' prior: 34917704!I add a keyboard hook to a TextMorphForEditView to allow filtering of keystrokes for a simple tty terminal emulator.!!TtyTextMorphForEditView methodsFor: 'editing' stamp: 'dtl 11/2/2007 05:18'!keyStroke: evt	(self editView model filterAndForwardEvent: evt)		ifNotNil: [^ super keyStroke: evt]! !!ShellWindowMorph commentStamp: '<historical>' prior: 34917879!I am a simple teletype shell session morph, providing a view on an instance of CommandShell.!!ShellWindowMorph class methodsFor: 'instance creation' stamp: 'dtl 1/21/2007 09:57'!open	"Open a new CommandShell, and answer the instance of ShellWindowMorph which it uses."	"ShellWindowMorph open"	^ CommandShell open dependents at: 2! !!ShellWindowMorph methodsFor: 'menu commands' stamp: 'dtl 9/15/2012 18:59'!accept	self model cr; flush; processCommand: self commandLineInput asString echo: false! !!ShellWindowMorph methodsFor: 'updating' stamp: 'dtl 1/21/2007 13:02'!appendEntry	| str |	"Append the text in the model's writeStream to the editable text. "	textMorph asText size > model characterLimit ifTrue:		["Knock off first half of text"		self selectInvisiblyFrom: 1 to: textMorph asText size // 2.		self replaceSelectionWith: Text new].	self selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size.	str := model contents.	(str size > 0) ifTrue:		[self replaceSelectionWith: (Text			string: str			attribute: (TextFontChange fontNumber: self textStyle defaultFontIndex)).		self selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size.		model reset]! !!ShellWindowMorph methodsFor: 'command input' stamp: 'dtl 3/18/2001 18:17'!commandLineInput	^ (self text copyFrom: self positionAfterPromptString to: self text size) asString.! !!ShellWindowMorph methodsFor: 'command input' stamp: 'dtl 4/7/2001 12:21'!positionAfterPromptString	"Answer the index of the first character after the last prompt string in my text. If	not found, then assume that the contents of the text are all intended to be command	input."	| t loc |	t := self text.	(1 to: (t size - model promptString size))		reverseDo: [:i |			((loc := t findString: model promptString startingAt: i) ~= 0)				ifTrue: [^ loc + model promptString size]].	^ 1! !!ShellWindowMorph methodsFor: 'model access' stamp: 'dtl 1/21/2007 10:33'!setText: aText	scrollBar setValue: 0.0.	textMorph		ifNil: [textMorph := TtyTextMorphForEditView new						contents: aText wrappedTo: self innerBounds width-6.				textMorph setEditView: self.				textMorph setTextStyle: self textStyle.				scroller addMorph: textMorph]		ifNotNil: [textMorph newContents: aText].	self hasUnacceptedEdits: false.	self setScrollDeltas.! !!ShellWindowMorph methodsFor: 'model access' stamp: 'dtl 11/18/2009 22:20'!textStyle	"A fixed width font for the text morph"	^ (TextStyle named: 'DefaultFixedTextStyle')		ifNil: [TextStyle default]! !!ShellWindowMorph methodsFor: 'updating' stamp: 'dtl 6/3/2001 19:02'!update: something	(something == #doCommand)		ifTrue:			[^ self accept].	(something == #exit)		ifTrue:			[^ self owner release; delete].	^ super update: something! !"CommandShell-Morphic"!!ProxyPipeline commentStamp: 'dtl 12/13/2002 19:30' prior: 0!A collection of connected PipeJunctions, representing external OS processes or internal evaluators. This class exists primarily to make the functioning of a collection of command pipelines, some of which may be evaluated as asynchronous "background" processes, easier to understand.Events triggered by my proxies are handled and forwarded in such a way that a client (such as a CommandShell) will receive events from a ProxyPipeline as if it were an individual PipeJunction.The user of a ProxyPipeline is responsible for closing the external resources associated with the proxies by sending either #closePipes or #finalize.!!InternalPipe commentStamp: '<historical>' prior: 0!I am a first-in, first-out queue with streaming behavior. I behave similarly to an OSPipe,but am implemented in the Smalltalk image rather than with external OS pipes. I canbehave either as a blocking pipe or as a nonblocking pipe, similar to an OS pipe withits reader end set in blocking or nonblocking mode.!!PipeJunction commentStamp: '<historical>' prior: 0!I am a connector junction for input, output, and error pipelines. I obtain input from an input pipeline and, after possibly performing some kind of operation on the input objects, I send output to an output pipeline. I may also append objects onto an error pipeline.My subclasses implement the operations on the objects which pass through a pipe junction.In general, input pipes are connected to output pipes in a serial fashion, and error pipelines are shared by one or more instances of my subclasses.!!PipeableEvaluator commentStamp: 'dtl 2/1/2003 16:56' prior: 0!I evaluate Smalltalk expressions, taking input from my pipeToInput, and print the results of the evaluation on my pipeFromOutput. I may append error messages to my errorPipelineStream. I provide a framework for pipelines of expressions, possibly combined in the same pipeline with ExternalOSProcess proxies executing external operating system commands.My evaluationBlock may be supplied directly, or can be compiled from an expression string. If compiled from an expression string, the names 'stdin', 'stdout', 'stderr', and 'args' are used to refer to the input stream, output stream, error stream, and an array of arguments. If any of these names are used in the expression string, then the evaluation block will be compiled in such as way as to connect these names with their corresponding streams or argument array.!!ExpressionEvaluator commentStamp: 'dtl 2/1/2003 16:58' prior: 0!I provide a context in which a Smalltalk expression can be evaluated as an element of a command pipeline.!!ShellBuiltinEvaluator commentStamp: 'dtl 2/1/2003 17:47' prior: 0!I provide the context in which a ShellBuiltin is evaluated as an element of a command pipeline.!!PipeableOSProcess commentStamp: '<historical>' prior: 0!I am a connector junction for input, output, and error pipelines. I collaborate with a process proxy to evaluate an internal or external process, and to move objects through the pipelines as the proxy is evaluated.From Smalltalk, you can write to my pipeToInput, and read from my pipeFromOutput and pipeFromError streams. I implement simple streaming protocol as a convenience for reading and writing these pipe streams. I support command pipelines with the #| message, with the pipeFromOutput of one instance connected to the pipeToInput of the next instance, and a shared errorPipelineStream collecting error output text for the command pipeline.All reading and writing should be done with the streaming protocol, rather than by direct access to the pipe streams. This is because the output pipe streams may be silently replaced by simple ReadStreams following the exit of the child process.Normal exit for the external process may not happen when expected. If the process is writing to the output pipe, it may block on write until enough of its data is read from the pipeFromOutput pipe, after which it will exit normally.!!RemoteTask commentStamp: 'dtl 11/12/2011 23:26' prior: 0!RemoteTask do: [2 + 2]A RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.The block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.On a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.!!ProxyPipeline commentStamp: 'dtl 12/13/2002 19:30' prior: 34921297!A collection of connected PipeJunctions, representing external OS processes or internal evaluators. This class exists primarily to make the functioning of a collection of command pipelines, some of which may be evaluated as asynchronous "background" processes, easier to understand.Events triggered by my proxies are handled and forwarded in such a way that a client (such as a CommandShell) will receive events from a ProxyPipeline as if it were an individual PipeJunction.The user of a ProxyPipeline is responsible for closing the external resources associated with the proxies by sending either #closePipes or #finalize.!!ProxyPipeline class methodsFor: 'command processing' stamp: 'dtl 1/24/2013 08:39'!command: aCommandString	"Evaluate a new instance created from aCommandString. Sender is responsible	for closing the pipes with #closePipes or #finalize."	"ProxyPipeline command: 'ls | cat | wc'"	"ProxyPipeline command: 'ls NOSUCHFILE * | cat | wc'"	"ProxyPipeline command: 'ls | copyToOutput | wc'"	"ProxyPipeline command: ''"	Smalltalk at: #CommandShell		ifPresent: [ :cls | ^ self command: aCommandString shell: cls new ].	self notify: 'CommandShell not found'! !!ProxyPipeline class methodsFor: 'command processing' stamp: 'dtl 4/27/2003 11:32'!command: aCommandString shell: aCommandShell	"Evaluate a new instance created from aCommandString using aCommandShell.	Sender is responsible for closing the pipes #closePipes or #finalize."	"ProxyPipeline command: 'ls | cat | wc' shell: CommandShell new"	"ProxyPipeline command: 'ls NOSUCHFILE * | cat | wc' shell: CommandShell new"	"ProxyPipeline command: 'ls | copyToOutput | wc' shell: CommandShell new "	"ProxyPipeline command: '' shell: CommandShell new"	^ (self fromString: aCommandString shell: aCommandShell) value! !!ProxyPipeline class methodsFor: 'instance creation' stamp: 'dtl 6/8/2006 06:57'!fromString: aCommandString shell: aCommandShell	"Answer a new instance created from aCommandString using aCommandShell."	"ProxyPipeline fromString: 'ls | cat | wc' shell: CommandShell new"	"ProxyPipeline fromString: 'ls NOSUCHFILE * | cat | wc' shell: CommandShell new"	"ProxyPipeline fromString: 'ls | copyToOutput | wc' shell: CommandShell new "	"ProxyPipeline fromString: '' shell: CommandShell new"	^ super new fromString: aCommandString shell: aCommandShell! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 3/29/2003 13:49'!atEnd	^ self last atEnd! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:42'!background	"Answer true if this pipeline should be evaluated in the background."	^ background ifNil: [background := false]! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:42'!background: trueOrFalse	background := trueOrFalse! !!ProxyPipeline methodsFor: 'initialize - release' stamp: 'dtl 12/31/2002 10:57'!close	"Close input pipe to first proxy in the pipeline. The proxies are not	finalized, this simply closes the input stream to allow normal processing	to proceed to completion."	self isEmpty ifFalse: [self first close]! !!ProxyPipeline methodsFor: 'initialize - release' stamp: 'dtl 9/3/2010 17:37'!closePipes	| p |	self do: [:e | e closePipes].	self unregisterEvents.	(p := self pipeFromOutput) ifNotNil: [p close]! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/20/2002 19:20'!commandLine	"Command line string from which this pipeline was constructed"	^ commandLine! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:42'!commandLine: aString	"Command line string from which this pipeline was constructed"	commandLine := aString! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/20/2006 13:28'!completionSemaphore	"Answer the value of completionSemaphore. This semaphore is signaled	when the last proxy completes. Subsequent cleanup is preformed by a	process waiting on the semaphore. Completion notification is often triggered	by the grimReaperProcess, so the separate pipeline cleanup prevents	those activities from being processed in the context of the grimReaperProcess."	^ completionSemaphore ifNil: [completionSemaphore := Semaphore new]! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/20/2006 13:21'!completionWatcher	"A process that waits for notification that the last proxy has completed,	and performs any necessary cleanup. Completion notification is often	triggered by the grimReaperProcess, so the separate pipeline cleanup	prevents those activities from being processed in the context of the	grimReaperProcess."	^ completionWatcher! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:42'!completionWatcher: anObject	"Set the value of completionWatcher"	completionWatcher := anObject! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 4/28/2003 21:02'!errorPipelineStream	"Accumulates the error output of commands in a command pipeline."	self isEmpty		ifTrue: [^ nil]		ifFalse: [^ self last errorPipelineStream]! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:10'!errorUpToEnd	"Answer all available characters from the error stream shared by my proxies."	^ self last errorUpToEnd! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 8/25/2006 12:22'!errorUpToEndOfFile	"Answer all available characters from the error stream. Block and	continue reading until end of file is detected."	^ self last errorUpToEndOfFile! !!ProxyPipeline methodsFor: 'finalization' stamp: 'dtl 4/9/2006 09:43'!finalize	self closePipes.	^ super finalize! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:10'!flush	"Flush output to the standard input stream of my first proxy."	^ self first flush! !!ProxyPipeline methodsFor: 'initialize - release' stamp: 'dtl 11/8/2007 20:42'!fromString: aCommandString shell: aCommandShell 	"Initialize a new instance created from aCommandString using aCommandShell. "	self commandLine: aCommandString.	(aCommandShell splitPipelineCommands: aCommandString)		inject: nil		into: [:prevProxy :command | 			| nextProxy |			nextProxy := aCommandShell				redirectedPipeableProxyFor: command				predecessorProxy: prevProxy.			prevProxy				ifNotNil: [prevProxy prepareOutputFor: nextProxy.					prevProxy canProvideOutputPipe						ifFalse: [nextProxy closeWriter]].			self add: nextProxy].	self isEmpty		ifFalse: [self last prepareOutputFor: self; addDependent: self]! !!ProxyPipeline methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:51'!handleCompletionWhenSignaled: aSemaphore	"Answer a process that will complete processing the the last proxy has	signaled its completion."	| lastProxy proc |	proc := [aSemaphore wait.		self waitForAllToComplete.		(lastProxy := self last)			ifNotNil: [lastProxy closeErrorPipeline.					self triggerEvent: #complete]] newProcess.	^ proc resume! !!ProxyPipeline methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:40'!handleRunstateChange	| lastProxy |	(lastProxy := self last)		ifNotNil: [lastProxy isComplete					ifTrue: [self completionSemaphore signal]]! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 9/12/2003 11:53'!isComplete	"True if all proxies are complete. The proxies may report their completion events	out of sequence, so test all the proxies (not just the last one in the pipeline)."	^ self noneSatisfy: [:proxy | proxy isComplete not]! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 4/19/2003 09:16'!isExternalProcess	"Answer true if the process which I represent is an external OSProcess. For protocol	compatibility with PipeJunction."	^ false! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 11/23/2002 13:37'!needsPrompt	^ self last needsPrompt! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:08'!next	^ self last next! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:08'!next: count	^ self last next: count! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:11'!nextFromError: count	"Answer up to count characters from the error pipeline stream, or an empty string	if no data is available. All characters are routed through the errorPipelineStream,	which is shared by all my proxies."	^ self last next: count! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:09'!nextPut: aCharacter	"Write aCharacter to the standard input stream of my first proxy."	^ self first nextPut: aCharacter! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:09'!nextPutAll: characters	"Write characters to the standard input stream of my first proxy."	^ self first nextPutAll: characters! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 4/14/2006 10:32'!output	^ self last output! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 4/29/2003 05:04'!pipeFromOutput	"The output from the last proxy in the pipeline, if any"	self isEmpty		ifTrue: [^ nil]		ifFalse: [^ self last pipeFromOutput]! !!ProxyPipeline methodsFor: 'accessing' stamp: 'dtl 4/28/2003 20:58'!pipeToInput	"The input to the first proxy in the pipeline, if any"	self isEmpty		ifTrue: [^ nil]		ifFalse: [^ self first pipeToInput]! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 9/12/2003 11:49'!pipesAreEmpty	"True after processing is complete and all available data has been read from	the output pipe and the errorPipelineStream pipe."	^ self isComplete and: [self last pipesAreEmpty]! !!ProxyPipeline methodsFor: 'printing' stamp: 'dtl 11/20/2002 19:32'!printOn: aStream	self background		ifTrue: [aStream nextPutAll: 'a background ']		ifFalse: [aStream nextPutAll: 'a foreground '].	aStream nextPutAll: self class name, ' for "', self commandLine asString, '"'! !!ProxyPipeline methodsFor: 'initialize - release' stamp: 'dtl 1/4/2003 15:35'!release	self do: [:proxy | proxy release].	^ super release! !!ProxyPipeline methodsFor: 'testing' stamp: 'dtl 7/5/2006 09:07'!succeeded	"Answer true if all proxies succeeded, otherwise false"	self detect: [:proxy | proxy succeeded not] ifNone: [^ true].	^ false! !!ProxyPipeline methodsFor: 'initialize - release' stamp: 'dtl 8/20/2006 19:05'!unregisterEvents	self isEmpty ifFalse: [self last removeDependent: self]! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 8/25/2006 12:21'!upToEnd	"Answer all available characters from the output stream."	^ self last upToEnd! !!ProxyPipeline methodsFor: 'streaming' stamp: 'dtl 8/25/2006 12:21'!upToEndOfFile	"Answer all available characters from the output stream. Block and	continue reading until end of file is detected."	^ self last upToEndOfFile! !!ProxyPipeline methodsFor: 'updating' stamp: 'dtl 8/22/2006 06:28'!update: aParameter	aParameter == self pipeFromOutput		ifTrue: [^ self triggerEvent: #outputDataReady].	aParameter == self errorPipelineStream		ifTrue: [^ self triggerEvent: #errorDataReady].	aParameter == #runState		ifTrue: [^ self handleRunstateChange].	self error: 'unexpected parameter'! !!ProxyPipeline methodsFor: 'evaluation' stamp: 'dtl 8/28/2012 07:44'!value	"Initiate evaluation of each member of the pipeline, and answer the	last proxy in the pipeline. Evaluation may proceed asynchronously, and	the sender should wait for the last proxy to complete its evalation in order	to obtain complete output and error contents from the pipeline."	"(ProxyPipeline command: 'ls | cat | wc' shell: CommandShell new) value"	self completionWatcher: (self handleCompletionWhenSignaled: self completionSemaphore).	self do: [:proxy |		proxy value.		"A proxy may have associated Smalltalk processes for stream handling.		Schedule a short delay to permit these processes to be started prior to		starting the next proxy in the pipeline."		(Delay forMilliseconds: 10) wait]! !!ProxyPipeline methodsFor: 'event handling' stamp: 'dtl 11/20/2006 12:43'!waitForAllToComplete	"In some cases the last proxy in a pipeline may complete before some	of the others. In particular, if one proxy has redirected its output to	a file, the next proxy will see a nil input stream, and may quickly	complete its processing before its predecessor proxies have finished	writing to the file. Time out with an error if pipeline fails to complete	after 10 seconds."	(1 to: 100) do: [:e |		self isComplete ifTrue: [^ self].		(Delay forMilliseconds: 100) wait].	self error: 'pipeline did not complete evaluation'! !!InternalPipe commentStamp: '<historical>' prior: 34921979!I am a first-in, first-out queue with streaming behavior. I behave similarly to an OSPipe,but am implemented in the Smalltalk image rather than with external OS pipes. I canbehave either as a blocking pipe or as a nonblocking pipe, similar to an OS pipe withits reader end set in blocking or nonblocking mode.!!InternalPipe class methodsFor: 'instance creation' stamp: 'dtl 12/2/2001 19:24'!blockingPipe	"InternalPipe blockingPipe"	^ super basicNew initialize setBlocking! !!InternalPipe class methodsFor: 'instance creation' stamp: 'dtl 12/2/2001 19:25'!new	"InternalPipe new"	^ self blockingPipe! !!InternalPipe class methodsFor: 'instance creation' stamp: 'dtl 12/2/2001 19:24'!nonBlockingPipe	"InternalPipe nonBlockingPipe"	^ super basicNew initialize setNonBlocking! !!InternalPipe class methodsFor: 'examples' stamp: 'dtl 11/8/2007 20:33'!testPipe	"InternalPipe testPipe inspect"	| pipe result |	pipe := self new.	pipe nextPutAll: 'string to send through an InternalPipe'.	pipe closeWriter.	result := pipe upToEnd.	pipe close.	^ result! !!InternalPipe methodsFor: 'finalization' stamp: 'dtl 4/20/2003 20:34'!addDummyNilAsEndOfFileIndicatorForBlockingPipe	"And add a trailing nil to the pipe to mimic the behaviour of an external pipe	which blocks until the writer end is closed. Writing a trailing nil the the queue	has the side effect of waking up any process which is blocked waiting on the	queue, which will receive the nil as an indication that the pipe has been closed.	FIXME: This is almost certainly a Bad Idea, so it is encapsulated in its own method."	self isBlocking ifTrue: [queue nextPut: nil]! !!InternalPipe methodsFor: 'testing' stamp: 'dtl 12/26/2002 19:09'!atEnd	"Answer whether the receiver can access any more objects. A nonblocking	pipe with writer end closed which answers nil is considered to be at end.	See InternalPipe>>closeWriter. Yes, it is ugly to have a pipe which cannot	pass a nil object, but this is intended to mimic the behavior of an external	OS pipe in nonblocking mode."	^ self writerClosed and:		[self isBlocking			ifTrue:				[(queue size == 0) or:					[(queue size == 1) and:						[(queue nextPut: queue next) isNil]]]			ifFalse:				[queue size == 0]]! !!InternalPipe methodsFor: 'testing' stamp: 'dtl 6/4/2006 16:09'!atEndOfFile	"Answer whether the receiver is at its end based on the result of	the last read operation. For compatibility with ExternalPipe."	^ self atEnd! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 1/25/2003 18:58'!basicNext	"Answer the next object accessible by the receiver."	self nonBlockingMode		ifFalse:			[^ queue next]		ifTrue:			[queue isEmpty ifTrue: [^ nil] ifFalse: [^ queue next]]! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 1/7/2003 20:23'!basicNextPut: anObject 	"Insert the argument, anObject, as the next object accessible by the 	receiver. Answer anObject."	^ queue nextPut: anObject! !!InternalPipe methodsFor: 'finalization' stamp: 'dtl 1/1/2002 11:38'!close	self closeWriter; closeReader! !!InternalPipe methodsFor: 'finalization' stamp: 'dtl 1/4/2003 15:12'!closeReader	"Protocol compatibility with OSPipe. No further reads are possible after	closing the reader, therefore any dependents and events may be released.	Nothing actually is done, except to release dependents and events."	self release! !!InternalPipe methodsFor: 'finalization' stamp: 'dtl 4/20/2003 20:46'!closeWriter	"Set the writerClosed flag, and add a trailing nil to the pipe to mimic the	behaviour of an external pipe which blocks until the writer end is closed.	Writing a trailing nil the the queue has the side effect of waking up any	process which is blocked waiting on the queue, which will receive the nil	as an indication that the pipe has been closed."	self writerClosed ifFalse:		[self writerClosed: true.		self addDummyNilAsEndOfFileIndicatorForBlockingPipe.		self notifyDataReady	"in case someone is waiting on the pipe output"]! !!InternalPipe methodsFor: 'testing' stamp: 'dtl 11/24/2001 15:03'!closed	^ self writerClosed! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:33'!contents	"Answer contents of the pipe, and return the contents to the pipe so it can still be read."	"InternalPipe new nextPutAll: 'hello'; contents"	| s |	s := self next: queue size.	self nextPutAll: s.	^ s! !!InternalPipe methodsFor: 'character writing' stamp: 'dtl 9/23/2001 16:49'!cr	"Append a return character to the receiver."	self queue nextPut: Character cr! !!InternalPipe methodsFor: 'initialize-release' stamp: 'dtl 9/16/2001 22:35'!initialize	self queue! !!InternalPipe methodsFor: 'testing' stamp: 'dtl 8/7/2002 14:20'!isBlocking	"Answer true if reader end is set to blocking mode."	^ self nonBlockingMode not! !!InternalPipe methodsFor: 'testing' stamp: 'dtl 3/26/2006 15:48'!isPipe	^ true! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 3/26/2006 11:23'!next	"Answer the next object accessible by the receiver."	^ self basicNext! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:24'!next: anInteger 	"Answer the next anInteger elements of my collection."	| strm c |	strm := WriteStream on: String new.	(1 to: anInteger) do: [:index |		self atEnd			ifTrue: [^ strm contents]			ifFalse: [(c := self basicNext) ifNil: [^ strm contents].					strm nextPut: c]].	^ strm contents! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:33'!nextPut: anObject 	"Insert the argument, anObject, as the next object accessible by the 	receiver. Answer anObject."	| result |	result := queue nextPut: anObject.	self notifyDataReady.	Processor yield.	^ result! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:33'!nextPutAll: aCollection 	"Append the elements of aCollection to the sequence of objects accessible 	by the receiver. Answer aCollection."	| result |	result := aCollection do: [:e | queue nextPut: e].	self notifyDataReady.	Processor yield.	^ result! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:33'!nonBlockingMode	^ nonBlockingMode ifNil: [nonBlockingMode := false]! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:33'!nonBlockingMode: trueOrFalse	nonBlockingMode := trueOrFalse! !!InternalPipe methodsFor: 'event driven reader' stamp: 'dtl 1/7/2003 20:23'!notifyDataReady	"Whenever new data becomes available, notify any dependents. This method	exists only to document the event generation mechanism, which is intended	to be compatible with events generated by an OSPipe."	self changed! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 9/16/2001 22:42'!peek	^ queue peek! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:34'!queue	^ queue ifNil: [queue := SharedQueue new]! !!InternalPipe methodsFor: 'initialize-release' stamp: 'dtl 11/25/2001 14:33'!setBlocking	"For compatibility with OSPipe"	self nonBlockingMode: false! !!InternalPipe methodsFor: 'event driven reader' stamp: 'dtl 1/7/2003 20:31'!setBufferedReader	"An InternalPipe behaves like an OSPipe with a buffered reader, and is	capable of generating events when data is available. Answer true to	indicate that this is the case."	^ true! !!InternalPipe methodsFor: 'initialize-release' stamp: 'dtl 11/24/2001 15:56'!setNonBlocking	"For compatibility with OSPipe"	self nonBlockingMode: true! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/25/2001 19:15'!size	"An InternalPipe may contain a trailing nil if it has been closed. This should	not be counted as part of the pipe size, so use #contents to determine the size	after stripping any trailing nil."	"InternalPipe new nextPutAll: 'hello'; size"	^ self closed		ifTrue: [self contents size]		ifFalse: [self queue size]! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:24'!upToEnd	"Answer the remaining elements in the pipe"	| strm c |	strm := WriteStream on: String new.	[self atEnd] whileFalse:		[c := self next.		c isNil			ifTrue: [^ strm contents]			ifFalse: [strm nextPut: c]].	^ strm contents! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 5/20/2006 18:45'!upToEndOfFile	"For compatibility with external pipes"	^ self upToEnd! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:34'!writerClosed	^ writerClosed ifNil: [writerClosed := false]! !!InternalPipe methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:34'!writerClosed: trueOrFalse	writerClosed := trueOrFalse! !!PipeJunction commentStamp: '<historical>' prior: 34922346!I am a connector junction for input, output, and error pipelines. I obtain input from an input pipeline and, after possibly performing some kind of operation on the input objects, I send output to an output pipeline. I may also append objects onto an error pipeline.My subclasses implement the operations on the objects which pass through a pipe junction.In general, input pipes are connected to output pipes in a serial fashion, and error pipelines are shared by one or more instances of my subclasses.!!PipeJunction class methodsFor: 'defaults' stamp: 'dtl 4/2/2006 13:10'!externalPipeClass	"If external pipes are not supported, use an internal pipe instead"	"self externalPipeClass"	^ Smalltalk		at: #ExternalPipe		ifAbsent: [Smalltalk			at: #OSPipe "Older versions of OSProcess"			ifAbsent: [InternalPipe]]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 3/29/2003 11:33'!atEnd	"True after processing is complete and all available data has been read from	the output pipe."	^ pipeFromOutput atEnd and: [self isComplete]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 6/4/2006 18:10'!atEndOfFile	"True after processing is complete and all available data has been read	from the output pipe. Uses feof() to test for the end of file flag, which	will have been set by a previous read operation."	^ pipeFromOutput isNil		or: [pipeFromOutput atEndOfFile				and: [self isComplete]]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 11/15/2002 09:09'!canProvideOutputPipe	"If a subclass is not able to provide pipe output, it may answer false.	This may happen if output has been redirected to a file."	^ self pipeFromOutput notNil! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 3/11/2007 11:00'!close	"Close pipe to proxy input."	pipeToInput ifNotNil: [pipeToInput close]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 8/24/2012 08:31'!closeErrorPipeline	self errorPipelineStream ifNotNil: [[errorPipelineStream close]		on: Error		do: ["may be called from multiple processes, so tolerate primitive failure"]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 9/3/2010 17:15'!closeOutput	self pipeFromOutput ifNotNil: [pipeFromOutput close]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 11/24/2006 12:59'!closePipeInputs	"Close all pipe endpoints not used after process termination."	pipeToInput		ifNotNil: [pipeToInput close].	pipeFromOutput ifNotNil:		[pipeFromOutput isPipe			ifTrue: [pipeFromOutput closeWriter]			ifFalse: [pipeFromOutput close]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 8/20/2006 18:54'!closePipes	self closeOutput.	pipeToInput ifNotNil: [pipeToInput close].	self errorHasBeenRedirected ifTrue: [errorPipelineStream close]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 8/26/2006 13:42'!closeWriter	"No further input expected"	(self pipeToInput notNil and: [pipeToInput isPipe])		ifTrue: [pipeToInput closeWriter]! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 8/26/2006 12:11'!complete	"Evaluation has been completed. Perform any necessary cleanup."	^ self closePipeInputs! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 11/14/2002 06:35'!enableErrorStreamTriggers	"Set the error stream to be event driven if possible, and answer true	if event driven output is supported, otherwise false."	^ false! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 1/6/2003 20:31'!enableEventTriggers	"Set the output stream to be event driven if possible, and answer true if	event driven output is supported, otherwise false. See #update: for event	triggering logic."	^ self enableOutputStreamTriggers! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 6/5/2006 07:19'!enableOutputStreamTriggers	"Set the output stream to be event driven if possible, and answer true	if event driven output is supported, otherwise false."	(pipeFromOutput notNil and: [pipeFromOutput isPipe])		ifTrue: [^ pipeFromOutput setBufferedReader]		ifFalse: [^ false]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 1/25/2003 13:07'!ensurePipeFromOutput	"Make sure that an output pipe is provided."	^ self pipeFromOutput ifNil: [self pipeFromOutput: InternalPipe new]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 11/21/2006 14:56'!errorHasBeenRedirected	"Answer true if the error output has been redirected to an external file	and is not available to be read as error output of a pipeline."	^ self errorPipelineStream isPipe not! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 3/22/2003 14:48'!errorPipeForNextProxy	^ self errorHasBeenRedirected		ifTrue: [nil]		ifFalse: [self errorPipelineStream]! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:35'!errorPipelineStream	"Accumulates the error output of commands in a command pipeline."	errorPipelineStream isNil ifTrue: [errorPipelineStream := InternalPipe nonBlockingPipe].	^ errorPipelineStream! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:35'!errorPipelineStream: aStream	"Accumulates the error output of commands in a command pipeline."	errorPipelineStream := aStream! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:40'!errorUpToEnd	"Answer all available characters from my error stream."	^ (errorPipelineStream isNil or: [self errorHasBeenRedirected])		ifTrue: ['']		ifFalse: [errorPipelineStream upToEnd]! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 7/17/2006 05:48'!errorUpToEndOfFile	"Answer all available characters from the error stream. Block and	continue reading until end of file is detected."	^ (errorPipelineStream isNil or: [self errorHasBeenRedirected])		ifTrue: ['']		ifFalse: [errorPipelineStream upToEndOfFile]! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:30'!flush	"Flush output to the standard input stream of my external process. If no	external process is involved, do nothing."! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:17'!handleRedirectedOutputOf: predecessorProxy	"If the output of predecessorProxy (in a pipeline) has been redirected,	this pipe junction will not know when predecessorProxy has completed	unless it requests notification. The pipe to input of this pipe junction should	not be closed until predecessorProxy is complete, so close the pipe when the	completion event occurs."	predecessorProxy ifNotNil:		[(predecessorProxy canProvideOutputPipe not			and: [self inputHasBeenRedirected not]) ifTrue:				[self pipeToInput					ifNotNil:						[predecessorProxy							when: #complete							send: #close							to: pipeToInput writer]]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 9/10/2002 00:15'!initialize	(self requiresNonBlockingInput and: [pipeToInput isKindOf: OSPipe])		ifTrue:[pipeToInput setNonBlocking]			! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 11/21/2006 16:21'!inputHasBeenRedirected	"Answer true if the input stream has been redirected to an external file."	^ self pipeToInput notNil and: [pipeToInput isPipe not]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 4/14/2006 11:35'!isComplete	^ self subclassResponsibility! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 3/9/2002 18:16'!isExternalProcess	"Answer true if the process which I represent is an external OSProcess."	^ false! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:23'!next	^ pipeFromOutput next! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:24'!next: count	^ pipeFromOutput next: count! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:28'!nextFromError: count	"Answer up to count characters from the error pipeline stream, or an empty string	if no data is available. All characters are routed through the errorPipelineStream,	so that they are concatenated with any preceeding error message text (possibly from	a preceeding process in a command pipeline)."	^ errorPipelineStream next: count! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:24'!nextPut: aCharacter	"Write aCharacter to the standard input stream of my external process."	^ pipeToInput nextPut: aCharacter! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 9/19/2002 09:25'!nextPutAll: characters	"Write characters to the standard input stream of my external process."	^ pipeToInput nextPutAll: characters! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 2/24/2013 10:25'!output	"Wait for process completion, and answer all available output."	"((PipeableOSProcess command: 'ps') | 'grep squeak' | 'cut -c16-100') output"	^ (self isNotYetRunning not and: [self canProvideOutputPipe])		ifTrue: [(self outputOn: (WriteStream on: String new)) contents]		ifFalse: ['']! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 11/8/2007 20:35'!outputAndError	"Answer an array with output and error contents. If standard error has been	redirected to a file, answer a null string as the error message."	"((PipeableOSProcess command: 'ps') | 'NoSuchCommand; grep squeak' | 'cut -c16-100') outputAndError"	| out err |	out := self output.	(self errorHasBeenRedirected)		ifTrue: [err := '']		ifFalse: [err := errorPipelineStream contents].	^ Array with: out with: err! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 11/8/2007 20:35'!outputOn: aStream	"Wait for process completion, writing all available output on aStream"	| d |	d := nil.	[self isComplete] whileFalse:		[(d ifNil: [d := Delay forMilliseconds: 50]) wait.		aStream nextPutAll: self upToEnd].	aStream nextPutAll: self upToEndOfFile.	^ aStream! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 4/14/2006 11:31'!outputPipeForNextProxy	^ self canProvideOutputPipe		ifTrue: [pipeFromOutput]		ifFalse: [nil]! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 3/4/2002 21:46'!pipeFromOutput	^ pipeFromOutput! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 9/3/2010 17:18'!pipeFromOutput: aPipeStream	(pipeFromOutput := aPipeStream)		ifNotNil: [pipeFromOutput addDependent: self]! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 3/4/2002 21:36'!pipeToInput	^ pipeToInput! !!PipeJunction methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:36'!pipeToInput: aPipeStream	pipeToInput := aPipeStream! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 6/4/2006 17:26'!pipesAreEmpty	"True after processing is complete and all available data has been read 	from the output pipe and the errorPipelineStream pipe."	^ self atEndOfFile		and: [self errorHasBeenRedirected				or: [errorPipelineStream atEnd]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 1/2/2003 21:18'!prepareOutputFor: aPipeJunction	"External process proxies are independent of the Smalltalk image and do	not require event driven input. Internal proxies will prefer to request	event notification."	aPipeJunction isExternalProcess		ifTrue: [self prepareOutputForPipe]		ifFalse: [self prepareOutputForInternalReader]! !!PipeJunction methodsFor: 'command pipelines - private' stamp: 'dtl 11/25/2006 11:03'!prepareOutputForInternalReader	"Output stream will be used directly by a Smalltalk process. Set output 	stream characteristics accordingly."	self canProvideOutputPipe		ifTrue: [pipeFromOutput setNonBlocking].	self enableEventTriggers! !!PipeJunction methodsFor: 'command pipelines - private' stamp: 'dtl 12/3/2006 12:34'!prepareOutputForPipe	"Output stream will be used by another process proxy as input. Set output stream	characteristics accordingly. The output stream will be owned by the next process	in a pipeline, but the error stream is shared by all processes in the pipeline, and	can be event driven."	Smalltalk		at: #AioEventHandler		ifPresent: [:aio | aio aioPluginPresent				ifTrue: [self enableErrorStreamTriggers]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 1/4/2003 15:44'!release	"The input pipe may be released, but the output and error pipes may	still be in use."	self pipeToInput release.	^ super release! !!PipeJunction methodsFor: 'command pipelines' stamp: 'dtl 11/8/2007 20:35'!replaceOutputStreamWith: anotherStream	"Sender is not happy with the kind of output stream we are using. Replace	pipeFromOutput with anotherStream, and copy the current contents of pipeFromOutput	to the new stream."	| oldOutputStream |	oldOutputStream := self pipeFromOutput.	oldOutputStream removeDependent: self. "Break old dependency"	self pipeFromOutput: anotherStream. "Restores the dependency automatically"	oldOutputStream ifNotNil:		[anotherStream ifNotNil:			[anotherStream nextPutAll: oldOutputStream contents].		oldOutputStream close]! !!PipeJunction methodsFor: 'testing' stamp: 'dtl 9/9/2002 13:50'!requiresNonBlockingInput	"A PipeJunction managed by Squeak may be subject to deadlocks associated with	reading or writing an OSPipe. Answer true if the input pipe must function in	nonBlocking mode in order to prevent deadlocks. This method exists simply to	make the requirement explicit."	^ true! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 7/14/2002 23:51'!resetStdioStreams	"After an image restart, call this method to reset to the correct input, output	and error streams if they are attached to standard input, output or error."	Smalltalk at: #OSProcess ifPresent:		[:osp |		((self pipeToInput respondsTo: #isStdIn) and: [pipeToInput isStdIn])			ifTrue: [self pipeToInput: osp thisOSProcess stdIn].		((self pipeToInput respondsTo: #isStdOut) and: [pipeToInput isStdOut])			ifTrue: [self pipeToInput: osp thisOSProcess stdOut].		((self pipeToInput respondsTo: #isStdErr) and: [pipeToInput isStdErr])			ifTrue: [self pipeToInput: osp thisOSProcess stdErr]]! !!PipeJunction methodsFor: 'initialize - release' stamp: 'dtl 9/28/2002 20:54'!setNonBlockingOutput	"Check first to make sure process is not complete because pipeFromOutput will not respond	to #setNonBlocking after the process has exited."	self isComplete ifFalse: [pipeFromOutput setNonBlocking]! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 7/7/2006 00:32'!triggerComplete	self triggerEvent: #complete! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 7/7/2006 09:11'!triggerErrorDataReady	self triggerEvent: #errorDataReady.	Processor yield! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 7/7/2006 09:11'!triggerOutputDataReady	self triggerEvent: #outputDataReady.	Processor yield! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:38'!upToEnd	"Answer all available characters from the output stream."	^ (self pipeFromOutput notNil and: [self canProvideOutputPipe])		ifTrue: [pipeFromOutput upToEnd]		ifFalse: ['']! !!PipeJunction methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:38'!upToEndOfFile	"Answer all available characters from the output stream. Block and	continue reading until end of file is detected."	^ (self pipeFromOutput notNil and: [self canProvideOutputPipe])		ifTrue: [pipeFromOutput upToEndOfFile]		ifFalse: ['']! !!PipeJunction methodsFor: 'updating' stamp: 'dtl 8/19/2006 11:43'!update: aParameter	^ self changed: aParameter! !!PipeJunction methodsFor: 'event handling' stamp: 'dtl 11/21/2002 18:38'!updateErrorPipelineStream	"Ensure that all available error output is placed into errorPipelineStream."! !!PipeableEvaluator commentStamp: 'dtl 2/1/2003 16:56' prior: 34922920!I evaluate Smalltalk expressions, taking input from my pipeToInput, and print the results of the evaluation on my pipeFromOutput. I may append error messages to my errorPipelineStream. I provide a framework for pipelines of expressions, possibly combined in the same pipeline with ExternalOSProcess proxies executing external operating system commands.My evaluationBlock may be supplied directly, or can be compiled from an expression string. If compiled from an expression string, the names 'stdin', 'stdout', 'stderr', and 'args' are used to refer to the input stream, output stream, error stream, and an array of arguments. If any of these names are used in the expression string, then the evaluation block will be compiled in such as way as to connect these names with their corresponding streams or argument array.!!ExpressionEvaluator commentStamp: 'dtl 2/1/2003 16:58' prior: 34923810!I provide a context in which a Smalltalk expression can be evaluated as an element of a command pipeline.!!ExpressionEvaluator class methodsFor: 'instance creation' stamp: 'dtl 3/26/2006 12:10'!block: aBlock	"(self block: [#'This block answers a symbol as String']) value upToEnd"	^ self basicNew block: aBlock! !!ExpressionEvaluator class methodsFor: 'instance creation' stamp: 'dtl 3/26/2006 12:09'!command: aString	"(self command: '''Hello world!!''') value upToEnd"	^ self basicNew command: aString! !!ExpressionEvaluator class methodsFor: 'instance creation' stamp: 'dtl 12/13/2007 21:38'!command: aString pipeFrom: inputStream errorPipelineStream: errorStream	"(self command: 'stdout nextPutAll: stdin upToEnd'		pipeFrom: (ReadStream on: 'Here is some input text')		errorPipelineStream: InternalPipe nonBlockingPipe)			value upToEnd"	^ self command: aString pipeFrom: inputStream pipeTo: nil errorPipelineStream: errorStream! !!ExpressionEvaluator class methodsFor: 'instance creation' stamp: 'dtl 12/13/2007 21:38'!command: aString pipeFrom: inputStream pipeTo: outputStream errorPipelineStream: errorStream	"(self command: 'stdout nextPutAll: stdin contents'		pipeFrom: (ReadStream on: 'Here is some input text')		pipeTo: nil		errorPipelineStream: InternalPipe nonBlockingPipe)			value upToEnd"	^ super new		expression: aString;		pipeToInput: inputStream;		pipeFromOutput: outputStream;		errorPipelineStream: errorStream;		notYetRunning;		initialize! !!ExpressionEvaluator methodsFor: 'evaluating' stamp: 'dtl 2/1/2003 16:34'!addTreeLeaves: treeOfSymbols to: aCollection	"Flatten a tree of Symbols built by a Scanner."	treeOfSymbols do: [:e |		(e isKindOf: Array)			ifTrue: [self addTreeLeaves: e to: aCollection]			ifFalse: [aCollection add: e]].	^ aCollection! !!ExpressionEvaluator methodsFor: 'initialize - release' stamp: 'dtl 4/19/2003 16:29'!block: aBlock	self evaluationBlock: aBlock.	self initialize.	self prepareOutputForInternalReader! !!ExpressionEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/8/2007 20:32'!blockString	"Answer source code for a block to execute my expression. Attempt to give it the correct	number of parameters based on scanning expression for use of #args, #stderr, #stdout,	and #stdin tokens."	"PipeableEvaluator new expression: 'stdout nextPutAll: (args at: 4)'; blockString"	"PipeableEvaluator new expression: 'stderr nextPutAll: stdin contents'; blockString"	"PipeableEvaluator new expression: 'stdout nextPutAll: stdin contents'; blockString"	"PipeableEvaluator new expression: 'stdin contents'; blockString"	"PipeableEvaluator new expression: '#HelloWorld'; blockString"	| tokens prefix |	self expression isNil		ifTrue:			[^ '[]']		ifFalse:			[tokens := self addTreeLeaves: (Scanner new scanTokens: expression) to: OrderedCollection new.			(tokens includes: #args)				ifTrue:					[prefix := '[:stdin :stdout :stderr :args | ']				ifFalse:					[(tokens includes: #stderr)						ifTrue:							[prefix := '[:stdin :stdout :stderr | ']						ifFalse:							[(tokens includes: #stdout)								ifTrue:									[prefix := '[:stdin :stdout | ']								ifFalse:									[(tokens includes: #stdin)										ifTrue:											[prefix := '[:stdin | ']										ifFalse:											[prefix := '[']]]].			^ prefix, self expression, ']']! !!ExpressionEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/8/2007 20:32'!blockValue	"Evaluate my evaluationBlock. For a smart block, answer self. For a dumb	block, answer the result of evaluating it. Heuristic: If the block receives	two or more arguments, then assume that it was smart enough to write	output to stdout. Otherwise, assume that it was a dumb block."	| nArgs |	self evaluationBlock ifNil: [^ nil].	nArgs := evaluationBlock numArgs.	(nArgs == 0)		ifTrue: "dumb block"			[^ evaluationBlock value]		ifFalse:			[(nArgs == 4)				ifTrue: "smart block"					[evaluationBlock						value: self pipeToInput						value: self pipeFromOutput						value: self errorPipelineStream						value: self argumentArray]				ifFalse:					[(nArgs == 3)						ifTrue: "smart block"							[evaluationBlock								value: self pipeToInput								value: self pipeFromOutput								value: self errorPipelineStream]						ifFalse:							[(nArgs == 2)								ifTrue: "smart block"									[evaluationBlock										value: self pipeToInput										value: self pipeFromOutput]									ifFalse:									[(nArgs == 1)										ifTrue: "dumb block"											[^ evaluationBlock value: self pipeToInput]										ifFalse: "really stupid block"											[self error: 'expected block with 4 or fewer arguments'.											^ nil]]]]]! !!ExpressionEvaluator methodsFor: 'initialize - release' stamp: 'dtl 4/19/2003 16:25'!command: aString	self expression: aString.	self initialize.	self prepareOutputForInternalReader! !!ExpressionEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/29/2010 23:33'!compile	"Compile my expression into a block with zero to four parameters. The parameters,	if present, correspond to my pipeToInput, pipeFromOutput, errorPipelineStream, and	an array of extra parameters (in that order). By convention, these are named 'stdin',	'stdout', 'stderr', and 'args' within my expression string.	If the compilation fails due to a syntax error (compile time failure, not run time	failure), put an error message on the standard error stream and answer a block	which evaluates to a null string."	evaluationBlock ifNil:		[evaluationBlock :=			[Compiler evaluate: self blockString					for: self					notifying: self					logged: false]				on: Exception				do: [:e |					self errorPipelineStream						nextPutAll: 'Compiler: invalid Smalltalk expression ', self blockString;						nextPut: Character lf.					self fail.					nil]]! !!ExpressionEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 16:34'!evaluationBlock	"Answer the block to be evaluated, possibly compiling it from the expression string."	evaluationBlock ifNil: [self compile].	^ evaluationBlock! !!ExpressionEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:32'!evaluationBlock: aBlock	"The block to be evaluated, possibly compiled from the expression string."	evaluationBlock := aBlock! !!ExpressionEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 16:34'!expression	^ expression! !!ExpressionEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:32'!expression: aString	expression := aString! !!ExpressionEvaluator methodsFor: 'printing' stamp: 'dtl 3/24/2003 07:23'!printOn: aStream	super printOn: aStream.	self expression isNil		ifTrue:			[self evaluationBlock isNil				ifTrue:					[aStream nextPutAll: ' for '.					self evaluationBlock printOn: aStream]				ifFalse:					[aStream nextPutAll: ' for a '.					self evaluationBlock class printOn: aStream]]		ifFalse:			[aStream nextPutAll: ' for '.			self expression printOn: aStream]! !!ExpressionEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/8/2007 20:32'!value	"Evaluate my evaluationBlock. If the block evaluates to anything other	than self, then print the result on pipeFromOutput as output. Otherwise,	assume that the block was smart enough to have written its own output.	For a block which does not write its own output, add a trailing line	terminator after the evaluation if needed. Answer self as the result of	the evaluation."	| result resultString |	self success. "Hope for the best, send #fail if something goes wrong"	self isNotYetRunning ifTrue:		[self ensurePipeFromOutput.		self running.		self evaluationBlock notNil			ifTrue:				[result := [self blockValue]					on: Error					do: [:e |						self errorPipelineStream nextPutAll: e description; nextPut: Character lf.						self fail].				(result == self)					ifFalse:						[resultString := result asString.						pipeFromOutput nextPutAll: resultString.						(resultString isEmpty not and:							[(resultString last ~= Character cr) and:								[resultString last ~= Character lf]])							ifTrue: [pipeFromOutput nextPut: Character lf]]]			ifFalse:				[self fail].		self complete]! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 16:45'!argumentArray	^ argumentArray! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:36'!argumentArray: anArrayOfStrings	argumentArray := anArrayOfStrings! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 6/8/2003 22:37'!atEnd	"True after processing is complete and all available data has been read from	the output pipe."	^ self isComplete		and: [self outputHasBeenRedirected				or: [self outputIsExternalStream					or: [pipeFromOutput atEnd]]]! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 11/15/2002 09:10'!canProvideOutputPipe	"Answer false if output has been redirected to a file and cannot be accessed by	the next process proxy in a command pipeline."	^ super canProvideOutputPipe and: [self outputHasBeenRedirected not]! !!PipeableEvaluator methodsFor: 'setting run state' stamp: 'dtl 11/24/2006 13:01'!complete	"Evaluation has been completed. Perform some cleanup and notify	interested parties."	self closePipeInputs.	self runState: #complete.	self errorHasBeenRedirected		ifTrue: [self closeErrorPipeline]! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:36'!errorPipelineStream	"Accumulates the error output of commands in a command pipeline."	errorPipelineStream isNil		ifTrue:			[errorPipelineStream := InternalPipe nonBlockingPipe.			errorPipelineStream addDependent: self].	^ errorPipelineStream! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:36'!errorPipelineStream: aStream	"Accumulates the error output of commands in a command pipeline."	errorPipelineStream ifNotNil: [errorPipelineStream removeDependent: self].	errorPipelineStream := aStream.	errorPipelineStream ifNotNil: [errorPipelineStream addDependent: self]! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 4/19/2003 09:56'!exitStatus	^ exitStatus! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:36'!exitStatus: aSymbol	exitStatus := aSymbol! !!PipeableEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/25/2001 22:39'!fail	self exitStatus: #fail! !!PipeableEvaluator methodsFor: 'initialize - release' stamp: 'dtl 9/9/2002 13:51'!initialize	"If pipeFromOutput has been set, then the output stream is being redirected.	Set a flag to indicate this, otherwise open new a pipe stream to use for output."	pipeFromOutput isNil		ifTrue: [self ensurePipeFromOutput]		ifFalse: [self outputHasBeenRedirected: true].	^ super initialize! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 3/4/2002 06:58'!isComplete	^ self runState == #complete! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 3/4/2002 06:59'!isNotYetRunning	^ self runState == #notYetRunning! !!PipeableEvaluator methodsFor: 'streaming' stamp: 'dtl 11/8/2007 20:37'!nextPut: aCharacter	"Write aCharacter to the standard input stream of my process."	| readPosition |	readPosition := pipeToInput position.	pipeToInput setToEnd nextPut: aCharacter.	pipeToInput position: readPosition.	^ pipeToInput! !!PipeableEvaluator methodsFor: 'streaming' stamp: 'dtl 11/8/2007 20:37'!nextPutAll: aCollection	"Write aCollection to the standard input stream of my process."	| readPosition |	readPosition := pipeToInput position.	pipeToInput setToEnd nextPutAll: aCollection.	pipeToInput position: readPosition.	^ pipeToInput! !!PipeableEvaluator methodsFor: 'setting run state' stamp: 'dtl 3/4/2002 22:32'!notYetRunning	"Process has not yet entered running state."	self runState: #notYetRunning! !!PipeableEvaluator methodsFor: 'error handling' stamp: 'dtl 11/8/2007 20:37'!notify: aString at: aPosition in: aStream	| s |	s := aStream contents.	self errorPipelineStream		nextPutAll: (s copyFrom: 1 to: (aPosition - 1));		nextPutAll: aString;		nextPutAll: (s copyFrom: aPosition to: s size);		cr! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:37'!outputHasBeenRedirected	"True if pipeFromOutput has been redirected to a FileStream"	^ outputHasBeenRedirected ifNil: [outputHasBeenRedirected := false]! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:37'!outputHasBeenRedirected: trueOrFalse	"True if pipeFromOutput has been redirected to a FileStream"	outputHasBeenRedirected := trueOrFalse! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 6/8/2003 22:35'!outputIsExternalStream	"True if output is being piped to an external proxy, or if output has been	redirected to a file."	^ self pipeFromOutput isKindOf: FileStream! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/29/2006 06:29'!pipeFromError	"Internal evaluators use the errorPipelineStream directly"	^ self errorPipelineStream! !!PipeableEvaluator methodsFor: 'printing' stamp: 'dtl 1/12/2003 00:45'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' ('; nextPutAll: self runState; nextPut: $)! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:37'!runState	^ runState ifNil: [runState := #notYetRunning]! !!PipeableEvaluator methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:37'!runState: aSymbol	runState := aSymbol.	self changed: #runState! !!PipeableEvaluator methodsFor: 'setting run state' stamp: 'dtl 3/4/2002 22:32'!running	"Process is actively running."	self runState: #running! !!PipeableEvaluator methodsFor: 'error handling' stamp: 'dtl 4/7/2001 21:27'!selectFrom: start to: end	^ self blockString copyFrom: start to: end! !!PipeableEvaluator methodsFor: 'error handling' stamp: 'dtl 4/7/2001 19:50'!selectionInterval	"The compiler wants this for some reason."	^ 1 to: 1! !!PipeableEvaluator methodsFor: 'testing' stamp: 'dtl 12/22/2001 18:37'!succeeded	"Answer true if my evaluation completed successfully."	^ self exitStatus == #success! !!PipeableEvaluator methodsFor: 'evaluating' stamp: 'dtl 11/25/2001 22:39'!success	self exitStatus: #success! !!PipeableEvaluator methodsFor: 'error handling' stamp: 'dtl 12/8/2001 18:13'!text	"The compiler needs this to generate error messages."	^ Text fromString: self expression! !!PipeableEvaluator methodsFor: 'setting run state' stamp: 'dtl 3/4/2002 22:32'!unknownRunState	"Unable to determine the current run state of the process."	self runState: #unknownRunState! !!PipeableEvaluator methodsFor: 'command pipelines' stamp: 'dtl 11/8/2007 20:38'!| anotherCommandString	"Pipe my output to another evaluator, where the other evaluator evaluates	anotherCommandString."	"((ExpressionEvaluator command: 'Smalltalk')		| 'stdout nextPutAll: stdin upToEnd'		| 'stdout nextPutAll: stdin upToEnd') upToEnd"	"(ExpressionEvaluator command: 'BOGUS')		| 'stdout nextPutAll: stdin upToEnd'		| 'stdout nextPutAll: stdin upToEnd'"	"((ExpressionEvaluator command: '(true == false) not')		| 'stdout nextPutAll: stdin upToEnd'		| 'stdout nextPutAll: stdin upToEnd') upToEnd"	| new |	new := self species			command: anotherCommandString			pipeFrom: self pipeFromOutput			errorPipelineStream: self errorPipelineStream.	self value.	^ new! !!ShellBuiltinEvaluator commentStamp: 'dtl 2/1/2003 17:47' prior: 34923985!I provide the context in which a ShellBuiltin is evaluated as an element of a command pipeline.!!ShellBuiltinEvaluator class methodsFor: 'instance creation' stamp: 'dtl 2/1/2003 16:01'!command: aShellBuiltin withArguments: argumentArray shell: commandShell pipeFrom: inputStream pipeTo: outputStream errorPipelineStream: errorStream	^ super new		shellBuiltin: aShellBuiltin;		argumentArray: argumentArray;		commandShell: commandShell;		pipeToInput: inputStream;		pipeFromOutput: outputStream;		errorPipelineStream: errorStream;		initialize! !!ShellBuiltinEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 15:13'!commandShell	^ commandShell! !!ShellBuiltinEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 15:12'!commandShell: aCommandShell	commandShell := aCommandShell! !!ShellBuiltinEvaluator methodsFor: 'testing' stamp: 'dtl 2/1/2003 16:08'!needsPrompt	"Answer true if a shell will want to issue a prompt after evaluating me."	^ self shellBuiltin needsPrompt! !!ShellBuiltinEvaluator methodsFor: 'printing' stamp: 'dtl 3/22/2003 13:58'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' on '.	self shellBuiltin printOn: aStream! !!ShellBuiltinEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 15:12'!shellBuiltin	^ shellBuiltin! !!ShellBuiltinEvaluator methodsFor: 'accessing' stamp: 'dtl 2/1/2003 15:12'!shellBuiltin: aShellBuiltin	shellBuiltin := aShellBuiltin! !!ShellBuiltinEvaluator methodsFor: 'evaluating' stamp: 'dtl 12/21/2007 12:50'!value	self isNotYetRunning ifTrue:		[self success. "Hope for the best, send #fail if something goes wrong"		self running.		self ensurePipeFromOutput.		self shellBuiltin				performWith: self argumentArray				evaluator: self				shell: self commandShell				input: self pipeToInput				output: self pipeFromOutput				error: self errorPipelineStream]! !!PipeableOSProcess commentStamp: '<historical>' prior: 34924140!I am a connector junction for input, output, and error pipelines. I collaborate with a process proxy to evaluate an internal or external process, and to move objects through the pipelines as the proxy is evaluated.From Smalltalk, you can write to my pipeToInput, and read from my pipeFromOutput and pipeFromError streams. I implement simple streaming protocol as a convenience for reading and writing these pipe streams. I support command pipelines with the #| message, with the pipeFromOutput of one instance connected to the pipeToInput of the next instance, and a shared errorPipelineStream collecting error output text for the command pipeline.All reading and writing should be done with the streaming protocol, rather than by direct access to the pipe streams. This is because the output pipe streams may be silently replaced by simple ReadStreams following the exit of the child process.Normal exit for the external process may not happen when expected. If the process is writing to the output pipe, it may block on write until enough of its data is read from the pipeFromOutput pipe, after which it will exit normally.!!PipeableOSProcess class methodsFor: 'examples' stamp: 'dtl 1/24/2013 19:12'!addTwoPlusTwoInChildSqueak	"Fork a headless child Squeak. Send three objects to the child, and read one object	returned from the child. The child Squeak uses the three objects to compute a result,	which it sends back to its parent Squeak before exiting."	"PipeableOSProcess addTwoPlusTwoInChildSqueak"	| serializerClass childBlock in out rcv op param result childProxy writer sum s inputStream |	(serializerClass := Smalltalk at: #ReferenceStream ifPresent: [:cls | cls ])		ifNil: [^ self notify: 'ReferenceStream not found'].	"Create block to be evaluated in a Squeak child process."	childBlock := ["First set standard input to blocking. This avoids a delay to wait for		data to be available, but note that it is dangerous to do this unless you		are certain that you know in advance that the correct number of characters		will be available on the input. If this is not the case, then the VM will block		on the read and lock up the child squeak process."		OSProcess thisOSProcess stdIn setBlocking.		in := serializerClass on: OSProcess thisOSProcess stdIn.		out := serializerClass on: OSProcess thisOSProcess stdOut.		"read three objects"		rcv := in next.		op := in next.		param := in next.		"add two plus two"		result := rcv perform: op with: param.		"answer the result"		out nextPut: result].	"Fork a child Squeak that will evaluate the childBlock then exit"	childProxy := PipeableOSProcess forkHeadlessSqueakAndDoThenQuit: childBlock.	"Write three objects to the child Squeak process"	writer := serializerClass on: childProxy pipeToInput writer.	writer nextPut: 2.	writer nextPut: #+.	writer nextPut: 2.	"Read the result object from the child Squeak process"	s := RWBinaryOrTextStream with: childProxy pipeFromOutput upToEndOfFile.	s reset.	inputStream := serializerClass on: s.	sum := inputStream next.	"show result of 2 + 2 evaluated in the child Squeak"	self inform: '2 + 2 equals ', sum asString.	^ sum! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 9/3/2010 17:26'!bash	"Start a Gnu bash command interpreter (enhanced Unix shell)"	"self bash"	"self bash exec: 'ls'; exec: 'who'; close; upToEnd"	| proxyClass |	(proxyClass := self externalProxyClass) ifNotNil:		[^ self command: proxyClass bashShellPath].	^ self notify: 'OSProcess not available'! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 11/8/2007 20:40'!canAccessOSProcess	"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"	"self canAccessOSProcess"	| osp |	^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 3/4/2002 07:24'!command: aString	"(PipeableOSProcess command: '/bin/echo this is a test') output"	"(PipeableOSProcess command: 'echo this is a test') output"	"(PipeableOSProcess command: '/bin/noSuchCommand this is a test') output"	"(PipeableOSProcess command: 'ls -l Sq*log') output"	"(PipeableOSProcess command: 'ls -l ?q*log') output"	"(PipeableOSProcess command: '/bogusDirectory/ls -l Sq*log') output"	^ self command: aString		environment: nil		workingDir: nil		input: nil		output: nil		error: nil		errorPipelineStream: nil! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 11/8/2011 19:44'!command: aString environment: anEnvironmentDictionary	"| env path |	env := OSProcess thisOSProcess environment copy.	path := (env at: #PATH), ':/opt/local/bin/'.	env at: #PATH put: path.	(PipeableOSProcess command: 'echo $PATH' environment: env) output"	^ self command: aString		environment: anEnvironmentDictionary		workingDir: nil		input: nil		output: nil		error: nil		errorPipelineStream: nil! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 12/13/2007 21:46'!command: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream	"(PipeableOSProcess command: 'ls -l hosts NOSUCHFILE' environment: nil workingDir: '/etc' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself)) output"	^ self command: aString		environment: anEnvironmentDictionary		workingDir: pathString		input: inputStream		output: outputStream		error: errorStream		errorPipelineStream: anErrorWriteStream		shellSyntax: nil! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 9/27/2014 11:28'!command: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream shellSyntax: aSyntaxProcessor	"(PipeableOSProcess command: 'ls -l hosts NOSUCHFILE' environment: nil workingDir: '/etc' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself) shellSyntax: nil) output"	| p |	p := self		commandNoEvaluate: aString		environment: anEnvironmentDictionary		workingDir: pathString		input: inputStream		output: outputStream		error: errorStream		errorPipelineStream: anErrorWriteStream		shellSyntax: aSyntaxProcessor.	p pipeFromOutput setBufferedReader.	(Delay forMilliseconds: 1) wait. "context switch to enable buffered reader"	p value.	^p! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 4/28/2001 12:04'!command: aCommandString pipeFrom: aPipeStream errorPipelineStream: anErrorStream	"Run a command in a shell process. Similar to the system(3) call in the standard C library,	except that aCommandString runs asynchronously in a child process."	^ self		command: aCommandString		environment: nil		workingDir: nil		input: aPipeStream		output: nil		error: nil		errorPipelineStream: anErrorStream! !!PipeableOSProcess class methodsFor: 'external command processing' stamp: 'dtl 10/13/2008 06:31'!commandNoEvaluate: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream shellSyntax: aSyntaxProcessor	"Set up the command but do not actually fork the child process."	"PipeableOSProcess commandNoEvaluate: 'ls -l hosts NOSUCHFILE' environment: nil workingDir: '/etc' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself) shellSyntax: nil"	| nameAndArgs proxyClass |	nameAndArgs := aSyntaxProcessor isNil		ifTrue:			[(proxyClass := self externalProxyClass) isNil				ifTrue:					[Array with: aString with: Array new]				ifFalse:					[Array						with: proxyClass defaultShellPath						with: (Array with: '-c' with: aString)]]		ifFalse:			[aSyntaxProcessor				programNameAndArgumentsFrom: aString				inDirectoryPath: pathString				findExecutable: true].	^ nameAndArgs ifNotNil:		[self new: (nameAndArgs at: 1)			arguments: (nameAndArgs at: 2)			environment: anEnvironmentDictionary			descriptors: (Array with: inputStream with: outputStream with: errorStream)			workingDir: pathString			errorPipelineStream: anErrorWriteStream]! !!PipeableOSProcess class methodsFor: 'process proxy classes' stamp: 'dtl 8/7/2002 13:42'!externalProxyClass	"self externalProxyClass"	^ Smalltalk at: #ExternalOSProcess ifPresent: [:eosp | eosp concreteClass]! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 12/13/2007 21:39'!forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString errorPipelineStream: anErrorStream	"Run a program in an external OS process, and answer an instance of myself	which represents the external process."	"PipeableOSProcess forkAndExec: '/bin/ls' arguments: #('-ls' 'hosts' 'NOSUCHFILE') environment: nil descriptors: nil workingDir: '/etc' errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself)"	^ self canAccessOSProcess		ifTrue:			[(self new: executableFile			arguments: arrayOfStrings			environment: stringDictionary			descriptors: arrayOf3Streams			workingDir: pathString			errorPipelineStream: anErrorStream) value; yourself]		ifFalse:			[self notify: 'OSProcess not available or OSProcess plugin not functioning']! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 5/19/2009 23:28'!forkHeadlessSqueakAndDoThenQuit: aBlock	"Start a new headless Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock."	"| child |	child := PipeableOSProcess forkHeadlessSqueakAndDoThenQuit:		[OSProcess thisOSProcess stdOut			nextPutAll: 'hello from headless Squeak child ',				OSProcess thisOSProcess pid asString].	child upToEndOfFile"		^ self forkSqueakAndDoThenQuit: aBlock		errorPipelineStream: InternalPipe nonBlockingPipe		headless: true! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 11/11/2011 10:20'!forkSqueakAndDoThenQuit: aBlock	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock."	"PipeableOSProcess forkSqueakAndDoThenQuit:		[Object inform: 'Hi, I am the child Squeak process. Click OK to exit the child Squeak.']"		^ self		forkSqueakAndDoThenQuit: aBlock		errorPipelineStream: InternalPipe nonBlockingPipe		headless: false! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 11/10/2011 20:25'!forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock."	^ self		forkSqueakAndDoThenQuit: aBlock		errorPipelineStream: anErrorStream		headless: headless		bufferedOutput: true! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 11/11/2011 11:35'!forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless bufferedOutput: buffered	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock."	^ self		forkSqueakAndDoThenQuit: aBlock		errorPipelineStream: anErrorStream		headless: headless		bufferedOutput: buffered		outputNotifier: nil! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 6/7/2015 12:05'!forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless bufferedOutput: buffered outputNotifier: aioEventHandler	"Start a new instance of Squeak running in a child OS process. The new instance is a	clone of this image except for the return value of this method. It does not reload the	image file from disk. The child image evaluates aBlock."	| pp proc parentVmProcess blockWithRedirection |	pp := super new.	pp createPipes.	buffered ifTrue: [pp pipeFromOutput setBufferedReader].	aioEventHandler ifNotNil: [ buffered		ifTrue: [self error: 'buffered reader already has AIO handler']		ifFalse: [aioEventHandler forFileStream: pp pipeFromOutput reader]].	blockWithRedirection := [		pp pipeToInput reader setNonBlocking.		OSProcess thisOSProcess redirectStdInTo: pp pipeToInput reader.		OSProcess thisOSProcess redirectStdOutTo: pp pipeFromOutput writer.		OSProcess thisOSProcess redirectStdErrTo: pp pipeFromError writer.		pp pipeToInput writer close.		pp pipeFromOutput reader close.		pp pipeFromError reader close.		aBlock value].		parentVmProcess := OSProcess thisOSProcess.	proc := headless				ifTrue: [parentVmProcess forkHeadlessSqueakAndDoThenQuit: blockWithRedirection]				ifFalse: [parentVmProcess forkSqueakAndDoThenQuit: blockWithRedirection].	proc pid = parentVmProcess pid		ifTrue: ["child Squeak - this branch is never reached"]		ifFalse: ["parent Squeak - set the child Squeak as the process proxy"			pp errorPipelineStream: anErrorStream.			pp pipeToInput reader close.			pp pipeFromOutput writer close.			pp pipeFromError writer close.			^ pp processProxy: proc]! !!PipeableOSProcess class methodsFor: 'instance creation' stamp: 'dtl 9/3/2010 17:33'!new: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString errorPipelineStream: anErrorStream	"Prepare to run a program in an external OS process, and answer an instance of	myself which will represent the external process."	"PipeableOSProcess new: '/bin/ls' arguments: #('-ls' 'hosts' 'NOSUCHFILE') environment: nil descriptors: nil workingDir: '/etc' errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself)"	"PipeableOSProcess new: 'sol' arguments: nil environment: nil descriptors: nil workingDir: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: 'this is the error stream '; yourself)"	| pp proc proxyClass s |	pp := super new.	(proxyClass := self externalProxyClass) ifNotNil:		[proc := proxyClass			programName: executableFile			arguments: arrayOfStrings			initialEnvironment: stringDictionary].	proc ifNil: [^ self notify: 'OSProcess not available'].	arrayOf3Streams isNil		ifTrue:			[pp createPipes.			proc initialStdIn: pp pipeToInput reader.			proc initialStdOut: pp pipeFromOutput writer.			proc initialStdErr: pp pipeFromError writer]		ifFalse:			[(s := (arrayOf3Streams at: 1)) isNil				ifTrue:					[pp createInputPipe.					proc initialStdIn: pp pipeToInput reader]				ifFalse:					[proc initialStdIn: s].			(s := (arrayOf3Streams at: 2)) isNil				ifTrue:					[pp createOutputPipe.					proc initialStdOut: pp pipeFromOutput writer]				ifFalse:					[proc initialStdOut: s].			(s := (arrayOf3Streams at: 3)) isNil				ifTrue:					[pp createErrorPipe.					proc initialStdErr: pp pipeFromError writer]				ifFalse:					[proc initialStdErr: s]].	pathString ifNotNil: [proc pwd: pathString].	pp errorPipelineStream: anErrorStream.	pp initialize.	proc initialize.	^ pp processProxy: proc! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 9/3/2010 17:35'!remoteShell: remoteSystemName 	"Start a remote Unix shell on another computer"	"self remoteShell: 'localhost'"	| proxyClass |	(proxyClass := self externalProxyClass) ifNotNil:		[^ self			forkAndExec: proxyClass remoteShellPath			arguments: (Array with: remoteSystemName with: 'sh')			environment: nil			descriptors: nil			workingDir: nil			errorPipelineStream: nil].	^ self notify: 'OSProcess not available'! !!PipeableOSProcess class methodsFor: 'examples' stamp: 'dtl 11/8/2007 20:41'!remoteShellExample: remoteUnixHostName	"Start a shell on another computer using rsh, and answer the the output	of some commands on the remote host. You must have security access to	the remote system in order for this to work."	"PipeableOSProcess remoteShellExample: 'minnow.cc.gatech.edu'"	"PipeableOSProcess remoteShellExample: 'micron'"	"PipeableOSProcess remoteShellExample: 'localhost'"	| rsh output |	rsh :=  self remoteShell: remoteUnixHostName.	rsh exec: 'echo remote host name is '.	rsh exec: 'hostname'.	rsh exec: 'exit'.	output := rsh output.	rsh close.	rsh succeeded		ifTrue: [self notify: output]		ifFalse: [self notify: 'remote shell failed with error message: ', rsh errorUpToEnd].	^ rsh! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 9/3/2010 17:35'!shell	"Start a Unix shell"	"self shell"	"self shell exec: 'ls'; exec: 'who'; close; upToEnd"	| proxyClass |	(proxyClass := self externalProxyClass) ifNotNil:		[^ self command: proxyClass defaultShellPath].	^ self notify: 'OSProcess not available'! !!PipeableOSProcess class methodsFor: 'examples' stamp: 'dtl 11/8/2007 20:41'!tkExample	"Start an interactive Tk shell and send it some commands to display a user interface."	"PipeableOSProcess tkExample"	| wish |	wish :=  self wish.	[wish		exec: 'button .b1 -text "This is button b1"';		exec: 'button .b2 -text "This is button b2"';		exec: 'button .exit -text Exit -command exit';		exec: 'pack .b1 .b2 .exit'] fork.	^ wish! !!PipeableOSProcess class methodsFor: 'examples' stamp: 'dtl 3/4/2002 07:21'!unixCommandPipeLine	"Run a pipeline of commands in a manner similar to Unix command shell	usage, and answer the result as a string."	"PipeableOSProcess unixCommandPipeLine"	^ ((PipeableOSProcess command: 'ps') | 'grep squeak' | 'cut -c16-100') output! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 11/8/2007 20:40'!waitForCommand: aCommandString	"Run a command in a shell process. Similar to the system(3) call in the standard C library.	The active Smalltalk process waits for completion of the external command process. This just	uses a simple polling loop, which is not very elegant but works well enough for most purposes."	"self waitForCommand: 'echo sleeping...; sleep 3; echo I just slept for three seconds'"	| proc d |	d := Delay forMilliseconds: 50.	proc := self command: aCommandString.	proc ifNil: [self class noAccessorAvailable].	[proc isComplete] whileFalse: [d wait].	^ proc! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 9/3/2010 17:36'!wish	"Start a Tk/Tcl command interpreter"	"self wish"	| proxyClass |	(proxyClass := self externalProxyClass) ifNotNil:		[^ self command: proxyClass tkShellPath].	^ self notify: 'OSProcess not available'! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 12/15/2007 11:49'!xon: remoteSystem command: aCommandString	"Convenience method for running an X program on a remote system and displaying its window	on the local display."	"self xon: 'someRemoteHost' command: 'xeyes'"	^ self command: 'xon ', remoteSystem, ' ', aCommandString! !!PipeableOSProcess class methodsFor: 'utility' stamp: 'dtl 4/19/2003 16:41'!xterm: aCommandString	"Convenience method for running a command in an external xterm window"	"self xterm: 'top -d 2'"	^ self command: 'xterm -T ''', aCommandString, ''' -e ', aCommandString! !!PipeableOSProcess class methodsFor: 'examples' stamp: 'dtl 12/15/2007 11:52'!xtermExample	"Open an external xterm window running a 'top' command. Works on unix	X window platforms."	"self xtermExample"	^ self xterm: 'top -d 2'! !!PipeableOSProcess methodsFor: 'command pipelines - private' stamp: 'dtl 7/7/2006 09:11'!addToErrorPipeline: aString	(aString isNil or: [aString isEmpty])		ifFalse: [self errorPipelineStream nextPutAll: aString]! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 6/4/2006 15:55'!atEnd	"True after processing is complete and all available data has been read 	from the output pipe."	^ pipeFromOutput isNil or: [pipeFromOutput atEnd]! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 11/27/2010 12:56'!close	"Close pipe to proxy input. The pipes from output and error are not	closed. This will result in the external process seeing end of file on its	input stream, which typically causes the external process to flush any	remaining data to its output and error streams, then exit. It is the	responsibility of the user to wait for that data to become available,	read any data of interest, then close the output and error pipes to	free remaining external pipe references (see closePipes)."	^super close! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 9/3/2010 17:19'!closeOutput	| p |	(p := self pipeFromOutput)		ifNotNil: [p removeDependent: self; close]! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 8/26/2006 12:10'!closePipeInputs	"Close all pipe endpoints not used after process termination."	super closePipeInputs.	pipeFromError ifNotNil: [pipeFromError closeWriter]! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 9/3/2010 17:20'!closePipes	"Replace the output and error pipe streams with internal pipes, and close	all input and output pipes."	| output out err p |	self keepInitialStdOutOpen		ifTrue:			["The pipe stream will be closed by the next process in the command pipeline"			(p := pipeFromOutput) ifNotNil: [p triggerDataReady]]		ifFalse:			[(output := self pipeFromOutput)				ifNotNil:					[accessProtect critical:						[self pipeFromOutput: InternalPipe new.						out := output upToEnd.						out isEmpty ifFalse:							[self pipeFromOutput nextPutAll: out.							self triggerOutputDataReady].						self pipeFromOutput closeWriter.						output removeDependent: self; close]]].	(pipeFromError) ifNotNil:		[accessProtect critical:			[err := pipeFromError upToEnd.			err isEmpty ifFalse:				[self addToErrorPipeline: err.				self triggerEvent: #errorDataReady].			pipeFromError removeDependent: self; close]].	self keepInitialStdErrOpen ifTrue: [self processProxy initialStdErr close].	self pipeToInput ifNotNil: [pipeToInput close]! !!PipeableOSProcess methodsFor: 'updating' stamp: 'dtl 11/21/2006 14:34'!complete	super complete.	self updateErrorPipelineStreamToEndOfFile! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/26/2006 14:06'!createErrorPipe	"Create a pipe for the error stream from the child process."	self pipeFromError: PipeJunction externalPipeClass nonBlockingPipe! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/26/2006 14:06'!createInputPipe	"Create a pipe for input to the child process."	self pipeToInput: PipeJunction externalPipeClass blockingPipe! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 3/26/2006 14:06'!createOutputPipe	"Create a pipe for output from the child process. The pipe should later be set	to nonBlocking mode only if necessary to provent Squeak VM deadlocks."	self pipeFromOutput: PipeJunction externalPipeClass blockingPipe! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 2/26/2002 19:03'!createPipes	pipeToInput ifNil: [self createInputPipe].	pipeFromOutput ifNil: [self createOutputPipe].	pipeFromError ifNil: [self createErrorPipe]! !!PipeableOSProcess methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:20'!enableErrorStreamTriggers	"Set the error stream to be event driven if possible, and answer true	if event driven output is supported, otherwise false."	| err |	(err := pipeFromError)		ifNotNil: [^ err setBufferedReader].	^ false! !!PipeableOSProcess methodsFor: 'event handling' stamp: 'dtl 11/11/2002 22:51'!enableEventTriggers	"Set the output and error streams to be event driven if possible, and 	answer true if event driven output is supported, otherwise false."	^ self enableOutputStreamTriggers and: [self enableErrorStreamTriggers]! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!errorPipelineStream: aStream	"Accumulates the error output of commands in a command pipeline. Overridden	to eliminate setting self as a dependent of the error pipeline stream."	errorPipelineStream := aStream! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:41'!errorUpToEnd	"Answer all available characters from the error stream of my external process."	^ accessProtect critical: [super errorUpToEnd]! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 11/21/2006 14:21'!errorUpToEndOfFile	"Answer all available characters from the error stream. Block and	continue reading until end of file is detected."	self updateErrorPipelineStreamToEndOfFile.	^ errorPipelineStream upToEnd! !!PipeableOSProcess methodsFor: 'evaluating' stamp: 'dtl 2/27/2002 14:46'!exec: aString	"Pass aString to the child for execution. Presumably the child is running a	command processor of some kind, such as a Unix shell."	processProxy isRunning		ifTrue:			[self nextPutAll: aString;			nextPut: Character lf;			flush]		ifFalse: [self notify: 'child process not running']! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 9/3/2010 17:42'!flush	"Flush output to the standard input stream of my external process."	| p |	(p := pipeToInput) ifNotNil: [p flush]! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 11/8/2007 20:38'!handlePrecedingError	"The stderr stream has been redirected. If there are any characters in the	errorPipelineStream, write them to the stderr stream before proceeding. Fork	a process to keep reading any additional error messages from preceding	processes, and write them to the redirected error. When done, close the redirected	error stream (this does not affect the actual external process, which has its own	file handle on the error stream). A background process is used to copy the	errorPipelineStream because it is not straightforward to attach all predecessor	proxies in a command pipeline to the redirected error output. This design is	kludgy, but it works."	| d |	d := Delay forMilliseconds: 200.	self setKeepInitialStdErrOpen.	Processor yield.	"A chance to clean up predecessor proxies in command pipeline"	errorPipelineStream ifNotNil:			[processProxy initialStdErr nextPutAll: errorPipelineStream upToEnd.			[[self isRunning or: [self isNotYetRunning]]				whileTrue:					[processProxy initialStdErr nextPutAll: errorPipelineStream upToEnd.					d wait].				self keepInitialStdErrOpen ifFalse: [processProxy initialStdErr close]] fork]! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 11/8/2007 20:38'!initialize	"Semaphore to protect against finalizing the output and error streams	while they are being read."	accessProtect := Semaphore forMutualExclusion.	^ super initialize! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 2/27/2002 15:32'!isComplete	^ processProxy isComplete! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 3/9/2002 18:17'!isExternalProcess	"Answer true if the process which I represent is an external OSProcess."	^ true! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 2/27/2002 22:50'!isNotYetRunning	^ processProxy isNotYetRunning! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 2/27/2002 22:50'!isRunning	^ processProxy isRunning! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!keepInitialStdErrOpen	"True if stderr has been redirected and the handle must be kept open in case	a predecessor in a command pipeline might have more error messages to write	to the redirected error stream."	^ keepInitialStdErrOpen ifNil: [keepInitialStdErrOpen := false]! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!keepInitialStdErrOpen: trueOrFalse	"True if stderr has been redirected and the handle must be kept open in case	a predecessor in a command pipeline might have more error messages to write	to the redirected error stream."	keepInitialStdErrOpen := trueOrFalse! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!keepInitialStdOutOpen	"If false, close the output pipe when the child exits. If true, do not close the output pipe.	This should be set true for an output pipe connected to another process in a pipeline,	where it is assumed that the next process will close the pipe when it is done reading	from it. Otherwise, the default behavior is to close the output pipe after transferring its	contents to a Smalltalk stream."	^ keepInitialStdOutOpen ifNil: [keepInitialStdOutOpen := false]! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!keepInitialStdOutOpen: trueOrFalse	"If false, close the output pipe when the child exits. If true, do not close the output pipe.	This should be set true for an output pipe connected to another process in a pipeline,	where it is assumed that the next process will close the pipe when it is done reading	from it. Otherwise, the default behavior is to close the output pipe after transfering its	contents to a Smalltalk stream."	keepInitialStdOutOpen := trueOrFalse! !!PipeableOSProcess methodsFor: 'shell support' stamp: 'dtl 10/13/2001 11:33'!needsPrompt	"After evaluating the command, a shell will want to issue a prompt"	^ true! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 11/8/2007 20:40'!next	"Answer the next character from the output stream of my external process,	or nil if no data is available."	| s |	s := accessProtect critical: [pipeFromOutput ifNotNil: [pipeFromOutput next]].	^ s! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 11/8/2007 20:40'!next: count	"Answer up to count characters from the output stream of my external process,	or an empty string if no data is available."	| s |	s := accessProtect critical: [pipeFromOutput ifNotNil: [pipeFromOutput next: count]].	^ s! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 11/21/2002 18:37'!nextFromError: count	"Answer up to count characters from the error stream of my external process,	or an empty string if no data is available. All characters are routed through	the errorPipelineStream, so that they are concatenated with any preceeding	error message text (possibly from a preceeding process in a command pipeline)."	self updateErrorPipelineStream.	^ self errorHasBeenRedirected		ifTrue: [nil]		ifFalse: [self errorPipelineStream next: count]! !!PipeableOSProcess methodsFor: 'shell support' stamp: 'dtl 10/13/2001 11:33'!nullStream	^ FileStream oldFileNamed: '/dev/null'! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 1/20/2001 17:14'!pipeFromError	^ pipeFromError! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 9/3/2010 17:22'!pipeFromError: aPipeStream	(pipeFromError := aPipeStream)		ifNotNil: [pipeFromError addDependent: self]! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 6/4/2006 17:26'!pipesAreEmpty	"True after processing is complete and all available data has been read 	from the output pipe and the error pipe. Note: uses error handling 	rather than testing for pipe closed to avoid race condition."	^ (self atEndOfFile			and: [pipeFromError isNil					or: [pipeFromError atEndOfFile]])		and: [errorPipelineStream atEnd]! !!PipeableOSProcess methodsFor: 'command pipelines - private' stamp: 'dtl 9/3/2010 17:23'!prepareOutputForInternalReader	"Output stream will be used directly by a Smalltalk process. Set output stream	characteristics accordingly."	| err |	super prepareOutputForInternalReader.	self setKeepInitialStdOutOpen.	(err := self pipeFromError) ifNotNil: [err setNonBlocking]! !!PipeableOSProcess methodsFor: 'command pipelines - private' stamp: 'dtl 1/18/2003 10:06'!prepareOutputForPipe	"Output stream will be used by another process proxy as input. Set output stream	characteristics accordingly."	super prepareOutputForPipe.	self setKeepInitialStdOutOpen; setBlockingOutput! !!PipeableOSProcess methodsFor: 'printing' stamp: 'dtl 4/8/2006 19:32'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' on '.	self processProxy printOn: aStream! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 3/3/2002 13:44'!processProxy	"An internal evaluation proxy, or an external OS process proxy."	^ processProxy! !!PipeableOSProcess methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:39'!processProxy: aProxy	"An internal evaluation proxy, or an external OS process proxy. Add myself as	a dependent of aProxy in order to receive notification when the process run	state changes."	aProxy addDependent: self.	processProxy := aProxy! !!PipeableOSProcess methodsFor: 'initialize - release' stamp: 'dtl 1/4/2003 15:45'!release	self processProxy release.	self pipeFromError release.	^ super release! !!PipeableOSProcess methodsFor: 'command pipelines' stamp: 'dtl 2/28/2002 07:57'!replaceOutputStreamWith: anotherStreamOrNil	"Sender is my successor in a command pipeline."	processProxy isNotYetRunning		ifFalse:			[self error: 'too late to change the output now'].	anotherStreamOrNil isNil		ifFalse:			[processProxy initialStdOut: anotherStreamOrNil.			self pipeFromOutput: nil "Not accessible any more"]		ifTrue:			["Sender is my successor in a command pipeline, but does not want to use			my standard output. Therefore, dump my standard output to the null device."			pipeFromOutput				ifNotNil:					[pipeFromOutput close.					self pipeFromOutput: nil].			processProxy initialStdOut: self nullStream]! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 9/18/2002 11:24'!requiresNonBlockingInput	"A PipeJunction managed by Squeak may be subject to deadlocks associated with	reading or writing an OSPipe. A PipeableOSProcess relies on the external operating	system to provide process scheduling, so it will not block the Squeak VM when it	is blocked on a read or a write."	^ false! !!PipeableOSProcess methodsFor: 'private' stamp: 'dtl 8/7/2002 11:56'!setBlockingOutput	"Set the pipe from the child stdout to blocking mode. This is the normal	mode for a pipe, although for Squeak we set pipe outputs to nonblocking	to protect ourselves from blocking the Squeak VM when reading from	a pipe. Unix command pipelines use the normal blocking behavior, and	let the operating system timeslice the processes to keep the rest of the	world from hanging on a blocked read."	Smalltalk at: #OSProcess ifPresent:		[:osp | pipeFromOutput ifNotNil: [osp accessor setBlocking: self pipeFromOutput reader ioHandle]]! !!PipeableOSProcess methodsFor: 'command pipelines' stamp: 'dtl 12/3/2001 23:52'!setKeepInitialStdErrOpen	"Send this message if stderr has been redirected and the handle must be kept open in	case a predecessor in a command pipeline might have more error messages to write	to the redirected error stream."	self keepInitialStdErrOpen: true! !!PipeableOSProcess methodsFor: 'command pipelines' stamp: 'dtl 1/18/2003 10:06'!setKeepInitialStdOutOpen	"When child exits, do not close the output pipe. This is for an output pipe connected to	another process in a pipeline, where it is assumed that the next process will close	the pipe when it is done reading from it."	self keepInitialStdOutOpen: true! !!PipeableOSProcess methodsFor: 'testing' stamp: 'dtl 2/27/2002 22:51'!succeeded	^ processProxy succeeded! !!PipeableOSProcess methodsFor: 'private' stamp: 'dtl 2/24/2013 10:25'!unixFileNumbers	"Utility method for debugging. Answer the Unix file numbers for the streams	associated with this instance. This may be useful for debugging file handle	leaks (files or sockets being opened but never closed).	When a process proxy is initially set up, it will normally have six file	numbers associated with it prior to forking the child (two file numbers each	for stdin, stdout, and stderr). Once the child is forked, the process proxy in	Squeak will close its copies of the child ends of the pipes, so only three of	the original six file numbers remain visible to Squeak."	"(PipeableOSProcess command: 'who') unixFileNumbers"	"(PipeableOSProcess new: '/bin/ls'		arguments: #('-ls' 'hosts' 'NOSUCHFILE') environment: nil		descriptors: nil workingDir: '/etc'		errorPipelineStream: ((WriteStream on: String new)		nextPutAll: 'this is the error stream '; yourself)) unixFileNumbers"	| d |	Smalltalk at: #OSProcess ifPresent:		[:osp |		d := Dictionary new.		d at: #initialStdIn put: (osp accessor unixFileNumber: processProxy initialStdIn ioHandle).		d at: #initialStdOut put: (osp accessor unixFileNumber: processProxy initialStdOut ioHandle).		d at: #initialStdErr put: (osp accessor unixFileNumber: processProxy initialStdErr ioHandle).		d at: #'pipeToInput writer'			put: (osp accessor unixFileNumber: pipeToInput writer ioHandle).		d at: #'pipeFromOutput reader'			put: (osp accessor unixFileNumber: pipeFromOutput reader ioHandle).		d at: #'pipeFromError reader'			put: (osp accessor unixFileNumber: pipeFromError reader ioHandle).		^ d].	^ nil! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:35'!upToEnd	"Answer all available characters from the output of my external process."	^ accessProtect critical: [super upToEnd]! !!PipeableOSProcess methodsFor: 'streaming' stamp: 'dtl 6/3/2006 10:35'!upToEndOfFile	"Answer all available characters from the output stream. Block and	continue reading until end of file is detected."	^ accessProtect critical: [super upToEndOfFile]! !!PipeableOSProcess methodsFor: 'updating' stamp: 'dtl 9/3/2010 17:24'!update: aParameter	"Clean up after processProxy exits. Remove myself as a dependent of processProxy,	and close pipes."	| err |	(aParameter == pipeFromError)		ifTrue:			[accessProtect critical: [self addToErrorPipeline: pipeFromError upToEnd].			^ self changed: self errorPipelineStream].	(aParameter == #runState)		ifTrue:			[processProxy isComplete				ifTrue:					[(err := self pipeFromError)						ifNotNil: [self addToErrorPipeline: err upToEnd].					self complete.					self changed: aParameter]				ifFalse:					[^ self]].	^ super update: aParameter! !!PipeableOSProcess methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:24'!updateErrorPipelineStream	"Ensure that all available error output is placed into errorPipelineStream."	| p |	(p := self pipeFromError) ifNotNil: [ | s |		s := p upToEnd. "must be outside the critical block, race condition on #update:"		accessProtect critical: [errorPipelineStream nextPutAll: s]]! !!PipeableOSProcess methodsFor: 'event handling' stamp: 'dtl 9/3/2010 17:25'!updateErrorPipelineStreamToEndOfFile	"Move all error output up to end of file to the errorPipelineStream."	| p |	(p := self pipeFromError) ifNotNil: [ | s |		s := p upToEndOfFile. "must be outside the critical block, race condition on #update:"		accessProtect critical: [errorPipelineStream nextPutAll: s].		p close]! !!PipeableOSProcess methodsFor: 'evaluating' stamp: 'dtl 12/15/2007 08:54'!value	"Start the external process"	| p |	self errorHasBeenRedirected ifTrue: [self handlePrecedingError].	accessProtect critical:		[p := processProxy ifNotNil: [processProxy value].		"The external child process now owns its own copy of the pipe handles. We no		longer need our copies of these handles, so close the ones that are not needed."		p ifNotNil:			[self keepInitialStdOutOpen ifFalse: [p closeInitialStdOut].			self keepInitialStdErrOpen ifFalse: [p closeInitialStdErr]]]! !!PipeableOSProcess methodsFor: 'command pipelines' stamp: 'dtl 1/18/2003 10:06'!| anotherCommandString	"Pipe my output to another external process, where the other external process	executes anotherCommandString."	"(PipeableOSProcess command: 'ps') | 'grep squeak' | 'cut -c16-100'"	self setKeepInitialStdOutOpen.	self setBlockingOutput.	^ self species			command: anotherCommandString			pipeFrom: pipeFromOutput reader			errorPipelineStream: self errorPipelineStream! !!RemoteTask commentStamp: 'dtl 11/12/2011 23:26' prior: 34925332!RemoteTask do: [2 + 2]A RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.The block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.On a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.!!RemoteTask class methodsFor: 'evaluating' stamp: 'dtl 11/12/2011 23:23'!do: aBlock	"Start a remote task and read the result object. The image will be blocked	on read until completion of the remote task."	"RemoteTask do: [2 + 2]"	^(self new task: aBlock) value! !!RemoteTask class methodsFor: 'evaluating' stamp: 'dtl 11/12/2011 23:20'!do: taskBlock whenComplete: aOneArgumentBlock	"Evaluate taskBlock in an image running in a separate OS process.	Set the completion block, a block that takes result object as its single argument.	Start remote processing with an AIO event notifier. Completion of the remote task	will result in a changed notification from the event notifier, which will activate the	completion block. The completion block is expected to do something useful with	the result of the remote task."	"n.b. Inspect the RemoteTask to prevent it being garbage collected and finalized	before processing is complete"	"(RemoteTask do: [2 + 2] whenComplete: [ :result | result inspect ]) inspect"	"(RemoteTask do: [(Delay forSeconds: 3) wait. 2 + 2] whenComplete: [ :result | result inspect ]) inspect"	^ self new task: taskBlock whenComplete: aOneArgumentBlock! !!RemoteTask class methodsFor: 'finalization' stamp: 'dtl 11/12/2011 23:05'!finalize: aRemoteTask	aRemoteTask finalize! !!RemoteTask class methodsFor: 'class initialization' stamp: 'dtl 2/19/2015 22:33'!headlessChild: boolean	"If true (default), the child process is headless. Set to false to allow debugging in	the child Squeak image"	"RemoteTask headlessChild:true"	"RemoteTask headlessChild:false" "for debugging the child image"	HeadlessChild := boolean! !!RemoteTask class methodsFor: 'class initialization' stamp: 'dtl 2/19/2015 22:32'!initialize	"Initilialize the serialization strategy. Assume that if Magma is loaded in this image,	that the Magma serializer is preferred. If Fuel is present, use that. Otherwise use the	simple and effective default of a Squeak ReferenceStream."	"RemoteTask initialize"	"RemoteTask useReferenceStreamSerializer"	"RemoteTask useFuelSerializer"	"RemoteTask useMagmaSerializer"	self headlessChild: true.	(Smalltalk hasClassNamed: #MaObjectSerializer)		ifTrue: [^self useMagmaSerializer].	(Smalltalk hasClassNamed: #FLSerializer)		ifTrue: [^ self useFuelSerializer].	self useReferenceStreamSerializer.! !!RemoteTask class methodsFor: 'examples' stamp: 'dtl 11/13/2011 00:29'!parallelPerformance	"Compare performance of three tasks run in parallel versus the equivalent serial	processing. Results will vary depending on availability of CPU cores. On a quad core	machine, the parallel processing should complete in well under half the time of the	equivalent serial job."	"RemoteTask parallelPerformance"	| parallelExecutionTime results sema task1 task2 task3 serialExecutionTime p1 p2 p3 |	parallelExecutionTime := Time millisecondsToRun: [		results := Array new: 3.		sema := Semaphore new.		task1 := [(100000000000000000000000000000 to: 100000000000000000000000019999)					select: [:f | f isPrime] thenCollect: [:s | s asString]].		task2 := [(100000000000000000000000020000 to: 100000000000000000000000039999)					select: [:f | f isPrime] thenCollect: [:s | s asString]].		task3 := [(100000000000000000000000040000 to: 100000000000000000000000059999)					select: [:f | f isPrime] thenCollect: [:s | s asString]].		"n.b. assign to variables to prevent RemoteTask from being finalized"		p1 := RemoteTask do: task1 whenComplete: [:result |  results at: 1 put: result. sema signal].		p2 := RemoteTask do: task2 whenComplete: [:result | results at: 2 put: result. sema signal].		p3 := RemoteTask do: task3 whenComplete: [:result |  results at: 3 put: result. sema signal].		sema wait; wait; wait.		results].	serialExecutionTime :=  Time millisecondsToRun: [		(100000000000000000000000000000 to: 100000000000000000000000019999)					select: [:f | f isPrime] thenCollect: [:s | s asString].		(100000000000000000000000020000 to: 100000000000000000000000039999)					select: [:f | f isPrime] thenCollect: [:s | s asString].		(100000000000000000000000040000 to: 100000000000000000000000059999)					select: [:f | f isPrime] thenCollect: [:s | s asString]].	^ { #parallelExecutionTime -> parallelExecutionTime . #serialExecutionTime -> serialExecutionTime }! !!RemoteTask class methodsFor: 'examples' stamp: 'dtl 11/13/2011 00:32'!threeParallelTasks	"Find all primes in a range of large integers. Divide the problem into	three tasks running the three child images, and return the results to	the supervisory image. Answer a tasks array and a results array, where	the results array will be populated on completion of the tasks."	"RemoteTask threeParallelTasks"	| p1 p2 p3 results task1 task2 task3 |	results := Array new: 3.	task1 := [(100000000000000000000000000000					to: 100000000000000000000000019999)				select: [:f | f isPrime] thenCollect: [:s | s asString]].	task2 := [(100000000000000000000000020000					to: 100000000000000000000000039999)				select: [:f | f isPrime] thenCollect: [:s | s asString]].	task3 := [(100000000000000000000000040000					to: 100000000000000000000000059999)				select: [:f | f isPrime] thenCollect: [:s | s asString]].	"n.b. Assign task to a variable to prevent RemoteTask from being finalized"	p1 := RemoteTask do: task1 whenComplete: [:result | results at: 1 put: result].	p2 := RemoteTask do: task2 whenComplete: [:result | results at: 2 put: result].	p3 := RemoteTask do: task3 whenComplete: [:result | results at: 3 put: result].	^ { #tasks -> { p1 . p2 . p3 } . #results -> results }! !!RemoteTask class methodsFor: 'class initialization' stamp: 'dtl 2/16/2015 19:01'!useFuelSerializer	"RemoteTask useFuelSerializer"	Serializer := (Smalltalk at: #FLSerializer ifAbsent: [self error: 'Fuel not installed']) newDefault.	Materializer := (Smalltalk at: #FLMaterializer) newDefault..	^SerializingStrategy := #fuel! !!RemoteTask class methodsFor: 'class initialization' stamp: 'dtl 2/16/2015 19:00'!useMagmaSerializer	"RemoteTask useMagmaSerializer"	Serializer := (Smalltalk at: #MaObjectSerializer ifAbsent: [self error: 'Magma serializer not installed']) new.	Materializer := Serializer.	^SerializingStrategy := #magma! !!RemoteTask class methodsFor: 'class initialization' stamp: 'dtl 2/16/2015 19:01'!useReferenceStreamSerializer	"RemoteTask useReferenceStreamSerializer"	Serializer := (Smalltalk at: #ReferenceStream).	Materializer := Serializer.	^SerializingStrategy := #referenceStream! !!RemoteTask methodsFor: 'finalization' stamp: 'dtl 11/12/2011 21:30'!finalize	"If garbage collected before remote processing is complete, the AIO	handler process should be terminated and the external process should	be stopped. When evaluating a #do:whenComplete: a reference should	be maintained to the RemoteTask in order to avoid this finalization."	aioHandler ifNotNilDo: [:aio | aio close].	childProxy ifNotNilDo: [:child | child terminate]! !!RemoteTask methodsFor: 'serializing' stamp: 'dtl 2/16/2015 19:13'!getResult	"Materialize the result, reading serialized data from standard input"	SerializingStrategy = #referenceStream		ifTrue: [^(Materializer on: childProxy pipeFromOutput reader) next].	SerializingStrategy = #fuel		ifTrue: [^(Materializer materializeFrom: childProxy pipeFromOutput reader binary) root].	SerializingStrategy = #magma		ifTrue: [^Materializer objectFromStream: childProxy pipeFromOutput reader].	self error: 'undefined strategy ', SerializingStrategy asString! !!RemoteTask methodsFor: 'serializing' stamp: 'dtl 2/16/2015 19:14'!put: result	"Serialize the result and write to standard output"	SerializingStrategy = #referenceStream		ifTrue: [ ^ (Serializer on: OSProcess thisOSProcess stdOut) nextPut: result].	SerializingStrategy = #fuel		ifTrue: [ ^ Serializer serialize: result on: OSProcess thisOSProcess stdOut binary].	SerializingStrategy = #magma		ifTrue: [ ^Serializer object: result toStream: OSProcess thisOSProcess stdOut].	self error: 'undefined strategy ', SerializingStrategy asString! !!RemoteTask methodsFor: 'finalization' stamp: 'dtl 11/12/2011 23:07'!registerForFinalization		self toFinalizeSend: #finalize:		to: self class		with: self copy! !!RemoteTask methodsFor: 'evaluating' stamp: 'dtl 11/27/2011 12:26'!result	"Answer the result of a previously started task. The child Squeak sends one	result object back to its parent Squeak before exiting."	^self getResult! !!RemoteTask methodsFor: 'evaluating' stamp: 'dtl 2/19/2015 22:52'!start	"Fork a headless child Squeak to evaluate my task."	| childBlock result |	self registerForFinalization.	"Create block to be evaluated in a Squeak child process."	childBlock := ["First set standard input to blocking. This avoids a delay to wait for		data to be available, but note that it is dangerous to do this unless you		are certain that you know in advance that the correct number of characters		will be available on the input. If this is not the case, then the VM will block		on the read and lock up the child squeak process."		result := [self task value]					on: Exception					do: [:e |						HeadlessChild ifFalse: [ e halt; resume ].						result := 'remote task execution failed: ', e printString].		OSProcess thisOSProcess stdIn setBlocking.		self put: result.		OSProcess thisOSProcess stdOut flush; close].	"Fork a child Squeak that will evaluate the childBlock then exit"	childProxy := PipeableOSProcess					forkSqueakAndDoThenQuit: childBlock					errorPipelineStream: InternalPipe nonBlockingPipe					headless: HeadlessChild					bufferedOutput: false					outputNotifier: aioHandler! !!RemoteTask methodsFor: 'accessing' stamp: 'dtl 1/25/2010 19:03'!task	"Answer the value of task"	^ task! !!RemoteTask methodsFor: 'accessing' stamp: 'dtl 1/25/2010 19:03'!task: anObject	"Set the value of task"	task := anObject! !!RemoteTask methodsFor: 'evaluating' stamp: 'dtl 11/12/2011 23:20'!task: taskBlock whenComplete: aOneArgumentBlock	"Evaluate taskBlock in an image running in a separate OS process.	Set the completion block, a block that takes result object as its single argument.	Start remote processing with an AIO event notifier. Completion of the remote task	will result in a changed notification from the event notifier, which will activate the	completion block. The completion block is expected to do something useful with	the result of the remote task."	"n.b. Inspect the RemoteTask to prevent it being garbage collected and finalized	before processing is complete"	"(RemoteTask new task: [2 + 2] whenComplete: [ :result | result inspect]) inspect"	"(RemoteTask new task: [(Delay forSeconds: 3) wait. 2 + 2] whenComplete: [ :result | result inspect]) inspect"	task := taskBlock.	completionBlock := aOneArgumentBlock.	aioHandler ifNotNil: [aioHandler close].	aioHandler := AioEventHandler new.	aioHandler addDependent: self.	self start! !!RemoteTask methodsFor: 'updating' stamp: 'dtl 11/11/2011 10:47'!update: anObject	"An event handler has indicated availability of data on the pipe from	the remote process. Begin reading data until the entire result object	is received. The remote process will exit when complete, but possibly	not until data has been read from the pipe, as it may block on write	until the pipe has been serviced."	(anObject isKindOf: AioEventHandler)		ifTrue: [[completionBlock						ifNotNil: [completionBlock value: self result]]					ensure: [anObject close]]! !!RemoteTask methodsFor: 'evaluating' stamp: 'dtl 11/27/2011 11:34'!value	"Start a remote task and read the result object. The child Squeak sends one	result object back to its parent Squeak before exiting."	"(RemoteTask new task: [2 + 2]) value"	self start.	^self result! !"CommandShell-Piping"!!CrLfFileEditor commentStamp: '<historical>' prior: 0!I provide an editor on a single file. I attempt to avoid changing the line termination character convention when writing my text back to a file.Bug: On older Squeak systems which do not support FilesStream>>truncate, file permissions may be lost when a file is rewritten at a shorter length.!!ShellBuiltin commentStamp: 'dtl 2/1/2003 12:25' prior: 0!A shell builtin command, intended to be invoked by a CommandShell.A builtin command consists of: name - a String identifier, used by the CommandShell to identify and invoke the commmand. helpString - a String to describe the function of the command. procedure - a BlockContext with parameters to be passed by the CommandShell.Commands are implemented in instance methods. To create a new command, write anew command implementation method and a new help method for the command. Writea new class side instance creation method patterned after one of the existing commandsand install the instance creation method in an instance of CommandShell withCommandShell>>installCommand:.A command implementation is a method which receives six paramaters. The parameters areto be interpreted as follows:	- First parameter: The EvaluatorProxy which is evaluating the command. If a command fails,	  send #fail to this object.	- Second parameter: The CommandShell from which the command was evaluated. Use this	  for any additional parsing which may be required in the command implementation.	- Third parameter: The input stream for the command.	- Forth parameter: The output stream for the command.	- Fifth parameter: The error stream for the command.	- Sixth parameter: An array of optional command arguments.!!CrLfFileEditor commentStamp: '<historical>' prior: 35034587!I provide an editor on a single file. I attempt to avoid changing the line termination character convention when writing my text back to a file.Bug: On older Squeak systems which do not support FilesStream>>truncate, file permissions may be lost when a file is rewritten at a shorter length.!!CrLfFileEditor class methodsFor: 'private' stamp: 'dtl 12/15/2007 13:38'!defaultLineEndConvention	"FIXME: The Unix and Win32 are right, but I just guessed at the others - dtl"	| platform |	platform :=  ShellSyntax new platformName.	(platform = 'unix') ifTrue: [^ #lf].	(platform = 'Win32') ifTrue: [^ #crlf].	(platform = 'Mac OS') ifTrue: [^ #cr].	(platform = 'RiscOS') ifTrue: [^ #cr].	(platform = 'OS2') ifTrue: [^ #crlf]. "FIXME: Is this the right name for OS2?"	"Add other system types here..."	^ #cr! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 9/12/2002 10:16'!editFileNamed: pathName	"CrLfFileEditor editFileNamed: '/etc/hosts'"	"CrLfFileEditor editFileNamed: '/NO/SUCH/FILE'"	"CrLfFileEditor editFileNamed: '/etc/NOSUCHFILE)'"	^ Cursor read showWhile: [self openForFileNamed: pathName].! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 9/12/2002 11:38'!fileNamed: pathName	"Answer a Controller or Morph as view on an instance of myself."	"CrLfFileEditor fileNamed: '/etc/hosts'"	"CrLfFileEditor fileNamed: '/NO/SUCH/FILE'"	"CrLfFileEditor fileNamed: '/etc/NOSUCHFILE'"	^ self fileNamed: pathName withLabel: pathName! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 7/1/2015 21:13'!fileNamed: pathName inDirectoryPath: dirPath	"Answer a Controller or Morph as view on an instance of myself."	"CrLfFileEditor fileNamed: '/etc/hosts' inDirectoryPath: '/usr/bin'"	"CrLfFileEditor fileNamed: 'bin/vi' inDirectoryPath: '/usr'"	"CrLfFileEditor fileNamed: 'hosts' inDirectoryPath: '/etc'"	"CrLfFileEditor fileNamed: 'hosts' inDirectoryPath: '/usr/bin'"	"CrLfFileEditor fileNamed: '/NO/SUCH/FILE' inDirectoryPath: '/etc'"	"CrLfFileEditor fileNamed: '/etc/NOSUCHFILE' inDirectoryPath: '/etc'"	| dir fs convention editText |	dir := CommandShell directoryForPath: dirPath.	(dir fileExists: pathName)		ifTrue:			[[fs := (Smalltalk						at: #MultiByteFileStream						ifAbsent: [Smalltalk at: #CrLfFileStream])							readOnlyFileNamed: dirPath, CommandShell pathSeparator, pathName.			convention := fs detectLineEndConvention.			editText := fs contentsOfEntireFile.			fs close]				on: Error				do: [:ex |					convention := #lf.	"Default for Unix text files"					editText := '']]		ifFalse:			[convention := #lf.	"Default for Unix text files"			editText := ''].	^ self on: editText		withLabel: pathName		inDirectory: dir		defaultFileName: pathName		lineEndConvention: convention! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 7/1/2015 21:14'!fileNamed: pathName withLabel: windowLabel	"Answer a Controller or Morph as view on an instance of myself."	"CrLfFileEditor fileNamed: '/etc/hosts' withLabel: 'an editor on /etc/hosts'"	| dirPath dir fs convention editText localName |	dirPath := CommandShell dirPathFor: pathName.	dir := CommandShell directoryForPath: dirPath..	localName := CommandShell localNameFor: pathName.	(CommandShell fileExists: localName inDirectory: dir)		ifTrue:			[[fs := (Smalltalk						at: #MultiByteFileStream						ifAbsent: [Smalltalk at: #CrLfFileStream])							readOnlyFileNamed: pathName.			convention := fs detectLineEndConvention.			editText := fs contentsOfEntireFile.			fs close]				on: Error				do: [:ex |					convention := #lf.	"Default for Unix text files"					editText := '']]		ifFalse:			[convention := #lf.	"Default for Unix text files"			editText := ''].	^ self on: editText		withLabel: windowLabel		inDirectory: dir		defaultFileName: localName		lineEndConvention: convention! !!CrLfFileEditor class methodsFor: 'class initialization' stamp: 'dtl 11/29/2010 22:10'!initialize	"CrLfFileEditor initialize"	| preferencesClass |	(Smalltalk hasClassNamed: #Preferences)		ifTrue: ["Pharo deprecates Preference in favor of pragma registration mechanism"			preferencesClass := Smalltalk at: #Preferences.			(preferencesClass respondsTo: #setWindowColorFor:to: )				ifTrue: ["Squeak"					preferencesClass 						setWindowColorFor: #CommandShell 						to: (Color colorFrom: self windowColorSpecification pastelColor)]				ifFalse: ["Pharo images use some other preferences protocol"]].! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 9/12/2002 10:10'!on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString	"(CrLfFileEditor on: 'this is the string to edit' withLabel: 'this is the window label' inDirectory: FileDirectory default defaultFileName: 'buffer.txt') openInWorld"	^ self on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: self defaultLineEndConvention! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 9/12/2002 10:09'!on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: convention	"(CrLfFileEditor on: 'this is the string to edit' withLabel: 'this is the window label' inDirectory: FileDirectory default defaultFileName: 'buffer.txt' lineEndConvention: #lf) openInWorld"	| model |	model := self new contents: aString.	model directory: aDirectory.	model fileName: nameString.	model lineEndConvention: convention.	^ model withLabel: aLabelString! !!CrLfFileEditor class methodsFor: 'private' stamp: 'dtl 6/29/2010 21:09'!openForFileNamed: pathName	"CrLfFileEditor openForFileNamed: '/etc/hosts'"	"CrLfFileEditor openForFileNamed: '/NO/SUCH/FILE'"	"CrLfFileEditor openForFileNamed: '/etc/NOSUCHFILE'"	^ CommandShell isMorphic		ifTrue: [(self fileNamed: pathName) openInWorld]		ifFalse: [(self fileNamed: pathName) open]! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 9/12/2002 10:10'!openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString	"CrLfFileEditor openOn: 'this is the string to edit' withLabel: 'this is the window label' inDirectory: FileDirectory default defaultFileName: 'buffer.txt'"	^ self openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: self defaultLineEndConvention! !!CrLfFileEditor class methodsFor: 'instance creation' stamp: 'dtl 12/13/2007 21:08'!openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: convention	"CrLfFileEditor openOn: 'this is the string to edit' withLabel: 'this is the window label' inDirectory: FileDirectory default defaultFileName: 'buffer.txt' lineEndConvention: #lf"	| model |	model := self new contents: aString.	model directory: aDirectory.	model fileName: nameString.	model lineEndConvention: convention.	^ model openLabel: aLabelString! !!CrLfFileEditor class methodsFor: 'window color' stamp: 'dtl 6/29/2010 00:07'!windowColorSpecification	"Answer a WindowColorSpec object that declares my preference"	| windowColorSpec |	windowColorSpec := Smalltalk				at: #WindowColorSpec				ifAbsent: [^self error: 'this image does not support WindowColorSpec'].	^ windowColorSpec		classSymbol: self name		wording: 'Squeak Shell File Editor'		brightColor: Color lightOrange		pastelColor: Color lightOrange paler paler		helpMessage: 'CrLfFileEditor window for CommandShell ''edit'' comand'! !!CrLfFileEditor methodsFor: 'private' stamp: 'ThierryGoubier 9/20/2013 15:14'!bogusTruncate: fileStream	"Truncate the file by brute force if FileStream>>truncate is not supported on	this system. Note that this does not preserve file permissions."	| name |	name := fileStream name.	fileStream close.	CommandShell deleteFileNamed: name inDirectory: directory.	^ (Smalltalk at: #CrLfFileStream) fileNamed: name! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 1/27/2013 17:53'!browseChanges	"Browse in fileIn format."	| fs |	fs :=  CommandShell fileNamed: fileName inDirectory: directory.	ChangeList browseStream: fs.	fs close! !!CrLfFileEditor methodsFor: 'model access' stamp: 'dtl 1/26/2013 12:29'!contents	^ viewStyle == #hex		ifTrue: [self hexFormat: contents]		ifFalse: [contents]! !!CrLfFileEditor methodsFor: 'model access' stamp: 'ThierryGoubier 6/25/2015 22:26'!contents: aString	viewStyle == #hex		ifTrue: [ self inform: 'cannot update in hex mode' ]		ifFalse: [ contents := aString	"asString" ]! !!CrLfFileEditor methodsFor: 'accessing' stamp: 'ThierryGoubier 6/25/2015 22:27'!contentsSelection	"Return the interval of text in the code pane to select when I set the pane's contents"	^ 1 to: 0  "null selection"! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 6/29/2010 21:08'!controllerForAccept	"Find the controller or morph which expects the #accept message"	| controller view |	CommandShell isMorphic		ifTrue:			[controller := dependents detect: [:e | e respondsTo: #accept] ifNone: [nil]]		ifFalse:			[view := dependents detect: [:e | e controller respondsTo: #accept] ifNone: [nil].			controller := view isNil				ifTrue: [nil]				ifFalse: [view controller]].	^ controller! !!CrLfFileEditor methodsFor: 'model access' stamp: 'dtl 1/27/2013 18:05'!currentFilePathName	^ (CommandShell dirPathFor: directory), CommandShell pathSeparator, fileName! !!CrLfFileEditor methodsFor: 'initialize-release' stamp: 'dtl 12/13/2007 20:57'!defaultFont	"A fixed width font suitable for displaying output of shell command lines"	^ StrikeFont familyName: 'Atlanta' size: 11 emphasized: 0! !!CrLfFileEditor methodsFor: 'accessing' stamp: 'dtl 5/19/2001 17:40'!directory: aDirectory	directory := aDirectory! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 6/29/2010 21:09'!exit	self changed: #accept.	CommandShell isMorphic		ifTrue:			[dependents do: [:d | (d respondsTo: #closeBoxHit) ifTrue: [d closeBoxHit]]]		ifFalse:			[dependents first controller closeAndUnschedule]! !!CrLfFileEditor methodsFor: 'model access' stamp: 'ThierryGoubier 9/20/2013 15:17'!fileContentsMenu: aMenu shifted: shifted| shiftMenu |^ shifted 	ifFalse: [aMenu 		labels: 'savesave as...exitview as hexview as textbrowse changesfind...(f)find again (g)set search string (h)do again (j)undo (z)copy (c)cut (x)paste (v)paste...do it (d)print it (p)inspect it (i)fileIn selectionaccept (s)cancel (l)more...' 		lines: #(3 6 9 11 15 19 21)		selections: #(save saveAs exit getHex getText browseChangesfind findAgain setSearchStringagain undocopySelection cut paste pasteRecentdoIt printIt inspectIt fileItInaccept cancelshiftedYellowButtonActivity)]	ifTrue: [shiftMenu := (Smalltalk at: #ParagraphEditor) shiftedYellowButtonMenu.		aMenu 			labels: shiftMenu labelString 			lines: shiftMenu lineArray			selections: shiftMenu selections]! !!CrLfFileEditor methodsFor: 'accessing' stamp: 'dtl 5/19/2001 17:01'!fileName: aString	fileName := aString! !!CrLfFileEditor methodsFor: 'private' stamp: 'dtl 6/29/2001 23:21'!forceDirtyBuffer	"This will force the view to behave as if it had been edited. Call this to	enable a file save even if the text has not actually been edited by the	user."	| controller |	controller := self dependents			detect: [:e | e respondsTo: #hasUnacceptedEdits:]			ifNone:				[self dependents					collect: [:d | d controller]					thenSelect: [:c | c respondsTo: #hasUnacceptedEdits:]].	controller hasUnacceptedEdits: true.! !!CrLfFileEditor methodsFor: 'private' stamp: 'ThierryGoubier 9/20/2013 15:16'!getAnotherFileName: initialFileName	| choice newFileName |	choice := ((Smalltalk at: #PopUpMenu)		labels: 'choose another name\cancel' withCRs)		startUpWithCaption: initialFileName.	choice = 1		ifTrue: [newFileName := (Smalltalk at: #FillInTheBlank)									request: 'Enter a new file name'									initialAnswer: initialFileName.				newFileName := (CommandShell fileExists: newFileName inDirectory: directory)					ifTrue: [self getFileName: newFileName]					ifFalse: [newFileName].				^ newFileName].	^ nil! !!CrLfFileEditor methodsFor: 'private' stamp: 'ThierryGoubier 9/20/2013 15:16'!getFileName: initialFileName	| choice newFileName |	choice := ((Smalltalk at: #PopUpMenu)		labels: 'overwrite that file\choose another name\cancel' withCRs)		startUpWithCaption: initialFileName, ' already exists.'.	choice = 1		ifTrue: [^ initialFileName].	choice = 2		ifTrue: [newFileName := (Smalltalk at: #FillInTheBlank)									request: 'Enter a new file name'									initialAnswer: initialFileName.				newFileName := (CommandShell fileExists: newFileName inDirectory: directory)					ifTrue: [self getFileName: newFileName]					ifFalse: [newFileName].				^ newFileName].	^ nil! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 5/20/2001 12:46'!getHex	Cursor read showWhile:		[self viewStyle: #hex.		self changed: #contents]! !!CrLfFileEditor methodsFor: 'model access' stamp: 'dtl 5/26/2001 18:23'!getSelection	^ 1 to: 0  "null selection"! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 5/20/2001 14:01'!getText	Cursor read showWhile:		[self viewStyle: #text.		self changed: #contents]! !!CrLfFileEditor methodsFor: 'private' stamp: 'dtl 5/20/2001 14:25'!hexFormat: aString	"CrLfFileEditor new hexFormat: 'this is a test of the HEX string reformat method'"	| s |	s := WriteStream on: (String new: aString size*4).	0 to: aString size-1 by: 16 do:		[:loc | s nextPutAll: loc hex; space;			nextPut: $(; print: loc; nextPut: $); space; tab.		loc+1 to: (loc+16 min: aString size) do: [:i | s nextPutAll: (aString at: i) hex; space].		s cr].	^ s contents.! !!CrLfFileEditor methodsFor: 'model access' stamp: 'dtl 5/20/2001 21:22'!labelString	"For views to use a labels"	^ self currentFilePathName! !!CrLfFileEditor methodsFor: 'accessing' stamp: 'dtl 5/19/2001 17:01'!lineEndConvention: aSymbol	"See CrLfFileStream for the allowable values of aSymbol."	lineEndConvention := aSymbol! !!CrLfFileEditor methodsFor: 'initialize-release' stamp: 'ThierryGoubier 9/20/2013 15:18'!mvcWithLabel: aLabelString	| topView controllerClass fileContentsView |	CommandShell isMorphic		ifTrue: [ ^ self error: 'this method should be used only for MVC' ].	topView := (Smalltalk at: #StandardSystemView) new.	controllerClass := Smalltalk		at: #DeferredActionStandardSystemController		ifAbsent: [ Smalltalk at: #StandardSystemController ].	topView		model: self;		controller: controllerClass new;		label: aLabelString;		minimumSize: 200 @ 200.	topView borderWidth: 1.	fileContentsView := (Smalltalk at: #PluggableTextView)		on: self		text: #contents		accept: #put:		readSelection: #contentsSelection		menu: #fileContentsMenu:shifted:.	fileContentsView window: (0 @ 0 extent: 200 @ 140).	topView addSubView: fileContentsView.	^ topView controller! !!CrLfFileEditor methodsFor: 'initialize-release' stamp: 'dtl 12/13/2007 20:57'!openAsMorphLabel: aLabelString	| window textMorph |	textMorph := PluggableTextMorph		on: self		text: #contents		accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	textMorph font: self defaultFont.	window := (SystemWindow labelled: aLabelString) model: self.	window		addMorph: textMorph		frame: (0@0 corner: 1@1).	^ window! !!CrLfFileEditor methodsFor: 'initialize-release' stamp: 'dtl 6/29/2010 21:09'!openLabel: aLabelString	CommandShell isMorphic		ifTrue:			[^ (self openAsMorphLabel: aLabelString) openInWorld]		ifFalse:			[^ (self mvcWithLabel: aLabelString) open]! !!CrLfFileEditor methodsFor: 'model access' stamp: 'ThierryGoubier 9/20/2013 15:15'!put: aText 	| str newFileName fs |	viewStyle == #hex		ifTrue: [self inform: 'cannot save file in hex mode'.				^ false].	str := aText asString.	self contents: str.	(CommandShell fileExists: fileName inDirectory: directory)		ifTrue: [newFileName := self					getFileName: (CommandShell pathNameForDirectory: directory),						CommandShell pathSeparator , fileName.]		ifFalse: [newFileName := (CommandShell pathNameForDirectory: directory),						CommandShell pathSeparator , fileName].	newFileName ifNil: [^ false].	fs := (Smalltalk at: #CrLfFileStream) fileNamed: newFileName.	[fs isNil] whileTrue:		[self inform: 'cannot write file'.		newFileName := self getAnotherFileName: newFileName.		newFileName isNil			ifTrue:				[self inform: 'file not written'.				^ false]			ifFalse:				[fs := (Smalltalk at: #CrLfFileStream )fileNamed: newFileName]].	(str size < fs size)		ifTrue:			[(fs respondsTo: #truncate)				ifTrue:					[[fs truncate]						on: Error						do: [:ex | fs := self bogusTruncate: fs]]				ifFalse: [fs := self bogusTruncate: fs]].	fs nextPutAll: str.	fs close.	self updateFilePathWith: newFileName.	^ true! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 6/29/2001 23:22'!save	| controller |	self forceDirtyBuffer.	controller := self controllerForAccept.	controller ifNotNil: [controller accept]! !!CrLfFileEditor methodsFor: 'menus' stamp: 'ThierryGoubier 9/20/2013 15:17'!saveAs	| oldFilePath newFilePath controller |	oldFilePath := self currentFilePathName.	newFilePath := (Smalltalk at: #FillInTheBlank)					request: 'Enter a new file name'					initialAnswer: oldFilePath.	newFilePath isEmpty		ifFalse:			[self updateFilePathWith: newFilePath.			controller := self controllerForAccept.			controller ifNotNil:				[self forceDirtyBuffer.				controller accept]]! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 5/20/2001 19:39'!selectedClassOrMetaClass	"For support of the pretty printer menu option"	^ self class! !!CrLfFileEditor methodsFor: 'menus' stamp: 'dtl 5/20/2001 19:37'!selectedMessageCategoryName	"For support of the pretty printer menu option"	^ '-- all --'! !!CrLfFileEditor methodsFor: 'private' stamp: 'dtl 1/27/2013 22:33'!updateFilePathWith: aPathString	self fileName: (CommandShell localNameFor: aPathString).	self directory: (CommandShell directoryForPath: aPathString).	self changed: #relabel! !!CrLfFileEditor methodsFor: 'accessing' stamp: 'dtl 5/20/2001 12:45'!viewStyle: aSymbol	"#text or #hex"	viewStyle := aSymbol! !!CrLfFileEditor methodsFor: 'initialize-release' stamp: 'dtl 6/29/2010 21:09'!withLabel: aLabelString	"Same as #openLabel: but does not open the window in MVC"	CommandShell isMorphic		ifTrue:			[^ self openAsMorphLabel: aLabelString]		ifFalse:			[^ self mvcWithLabel: aLabelString]! !!ShellBuiltin commentStamp: 'dtl 2/1/2003 12:25' prior: 35034942!A shell builtin command, intended to be invoked by a CommandShell.A builtin command consists of: name - a String identifier, used by the CommandShell to identify and invoke the commmand. helpString - a String to describe the function of the command. procedure - a BlockContext with parameters to be passed by the CommandShell.Commands are implemented in instance methods. To create a new command, write anew command implementation method and a new help method for the command. Writea new class side instance creation method patterned after one of the existing commandsand install the instance creation method in an instance of CommandShell withCommandShell>>installCommand:.A command implementation is a method which receives six paramaters. The parameters areto be interpreted as follows:	- First parameter: The EvaluatorProxy which is evaluating the command. If a command fails,	  send #fail to this object.	- Second parameter: The CommandShell from which the command was evaluated. Use this	  for any additional parsing which may be required in the command implementation.	- Third parameter: The input stream for the command.	- Forth parameter: The output stream for the command.	- Fifth parameter: The error stream for the command.	- Sixth parameter: An array of optional command arguments.!!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!cd: commandShell	"Define command to set the current working directory. Answer an empty string	or #invalidCommand."	^ self name: 'cd'		help: #cdHelp		procedure: #cdCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!clear: commandShell	"Define command to clear the terminal display screen. Answer a string or an invalid	command message."	^ self name: 'clear'		help: #clearHelp		procedure: #clearCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'command dictionary creation' stamp: 'dtl 7/14/2002 12:11'!commandDictionaryFor: aCommandShell commands: commandNameArray	"Answer a Dictionary of ShellBuiltin instances suitable for use by a CommandShell"	"ShellBuiltin commandDictionaryFor: CommandShell new commands: #(cd: clear: copyToError: copyToOutput: edit: exit: fc: help: history: inspect: pwd: sls: sqsh: type:)"	^ commandNameArray		inject: Dictionary new		into:			[:d :cmd | | b |			b := self perform: cmd with: aCommandShell.			d at: b name put: b; yourself]! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!copyToError: commandShell	"Define command to copy the contents of (argArray at: 1) or stdin onto	stderr. This command exists only for purposes of testing stdin and pipelines	for PipeableEvaluator proxies."	^ self name: 'copyToError'		help: nil		procedure: #copyToErrorCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!copyToOutput: commandShell	"Define command to  copy the contents of (argArray at: 1) or stdin onto	stdout. This command exists only for purposes of testing stdin and pipelines	for PipeableEvaluator proxies."	^ self name: 'copyToOutput'		help: nil		procedure: #copyToOutputCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!edit: commandShell	"Define command to open an editor on each of the named files."	^ self name: 'edit'		help: #editHelp		procedure: #editCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!exit: commandShell	"Define command to exit the shell window. Answer a string or an invalid	command message."	^ self name: 'exit'		help: #exitHelp		procedure: #exitCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!fc: commandShell	"Define 'fix command' command. If argArray is emply, answer the last	command in the history list. If there is one argument, interpret it as an	integer index into the history list. Otherwise answer an invalid command	message."	^ self name: 'fc'		help: #fcHelp		procedure: #fcCommand:shell:input:output:error:arguments:		needsPrompt: false! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:03'!help: commandShell	"Define command to display help messages."	^ self name: 'help'		help: #helpHelp		procedure: #helpCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!history: commandShell	"Define command to display the command history list."	^ self name: 'history'		help: #historyHelp		procedure: #historyCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!inspect: commandShell	"Define command to open a Smalltalk inspector on the contents of stdin, or the	file(s) named on the command line."	^ self name: 'inspect'		help: #inspectHelp		procedure: #inspectCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'private' stamp: 'dtl 1/4/2002 21:28'!name: aString help: helpSelector procedure: procedureSelector needsPrompt: trueOrFalse	"Command definition methods use this method to create instances representing	shell builtin commands. The commands are installed in a CommandShell, and	later evaluated in the context of a PipeableEvaluator."	^ self new		name: aString;		helpSelector: helpSelector;		procedureSelector: procedureSelector;		needsPrompt: trueOrFalse! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!pwd: commandShell	"Define command to answer the current working directory (a string) or an	invalid command message."	^ self name: 'pwd'		help: #pwdHelp		procedure: #pwdCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!sls: commandShell	"Define command to for a simple directory contents lister"	^ self name: 'sls'		help: #slsHelp		procedure: #slsCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!snapshot: commandShell	"Define command to save the Squeak image."	^ self name: 'snapshot'		help: #snapshotHelp		procedure: #snapshotCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!sqsh: commandShell	"Define command to open a new shell window."	^ self name: 'sqsh'		help: #sqshHelp		procedure: #sqshCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!ttyExit: commandShell	"Define command to exit the Squeak shell and quit Squeak without saving the image."	^ self name: 'exit'		help: #ttyExitHelp		procedure: #ttyExitCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin class methodsFor: 'instance creation' stamp: 'dtl 8/4/2002 19:04'!type: commandShell	"Define command to answer how each name would be interpreted if used as a	command name."	^ self name: 'type'		help: #typeHelp		procedure: #typeCommand:shell:input:output:error:arguments:		needsPrompt: true! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 8/7/2002 12:56'!canAccessOSProcess	"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"	"self canAccessOSProcess"	| osp |	^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 1/25/2013 19:37'!cdCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Set the current working directory. Answer an empty string or #invalidCommand."	| newPath path arg pathCwd p |	argArray size == 0		ifTrue:			[newPath := commandShell home]		ifFalse:			[argArray size == 1				ifTrue:					[path := argArray at: 1.					(path = commandShell shellSyntax pathStringAboveRoot)						ifTrue:							[newPath := commandShell shellSyntax pathAboveRoot]						ifFalse:							[pathCwd := commandShell shellSyntax getCwdForPath: path.							arg := (path = CommandShell pathSeparator)								ifTrue: [path]								ifFalse: [commandShell shellSyntax												firstExpandedArgument: path												inDirectoryPath: pathCwd].							newPath := arg isEmpty								ifTrue: [arg]								ifFalse:									[p := commandShell shellSyntax newDirPath: arg from: pathCwd.									p ifNotNil: [CommandShell fullNameFor: p]]]]				ifFalse:					[myProxy fail.					^ commandShell invalidCommandMessage]].	newPath isNil		ifTrue:			["No directory found with this name"			myProxy fail.			stderr nextPutAll: argArray first, ': No such file or directory'; nextPut: Character lf]		ifFalse:			[(commandShell workingDirectory ~= newPath)				ifTrue:					[(newPath isEmpty or: [commandShell shellSyntax isDirectoryPath: newPath])						ifTrue:							[commandShell workingDirectory: newPath.							commandShell changed: #relabel.							commandShell environment ifNotNil:								[commandShell environment at: #PWD put: commandShell workingDirectory]]						ifFalse:							["File of this name exists, but is not a directory"							myProxy fail.							stderr nextPutAll: newPath, ': not a directory'; nextPut: Character lf]]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 19:58'!cdHelp	^ 'cd [path] - change default directory'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 8/4/2002 19:38'!clearCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Clear the terminal display screen. Answer a string or an invalid command message."	argArray size == 0 ifFalse:		[myProxy fail.		^ commandShell invalidCommandMessage].	commandShell startUpInNewSession.	commandShell changed: #clearText! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 19:59'!clearHelp	^ 'clear - clear screen'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 1/25/2013 19:17'!copyToErrorCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Copy the contents of (argArray at: 1) or stdin onto stderr. This	command exists only for purposes of testing stdin and pipelines	for PipeableEvaluator proxies."	| fs |	(argArray isNil or: [argArray size == 0])		ifTrue:			[stdin ifNotNil: [self copyUntilDoneFrom: stdin to: stderr]]		ifFalse:			[argArray do:				[:file |				(CommandShell fileExists: file)					ifTrue:						[fs := FileStream readOnlyFileNamed: file.						fs ifNotNil:							[self copyUntilDoneFrom: fs to: stderr.							fs close]]]]! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 1/25/2013 19:17'!copyToOutputCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Copy the contents of (argArray at: 1) or stdin onto stdout. This	command exists only for purposes of testing stdin and pipelines	for PipeableEvaluator proxies."	| fs |	(argArray isNil or: [argArray size == 0])		ifTrue:			[stdin ifNotNil: [self copyUntilDoneFrom: stdin to: stdout]]		ifFalse:			[argArray do:				[:file |				(CommandShell fileExists: file)					ifTrue:						[fs := FileStream readOnlyFileNamed: file.						fs ifNotNil:							[self copyUntilDoneFrom: fs to: stdout.							fs close]]]]! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 4/8/2007 10:21'!copyUntilDoneFrom: aPipe to: aStream	"Copy the contents of aPipe to aStream, where aPipe is the output of a process	proxy. Whenever new data is available, aPipe will trigger #dataReady. This	method responds to the #dataReady events until the end of the pipe is reached.	It is possible for the #atEnd check to give a false negative, so a timeout alarm	is used to prevent deadlock conditions."	| sema s |	sema := Semaphore new.	aPipe when: #dataReady send: #signal to: sema.	[aPipe atEndOfFile] whileFalse:		[self timeoutAfter: 200 notifying: sema.		sema wait. "Wait for data available"		[(s := aPipe next: 10000) isEmpty] whileFalse:			[aStream nextPutAll: s; flush]].	aPipe release.	^ aStream! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 1/26/2013 15:24'!dirEntryString: aDirectoryEntry	"Original code lifted from Lex Spoon's FileList>>fileNameFormattedFrom:sizePad:"	"self new dirEntryString: FileDirectory default entries first"	| folderString nameStr dateStr sizeStr date time |	folderString := ' [...]'.	CommandShell useFileSystem		ifTrue: [nameStr := aDirectoryEntry isDirectory				ifTrue: [(aDirectoryEntry perform: #basename), folderString]				ifFalse: [aDirectoryEntry perform: #basename].				date := aDirectoryEntry modificationTime asDate.				time := aDirectoryEntry modificationTime asTime.				sizeStr := aDirectoryEntry size asStringWithCommas]		ifFalse: [nameStr := aDirectoryEntry isDirectory				ifTrue: [aDirectoryEntry name , folderString]				ifFalse: [aDirectoryEntry name].				date := Date fromSeconds: aDirectoryEntry modificationTime.				time := Time fromSeconds: aDirectoryEntry modificationTime \\ 86400.				sizeStr := aDirectoryEntry fileSize asStringWithCommas].	dateStr := (date printFormat: #(3 2 1 $. 1 1 2)) , ' ' ,					(String streamContents: [:s | time print24: true on: s]).	^ nameStr , '    (' , dateStr , ' ' , sizeStr , ')'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 1/28/2013 21:45'!editCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Open an editor on each of the named files."	| controllers inputString expandedName |	(argArray isNil or: [argArray size == 0])		ifTrue:			["When taking input from a command pipeline, the input must be			read into inputString now. This is because, in MVC, the CrLfFileEditor			is scheduled to be created later, and the input pipe will be closed by			the caller of this method before the CrLfFileEditor ever has a chance			to read it."			| workingDir |			inputString := stdin isNil				ifTrue:					['']				ifFalse:					[(self copyUntilDoneFrom: stdin to: (WriteStream on: String new)) contents						replaceAll: Character lf with: Character cr].			workingDir := CommandShell useFileSystem					ifTrue: [commandShell workingDirectory perform: #asFileReference]					ifFalse: [(Smalltalk at: #FileDirectory) on: commandShell workingDirectory].			commandShell scheduleToEvaluate:				[CrLfFileEditor					openOn: inputString					withLabel: (commandShell commandHistory isEmpty									ifTrue: ['']									ifFalse: [commandShell commandHistory last])					inDirectory: workingDir					defaultFileName: 'buffer.txt']]		ifFalse:			[controllers := argArray collect:				[:arg |				"Expand arguments to convert them to full pathnames as expected by CrLfFileEditor"				expandedName := commandShell shellSyntax									firstExpandedArgument: arg									inDirectoryPath: commandShell shellSyntax workingDirectory.				CrLfFileEditor fileNamed: expandedName withLabel: arg].			CommandShell isMorphic				ifFalse:					[controllers						inject: nil						into:							[:prev :c |							prev ifNotNil:								[c addDeferredUIMessage: [prev open]].							c].					commandShell scheduleToEvaluate: [controllers last open]]				ifTrue:					[controllers do: [:e |						WorldState addDeferredUIMessage: [e openInWorld]]]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:00'!editHelp	^ 'edit [files...] - edit the contents of stdin or the named files'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 8/4/2002 19:38'!exitCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Exit the shell window. Answer a string or an invalid command message."	argArray size == 0 ifFalse:		[myProxy fail.		^ commandShell invalidCommandMessage].	commandShell changed: #exit! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:00'!exitHelp	^ 'exit - exit shell and close window'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 9/15/2012 19:00'!fcCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Fix command. If argArray is emply, answer the last command in the	history list. If there is one argument, interpret it as an integer index	into the history list. Otherwise answer an invalid command message."	| index cmd |	commandShell commandHistory ifNotNil:		[commandShell scheduleToEvaluate:			[argArray size == 0				ifTrue:					[cmd := commandShell editCommand: (commandShell historyAt: 0)]				ifFalse:					[[index := (argArray at: 1) asNumber]								on: Error								do: [:ex | index := nil].					cmd := commandShell editCommand:							(index isNil								ifTrue: ['']								ifFalse: [commandShell historyAt: index])].					commandShell notifyPrompt.					cmd isEmpty ifFalse:						[commandShell outputStream nextPutAll: cmd; cr; flush; processCommand: cmd echo: false]]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:01'!fcHelp	^ 'fc [i] - "fix command", command number i from history list, or -i, or the last command'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 2/24/2013 10:25'!helpCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	| topic command cacheStream |	argArray size == 0		ifTrue:			[cacheStream := WriteStream on: String new.			(commandShell builtinCommands				collect: [:c | c helpSelector] thenSelect: [:s | s notNil])					asArray sort do:						[:sel | cacheStream nextPutAll: (self perform: sel);								nextPut: Character lf].			cacheStream				nextPutAll: 'simple Smalltalk expression!! evaluates a simple expression as a doIt';				nextPut: Character lf;				nextPutAll: '<ctl-C> to interrupt a running program';				nextPut: Character lf;				nextPutAll: '<ctl-D> to end input to a running program';				nextPut: Character lf.			stdout nextPutAll: cacheStream contents]		ifFalse:			[topic := argArray at: 1.			command := commandShell builtinCommands at: topic ifAbsent: [^ self].			command helpSelector ifNotNil:				[stdout nextPutAll: (self perform: command helpSelector); nextPut: Character lf]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:01'!helpHelp	^ 'help - help on sqsh commands'! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/31/2001 20:08'!helpSelector	^ helpSelector! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/31/2001 20:08'!helpSelector: aSymbol	helpSelector := aSymbol! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 12/29/2002 10:45'!historyCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Display the command history list."	| ws rs |	ws := WriteStream on: Character lf asString.	rs := ReadStream on: commandShell commandHistory.	[rs atEnd]		whileFalse: [ws nextPutAll: rs next.			ws nextPutAll: ' '.			ws nextPutAll: rs next.			rs atEnd				ifFalse: [ws nextPut: Character lf]].	stdout nextPutAll: (ws contents, Character lf asString)! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:02'!historyHelp	^ 'history - display command history list'! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 12/23/2007 00:41'!imageName 	"After Squeak version 3.6, #imageName was moved to SmalltalkImage "	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk imageName]) current imageName! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 1/25/2013 19:17'!inspectCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Open a Smalltalk inspector on the contents of stdin, or the file(s) named on the	command line."	| fs inputString pathName |	(argArray isNil or: [argArray size == 0])		ifTrue:			[stdin ifNotNil:				["When taking input from a command pipeline, the input must be				read into inputString now. This is because, in MVC, the inspector				is scheduled to be created later, and the input pipe will be closed by				the caller of this method before the deferred block ever has a				chance to read it."				inputString := stdin ifNotNil:					[(self copyUntilDoneFrom: stdin to: (WriteStream on: String new)) contents						replaceAll: Character lf with: Character cr].				commandShell scheduleToEvaluate: [inputString inspect]]]		ifFalse:			[argArray isEmpty				ifTrue:					[commandShell scheduleToEvaluate: [nil inspect]]				ifFalse:					[argArray do:						[:e |						pathName := commandShell shellSyntax							firstExpandedArgument: e							inDirectoryPath: commandShell shellSyntax workingDirectory.						fs := (CommandShell fileExists: pathName)							ifTrue: [FileStream readOnlyFileNamed: pathName]							ifFalse: [nil].						fs isNil							ifTrue:								[commandShell scheduleToEvaluate: [nil inspect]]							ifFalse:								[commandShell scheduleToEvaluate:									[(fs contentsOfEntireFile									replaceAll: Character lf									with: Character cr) inspect.									fs close]]]]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:02'!inspectHelp	^ 'inspect [files...] - open an inspector on the contents of stdin or the named files'! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/26/2001 19:54'!name	^ name! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/26/2001 19:54'!name: aString	name := aString! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/27/2001 01:24'!needsPrompt	"True if the command should be followed by a prompt"	^ needsPrompt ifNil: [needsPrompt := true]! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/27/2001 01:22'!needsPrompt: trueOrFalse	"True if the command should be followed by a prompt"	needsPrompt := trueOrFalse! !!ShellBuiltin methodsFor: 'evaluating' stamp: 'dtl 2/1/2003 16:21'!performWith: argumentArray evaluator: aPipeableEvaluator shell: aCommandShell input: inputStream output: outputStream error: errorStream	self perform: self procedureSelector		withArguments: (Array			with: aPipeableEvaluator			with: aCommandShell			with: inputStream			with: outputStream			with: errorStream			with: argumentArray).	aPipeableEvaluator complete! !!ShellBuiltin methodsFor: 'printing' stamp: 'dtl 3/22/2003 13:53'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' for '.	self name printOn: aStream.! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/31/2001 20:09'!procedureSelector	^ procedureSelector! !!ShellBuiltin methodsFor: 'accessing' stamp: 'dtl 12/31/2001 20:09'!procedureSelector: aSymbol	procedureSelector := aSymbol! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 4/20/2003 11:50'!pwdCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Answer the current working directory (a string) or an invalid command message."	| directoryString |	directoryString := commandShell workingDirectory.	directoryString isEmpty ifTrue: [directoryString := self nullDirectoryString].	argArray size == 0 ifFalse:		[myProxy fail.		^ commandShell invalidCommandMessage].	stdout nextPutAll: directoryString; nextPut: Character lf! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:02'!pwdHelp	^ 'pwd - print current working directory'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 2/24/2013 10:25'!slsCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Simple directory contents lister"	| filePatterns d entries names dirs files entry linesToPrint lineCount cacheStream |	"A small value of linesToPrint will prevent an ExternalCommandShell from	overdriving is stdout stream. Maybe. A larger value allows faster updates to	an interactive CommandShell display."	linesToPrint := 16.	(argArray isNil or: [argArray size == 0])		ifTrue:			["Contents of current directory."			filePatterns := Array with: '*']		ifFalse:			["List named files"			filePatterns := argArray].	CommandShell useFileSystem		ifTrue: [d := commandShell workingDirectory perform: #asFileReference]		ifFalse: [d := (Smalltalk at: #FileDirectory) on: commandShell workingDirectory].	entries := d entries.	names := Set new.	filePatterns do: [:pat | names addAll: (commandShell shellSyntax glob: pat inDirectory: commandShell workingDirectory)].	dirs := OrderedCollection new.	files := OrderedCollection new.	names asArray sort do:		[:n |		entry := entries detect: [:e | (CommandShell entryName: e) = n].		entry isDirectory			ifTrue: [dirs add: entry]			ifFalse: [files add: entry]].	linesToPrint := 5.	lineCount := 1.	cacheStream := WriteStream on: String new.	dirs do:	[:dir |		lineCount := lineCount + 1.		cacheStream nextPutAll: (self dirEntryString: dir); nextPut: Character lf.		(lineCount > linesToPrint) ifTrue:			[stdout nextPutAll: cacheStream contents.			cacheStream := WriteStream on: String new.			lineCount := 1]].	files do: [:file |		lineCount := lineCount + 1.		cacheStream nextPutAll: (self dirEntryString: file); nextPut: Character lf.		(lineCount > linesToPrint) ifTrue:			[stdout nextPutAll: cacheStream contents.			cacheStream := WriteStream on: String new.			lineCount := 1]].	stdout nextPutAll: cacheStream contents.! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:06'!slsHelp	^ 'sls [filepatterns] - list current directory contents'! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 12/23/2007 12:23'!snapshot: save andQuit: quit	"After Squeak version 3.6, #snapshot:andQuit: was moved to SmalltalkImage "	^ ((Smalltalk classNamed: 'SmalltalkImage')		ifNil: [^ Smalltalk snapshot: save andQuit: quit]) current snapshot: save andQuit: quit! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 12/23/2007 12:23'!snapshotCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Save the image"	| s |	Smalltalk at: #WorldState ifPresent:		[:ws |		s := Semaphore new.		commandShell safeToExit: false.		stdout nextPutAll: self imageName; nextPut: Character lf.		ws addDeferredUIMessage:			[self snapshot: true andQuit: false.			s ifNotNil: [s signal] "s is nil when resuming after snapshot"].		s ifNotNil: [s wait]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 1/28/2013 21:47'!snapshotHelp	^ 'snapshot - snapshot and save image'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 11/30/2010 07:33'!sqshCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Open a new shell window."	| ws |	argArray size == 0		ifTrue:			[commandShell scheduleToEvaluate: [commandShell class open]]		ifFalse:			[ws := WriteStream on: String new.			argArray inject: true into:				[:first :each |				first ifFalse: [ws nextPut: Character space].				ws nextPutAll: each.				false].			commandShell scheduleToEvaluate: [commandShell class openLabel: ws contents]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:03'!sqshHelp	^ 'sqsh [title] - open new shell window'! !!ShellBuiltin methodsFor: 'private' stamp: 'dtl 1/25/2003 14:28'!timeoutAfter: milliseconds notifying: sema	"Under certain conditions it is possible to receive a false negative on	and end of file check (for example, closing the writer end of a pipe	from Squeak, and immediately checking for end of file on the reader	in the same Squeak method). If looping while waiting on end of file,	this timeout method can be used to prevent a deadlock condition."	[(Delay forMilliseconds: milliseconds) wait.	sema signal] fork! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 12/29/2002 10:51'!ttyExitCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Exit an ExternalCommandShell by quitting Squeak. The image is not saved and the shutdown	list is not processed."	commandShell safeToExit		ifTrue: [Smalltalk quitPrimitive]		ifFalse: [stderr nextPutAll: 'cannot exit in same command line with snapshot'; nextPut: Character lf]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 7/14/2002 12:24'!ttyExitHelp	^ 'exit - exit shell and quit Squeak without saving image'! !!ShellBuiltin methodsFor: 'implementations' stamp: 'dtl 12/29/2002 10:51'!typeCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray	"Answer how each name would be interpreted if used as a command name."	| results exe |	argArray size == 0		ifTrue:			[^ '']		ifFalse:			[results := WriteStream on: Array new.			argArray do:			[:arg |			(commandShell isBuiltInCommand: arg)				ifTrue:					[results nextPut: arg, ' is a shell builtin']				ifFalse:					[self canAccessOSProcess					 	ifFalse:							[self inform:								((Smalltalk hasClassNamed: #OSProcess)									ifTrue: [(Smalltalk at: #OSProcess) accessor class name]									ifFalse: [commandShell class name]), ' cannot access system'.							stdout nextPutAll: 'cannot access system'; nextPut: Character lf.							^ self].					exe := commandShell shellSyntax findExecutablePathFor: arg inDirectoryPath: commandShell workingDirectory.					(commandShell shellSyntax isExecutable: exe) ifFalse: [exe := nil].					exe isNil						ifTrue: [results nextPut: arg, ': not found']								ifFalse: [results nextPut: arg, ' is ', exe]]].				results contents do: [:e | stdout nextPutAll: e; nextPut: Character lf]]! !!ShellBuiltin methodsFor: 'help messages' stamp: 'dtl 12/31/2001 20:03'!typeHelp	^ 'type [names...] - indicate how each name would be interpreted if used as a command'! !"CommandShell-Commands"!!CommandShellTranscript commentStamp: 'dtl 1/20/2007 09:11' prior: 0!CommandShellTranscript is a user interface for a ComandShell. It behaves like a simple teletype text terminal.!!ExternalCommandShell commentStamp: '<historical>' prior: 0!On some platforms it is possible to use OSProcess to read and write the standard input, output and error streams. In that case, ExternalCommandShell allows Squeak to be used as a traditional text mode command shell.When used in a headless Squeak image, ExternalCommandShell behaves like a traditional Unix command shell, except that it has the ability to evaluate Smalltalk expressions as well as other programs and commands. On a Unix system running a Squeak shell in a headless image, the Smalltalk display can be opened by entering the command "UnixProcess recapitate" at the Squeak shell prompt.ExternalCommandShell has one instance, which is accessible as "ExternalCommandShell inSmalltalk". The shell can be stopped with "ExternalCommandShell stop" and restarted with "ExternalCommandShell start". If the shell is running when Squeak is shut down, it will be automatically be restarted when the image is restarted.!!CommandShellTranscript commentStamp: 'dtl 1/20/2007 09:11' prior: 35085383!CommandShellTranscript is a user interface for a ComandShell. It behaves like a simple teletype text terminal.!!CommandShellTranscript class methodsFor: 'instance creation' stamp: 'dtl 1/20/2007 10:32'!commandShell: cliShell	| ttyDisplay |	ttyDisplay := self new cliShell: cliShell.	cliShell outputStream: ttyDisplay; errorStream: ttyDisplay.	cliShell addDependent: ttyDisplay.	^ ttyDisplay! !!CommandShellTranscript class methodsFor: 'defaults' stamp: 'dtl 1/17/2007 06:29'!defaultWindowName	^ 'Squeak Shell'! !!CommandShellTranscript class methodsFor: 'instance creation' stamp: 'dtl 1/17/2007 06:29'!new	^ (self on: (String new: 1000)) initialize! !!CommandShellTranscript class methodsFor: 'instance creation' stamp: 'dtl 1/17/2007 06:29'!open	"CommandShell open"	^ self new open! !!CommandShellTranscript class methodsFor: 'instance creation' stamp: 'dtl 1/17/2007 06:29'!openLabel: aString	"CommandShell openLabel: self defaultWindowName"	^ self new openLabel: aString! !!CommandShellTranscript class methodsFor: 'window color' stamp: 'dtl 6/29/2010 00:07'!windowColorSpecification	"Answer a WindowColorSpec object that declares my preference"	| windowColorSpec |	windowColorSpec := Smalltalk				at: #WindowColorSpec				ifAbsent: [^ self error: 'this image does not support WindowColorSpec'].	^ windowColorSpec		classSymbol: self name		wording: 'Squeak Shell'		brightColor: (Color lightGray lighter paler)		pastelColor: (Color lightGray lighter lighter paler paler)		helpMessage: 'CommandShell window for evaluating Smalltalk and OS commands'! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 6/24/2001 19:09'!activeController	"In Morphic, alway nil. In MVC, the controller that most recently invoked	a command."	^ activeController! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:28'!activeController: aController	"In Morphic, alway nil. In MVC, the controller that most recently invoked	a command."	activeController := aController! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!bs	self position > 0 ifTrue: [^ self skip: -1].	self changed: #bs! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 1/17/2007 06:28'!characterLimit	"Tell the views how much to retain on screen"	^ 20000! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 11/8/2007 19:38'!checkSttyForEvent: keyboardEvent	"Check for interrupt characters and such. Consume interrupt character and	answer nil, otherwise answer keyboardEvent."	(self isInterruptEvent: keyboardEvent)		ifTrue:			[self handleInterruptCharacterEvent.			^ nil].	(self isEndOfFileEvent: keyboardEvent)		ifTrue:			[self cliShell doEndOfFile.			^ nil].	^ keyboardEvent! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!clear	"Clear all characters and redisplay the view"	self changed: #clearText.	self reset! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 12/11/2007 19:00'!cliShell	"Answer the value of cliShell"	^ cliShell ifNil: [cliShell := CommandShell new]! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:28'!cliShell: commandShell	"Set the value of cliShell"	cliShell := commandShell! !!CommandShellTranscript methodsFor: 'initialize-release' stamp: 'dtl 1/20/2007 11:56'!close	super close.	self changed: #exit! !!CommandShellTranscript methodsFor: 'model protocol' stamp: 'dtl 6/17/2015 21:22'!codePaneMenu: aMenu shifted: shifted	"Note that unless we override perform:orSendTo:, PluggableTextController will respond	to all menu items.	If StringHolder is not present, try to delegate to Workspace instead."	^ (Smalltalk		at: #StringHolder		ifAbsent: [Smalltalk				at: #Workspace				ifAbsent: [^ self ]]) basicNew codePaneMenu: aMenu shifted: shifted! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 11/8/2007 20:29'!confirmBeforeKilling: externalProxies	"Interrupt character detected, do interrupt stuff."	| msgStrm |	(externalProxies size > 0)		ifTrue:			[msgStrm := WriteStream on: String new.			(externalProxies size > 1)				ifTrue: [msgStrm nextPutAll: 'kill processes']				ifFalse: [msgStrm nextPutAll: 'kill process'].			externalProxies do: [:e | msgStrm nextPutAll: ' ', e pid printString, ' (', e programName, ')'].			msgStrm nextPut: $?.			(self confirm: msgStrm contents)				ifTrue:					[externalProxies reverseDo: [:e | e terminate]]]! !!CommandShellTranscript methodsFor: 'model protocol' stamp: 'dtl 12/11/2007 20:19'!defaultLabelStringBlock	^ [ | directoryString |	directoryString := self cliShell workingDirectory.	directoryString isEmpty ifTrue: [directoryString := self cliShell shellSyntax nullDirectoryString].	self class defaultWindowName, ': ', directoryString]! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!endEntry	"Display all the characters since the last endEntry, and reset the stream"	self changed: #appendEntry.	self reset! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 1/20/2007 09:42'!filterAndForward: aCharacter	"Filter aCharacter, taking special action if needed. If a child process is active,	forward aCharacter to the child and answer nil. Otherwise answer aCharacter."	^ self cliShell filterAndForward: aCharacter! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 11/7/2007 06:54'!filterAndForwardEvent: keyboardEvent 	"Filter keyboardEvent, taking special action if needed. If a child process	is active, forward keyboardEvent to the child and answer nil. Otherwise	answer keyboardEvent."	^ (self checkSttyForEvent: keyboardEvent)		ifNotNil: [self cliShell filterAndForwardEvent: keyboardEvent]! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!flush	self endEntry! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 11/8/2007 19:38'!handleInterruptCharacterEvent	"Interrupt character detected, do interrupt stuff."	self confirmBeforeKilling: (self cliShell foregroundProxies		select: [:e | e isExternalProcess]		thenCollect: [:r | r processProxy]).	self confirmBeforeKilling: (self cliShell backgroundProxies		select: [:e | e isExternalProcess]		thenCollect: [:r | r processProxy]).! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 12/25/2007 16:30'!isEndOfFileEvent: keystrokeEvent 	"A <ctl>d event, represented either as character value 4, or as $d with	the control or meta key. The actual representation varies on different	versions of Squeak."	^ keystrokeEvent keyValue == 4		or: [keystrokeEvent keyCharacter = $d				and: [keystrokeEvent controlKeyPressed]]! !!CommandShellTranscript methodsFor: 'input character filtering' stamp: 'dtl 12/25/2007 16:30'!isInterruptEvent: keystrokeEvent 	"A <ctl>c event, represented either as character value 3, or as $c with	the control or meta key. The actual representation varies on different	versions of Squeak."	^ keystrokeEvent keyValue == 3		or: [keystrokeEvent keyCharacter = $c				and: [keystrokeEvent controlKeyPressed]]! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 1/22/2007 21:24'!keyboardConnector	^ self cliShell keyboardConnector! !!CommandShellTranscript methodsFor: 'model protocol' stamp: 'dtl 12/11/2007 20:20'!labelString	^ self labelStringBlock value! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 12/11/2007 20:18'!labelStringBlock	"Answer a block that when evaluated answers a string to be used	as the window label."	^ labelStringBlock ifNil: [labelStringBlock := self defaultLabelStringBlock]! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 12/11/2007 20:16'!labelStringBlock: aBlockAnsweringAString	labelStringBlock := aBlockAnsweringAString! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 1/20/2007 11:44'!lastPromptString	"Answer the value of lastPromptString"	^ lastPromptString ifNil: [lastPromptString := self cliShell promptString]! !!CommandShellTranscript methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:28'!lastPromptString: anObject	"Set the value of lastPromptString"	lastPromptString := anObject! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 12/11/2007 21:35'!nextPut: anObject 	self scheduleToEvaluate:		[super nextPut: anObject]! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 12/11/2007 21:35'!nextPutAll: characters	"Convert line terminators to cr. Note that #nextPut: does not do this conversion."	self scheduleToEvaluate:		[characters isEmpty ifFalse:			[super nextPutAll: (characters copyReplaceAll: String lf with: String cr).			self flush]]! !!CommandShellTranscript methodsFor: 'initialize-release' stamp: 'dtl 12/11/2007 20:31'!open	^ self openLabel: nil "invoke default label setting block"! !!CommandShellTranscript methodsFor: 'initialize-release' stamp: 'dtl 12/11/2007 20:30'!openAsMorphLabel: labelString 	"Build a morph viewing this stream"	| window textMorph |	window := SystemWindow new model: self.	textMorph := ShellWindowMorph					on: self					text: nil					accept: nil					readSelection: nil					menu: #codePaneMenu:shifted:.	textMorph acceptOnCR: true.	window addMorph: textMorph frame: (0@0 corner: 1@1).	self prompt.	labelString ifNotNil: [self labelStringBlock: [labelString]].	self changed: #relabel.	^ window! !!CommandShellTranscript methodsFor: 'initialize-release' stamp: 'ThierryGoubier 9/20/2013 15:20'!openLabel: aString 	"Open a window on this stream. This is copied from the corresponding method in	TranscriptStream."	| topView controllerClass codeView |	CommandShell isMorphic ifTrue: [^ (self openAsMorphLabel: aString) openInWorld].	aString ifNotNil: [self labelStringBlock: [aString]].	topView := (Smalltalk at: #StandardSystemView) new.	controllerClass := Smalltalk		at: #DeferredActionStandardSystemController		ifAbsent: [(Smalltalk at: #StandardSystemController)].		topView model: self;			controller: controllerClass new;			borderWidth: 1;			label: aString;			minimumSize: 100 @ 50.	codeView := (Smalltalk at: #ShellWindowView)					on: self					text: nil					accept: nil					readSelection: nil					menu: #codePaneMenu:shifted:.	codeView window: (0@0 extent: 200@200).	topView addSubView: codeView.	topView controller addDeferredUIMessage:		[self changed: #relabel.		self prompt].	topView controller open.! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!pastEndPut: anObject	"If the stream reaches its limit, just output the contents and reset."	self endEntry.	^ self nextPut: anObject! !!CommandShellTranscript methodsFor: 'model protocol' stamp: 'dtl 1/17/2007 06:29'!perform: selector orSendTo: otherTarget	"Selector was just chosen from a menu by a user.  If can respond, then	perform it on myself. If not, send it to otherTarget, presumably the	editPane from which the menu was invoked."	(self respondsTo: selector)		ifTrue: [^ self perform: selector]		ifFalse: [^ otherTarget perform: selector]! !!CommandShellTranscript methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:59'!processCommand: aCommandString	"Evaluate aCommandString in a separate Smalltalk process. This permits the	user interface to remain responsive."	^ self processCommand: aCommandString echo: true! !!CommandShellTranscript methodsFor: 'evaluation' stamp: 'dtl 9/15/2012 18:56'!processCommand: aCommandString echo: showCommand	"Evaluate aCommandString in a separate Smalltalk process. This permits the	user interface to remain responsive. If showCommand is true, update dependent	views in order to display the command."	^ self cliShell processCommand: aCommandString echo: showCommand! !!CommandShellTranscript methodsFor: 'command prompt' stamp: 'dtl 12/11/2007 21:36'!prompt	self scheduleToEvaluate:		[self show: self cliShell promptString.		self restoreSelectionMarker]! !!CommandShellTranscript methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 11:46'!promptString	"Dependents call this when restoring the prompt string display"	self flag: #FIXME. "change the dependents to call #lastPromptString"	^ self lastPromptString! !!CommandShellTranscript methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 11:42'!promptTwo	self show: self cliShell promptStringTwo.	self restoreSelectionMarker! !!CommandShellTranscript methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 11:40'!restorePrompt	self flag: #FIXME. "remember last prompt string and redisplay it"	self prompt! !!CommandShellTranscript methodsFor: 'command prompt' stamp: 'dtl 11/30/2010 07:33'!restoreSelectionMarker	"Restore selection marker in MVC"	| c |	CommandShell isMorphic		ifFalse:			[c := self activeController.			self scheduleToEvaluate: [c initializeSelection]]! !!CommandShellTranscript methodsFor: 'evaluation' stamp: 'dtl 6/29/2010 22:15'!scheduleToEvaluate: aBlock	"Evaluate aBlock, typically to create a new scheduled window. Make it work in	both Morphic and MVC. In Morphic, just evaluate aBlock, but in MVC, put it in	a queue for evaluation within a control loop. This method may be sent from	a process running independent of MVC controller scheduling.		Newer Squeak images implement #addDeferredUIMessage in the current	project, eliminating the need for an #isMorphic test. This mechanism is not	available for older images or for Pharo."	CommandShell isMorphic		ifTrue: [WorldState addDeferredUIMessage: aBlock]		ifFalse: [self activeController ifNotNil: [activeController addDeferredUIMessage: aBlock]]! !!CommandShellTranscript methodsFor: 'stream extensions' stamp: 'dtl 1/17/2007 06:29'!show: anObject  "TextCollector compatibility"	self nextPutAll: anObject asString; endEntry! !!CommandShellTranscript methodsFor: 'updating' stamp: 'dtl 9/15/2012 18:22'!update: event	event == #prompt	"display $PS1"		ifTrue: [^ self prompt].	event == #alternatePrompt	"display $PS2"		ifTrue: [^ self promptTwo].	event == #restorePrompt	"restore last prompt display"		ifTrue: [self flag: #FIXME. ^ self prompt].	event == #exit		ifTrue: [^ self close].	event == #clearText		ifTrue: [^ self clear].	event == #interruptCharacter		ifTrue: [^ self handleInterruptCharacterEvent].	event == #relabel		ifTrue: [^ self changed: event].	"Treat anything other than the symbols above as a string to be displayed on	the command line in the view"	self show: event asString; cr.! !!ExternalCommandShell commentStamp: '<historical>' prior: 35085556!On some platforms it is possible to use OSProcess to read and write the standard input, output and error streams. In that case, ExternalCommandShell allows Squeak to be used as a traditional text mode command shell.When used in a headless Squeak image, ExternalCommandShell behaves like a traditional Unix command shell, except that it has the ability to evaluate Smalltalk expressions as well as other programs and commands. On a Unix system running a Squeak shell in a headless image, the Smalltalk display can be opened by entering the command "UnixProcess recapitate" at the Squeak shell prompt.ExternalCommandShell has one instance, which is accessible as "ExternalCommandShell inSmalltalk". The shell can be stopped with "ExternalCommandShell stop" and restarted with "ExternalCommandShell start". If the shell is running when Squeak is shut down, it will be automatically be restarted when the image is restarted.!!ExternalCommandShell class methodsFor: 'instance creation' stamp: 'dtl 2/18/2007 14:09'!default	^ ExternalShell! !!ExternalCommandShell class methodsFor: 'class initialization' stamp: 'dtl 5/20/2011 19:12'!initialize	"If OSProcess is in this  image, it important that #startup be send to	ThisOSProcess before it is sent to ExternalCommandShell. Therefore ensure	that ExternalCommandShell appears after ThisOSProcess in the system	startup list."	"ExternalCommandShell initialize"	ExternalShell ifNotNil:		[ExternalShell stop.		ExternalShell := nil].	Smalltalk addToStartUpList: self! !!ExternalCommandShell class methodsFor: 'instance creation' stamp: 'dtl 7/12/2002 08:01'!new	self notify: self name, ': Only one instance of ExternalCommandShell or any of its subclasses should exist in the image. Use #inSmalltalk to obtain the singleton instance.'.	self shouldNotImplement! !!ExternalCommandShell class methodsFor: 'instance creation' stamp: 'dtl 11/8/2007 20:21'!onTty	"Answer a singleton instance. When called the first time, the shell is created	and its evaluation loop is started. Subsequent calls answer the singleton	instance, which may or may not be running. Use the #stop and #start messages	to control the shell once it has been created."	"ExternalCommandShell onTty"	^ ExternalShell ifNil: [ExternalShell := self basicNew initialize].! !!ExternalCommandShell class methodsFor: 'class initialization' stamp: 'dtl 8/4/2002 16:17'!open	self start! !!ExternalCommandShell class methodsFor: 'system startup' stamp: 'dtl 9/3/2010 17:10'!shutDown: quitting	"System is going down. Stop input processing so we will not try to 	refer to invalid IO streams when the image is restarted. If OSProcess	is in this  image, it important that #startup be send to ThisOSProcess	before it is sent to ExternalCommandShell. Therefore ensure that	ExternalCommandShell appears after ThisOSProcess in the system startup	list."	| shell |	quitting		ifTrue: [(shell := self default)			ifNotNil: [shell shutdownInOldSession]]! !!ExternalCommandShell class methodsFor: 'start-stop' stamp: 'dtl 8/7/2002 19:29'!start	"ExternalCommandShell start"	"ExternalCommandShell stop"	^ self onTty start! !!ExternalCommandShell class methodsFor: 'system startup' stamp: 'dtl 9/3/2010 17:10'!startUp: resuming	| shell |	resuming ifTrue:		[(shell := self default)			ifNotNil: [shell startUpInNewSession]]! !!ExternalCommandShell class methodsFor: 'start-stop' stamp: 'dtl 8/7/2002 19:29'!stop	"ExternalCommandShell stop"	"ExternalCommandShell start"	^ self onTty stop! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 2/18/2007 11:59'!cliShell	"Answer the value of cliShell"	^ cliShell! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:24'!cliShell: anObject	"Set the value of cliShell"	cliShell := anObject! !!ExternalCommandShell methodsFor: 'interrupt handling' stamp: 'dtl 2/18/2007 15:57'!confirm: queryString	"Put up a yes/no menu with caption queryString. Answer true if the 	response is yes, false if no."	self flag: #FIXME. "bypass the dialog and assume true"	self cliShell backgroundMessageQueue addLast: queryString, ' (yes)', Character lf asString.	^ true! !!ExternalCommandShell methodsFor: 'input character filtering' stamp: 'dtl 11/8/2007 20:26'!confirmBeforeKilling: externalProxies	"Interrupt character detected, do interrupt stuff."	| msgStrm |	(externalProxies size > 0)		ifTrue:			[msgStrm := WriteStream on: String new.			(externalProxies size > 1)				ifTrue: [msgStrm nextPutAll: 'kill processes']				ifFalse: [msgStrm nextPutAll: 'kill process'].			externalProxies do: [:e | msgStrm nextPutAll: ' ', e pid printString, ' (', e programName, ')'].			msgStrm nextPut: $?.			(self confirm: msgStrm contents)				ifTrue:					[externalProxies reverseDo: [:e | e terminate]]]! !!ExternalCommandShell methodsFor: 'defaults' stamp: 'dtl 12/30/2002 10:45'!defaultBuiltinCommands	"The commands which make sense in a headless tty environment"	^ #(cd: copyToError: copyToOutput: snapshot: ttyExit: help: history: pwd: sls: type:)! !!ExternalCommandShell methodsFor: 'input processing' stamp: 'dtl 3/20/2007 06:15'!disableInputProcessing	self inputStream removeDependent: self; disableEventHandling! !!ExternalCommandShell methodsFor: 'interrupt handling' stamp: 'dtl 2/18/2007 15:49'!doInterruptCharHandler	"Interrupt character detected, do interrupt stuff."	self confirmBeforeKilling: (self cliShell foregroundProxies		select: [:e | e isExternalProcess]		thenCollect: [:r | r processProxy]).	self confirmBeforeKilling: (self cliShell backgroundProxies		select: [:e | e isExternalProcess]		thenCollect: [:r | r processProxy]).! !!ExternalCommandShell methodsFor: 'command history' stamp: 'dtl 1/20/2007 14:02'!editCommand: aString	self flag: #FIXME. "should interact with tty"	^ super editCommand: aString! !!ExternalCommandShell methodsFor: 'input processing' stamp: 'dtl 3/20/2007 06:14'!enableInputProcessing	self inputStream addDependent: self; enableEventHandling! !!ExternalCommandShell methodsFor: 'input processing' stamp: 'dtl 9/15/2012 18:51'!handleInput: str 	| rs line |	self lineBuffer nextPutAll: str.	[self lineBuffer contents includes: Character lf]		whileTrue: [rs := ReadStream on: lineBuffer contents.			self lineBuffer: nil.			line := rs upTo: Character lf.			self cliShell command: line echo: false.			self lineBuffer nextPutAll: rs upToEnd]! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 3/12/2007 18:44'!initialize	super initialize.	self cliShell: (CommandShell new			installCommands: self defaultBuiltinCommands;			promptString: 'sqsh> ';			addDependent: self;			yourself).	self setStdioStreams! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 7/12/2002 19:15'!inputStream	^ inputStream! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:24'!inputStream: externalStream	inputStream := externalStream! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:24'!isRunning	"True if my evaluation loop should be running. This instance variable supports	restarting the evaluation loop after an image restart."	^ isRunning ifNil: [isRunning := false]! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:24'!isRunning: trueOrFalse	"True if my evaluation loop should be running. This instance variable supports	restarting the evaluation loop after an image restart."	isRunning := trueOrFalse! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 2/24/2013 10:23'!lineBuffer	"Answer the value of lineBuffer"	^ lineBuffer ifNil: [lineBuffer := WriteStream on: String new]! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:24'!lineBuffer: anObject	"Set the value of lineBuffer"	lineBuffer := anObject! !!ExternalCommandShell methodsFor: 'printing' stamp: 'dtl 4/9/2006 11:11'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: (self isRunning ifTrue: [' (running)'] ifFalse: [' (stopped)'])! !!ExternalCommandShell methodsFor: 'command prompt' stamp: 'dtl 2/18/2007 12:37'!prompt	self cliShell outputStream nextPutAll: self cliShell promptString.! !!ExternalCommandShell methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 11:46'!promptString	"Dependents call this when restoring the prompt string display"	self flag: #FIXME. "change the dependents to call #lastPromptString"	^ self lastPromptString! !!ExternalCommandShell methodsFor: 'command prompt' stamp: 'dtl 2/18/2007 17:36'!promptTwo	self cliShell outputStream nextPutAll: self cliShell promptStringTwo! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 9/3/2010 17:08'!release	cliShell ifNotNil: [cliShell removeDependent: self].	super release! !!ExternalCommandShell methodsFor: 'command prompt' stamp: 'dtl 1/20/2007 11:40'!restorePrompt	self flag: #FIXME. "remember last prompt string and redisplay it"	self prompt! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 2/18/2007 11:22'!setNonblockingInput	Smalltalk at: #OSProcess ifPresent:		[:osp | osp thisOSProcess stdIn setNonBlocking]! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 3/12/2007 22:33'!setStdioStreams	Smalltalk		at: #OSProcess		ifPresent: [:osp | 			self inputStream: osp thisOSProcess stdIn				asBufferedAsyncFileReadStream disableEventHandling.			self cliShell outputStream: osp thisOSProcess stdOut.			self cliShell errorStream: osp thisOSProcess stdErr]! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 3/12/2007 18:54'!shutdownInOldSession	"The VM is about to shut down."	self disableInputProcessing.	self stopHandlingInterruptSignal! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:25'!sigIntHandler	"The interrupt handler process, for catching <ctl>C from the keyboard."	^ sigIntHandler ifNil: [sigIntHandler := self sigIntHandlerProcess]! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:25'!sigIntHandler: aProcess	"The interrupt handler process, for catching <ctl>C from the keyboard."	sigIntHandler := aProcess! !!ExternalCommandShell methodsFor: 'interrupt handling' stamp: 'dtl 12/15/2002 15:43'!sigIntHandlerProcess	"The interrupt handler process, for catching <ctl>C from the keyboard."	^ [[self sigIntSema isNil		ifTrue:			[(Delay forMilliseconds: 1000) wait]		ifFalse:			[self sigIntSema wait.			self doInterruptCharHandler]] repeat] fork! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 8/4/2002 12:48'!sigIntSema	"A Smalltalk Semaphore which will be signalled when an external SIGINT signal is	received from the operating system."	^ sigIntSema! !!ExternalCommandShell methodsFor: 'accessing' stamp: 'dtl 11/8/2007 20:25'!sigIntSema: aSemaphore	"A Smalltalk Semaphore which will be signalled when an external SIGINT signal is	received from the operating system."	sigIntSema := aSemaphore! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 3/13/2007 06:23'!start	self isRunning ifTrue: [self stop].	self setNonblockingInput.	self isRunning: true.	self startHandlingInterruptSignal.	self cliShell addDependent: self.	self cliShell outputStream cr; nextPut: Character lf.	self cliShell notifyPrompt.	self enableInputProcessing! !!ExternalCommandShell methodsFor: 'interrupt handling' stamp: 'dtl 11/8/2007 20:26'!startHandlingInterruptSignal	"Whenever a SIGINT is received, forward it to my sigIntSema."	| sema |	sigIntHandler ifNotNil: [sigIntHandler terminate. self sigIntHandler: nil].	Smalltalk at: #OSProcess		ifPresent:			[:osp |			osp accessor handlesOsSignals ifTrue:				[sema := osp accessor forwardSignal: osp accessor primSigIntNumber.				sema ifNotNil: [self sigIntSema: sema].				self sigIntHandler]]! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 3/12/2007 22:31'!startUpInNewSession	"Image has been restarted, so the references to standard input, output	and error are no longer valid. Reinitialize to make things right."	self setNonblockingInput.	self setStdioStreams.	self isRunning		ifTrue: [self stop; start]! !!ExternalCommandShell methodsFor: 'initialize-release' stamp: 'dtl 9/3/2010 17:08'!stop	self disableInputProcessing.	self stopHandlingInterruptSignal.	cliShell ifNotNil: [cliShell removeDependent: self].	self isRunning: false! !!ExternalCommandShell methodsFor: 'interrupt handling' stamp: 'dtl 8/8/2002 15:19'!stopHandlingInterruptSignal	"Revert to prior SIGINT handling behavior in the VM."	Smalltalk at: #OSProcess		ifPresent:			[:osp |			osp accessor handlesOsSignals				ifTrue:					[osp accessor restoreSignal: osp accessor primSigIntNumber].			self sigIntSema: nil.			self sigIntHandler terminate.			self sigIntHandler: nil]! !!ExternalCommandShell methodsFor: 'updating' stamp: 'dtl 9/15/2012 18:22'!update: event	event == self inputStream		ifTrue: [^ self handleInput: event upToEnd].	event == #prompt	"display $PS1"		ifTrue: [^ self prompt].	event == #alternatePrompt	"display $PS2"		ifTrue: [^ self promptTwo].	event == #restorePrompt	"restore last prompt display"		ifTrue: [self flag: #FIXME. ^ self prompt].	event == #exit		ifTrue: [^ self close].	event == #clearText		ifTrue: [^ self error: 'FIXME'].	event == #interruptCharacter		ifTrue: [^ self doInterruptCharHandler].	"Treat anything other than the symbols above as a string to be displayed on	the command line in the view"	self show: event asString; cr.! !"CommandShell-UI"!!AbstractUnixProcessFileLockingTestCase commentStamp: 'dtl 4/30/2006 14:02' prior: 0!Test file locking with the UnixOSProcessPlugin. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!UnixProcessUnixFileLockingTestCase commentStamp: 'dtl 4/30/2006 14:03' prior: 0!Test file locking with the UnixOSProcessPlugin using Unix file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!UnixProcessWin32FileLockingTestCase commentStamp: 'dtl 4/30/2006 14:03' prior: 0!Test file locking with the UnixOSProcessPlugin using Windows file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!AioEventHandlerTestCase commentStamp: 'dtl 7/10/2005 15:41' prior: 0!Test AioEventHandler and AioPlugin. Provides fair coverage of IO readable events, minimal coverage of IO writable events, and no real coverage for IO exception events. The writable events and exception events probably work, but this test suite will not prove it.!!OSPipeTestCase commentStamp: '<historical>' prior: 0!Test operation of OSPipe in blocking and nonBlocking mode.!!UnixProcessAccessorTestCase commentStamp: '<historical>' prior: 0!Unit tests for the UnixProcessAccessor.!!UnixProcessFileLockTestCase commentStamp: 'dtl 3/7/2005 21:57' prior: 0!This test case was provided by Julian Fitzell. It provides more file locking tests in addition to those in UnitProcessFileLockingTestCase.!!UnixProcessTestCase commentStamp: '<historical>' prior: 0!Unit tests for the Unix portion of OSProcess.!!AbstractUnixProcessFileLockingTestCase commentStamp: 'dtl 4/30/2006 14:02' prior: 35115007!Test file locking with the UnixOSProcessPlugin. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!AbstractUnixProcessFileLockingTestCase class methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:49'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^ true! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!accessor	"Answer the value of accessor"	^ accessor! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!accessor: anObject	"Set the value of accessor"	accessor := anObject! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!delay	"Answer the value of delay"	^ delay! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!delay: anObject	"Set the value of delay"	delay := anObject! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'remote image commands' stamp: 'dtl 12/15/2013 15:50'!doRemote: remoteBlock doLocal: localBlock	"Evaluate remoteBlock in a remote Squeak image. While the remote Squeak is	still running, evaluate localBlock. When done, terminate the remote Squeak	image and answer the result of evaluating localBlock."	"self new		doRemote: [OSProcess thisOSProcess stdOut nextPutAll: 'hello from child Squeak';						nextPut: Character lf]		doLocal: [(Delay forSeconds: 1) wait.						OSProcess thisOSProcess stdOut nextPutAll: 'hello from parent Squeak';					nextPut: Character lf]"	| result |	self shouldnt: [remoteProcess := OSProcess thisOSProcess forkHeadlessSqueak]		raise: Warning.	self assert: remoteProcess notNil. "Fail if fork did not succeed"	(remoteProcess == OSProcess thisOSProcess)		ifTrue:			["remote child Squeak"			remoteBlock value]		ifFalse:			["parent Squeak"			[[remoteProcess isRunning] whileFalse: [self delay wait].			self delay wait.			result := localBlock value]				ensure:	[remoteProcess terminate.					[remoteProcess isComplete] whileFalse: [self delay wait].					self delay wait.					result]].	^ result! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'failures' stamp: 'eem 3/27/2014 11:28'!expectedFailures	^UnixOSProcessAccessor basicNew safeToForkSqueak		ifTrue: [#()]		ifFalse: [#(	testCooperatingProcesses01					testCooperatingProcesses02					testCooperatingProcesses03					testCooperatingProcesses04					testCooperatingProcesses05					testFailFileLockOnLockedFile					testFailLockOnLockedOverlappedRegion					testFailLockOnLockedRegion					testFailLockOnLockedSupersetRegion					testFailRegionLockOnLockedFile					testLockEntireFileForWrite01					testLockEntireFileForWrite02					testLockEntireFileForWrite03					testLockEntireFileForWrite04					testLockEntireFileForWrite05					testLockEntireFileForWrite06					testLockRegionForRead01					testLockRegionForRead02					testLockRegionForWrite01					testLockRegionForWrite02					testLockRegionForWrite03					testLockRegionForWrite04					testLockRegionForWrite05					testLockRegionForWrite06					testLockRegionForWrite07					testLockRegionForWrite08					testNoFailLockOnAdjacentLockedRegions					testNoFailLockOnDifferentLockedRegion)]! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!fileStream	"Answer the value of fileStream"	^ fileStream! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:47'!fileStream: anObject	"Set the value of fileStream"	fileStream := anObject! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:57'!initialCompatibilitySetting	"Answer the value of initialCompatibilitySetting"	^ initialCompatibilitySetting! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'accessing' stamp: 'dtl 4/30/2006 13:57'!initialCompatibilitySetting: anObject	"Set the value of initialCompatibilitySetting"	initialCompatibilitySetting := anObject! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'initialize' stamp: 'dtl 4/30/2006 13:58'!initialize	initialCompatibilitySetting		ifNil: [self initialCompatibilitySetting: OSProcess accessor emulateWin32FileLocking]! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/13/2006 09:36'!isValidUnlockResult: result	self subclassResponsibility! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'remote image commands' stamp: 'dtl 4/30/2006 13:47'!quitImage	fileStream close.	OSProcess snapshot: false andQuit: true! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'running' stamp: 'dtl 7/30/2010 16:38'!setUp	(self respondsTo: #timeout: ) "Recent Squeak images with test case timeout"		ifTrue: [self perform: #timeout: with: 30].	self delay: (Delay forMilliseconds: 150).	self accessor: ThisOSProcess accessor.	self fileStream: (FileStream fileNamed: 'junkfile').	1000 timesRepeat: (fileStream nextPutAll: 'hello world ').! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'running' stamp: 'dtl 9/3/2010 16:02'!tearDown	| d |	OSProcessAccessor emulateWin32FileLocking: self initialCompatibilitySetting.	d := Delay forMilliseconds: 50.	self fileStream close.	remoteProcess ifNotNil:		[remoteProcess terminate.		[remoteProcess isComplete] whileFalse: [d wait].		remoteProcess := nil]! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testCooperatingProcesses01	"Two cooperating Squeak processes using file region locking to coordinate their	writes to a shared file."	"(self selector: #testCooperatingProcesses01) run"	| result |	result := self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			fileStream position: 100.			fileStream nextPutAll: 'THIS '.			accessor unlockFile: fileStream from: 100 to: 120.			delay wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 108.			fileStream nextPutAll: 'A '.			accessor unlockFile: fileStream from: 108 to: 120.			delay wait.			self quitImage]		doLocal:			[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).			fileStream position: 105.			fileStream nextPutAll: 'IS '.			accessor unlockFile: fileStream from: 104 to: 120.			delay wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 110.			fileStream nextPutAll: 'TEST '.			accessor unlockFile: fileStream from: 108 to: 120.			delay wait].	self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].	fileStream position: 100.	result := fileStream next: 14.	accessor unlockFile: fileStream from: 100 to: 140.	self assert: result = 'THIS IS A TEST'! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testCooperatingProcesses02	"Two cooperating Squeak processes using file region locking to coordinate their	writes to a shared file."	"(self selector: #testCooperatingProcesses02) run"	| result |	result := self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			fileStream position: 100.			fileStream nextPutAll: 'THIS 11111111111111111111111'.			accessor unlockFile: fileStream from: 100 to: 120.			delay wait; wait; wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 108.			fileStream nextPutAll: 'A 3333333333333333333333333'.			accessor unlockFile: fileStream from: 108 to: 120.			self quitImage]		doLocal:			[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).			fileStream position: 105.			fileStream nextPutAll: 'IS 2222222222222222222222222'.			accessor unlockFile: fileStream from: 104 to: 120.			delay wait; wait; wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 110.			fileStream nextPutAll: 'TEST 4444444444444444444444'.			accessor unlockFile: fileStream from: 108 to: 120].	self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].	fileStream position: 100.	result := fileStream next: 17.	accessor unlockFile: fileStream from: 100 to: 140.	self assert: result = 'THIS IS A TEST 44'! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testCooperatingProcesses03	"Two cooperating Squeak processes using file region locking to coordinate their	writes to a shared file."	"(self selector: #testCooperatingProcesses03) run"	| result |	result := self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			fileStream position: 100.			fileStream nextPutAll: 'THIS 11111111111111111111111'.			accessor unlockFile: fileStream from: 100 to: 120.			delay wait; wait; wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 108.			fileStream nextPutAll: 'A 3333333333333333333333333'.			accessor unlockFile: fileStream from: 108 to: 120.			self quitImage]		doLocal:			[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).			fileStream position: 105.			fileStream nextPutAll: 'IS 2222222222222222222222222'.			accessor unlockFile: fileStream from: 104 to: 120.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 110.			fileStream nextPutAll: 'TEST 4444444444444444444444'.			accessor unlockFile: fileStream from: 108 to: 120].	self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].	fileStream position: 100.	result := fileStream next: 17.	accessor unlockFile: fileStream from: 100 to: 140.	self assert: result = 'THIS IS 22TEST 44'! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testCooperatingProcesses04	"Two cooperating Squeak processes using file region locking to coordinate their	writes to a shared file."	"(self selector: #testCooperatingProcesses04) run"	| result |	result := self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			delay wait.			fileStream position: 100.			fileStream nextPutAll: 'THIS 11111111111111111111111'.			accessor unlockFile: fileStream from: 100 to: 120.			delay wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			delay wait.			fileStream position: 108.			fileStream nextPutAll: 'A 3333333333333333333333333'.			accessor unlockFile: fileStream from: 108 to: 120.			delay wait.			self quitImage]		doLocal:			[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).			delay wait.			fileStream position: 105.			fileStream nextPutAll: 'IS 2222222222222222222222222'.			accessor unlockFile: fileStream from: 104 to: 120.			delay wait.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			fileStream position: 110.			fileStream nextPutAll: 'TEST 4444444444444444444444'.			accessor unlockFile: fileStream from: 108 to: 120].	self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].	fileStream position: 100.	result := fileStream next: 17.	accessor unlockFile: fileStream from: 100 to: 140.	self assert: result = 'THIS IS A TEST 44'! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testCooperatingProcesses05	"Two cooperating Squeak processes using file region locking to coordinate their	writes to a shared file."	"(self selector: #testCooperatingProcesses05) run"	| result |	result := self		doRemote:			[OSProcess thisOSProcess stdOut nextPutAll: 'starting remote squeak requesting lock on 100 to 120';				nextPut: Character lf.			(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak lock acquired on 100 to 120'; nextPut: Character lf.			fileStream position: 100.			fileStream nextPutAll: 'THIS '.			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak releasing lock on 100 to 120'; nextPut: Character lf.			accessor unlockFile: fileStream from: 100 to: 120.			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak lock released on 100 to 120'; nextPut: Character lf.			delay wait.			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak requesting lock on 108 to: 120'; nextPut: Character lf.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak lock acquired on 108 to: 120'; nextPut: Character lf.			fileStream position: 108.			fileStream nextPutAll: 'A '.			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak releasing lock on 108 to: 120'; nextPut: Character lf.			accessor unlockFile: fileStream from: 108 to: 120.			OSProcess thisOSProcess stdOut nextPutAll: 'remote squeak lock released on 108 to: 120'; nextPut: Character lf.			delay wait.			self quitImage]		doLocal:			[OSProcess thisOSProcess stdOut nextPutAll: 'starting local squeak requesting lock on 104 to: 120';				nextPut: Character lf.			self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak lock acquired on 104 to: 120'; nextPut: Character lf.			fileStream position: 105.			fileStream nextPutAll: 'IS '.			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak releasing lock on 104 to: 120'; nextPut: Character lf.			accessor unlockFile: fileStream from: 104 to: 120.			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak lock released on 104 to: 120'; nextPut: Character lf.			delay wait.			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak requesting lock on 108 to: 120'; nextPut: Character lf.			self tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak lock acquired on 108 to: 120'; nextPut: Character lf.			fileStream position: 110.			fileStream nextPutAll: 'TEST '.			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak releasing lock on 108 to: 120'; nextPut: Character lf.			accessor unlockFile: fileStream from: 108 to: 120.			OSProcess thisOSProcess stdOut nextPutAll: 'local squeak lock released on 108 to: 120'; nextPut: Character lf.			delay wait].	self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].	fileStream position: 100.	result := fileStream next: 14.	accessor unlockFile: fileStream from: 100 to: 140.	self assert: result = 'THIS IS A TEST'! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 15:55'!testFailFileLockOnLockedFile	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail."	"(self selector: #testFailFileLockOnLockedFile) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream.			self quitImage]		doLocal:			[self should: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream. "release lock to allow child to acquire it"					delay wait]]				raise: Error				description: '#lockFile failed because child Squeak now holds a lock']! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 16:00'!testFailLockOnLockedOverlappedRegion	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail. Locked regions overlap by one character."	"(self selector: #testFailLockOnLockedOverlappedRegion) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 104) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream from: 100 to: 104.			self quitImage]		doLocal:			[self should: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 104							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error				description: '#lockFile failed because child Squeak now holds a lock']! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 15:51'!testFailLockOnLockedRegion	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail."	"(self selector: #testFailLockOnLockedRegion) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream from: 100 to: 120.			self quitImage]		doLocal:			[self should: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 100							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 100 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error				description: '#lockFile failed because child Squeak now holds a lock']! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 16:01'!testFailLockOnLockedSupersetRegion	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail. Fail when requesting a lock on a subset of the locked region."	"(self selector: #testFailLockOnLockedSupersetRegion) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream from: 100 to: 140.			self quitImage]		doLocal:			[self should: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 104							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error				description: '#lockFile failed because child Squeak now holds a lock']! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 16:02'!testFailRegionLockOnLockedFile	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a file, the region lock attempt in parent	Squeak will fail."	"(self selector: #testFailRegionLockOnLockedFile) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream.			self quitImage]		doLocal:			[self should: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 100							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 100 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error				description: '#lockFile failed because child Squeak now holds a lock']! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 22:44'!testLockEntireFileForWrite01	"Local lock request should succeed"	"(self selector: #testLockEntireFileForWrite01) run"	| result |	result := self		doRemote: [nil]		doLocal: [accessor lockFile: fileStream].	self delay wait; wait.	self assert: (result isKindOf: OSFileLock).	result := accessor unlockFile: fileStream.	self assert: (result isKindOf: OSFileLock)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:40'!testLockEntireFileForWrite02	"Local lock request should fail"	"(self selector: #testLockEntireFileForWrite02) run"	| result |	result := self		doRemote:			[accessor lockFile: fileStream]		doLocal: [accessor lockFile: fileStream].	self delay wait; wait.	self assert: result isNil.	"Region is in the cache as a result of the (failed) lock request. This is legitimate	because the lock exists in some other image, so we want to mark it as locked	locally. However, it is not quite correct because the remote lock may pertain to	a different but overlapping region. Nevertheless, this seems like reasonable	behavior."	result := accessor unlockFile: fileStream.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 22:45'!testLockEntireFileForWrite03	"Local lock request should succeed"	"(self selector: #testLockEntireFileForWrite03) run"	| result |	result := self		doRemote:			[accessor lockFile: fileStream.			accessor unlockFile: fileStream]		doLocal:			[accessor lockFile: fileStream].	self delay wait; wait.	self assert: (result isKindOf: OSFileLock).	result := accessor unlockFile: fileStream.	self assert: (result isKindOf: OSFileLock)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:48'!testLockEntireFileForWrite04	"Local lock should be available"	"(self selector: #testLockEntireFileForWrite04) run"	| result |	result := self		doRemote: [nil]		doLocal: [accessor isLockableFile: fileStream].	self delay wait; wait.	self should: result.	"No lock on the region, so the unlock should fail."	result := accessor unlockFile: fileStream.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:50'!testLockEntireFileForWrite05	"Local lock should be available"	"(self selector: #testLockEntireFileForWrite05) run"	| result |	result := self		doRemote:			[accessor lockFile: fileStream]		doLocal: [accessor isLockableFile: fileStream].	self delay wait; wait.	self shouldnt: result.	"No local lock in the cache for this file, so the unlock call will appear to fail.	Actually, it will have passed the unlock request through to the operating system,	and it will actually unlock the file."	result := accessor unlockFile: fileStream.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:49'!testLockEntireFileForWrite06	"Local lock should be available"	"(self selector: #testLockEntireFileForWrite06) run"	| result |	result := self		doRemote:			[accessor lockFile: fileStream.			accessor unlockFile: fileStream]		doLocal:			[accessor isLockableFile: fileStream].	self delay wait; wait.	self should: result.	"No local lock in the cache for this file, so the unlock call will appear to fail.	Actually, it will have passed the unlock request through to the operating system,	but it will have no effect because the file was never locked."	result := accessor unlockFile: fileStream.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'fail blocks' stamp: 'dtl 5/11/2006 07:22'!testLockFileIfFail	"(self selector: #testLockFileIfFail) run"	| fail |	fail := false.	accessor lockFile: fileStream ifFail: [fail := true].	self shouldnt: fail.	fileStream close.	accessor lockFile: fileStream ifFail: [fail := true].	self should: fail! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'fail blocks' stamp: 'dtl 11/28/2010 19:05'!testLockFileRegionIfFail	"(self selector: #testLockFileRegionIfFail) run"	| fail |	fail := false.	accessor		lockFile: fileStream from: 100 to: 199 exclusive: true		ifFail: [fail := true].	self shouldnt: fail.	fileStream close.	accessor		lockFile: fileStream from: 100 to: 199 exclusive: true		ifFail: [fail := true].	self should: fail.	accessor		lockFile: fileStream from: 100 to: 199		ifFail: [fail := true].	self should: fail! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/10/2006 07:04'!testLockPreviouslyLockedFile	self subclassResponsibility! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/10/2006 07:10'!testLockPreviouslyLockedFileRegion	self subclassResponsibility! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 22:46'!testLockRegionForRead01	"Read lock, the local lock request should succeed"	"(self selector: #testLockRegionForRead01) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false]		doLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false].	self delay wait; wait.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor unlockFile: fileStream from: 100 to: 199 exclusive: false.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:53'!testLockRegionForRead02	"Read lock, the local lock request should fail when requesting a write lock"	"(self selector: #testLockRegionForRead02) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false].	self delay wait; wait.	self assert: result isNil.	result := accessor unlockFile: fileStream from: 100 to: 199.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 22:46'!testLockRegionForWrite01	"Local lock request should succeed"	"(self selector: #testLockRegionForWrite01) run"	| result |	result := self		doRemote: [nil]		doLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true].	self delay wait; wait.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor unlockFile: fileStream from: 100 to: 199.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 4/30/2006 13:47'!testLockRegionForWrite02	"Write lock, the local lock request should fail"	"(self selector: #testLockRegionForWrite02) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true].	self delay wait; wait.	self assert: result isNil.	"Lock is not in the local cache, so unlock will appear to fail. Actually, the region	will be unlocked."	accessor unlockFile: fileStream from: 100 to: 199.	self assert: result isNil.! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:55'!testLockRegionForWrite03	"Write lock, nonoverlapping regions, the lock check should succeed"	"(self selector: #testLockRegionForWrite03) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor isLockableFile: fileStream from: 200 to: 299 exclusive: true].	self delay wait; wait.	self assert: result.	result := accessor unlockFile: fileStream from: 200 to: 299.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:53'!testLockRegionForWrite04	"Write lock, overlapping regions, the local lock request should fail"	"(self selector: #testLockRegionForWrite04) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor lockFile: fileStream from: 150 to: 249 exclusive: true].	self delay wait; wait.	self assert: result isNil.	result := accessor unlockFile: fileStream from: 150 to: 249.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 22:47'!testLockRegionForWrite05	"Write lock, nonoverlapping regions, the local lock request should succeed"	"(self selector: #testLockRegionForWrite05) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor lockFile: fileStream from: 200 to: 299 exclusive: true].	self delay wait; wait.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (200 to: 299)).	result := accessor unlockFile: fileStream from: 200 to: 299.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (200 to: 299))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:53'!testLockRegionForWrite06	"Write lock, overlapping regions, the local lock request should fail"	"(self selector: #testLockRegionForWrite06) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor lockFile: fileStream from: 199 to: 199 exclusive: true].	self delay wait; wait.	self assert: result isNil.	result := accessor unlockFile: fileStream from: 199 to: 199.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:55'!testLockRegionForWrite07	"Write lock, overlapping regions, the lock check should fail"	"(self selector: #testLockRegionForWrite07) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor isLockableFile: fileStream from: 100 to: 199 exclusive: true].	self delay wait; wait.	self deny: result.	result := accessor unlockFile: fileStream from: 100 to: 199.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/13/2006 09:55'!testLockRegionForWrite08	"Write lock, overlapping regions, the lock check should fail"	"(self selector: #testLockRegionForWrite08) run"	| result |	result := self		doRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]		doLocal: [accessor isLockableFile: fileStream from: 150 to: 299 exclusive: true].	self delay wait; wait.	self deny: result.	result := accessor unlockFile: fileStream from: 150 to: 299.	self assert: (self isValidUnlockResult: result)! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 16:03'!testNoFailLockOnAdjacentLockedRegions	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail. No failure occurs when the regions are adjacent but do not overlap."	"(self selector: #testNoFailLockOnAdjacentLockedRegions) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 103) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream from: 100 to: 103.			self quitImage]		doLocal:			[self shouldnt: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 104							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error]! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - exclusive locking' stamp: 'dtl 8/30/2009 16:03'!testNoFailLockOnDifferentLockedRegion	"Two cooperating Squeak processes using mandatory file locking. When	child Squeak takes a lock on a region, lock attempt in parent Squeak will	fail. No failure occurs if the regions are different and do not overlap."	"(self selector: #testNoFailLockOnDifferentLockedRegion) run"	self		doRemote:			[(self tryUntil: [(accessor lockFile: fileStream from: 50 to: 80) notNil]) ifNil: [self quitImage].			delay wait; wait; wait.			accessor unlockFile: fileStream from: 50 to: 80.			self quitImage]		doLocal:			[self shouldnt: [				10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"					accessor lockFile: fileStream							from: 104							to: 120							exclusive: true							ifFail: [self error: '#lockFile failed because child Squeak now holds a lock'].					accessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"					delay wait]]				raise: Error]! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'fail blocks' stamp: 'dtl 5/11/2006 07:24'!testUnlockFileIfFail	"(self selector: #testUnlockFileIfFail) run"	| fail |	fail := false.	accessor lockFile: fileStream ifFail: [fail := true].	self shouldnt: fail.	accessor unlockFile: fileStream ifFail: [fail := true].	self shouldnt: fail.	fileStream close.	accessor unlockFile: fileStream ifFail: [fail := true].	self should: fail! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'fail blocks' stamp: 'dtl 11/28/2010 19:11'!testUnlockFileRegionIfFail	"(self selector: #testUnlockFileRegionIfFail) run"	| fail |	fail := false.	accessor		lockFile: fileStream from: 100 to: 199 exclusive: true		ifFail: [fail := true].	self shouldnt: fail.	accessor		unlockFile: fileStream from: 100 to: 199 exclusive: true		ifFail: [fail := true].	self shouldnt: fail.	fileStream close.	accessor		unlockFile: fileStream from: 100 to: 199 exclusive: true		ifFail: [fail := true].	self should: fail.	accessor		unlockFile: fileStream from: 100 to: 199		ifFail: [fail := true].	self should: fail! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 06:53'!testUnlockPreviouslyLockedFile	self subclassResponsibility! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 06:54'!testUnlockPreviouslyLockedFileRegion	self subclassResponsibility! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 12:56'!testWin32LockEmulation01	"Make sure the cache does what is expected, and that it can be disabled	Expect non-exclusive read locks to to succeed."	"(self selector: #testWin32LockEmulation01) run"	| result |	accessor class emulateWin32FileLocking: true.	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: false.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: false.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor unlockFile: fileStream from: 100 to: 199 exclusive: false.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 12:56'!testWin32LockEmulation02	"Make sure the cache does what is expected, and that it can be disabled.	Expect exclusive read-write locks to be protected by the cache."	"(self selector: #testWin32LockEmulation02) run"	| result |	accessor class emulateWin32FileLocking: true.	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: result isNil.	result := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 12:57'!testWin32LockEmulation03	"Make sure the cache does what is expected, and that it can be disabled.	Expect the cache to protect the file even if we open a second stream"	"(self selector: #testWin32LockEmulation03) run"	| result stream2 |	accessor class emulateWin32FileLocking: true.	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	stream2 := FileStream fileNamed: 'junkfile'.	[result := accessor lockFile: stream2 from: 100 to: 199 exclusive: true.	self assert: result isNil]		ensure: [stream2 close].	result := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'testing' stamp: 'dtl 5/7/2006 12:57'!testWin32LockEmulation04	"Make sure the cache does what is expected, and that it can be disabled.	Expect the cache to allow a lock after the stream has been closed (since the OS will have freed its lock)"	"(self selector: #testWin32LockEmulation04) run"	| result stream2 |	accessor class emulateWin32FileLocking: true.	stream2 := FileStream fileNamed: 'junkfile'.	[result := accessor lockFile: stream2 from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))]		ensure: [stream2 close].	result := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199)).	result := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.	self assert: (result isKindOf: OSFileRegionLock).	self assert: (result interval = (100 to: 199))! !!AbstractUnixProcessFileLockingTestCase methodsFor: 'private' stamp: 'dtl 4/30/2006 13:47'!tryUntil: aBlock	"Repeat until block evaluates true, but do not get in an infinite loop if a primitive is failing"	| result |	10 timesRepeat:		[result := aBlock value.		result ifTrue: [^ result].		delay wait].	^ result! !!UnixProcessUnixFileLockingTestCase commentStamp: 'dtl 4/30/2006 14:03' prior: 35115594!Test file locking with the UnixOSProcessPlugin using Unix file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!UnixProcessUnixFileLockingTestCase class methodsFor: 'testing' stamp: 'dtl 1/13/2007 15:40'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase! !!UnixProcessUnixFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/13/2006 09:38'!isValidUnlockResult: result	"With no lock cache, the unlock requests will succeed even though there	is no lock to be removed."		^ result isKindOf: OSFileLock! !!UnixProcessUnixFileLockingTestCase methodsFor: 'running' stamp: 'dtl 4/30/2006 14:05'!setUp	"Set system to use Unix file locking semantics. The tearDown method is expected to restore the setting."	OSProcessAccessor emulateWin32FileLocking: false.	^ super setUp! !!UnixProcessUnixFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:12'!testLockPreviouslyLockedFile	"Locking a previously locked file is permitted"	"(self selector: #testLockPreviouslyLockedFile) run"	accessor lockFile: fileStream.	self should: (accessor isLockableFile: fileStream).	self should: ((accessor lockFile: fileStream) isKindOf: OSFileLock).	accessor unlockFile: fileStream! !!UnixProcessUnixFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:12'!testLockPreviouslyLockedFileRegion	"Locking a previously locked file region is permitted"	"(self selector: #testLockPreviouslyLockedFileRegion) run"	accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true.	self should: (accessor		isLockableFile: fileStream		from: 100		to: 199		exclusive: true).	self should: ((accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true)		isKindOf: OSFileLock).	accessor unlockFile: fileStream! !!UnixProcessUnixFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:07'!testUnlockPreviouslyLockedFile	"The unlock operation will succeed even if no lock is in effect"	"(self selector: #testUnlockPreviouslyLockedFile) run"	self should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).	accessor lockFile: fileStream.	self should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock)! !!UnixProcessUnixFileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:07'!testUnlockPreviouslyLockedFileRegion	"The unlock operation will succeed even if no lock is in effect"	"(self selector: #testUnlockPreviouslyLockedFileRegion) run"	self should: ((accessor		unlockFile: fileStream		from: 100		to: 199		exclusive: true) isKindOf: OSFileLock).	accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true.	self should: ((accessor		unlockFile: fileStream		from: 100		to: 199		exclusive: true) isKindOf: OSFileLock)! !!UnixProcessWin32FileLockingTestCase commentStamp: 'dtl 4/30/2006 14:03' prior: 35116216!Test file locking with the UnixOSProcessPlugin using Windows file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.These tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.!!UnixProcessWin32FileLockingTestCase class methodsFor: 'testing' stamp: 'dtl 1/13/2007 15:40'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #TestCase! !!UnixProcessWin32FileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/13/2006 09:47'!isValidUnlockResult: result	"With a lock cache, the unlock requests will fail when if there	is no lock to be removed."		^ result == nil! !!UnixProcessWin32FileLockingTestCase methodsFor: 'running' stamp: 'dtl 4/30/2006 14:06'!setUp	"Set system to use Windows file locking semantics. The tearDown method is expected to restore the setting."	OSProcessAccessor emulateWin32FileLocking: true.	^ super setUp! !!UnixProcessWin32FileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:13'!testLockPreviouslyLockedFile	"A previously locked file cannot be locked."	"(self selector: #testLockPreviouslyLockedFile) run"	accessor lockFile: fileStream.	self shouldnt: (accessor isLockableFile: fileStream).	self should: (accessor lockFile: fileStream) isNil.	accessor unlockFile: fileStream! !!UnixProcessWin32FileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:13'!testLockPreviouslyLockedFileRegion	"A previously locked file region cannot be locked."	"(self selector: #testLockPreviouslyLockedFileRegion) run"	accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true.	self shouldnt: (accessor		isLockableFile: fileStream		from: 100		to: 199		exclusive: true).	self should: ((accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true) isNil).	accessor unlockFile: fileStream! !!UnixProcessWin32FileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/11/2006 07:08'!testUnlockPreviouslyLockedFile	"The unlock operation will fail if lock is in effect"	"(self selector: #testUnlockPreviouslyLockedFile) run"	self shouldnt: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).	accessor lockFile: fileStream.	self should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).	self shouldnt: ((accessor unlockFile: fileStream) isKindOf: OSFileLock)! !!UnixProcessWin32FileLockingTestCase methodsFor: 'testing - platform specific' stamp: 'dtl 5/12/2006 07:48'!testUnlockPreviouslyLockedFileRegion	"The unlock operation will fail if a lock is in effect"	"(self selector: #testUnlockPreviouslyLockedFileRegion) run"	self shouldnt: ((accessor		unlockFile: fileStream		from: 100		to: 199		exclusive: true) isKindOf: OSFileLock).	accessor		lockFile: fileStream		from: 100		to: 199		exclusive: true.	self should: ((accessor		unlockFile: fileStream		from: 100		to: 199		exclusive: true) isKindOf: OSFileLock).	self shouldnt: ((accessor		unlockFile: fileStream		from: 100		to: 199		exclusive: true) isKindOf: OSFileLock)! !!AioEventHandlerTestCase commentStamp: 'dtl 7/10/2005 15:41' prior: 35116829!Test AioEventHandler and AioPlugin. Provides fair coverage of IO readable events, minimal coverage of IO writable events, and no real coverage for IO exception events. The writable events and exception events probably work, but this test suite will not prove it.!!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 13:02'!testEnableHandleAndDisable	| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult aioDisableResult |	eventHandler := AioEventHandler new.	anOpenFile := SourceFiles at: 1.	fileHandle := eventHandler handleForFile: anOpenFile.	sema := Semaphore new.	[semaIndex := Smalltalk registerExternalObject: sema.	[aioEnableResult := eventHandler			aioEnable: fileHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	self assert: semaIndex == aioEnableResult.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: true		readEvents: true		writeEvents: true.	self assert: aioHandleResult == 2r0111. "return bitmask, all three bits set"	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: true		readEvents: false		writeEvents: true.	self assert: aioHandleResult == 2r0101.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: true.	self assert: aioHandleResult == 2r0100.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: true		readEvents: false		writeEvents: false.	self assert: aioHandleResult == 2r0001.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: false.	self assert: aioHandleResult == 2r0000.	aioDisableResult := eventHandler aioDisable: fileHandle.	self assert: aioDisableResult == fileHandle]		ensure:			[Smalltalk unregisterExternalObject: sema.			(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 1/23/2013 19:40'!testFileReadableEvent	| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult fileName |	fileName := 'DeleteThisTemporaryFile'.	eventHandler := AioEventHandler new.	OSProcess deleteFileNamed: fileName.	[anOpenFile := FileStream fileNamed: fileName.	fileHandle := eventHandler handleForFile: anOpenFile.	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	[aioEnableResult := eventHandler			aioEnable: fileHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	self assert: semaIndex == aioEnableResult.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self assert: aioHandleResult == 2r010.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but readable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin reading data based on having received this initial signal."	sema wait. "consume the signal"	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self deny: sema isSignaled. "Nothing has happened to indicate more data available."	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self assert: aioHandleResult == 2r010.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but readable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin reading data based on having received this initial signal."	sema wait. "consume the signal"	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self deny: sema isSignaled. "Nothing has happened to indicate more data available."	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self assert: aioHandleResult == 2r010.	anOpenFile nextPutAll: 'write some stuff to the file'; flush.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but readable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin reading data based on having received this initial signal."	sema wait. "consume the signal"	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self assert: aioHandleResult == 2r010.	anOpenFile upToEnd.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but readable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin reading data based on having received this initial signal."	sema wait. "consume the signal"	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self deny: sema isSignaled. "handler has not been reset"]		ensure:			[[anOpenFile close] on: Error do: [].			Smalltalk unregisterExternalObject: sema.			(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 1/23/2013 19:41'!testFileWritableEvent	| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult fileName |	fileName := 'DeleteThisTemporaryFile'.	eventHandler := AioEventHandler new.	OSProcess deleteFileNamed: fileName.	[anOpenFile := FileStream fileNamed: fileName.	fileHandle := eventHandler handleForFile: anOpenFile.	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	[aioEnableResult := eventHandler			aioEnable: fileHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	self assert: semaIndex == aioEnableResult.	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: true.	self assert: aioHandleResult == 2r0100.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but writable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin writing data based on having received this initial signal."	sema wait. "consume the signal"	self deny: sema isSignaled.	"Reset handler"	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: true.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but writable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin writing data based on having received this initial signal."	sema wait. "consume the signal"	self deny: sema isSignaled.	"Reset handler"	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: true.	anOpenFile upToEnd.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but writable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin writing data based on having received this initial signal."	sema wait. "consume the signal"	self deny: sema isSignaled.	"Reset handler"	aioHandleResult := eventHandler		aioHandle: fileHandle		exceptionEvents: false		readEvents: false		writeEvents: true.	anOpenFile nextPutAll: 'write some stuff to the file'; flush.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self assert: sema isSignaled. "File is empty but writable. A signal is sent once,	presumably in the interest of priming the pump. A listening process would	begin writing data based on having received this initial signal."	sema wait. "consume the signal"	self deny: sema isSignaled.	(Delay forMilliseconds: 20) wait. "Allow signals to be handled"	self deny: sema isSignaled. "handler has not been reset"]		ensure:			[[anOpenFile close] on: Error do: [].			Smalltalk unregisterExternalObject: sema.			(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 7/9/2005 17:10'!testHandleForFile	| eventHandler anOpenFile fileHandle |	eventHandler := AioEventHandler new.	anOpenFile := SourceFiles at: 1.	fileHandle := eventHandler handleForFile: anOpenFile.	self assert: fileHandle notNil.	self assert: (fileHandle isKindOf: Integer)! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 7/9/2005 17:10'!testHandleForSocket	| eventHandler socket socketHandle |	eventHandler := AioEventHandler new.	socket := Socket newTCP.	socketHandle := eventHandler handleForSocket: socket.	self assert: socketHandle notNil.	self assert: (socketHandle isKindOf: Integer).	self assert: (socketHandle ~= 0) "0 is stdin on unix, unlikely to be used on other platforms"! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 7/9/2005 16:41'!testPrimAioModuleName	| eventHandler moduleName |	eventHandler := AioEventHandler new.	moduleName := eventHandler primAioModuleName.	self assert: ('AioPlugin*' match: moduleName)! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 7/9/2005 16:42'!testPrimAioModuleVersionString	| eventHandler versionString |	eventHandler := AioEventHandler new.	versionString := eventHandler primAioModuleName.	self assert: (versionString isKindOf: String)! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 12:58'!testSocketExceptionEvent	"Close the client socket to generate an event on the server socket"	| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |	port := 8086.	serverName := '127.0.0.1'.	Socket initializeNetwork.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	"Create the client (writer) socket"	clientTcpSocket := Socket newTCP.	clientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.	"Esstablish socket connection"	[serverTcpSocket waitForConnectionFor: 10] fork.	clientTcpSocket waitForConnectionFor: 10.	["Set up a read event handler on the server socket"	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	eventHandler := AioEventHandler new.	socketHandle := eventHandler handleForSocket: serverTcpSocket.	"An aio handler may already have been established for the socket	by the SocketPlugin. The following request disables any existing handling	in order to prevent a warning message on the console stderr."	eventHandler aioDisable: socketHandle.	"Now set our own handler."	[eventHandler			aioEnable: socketHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	eventHandler		aioHandle: socketHandle		exceptionEvents: true		readEvents: false		writeEvents: false.	self deny: sema isSignaled.	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	self deny: sema isSignaled.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self deny: sema isSignaled.	receivedData := serverTcpSocket receiveAvailableData.	clientTcpSocket close.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	(Delay forMilliseconds: 200) wait."	self assert: sema isSignaled.	FIXME: no error generated; need to find a way to generate an error -dtl"	self deny: sema isSignaled.	serverTcpSocket close]		ensure:			[Smalltalk unregisterExternalObject: sema.			(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 13:01'!testSocketExceptionEvent2	"Close the client socket to generate an event on the server socket"	| port serverTcpSocket sema semaIndex socketHandle eventHandler |	port := 8086.	Socket initializeNetwork.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	["Set up an exception event handler on the server socket"	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	eventHandler := AioEventHandler new.	socketHandle := eventHandler handleForSocket: serverTcpSocket.	"An aio handler may already have been established for the socket	by the SocketPlugin. The following request disables any existing handling	in order to prevent a warning message on the console stderr."	eventHandler aioDisable: socketHandle.	"Now set our own handler."	[eventHandler			aioEnable: socketHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	eventHandler		aioHandle: socketHandle		exceptionEvents: true		readEvents: false		writeEvents: true.	self deny: sema isSignaled.	[serverTcpSocket		primSocket: serverTcpSocket socketHandle		sendData: 'a string to send'		startIndex: 1		count: 10] on: Error do: [self halt].	serverTcpSocket		receiveSomeDataInto: (String new: 1000)		startingAt: 1."	self assert: sema isSignaled.	FIXME: no error generated; need to find a way to generate an error -dtl"	self deny: sema isSignaled.	serverTcpSocket close]		ensure:			[Smalltalk unregisterExternalObject: sema.			(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 13:02'!testSocketReadableEvent	| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |	port := 8086.	serverName := '127.0.0.1'.	Socket initializeNetwork.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	"Create the client (writer) socket"	clientTcpSocket := Socket newTCP.	clientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.	"Establish socket connection"	[serverTcpSocket waitForConnectionFor: 10] fork.	clientTcpSocket waitForConnectionFor: 10.	["Set up a read event handler on the server socket"	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	eventHandler := AioEventHandler new.	socketHandle := eventHandler handleForSocket: serverTcpSocket.	"An aio handler may already have been established for the socket	by the SocketPlugin. The following request disables any existing handling	in order to prevent a warning message on the console stderr."	eventHandler aioDisable: socketHandle.	"Now set our own handler."	[eventHandler			aioEnable: socketHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self deny: sema isSignaled.	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	self assert: sema isSignaled.	sema wait. "consume the signal"	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self deny: sema isSignaled.	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	self assert: sema isSignaled.	sema wait. "consume the signal"	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self deny: sema isSignaled.	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	self assert: sema isSignaled.	sema wait. "consume the signal"	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	clientTcpSocket close.	serverTcpSocket close]		ensure:			[Smalltalk unregisterExternalObject: sema.			(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 12:59'!testSocketReadableEventWithMaskNotSet	"Same as testSocketReadableEvent, except that the mask bit for read events is not set,	so we expect to not receive the event notification. This is just a check to ensure that	the event mask is working."	| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |	port := 8086.	serverName := '127.0.0.1'.	Socket initializeNetwork.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	"Create the client (writer) socket"	clientTcpSocket := Socket newTCP.	clientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.	"Establish socket connection"	[serverTcpSocket waitForConnectionFor: 10] fork.	clientTcpSocket waitForConnectionFor: 10.	["Set up a read event handler on the server socket"	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	eventHandler := AioEventHandler new.	socketHandle := eventHandler handleForSocket: serverTcpSocket.	"An aio handler may already have been established for the socket	by the SocketPlugin. The following request disables any existing handling	in order to prevent a warning message on the console stderr."	eventHandler aioDisable: socketHandle.	"Now set our own handler."	[eventHandler			aioEnable: socketHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	eventHandler		aioHandle: socketHandle		exceptionEvents: true		readEvents: false	"Read event bit not set"		writeEvents: false.	self deny: sema isSignaled.	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	self deny: sema isSignaled. "This time we should not receive a signal"	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	clientTcpSocket close.	serverTcpSocket close]		ensure:			[Smalltalk unregisterExternalObject: sema.			(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]! !!AioEventHandlerTestCase methodsFor: 'testing' stamp: 'dtl 8/7/2005 12:59'!testSuspendAioForSocketReadableEvent	| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |	port := 8086.	serverName := '127.0.0.1'.	Socket initializeNetwork.	"Create the server (reader) socket"	serverTcpSocket := Socket newTCP.	serverTcpSocket listenOn: port.	"Create the client (writer) socket"	clientTcpSocket := Socket newTCP.	clientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.	"Establish socket connection"	[serverTcpSocket waitForConnectionFor: 10] fork.	clientTcpSocket waitForConnectionFor: 10.	["Set up a read event handler on the server socket"	sema := Semaphore new.	semaIndex := Smalltalk registerExternalObject: sema.	eventHandler := AioEventHandler new.	socketHandle := eventHandler handleForSocket: serverTcpSocket.	"An aio handler may already have been established for the socket	by the SocketPlugin. The following request disables any existing handling	in order to prevent a warning message on the console stderr."	eventHandler aioDisable: socketHandle.	"Now set our own handler."	[eventHandler			aioEnable: socketHandle			forSemaphore: semaIndex			externalObject: true]		on: Warning		do: ["Suppress warning dialog. Unit test will fail next assert."].	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	self deny: sema isSignaled.	"Handler generates a signal"	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self assert: sema isSignaled.	sema wait.	self deny: sema isSignaled.	"Handler has not been reset, so no signal this time"	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self deny: sema isSignaled.	"Reset the handler"	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	"Handler generates a signal"	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self assert: sema isSignaled.	sema wait.	self deny: sema isSignaled.	"Reset the handler"	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	"But temporarily disable it"	eventHandler aioSuspend: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	"Handler suspended, so no signal this time"	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self deny: sema isSignaled.	"Reset the handler"	eventHandler		aioHandle: socketHandle		exceptionEvents: false		readEvents: true		writeEvents: false.	"Handler generates a signal"	clientTcpSocket sendData: 'some data to send to the socket'.	(Delay forMilliseconds: 200) wait.	receivedData := serverTcpSocket receiveAvailableData.	self assert: 'some data to send to the socket' = receivedData.	self assert: sema isSignaled.	sema wait.	self deny: sema isSignaled.	clientTcpSocket close.	serverTcpSocket close]		ensure:			[Smalltalk unregisterExternalObject: sema.			(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]! !!OSPipeTestCase commentStamp: '<historical>' prior: 35117148!Test operation of OSPipe in blocking and nonBlocking mode.!!OSPipeTestCase methodsFor: 'private' stamp: 'dtl 11/28/2010 14:05'!primTestEndOfFileFlag: aSqFileStruct	"Answer whether the file represented by aSqFileStruct is at end of file, as determined	by a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers	true if the file pointer is at the end of the file, but which does not call feof() to	determine that an end of file condition has occurred. The difference is significant	if aSqFileStruct represents a pipe or a device file, which may not be positionable	in the sense of a conventional disk file."	<primitive: 'primitiveTestEndOfFileFlag' module: 'UnixOSProcessPlugin'>	^ nil! !!OSPipeTestCase methodsFor: 'private' stamp: 'dtl 6/4/2006 16:03'!readFromAndClose: aPipe writingTo: aStream	| s |	[aPipe atEndOfFile] whileFalse:		[s := aPipe next: 10000.		aStream nextPutAll: s asString.		(Delay forMilliseconds: 100) wait].	(aPipe respondsTo: #reader) ifTrue: [aPipe reader close].	^ aStream! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 4/12/2014 16:07'!testBlocking	"(OSPipeTestCase selector: #testBlocking) run"	| p |	p := OSPipe blockingPipe.	(1 to: 10) do: [:i | p nextPutAll: 'this is line ', i printString; cr].	p flush. "protect against buggy clib that may never flush output"	self should: ['this is line 1*' match: (p next: 15)].	self should: ['this is line 2*' match: (p next: 15)].	self should: ['this is line 3*' match: (p next: 15)].	self should: ['this is line 4*' match: (p next: 15)].	self should: ['this is line 5*' match: (p next: 15)].	self should: ['this is line 6*' match: (p next: 15)].	self should: ['this is line 7*' match: (p next: 15)].	self should: ['this is line 8*' match: (p next: 15)].	self should: ['this is line 9*' match: (p next: 15)].	p writer close.	self shouldnt: p atEnd.	self should: ['this is line 10*' match: (p next: 16)].	self should: p atEnd.	p close! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:27'!testBlockingBufferedPipe	"(OSPipeTestCase selector: #testBlockingBufferedPipe) run"	| p |	p := ExternalPipe bufferedBlockingPipe.	[(1 to: 10) do: [:i | p nextPutAll: 'this is line ', i printString; cr; flush].	(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"	self should: ['this is line 1*' match: (p next: 15)].	self should: ['this is line 2*' match: (p next: 15)].	self should: ['this is line 3*' match: (p next: 15)].	self should: ['this is line 4*' match: (p next: 15)].	self should: ['this is line 5*' match: (p next: 15)].	self should: ['this is line 6*' match: (p next: 15)].	self should: ['this is line 7*' match: (p next: 15)].	self should: ['this is line 8*' match: (p next: 15)].	self should: ['this is line 9*' match: (p next: 15)].	p writer close.	self shouldnt: p atEnd.	self should: ['this is line 10*' match: (p next: 16)].	self should: p atEnd]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 4/12/2014 16:09'!testBlockingPeek	"(OSPipeTestCase selector: #testBlockingPeek) run"	| p |	p := OSPipe blockingPipe.	p nextPutAll: 'abc'.	p flush. "protect against buggy clib that may never flush output"	self assert: (p peek == $a).	self assert: (p next == $a).	self assert: (p peek == $b).	self assert: (p next == $b).	self assert: (p peek == $c).	self deny: p atEnd.	self assert: (p next == $c).	self deny: p atEnd.	p closeWriter.	self assert: p atEnd.	p close! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:28'!testBlockingPeekBufferedPipe	"(OSPipeTestCase selector: #testBlockingPeekBufferedPipe) run"	| p |	p := ExternalPipe bufferedBlockingPipe.	[p nextPutAll: 'abc'; flush.	(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"	self assert: (p peek == $a).	self assert: (p next == $a).	self assert: (p peek == $b).	self assert: (p next == $b).	self assert: (p peek == $c).	self deny: p atEnd.	self assert: (p next == $c).	self deny: p atEnd.	p closeWriter.	self assert: p atEnd]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 5/17/2006 23:36'!testBufferedUpToEnd	"(OSPipeTestCase selector: #testBufferedUpToEnd) debug"	| s p r1 r2 |	s := 'some data to put through the pipe'.	p := OSPipe new.	self primTestEndOfFileFlag: p reader fileID. "check that OSPP is updated"	self assert: p setBufferedReader.	[p nextPutAll: s.	p closeWriter.	r1 := p upToEnd. "#atEnd does not detect EOF on a pipe"	self assert: r1 isEmpty.	r2 := p upToEndOfFile. "detects EOF correctly, gets remaining data"	self assert: r2 = s]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:21'!testIsAtEndOfFile	"(OSPipeTestCase selector: #testIsAtEndOfFile) debug"	| p |	p := OSPipe new.	self primTestEndOfFileFlag: p reader fileID. "check that OSPP is updated"	self deny: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p reader atEnd.	self deny: p atEnd.	self assert: (p reader basicNext == nil).	self deny: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p reader atEnd.	self deny: p atEnd.	p writer nextPut: $X; flush.	self assert: (p reader basicNext == $X).	self deny: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p reader atEnd.	self deny: p atEnd.	self assert: (p reader basicNext == nil).	self deny: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p reader atEnd.	self deny: p atEnd.	p writer close.	self deny: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p atEndOfFile. "no read yet, so flag has not been set"	self deny: p reader atEnd.	self assert: p atEnd. "writer closed and read gives nil"	self assert: (p reader basicNext == nil). "read operation should set flag"	self assert: (OSProcess accessor isAtEndOfFile: p reader fileID).	self deny: p reader atEnd. "#atEnd does not detect EOF on a pipe"	self assert: p reader atEndOfFile.	self assert: p atEnd.	p close! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:23'!testIsAtEndOfFile2	"(OSPipeTestCase selector: #testIsAtEndOfFile2) debug"	| p s |	p := OSPipe new.	[p nextPutAll: 'hello'; flush.	s := p next: 100.	self assert: s = 'hello'.	self deny: p atEndOfFile.	p closeWriter.	self deny: p atEndOfFile.	s := p next: 100.	self assert: s = ''.	self assert: p atEndOfFile]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 3/25/2006 13:44'!testNonBlocking	"(OSPipeTestCase selector: #testNonBlocking) run"	| p ws str |	p := OSPipe nonBlockingPipe.	self writeStuffOnThenClose: p.	ws := self readFromAndClose: p writingTo: (WriteStream on: String new).	str := (ws contents last: 16).	self should: ['this is line 10*' match: str].	p close! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 4/2/2006 21:40'!testNonBlockingBufferedPipe	"(OSPipeTestCase selector: #testNonBlockingBufferedPipe) run"	| p ws str |	p := ExternalPipe bufferedNonBlockingPipe.	[self writeStuffOnThenClose: p.	self assert: (p peek == nil).	(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"	ws := self readFromAndClose: p writingTo: (WriteStream on: String new).	str := (ws contents last: 16).	self should: ['this is line 10*' match: str]]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:28'!testNonBlockingPeek	"(OSPipeTestCase selector: #testNonBlockingPeek) run"	| p |	p := OSPipe nonBlockingPipe.	p nextPutAll: 'abc'; flush.	self assert: (p peek == $a).	self assert: (p next == $a).	self assert: (p peek == $b).	self assert: (p next == $b).	self assert: (p peek == $c).	self deny: p atEnd.	self assert: (p next == $c).	self deny: p atEnd.	p closeWriter.	self assert: p atEnd.	p close! !!OSPipeTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:28'!testNonBlockingPeekBufferedPipe	"(OSPipeTestCase selector: #testNonBlockingPeekBufferedPipe) run"	| p |	p := ExternalPipe bufferedNonBlockingPipe.	[p nextPutAll: 'abc'; flush.	self assert: (p peek == nil).	(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"	self assert: (p peek == $a).	self assert: (p next == $a).	self assert: (p peek == $b).	self assert: (p next == $b).	self assert: (p peek == $c).	self deny: p atEnd.	self assert: (p next == $c).	self deny: p atEnd.	p closeWriter.	self assert: p atEnd]		ensure: [p close]! !!OSPipeTestCase methodsFor: 'private' stamp: 'dtl 3/25/2006 18:29'!writeStuffOnThenClose: aPipe	^ [(1 to: 10) do:		[:i |		[aPipe nextPutAll: 'this is line ', i printString; cr]			on: Error			do: ["Ignore error. Test case will still fail, and throwing an error in this				process would cause a debugger to be scheduled inconveniently."].		(Delay forMilliseconds: 50) wait].	(aPipe respondsTo: #writer)		ifTrue: [[aPipe writer close]					on: Error					do: ["Ignore error to avoid a debugger"]]		ifFalse: [[aPipe close]					on: Error					do: ["Ignore error to avoid a debugger"]]]		forkAt: Processor userBackgroundPriority! !!UnixProcessAccessorTestCase commentStamp: '<historical>' prior: 35117276!Unit tests for the UnixProcessAccessor.!!UnixProcessAccessorTestCase methodsFor: 'testing - C string arrays' stamp: 'dtl 7/11/2005 19:00'!primFixPointersInArrayOfStrings: cStringArray withOffsets: offsetArray count: count	"This primitive call exists only for purposes of testing the	fixPointersInArrayOfStrings:withOffsets:count: method. I believe it to be	reasonably machine and compiler independent, but have no way of verifying	this on a variety of machines, so I'll leave this test method here in case	someone runs into problems on other hardware or compilers. -dtl"	"| a |	a := OSProcess thisOSProcess envAsFlatArrayAndOffsets: UnixProcess env.	UnixProcessAccessorTestCase new		primFixPointersInArrayOfStrings: (a at: 1)		withOffsets: (a at: 2)		count: (a at: 2) size"	<primitive: 'primitiveFixPointersInArrayOfStrings' module: 'UnixOSProcessPlugin'>	^ nil! !!UnixProcessAccessorTestCase methodsFor: 'running' stamp: 'dtl 3/1/2002 18:02'!runAll	"UnixProcessAccessorTestCase new runAll"	| result suite |	suite := TestSuite new.	suite addTest: (UnixProcessAccessorTestCase selector: #testSessionIdentifier).	suite addTest: (UnixProcessAccessorTestCase selector: #testCanAccessSystem).	suite addTest: (UnixProcessAccessorTestCase selector: #testMakePipeHandles).	suite addTest: (UnixProcessAccessorTestCase selector: #testUnixFileNumber).	suite addTest: (UnixProcessAccessorTestCase selector: #testFileProtectionMask).	suite addTest: (UnixProcessAccessorTestCase selector: #testFileStat).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsExecutable).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsExecutableForUserInGroup).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsReadable).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsReadableForUserInGroup).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsWritable).	suite addTest: (UnixProcessAccessorTestCase selector: #testIsWritableForUserInGroup).	suite addTest: (UnixProcessAccessorTestCase selector: #runExternalProcessAccess).	suite addTest: (UnixProcessAccessorTestCase selector: #runForkAndExec).	result := suite run.	self should: [result defects size == 0].	^ result! !!UnixProcessAccessorTestCase methodsFor: 'running' stamp: 'dtl 8/3/2003 18:02'!runExternalProcessAccess	"UnixProcessAccessorTestCase new runExternalProcessAccess"	| result suite |	suite := TestSuite new.	suite addTest: (UnixProcessAccessorTestCase selector: #testCanAccessSystem).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetCurrentWorkingDirectory).	suite addTest: (UnixProcessAccessorTestCase selector: #testChDir).	suite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAt).	suite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut1).	suite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut2).	suite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimUnsetEnv).	suite addTest: (UnixProcessAccessorTestCase selector: #testGetStdInHandle).	suite addTest: (UnixProcessAccessorTestCase selector: #testGetStdOutHandle).	suite addTest: (UnixProcessAccessorTestCase selector: #testGetStdErrHandle).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimArgumentAt).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimErrorMessageAt).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetGid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetEGid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPPid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetUid).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetSession).	suite addTest: (UnixProcessAccessorTestCase selector: #testRealpath).	result := suite run.	self should: [result defects size == 0].	^ result! !!UnixProcessAccessorTestCase methodsFor: 'running' stamp: 'dtl 10/6/2001 11:37'!runForkAndExec	"Most of this must be tested from class UnixProcess"	"UnixProcessAccessorTestCase new runForkAndExec"	| result suite |	suite := TestSuite new.	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetChildExitStatus).	suite addTest: (UnixProcessAccessorTestCase selector: #testPrimForkAndExec).	result := suite run.	self should: [result defects size == 0].	^ result! !!UnixProcessAccessorTestCase methodsFor: 'running' stamp: 'dtl 10/6/2001 08:29'!setUp	accessor := ThisOSProcess accessor! !!UnixProcessAccessorTestCase methodsFor: 'testing - C string arrays' stamp: 'dtl 9/10/2011 14:17'!testArgsAsFlatArrayAndOffsets	"Test conversion of an array of strings into the form used to create a C **char	in UnixOSProcessPlugin."	"(UnixProcessAccessorTestCase selector: #testArgsAsFlatArrayAndOffsets) debug"	| a pointerSize lengthOfCStrings totalLength stringsAndOffsets rs s arrayWithMachineDependentPointers |	pointerSize := OSProcess accessor sizeOfPointer.	a := { 'one ' . 'two ' . 'three ' }.	a do: [:e | e at: e size put: (Character value: 0)].	stringsAndOffsets := OSProcess thisOSProcess argsAsFlatArrayAndOffsets: a.	self assert: stringsAndOffsets size == 2.	self assert: stringsAndOffsets second size == 3.	lengthOfCStrings := (a collect: [:e | e size]) sum.	totalLength := 4 * pointerSize + lengthOfCStrings.	self assert: stringsAndOffsets first size == totalLength.	stringsAndOffsets second do: [:offset |		(stringsAndOffsets first at: offset) == (Character value: 0)].	rs := ReadStream on: stringsAndOffsets first.	rs next: 4 * pointerSize.	s :=  rs next: 3.	rs next.	self assert: s = 'one'.	s :=  rs next: 3.	rs next.	self assert: s = 'two'.	s :=  rs next: 5.	rs next.	self assert: s = 'three'.	rs := ReadStream on: stringsAndOffsets first.	rs next: (stringsAndOffsets second at: 1).	s :=  rs next: 3.	self assert: s = 'one'.	rs := ReadStream on: stringsAndOffsets first.	rs next: (stringsAndOffsets second at: 2).	s :=  rs next: 3.	self assert: s = 'two'.	rs := ReadStream on: stringsAndOffsets first.	rs next: (stringsAndOffsets second at: 3).	s :=  rs next: 5.	self assert: s = 'three'.	arrayWithMachineDependentPointers := self		primFixPointersInArrayOfStrings: stringsAndOffsets first		withOffsets: stringsAndOffsets second		count: stringsAndOffsets second size.	self assert: arrayWithMachineDependentPointers size == stringsAndOffsets first size.	rs := ReadStream on: arrayWithMachineDependentPointers.	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s = (String new: pointerSize). "a NULL pointer"	self assert: rs upToEnd = (stringsAndOffsets first allButFirst: pointerSize * 4)! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/6/2001 08:36'!testCanAccessSystem	"(UnixProcessAccessorTestCase selector: #testCanAccessSystem) run"	self assert: accessor canAccessSystem! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 6/10/2011 15:04'!testChDir	"(UnixProcessAccessorTestCase selector: #testChDir) run"	| cwd new |	cwd := accessor primGetCurrentWorkingDirectory.	new := '/bin'. "nb Do not use /tmp because OS X implements it as a sym link to private/tmp"	accessor chDir: new.	self should: [new = accessor primGetCurrentWorkingDirectory].	accessor chDir: cwd.	self should: [cwd = accessor primGetCurrentWorkingDirectory].! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:38'!testDupTo	"Perform a dup2() call to assign IO to a new file stream"	"(UnixProcessAccessorTestCase selector: #testDupTo) run"	| f1 f2 fd1 fd2 result contents1 contents2 |	OSProcess deleteFileNamed: '/tmp/delete-1.me'.		OSProcess deleteFileNamed: '/tmp/delete-2.me'.		f1 := FileStream newFileNamed: '/tmp/delete-1.me'.	f2 := FileStream newFileNamed: '/tmp/delete-2.me'.	fd1 := OSProcess accessor primUnixFileNumber: f1 fileID.	fd2 := OSProcess accessor primUnixFileNumber: f2 fileID.	result := OSProcess accessor primDup: fd1 to: fd2.	"f1 and f2 now both refer to the same IO stream"	self assert: result = fd2.	f2 nextPutAll: 'write something to the original f2 file stream that will appear in duped f1 instead'; flush.	f1 reset.	contents1 := f1 upToEnd.	self deny: contents1 isEmpty.	self assert: ('write something*' match: contents1).	f2 reset.	contents2 := f2 upToEnd.	self deny: contents2 isEmpty.	self assert: ('write something*' match: contents2).	f1 close.	f2 close.	"check the contents of the actual files"	contents1 := (FileStream fileNamed: '/tmp/delete-1.me') contentsOfEntireFile.	self assert: ('write something*' match: contents1).	contents2 := (FileStream fileNamed: '/tmp/delete-2.me') contentsOfEntireFile.	self assert: contents2 isEmpty.	OSProcess deleteFileNamed: '/tmp/delete-1.me'.		OSProcess deleteFileNamed: '/tmp/delete-2.me'.	! !!UnixProcessAccessorTestCase methodsFor: 'testing - C string arrays' stamp: 'dtl 9/10/2011 14:16'!testEnvAsFlatArrayAndOffsets	"Test conversion of a dictionary of key-value environment variables into the	form used to create a C **char in UnixOSProcessPlugin."	"(UnixProcessAccessorTestCase selector: #testEnvAsFlatArrayAndOffsets) debug"	| pointerSize lengthOfCStrings totalLength stringsAndOffsets rs s arrayWithMachineDependentPointers d |	pointerSize := OSProcess accessor sizeOfPointer.	d := Dictionary new.	d at: #ONE put: 'one'.	d at: #TWO put: 'two'.	d at: #THREE put: 'three'.	stringsAndOffsets := OSProcess thisOSProcess envAsFlatArrayAndOffsets: d.	self assert: stringsAndOffsets size == 2.	self assert: stringsAndOffsets second size == 3.	lengthOfCStrings := d keys		inject: 0		into: [:sum :e | sum + e size + '=' size + (d at: e) size + (String new: 1) size].	totalLength := 4 * pointerSize + lengthOfCStrings.	self assert: stringsAndOffsets first size == totalLength.	stringsAndOffsets second do: [:offset |		(stringsAndOffsets first at: offset) == (Character value: 0)].	arrayWithMachineDependentPointers := self		primFixPointersInArrayOfStrings: stringsAndOffsets first		withOffsets: stringsAndOffsets second		count: stringsAndOffsets second size.	self assert: arrayWithMachineDependentPointers size == stringsAndOffsets first size.	rs := ReadStream on: arrayWithMachineDependentPointers.	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s ~= (String new: pointerSize). "a C pointer"	s := rs next: pointerSize.	self assert: s = (String new: pointerSize). "a NULL pointer"	self assert: rs upToEnd = (stringsAndOffsets first allButFirst: pointerSize * 4)! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 08:53'!testEnvironmentAt	"(UnixProcessAccessorTestCase selector: #testEnvironmentAt) run"	| path |	path := accessor environmentAt: 'PATH'.	self should: [path notNil and: [path isEmpty not]]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 2/24/2013 10:26'!testEnvironmentAtPut	"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut) run"	| oldPath newPath resetPath s |	oldPath := accessor environmentAt: 'PATH'.	newPath := 'this is a test string'.	accessor environmentAt: 'PATH' put: newPath.	resetPath := accessor environmentAt: 'PATH'.	self should: [newPath = resetPath].	accessor environmentAt: 'PATH' put: oldPath.	resetPath := accessor environmentAt: 'PATH'.	self should: [oldPath = resetPath].	s := WriteStream on: String new.	10000 timesRepeat: [s nextPutAll: 'Do something to provoke garbage collection'].	resetPath := accessor environmentAt: 'PATH'.	self should: [oldPath = resetPath].! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/7/2001 11:47'!testEnvironmentAtPut1	"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut1) run"	| oldVal newVal resetVal |	oldVal := accessor environmentAt: 'AAAA'.	newVal := 'this is a test string'.	accessor environmentAt: 'AAAA' put: newVal.	resetVal := accessor environmentAt: 'AAAA'.	self should: [resetVal notNil and: [resetVal isEmpty not]].	self should: [newVal = resetVal].	accessor environmentAt: 'AAAA' put: oldVal.	self should: [oldVal = (accessor environmentAt: 'AAAA')]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/7/2001 12:14'!testEnvironmentAtPut2	"This looks for a bug in which the enviroment is successfully, but later gets	invalidated by memory moves or reallocation."	"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut2) run"	| oldVal newVal resetVal count ws goodResults notFound totallyBogus |	oldVal := accessor environmentAt: 'AAAA'.	newVal := 'this is a test string'.	accessor environmentAt: 'AAAA' put: newVal.	resetVal := accessor environmentAt: 'AAAA'.	self should: [resetVal notNil and: [resetVal isEmpty not]].	self should: [newVal = resetVal].	count := 50000.	ws := WriteStream on: Array new.	count timesRepeat: [ws nextPut: (accessor environmentAt: 'AAAA')].	goodResults := ws contents select: [:e | e = newVal].	notFound := ws contents select: [:e | e isNil].	totallyBogus := ws contents select: [:e | e notNil and: [e ~= newVal]].	"Uncomment the following to see when the problem is happening"	"(Array with: goodResults with: notFound with: totallyBogus) inspect."	self should: [goodResults size == count].	self should: [notFound isEmpty].	self should: [totallyBogus isEmpty].	accessor environmentAt: 'AAAA' put: oldVal.	self should: [oldVal = (accessor environmentAt: 'AAAA')]! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/6/2001 11:59'!testFileProtectionMask	"(UnixProcessAccessorTestCase selector: #testFileProtectionMask) run"	| mask |	mask := accessor fileProtectionMask: '/bin/rm'.	self assert: (mask isKindOf: Array).	self assert: (mask size == 4)! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/6/2001 12:06'!testFileStat	"(UnixProcessAccessorTestCase selector: #testFileStat) run"	| stat |	stat := accessor fileStat: '/bin/rm'.	self assert: (stat isKindOf: Array).	self assert: (stat size == 3).	self assert: ((stat at: 1) isKindOf: Integer).	self assert: ((stat at: 2) isKindOf: Integer).	self assert: ((stat at: 3) isKindOf: Array).	self assert: ((stat at: 3) size == 4)! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:36'!testGetStdErrHandle	"(UnixProcessAccessorTestCase selector: #testGetStdErrHandle) run"	| handle |	handle := accessor primGetStdErrHandle.	self assert: handle notNil! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:36'!testGetStdInHandle	"(UnixProcessAccessorTestCase selector: #testGetStdInHandle) run"	| handle |	handle := accessor primGetStdInHandle.	self assert: handle notNil! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:36'!testGetStdOutHandle	"(UnixProcessAccessorTestCase selector: #testGetStdOutHandle) run"	| handle |	handle := accessor primGetStdOutHandle.	self assert: handle notNil! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/6/2001 12:08'!testIsExecutable	"(UnixProcessAccessorTestCase selector: #testIsExecutable) run"	self should: [accessor isExecutable: '/bin/sh'].	self shouldnt: [accessor isExecutable: '/etc/hosts']! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 1/23/2013 21:35'!testIsExecutableForUserInGroup	"(UnixProcessAccessorTestCase selector: #testIsExecutableForUserInGroup) run"	self shouldnt: [OSProcess waitForCommand: 'touch /tmp/delete.me']		raise: Warning.	OSProcess waitForCommand: 'chmod 550 /tmp/delete.me'.	"explicitly set file group because OS X may have set it to something other than current gid"	OSProcess waitForCommand: 'chgrp ', accessor primGetGid asString, ' /tmp/delete.me'.	self should: [accessor isExecutable: '/bin/sh'					forUser: accessor primGetUid					inGroup: accessor primGetGid].	self shouldnt: [accessor isExecutable: '/etc/hosts'					forUser: accessor primGetUid					inGroup: accessor primGetGid].	self should: [accessor isExecutable: '/tmp/delete.me'					forUser: accessor primGetUid					inGroup: 99999].	self should: [accessor isExecutable: '/tmp/delete.me'					forUser: 99999					inGroup: accessor primGetGid].	self shouldnt: [accessor isExecutable: '/tmp/delete.me'					forUser: 99999					inGroup: 99999].	OSProcess deleteFileNamed: '/tmp/delete.me'! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 11:13'!testIsLockableFile	"(UnixProcessAccessorTestCase selector: #testIsLockableFile) debug"	| fs result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	result := OSProcess accessor isLockableFile: fs.	self should: result.	result := OSProcess accessor lockFile: fs.	self should: (result isKindOf: OSFileLock).	result := OSProcess accessor isLockableFile: fs.	self should: result.	OSProcess accessor unlockFile: fs.	result := OSProcess accessor isLockableFile: fs.	self should: result.	fs close.	result := OSProcess accessor isLockableFile: fs.	self shouldnt: result.	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/20/2001 11:39'!testIsReadable	"(UnixProcessAccessorTestCase selector: #testIsReadable) run"	self should: [accessor isReadable: '/bin/sh'].	OSProcess waitForCommand: 'touch /tmp/delete.me'.	OSProcess waitForCommand: 'chmod 440 /tmp/delete.me'.	(Delay forMilliseconds: 200) wait.	self should: [accessor isReadable: '/tmp/delete.me'].! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 1/23/2013 21:35'!testIsReadableForUserInGroup	"(UnixProcessAccessorTestCase selector: #testIsReadableForUserInGroup) run"	self shouldnt: [OSProcess waitForCommand: 'touch /tmp/delete.me']		raise: Warning.	OSProcess waitForCommand: 'chmod 550 /tmp/delete.me'.	"explicitly set file group because OS X may have set it to something other than current gid"	OSProcess waitForCommand: 'chgrp ', accessor primGetGid asString, ' /tmp/delete.me'.	self should: [accessor isReadable: '/bin/sh'					forUser: accessor primGetUid					inGroup: accessor primGetGid].	self should: [accessor isReadable: '/tmp/delete.me'					forUser: accessor primGetUid					inGroup: 99999].	self should: [accessor isReadable: '/tmp/delete.me'					forUser: 99999					inGroup: accessor primGetGid].	self shouldnt: [accessor isReadable: '/tmp/delete.me'					forUser: 99999					inGroup: 99999].	OSProcess deleteFileNamed: '/tmp/delete.me'! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/20/2001 11:38'!testIsWritable	"(UnixProcessAccessorTestCase selector: #testIsWritable) run"	self shouldnt: [accessor isWritable: '/bin/sh'].	OSProcess waitForCommand: 'touch /tmp/delete.me'.	OSProcess waitForCommand: 'chmod 770 /tmp/delete.me'.	(Delay forMilliseconds: 200) wait.	self should: [accessor isWritable: '/tmp/delete.me'].! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 1/23/2013 21:35'!testIsWritableForUserInGroup	"(UnixProcessAccessorTestCase selector: #testIsWritableForUserInGroup) run"	self shouldnt: [OSProcess waitForCommand: 'touch /tmp/delete.me']		raise: Warning.	OSProcess waitForCommand: 'chmod 770 /tmp/delete.me'.	"explicitly set file group because OS X may have set it to something other than current gid"	OSProcess waitForCommand: 'chgrp ', accessor primGetGid asString, ' /tmp/delete.me'.	self shouldnt: [accessor isWritable: '/bin/sh'					forUser: accessor primGetUid					inGroup: accessor primGetGid].	self should: [accessor isWritable: '/tmp/delete.me'					forUser: accessor primGetUid					inGroup: 99999].	self should: [accessor isWritable: '/tmp/delete.me'					forUser: 99999					inGroup: accessor primGetGid].	self shouldnt: [accessor isWritable: '/tmp/delete.me'					forUser: 99999					inGroup: 99999].	OSProcess deleteFileNamed: '/tmp/delete.me'! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:58'!testLockFile	"(UnixProcessAccessorTestCase selector: #testLockFile) debug"	| fs result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	result := OSProcess accessor lockFile: fs.	self should: (result isKindOf: OSFileLock).	fs close.	result := OSProcess accessor lockFile: fs.	self should: (result == nil).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/6/2001 11:48'!testMakePipeHandles	"(UnixProcessAccessorTestCase selector: #testMakePipeHandles) run"	| p |	p := OSPipe new.	self assert: p reader closed not.	self assert: p writer closed not.	p close! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:54'!testOSFileLockLock	"(UnixProcessAccessorTestCase selector: #testOSFileLockLock) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileLock onFile: fs exclusive: true.	result := fileLock lock.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	fs close.	result := fileLock lock.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:44'!testOSFileLockTest	"(UnixProcessAccessorTestCase selector: #testOSFileLockTest) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileLock onFile: fs exclusive: true.	result := fileLock test.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	result := fileLock test.	self should: (result == true).	result := fileLock unlock.	self should: (result == true).	result := fileLock test.	self should: (result == true).	fs close.	result := fileLock test.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:41'!testOSFileLockUnlock	"(UnixProcessAccessorTestCase selector: #testOSFileLockUnlock) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileLock onFile: fs exclusive: true.	result := fileLock unlock.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	result := fileLock unlock.	self should: (result == true).	fs close.	result := fileLock unlock.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:54'!testOSFileRegionLockLock	"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockLock) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.	result := fileLock lock.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	fs close.	result := fileLock lock.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:46'!testOSFileRegionLockTest	"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockTest) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.	result := fileLock test.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	result := fileLock test.	self should: (result == true).	result := fileLock unlock.	self should: (result == true).	result := fileLock test.	self should: (result == true).	fs close.	result := fileLock test.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 10:46'!testOSFileRegionLockUnlock	"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockUnlock) debug"	| fs fileLock result |	fs := FileStream fileNamed: 'junkfile'.	[fs nextPutAll: 'ABCDEFG'.	fileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.	result := fileLock unlock.	self should: (result == true).	result := fileLock lock.	self should: (result == true).	result := fileLock unlock.	self should: (result == true).	fs close.	result := fileLock unlock.	self should: (result == false).	] ensure: [fs close]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:42'!testPrimArgumentAt	"(UnixProcessAccessorTestCase selector: #testPrimArgumentAt) run"	| progName |	progName := accessor primArgumentAt: 1.	self should: [progName notNil and: [progName isEmpty not]]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:45'!testPrimErrorMessageAt	"(UnixProcessAccessorTestCase selector: #testPrimErrorMessageAt) run"	| msg |	msg := accessor primErrorMessageAt: 1.	self should: [msg notNil and: [msg isEmpty not]].	msg := accessor primErrorMessageAt: 0.	self should: [msg notNil and: [msg isEmpty not]]! !!UnixProcessAccessorTestCase methodsFor: 'testing - fork and exec' stamp: 'dtl 6/11/2011 12:25'!testPrimForkAndExec	"These methods can only be tested properly from UnixProcess, which knows how	to set up the parameters on the stack."	"(UnixProcessAccessorTestCase selector: #testPrimForkAndExec) run"	| p |	self shouldnt: [p := UnixProcess command: 'ls /bin']		raise: Warning.	(Delay forMilliseconds: 500) wait.	self should: [p isComplete].	self should: [p exitStatus == 0]! !!UnixProcessAccessorTestCase methodsFor: 'testing - fork and exec' stamp: 'dtl 10/6/2001 10:44'!testPrimGetChildExitStatus	"Cannot really test this here, because it needs to be wired into the interrupt	handler. Just make sure it returns nil when there is nothing to do."	"(UnixProcessAccessorTestCase selector: #testPrimGetChildExitStatus) run"	| stat |	stat := accessor primGetChildExitStatus: -1.	self should: [stat isNil].	stat := accessor primGetChildExitStatus: 1.	self should: [stat isNil]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 08:45'!testPrimGetCurrentWorkingDirectory	"(UnixProcessAccessorTestCase selector: #testPrimGetCurrentWorkingDirectory) run"	| cwd |	cwd := accessor primGetCurrentWorkingDirectory.	self should: [cwd notNil and: [cwd isEmpty not]]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:49'!testPrimGetEGid	"(UnixProcessAccessorTestCase selector: #testPrimGetEGid) run"	| id |	id := accessor primGetEGid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:49'!testPrimGetEUid	"(UnixProcessAccessorTestCase selector: #testPrimGetEUid) run"	| id |	id := accessor primGetEUid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:50'!testPrimGetGid	"(UnixProcessAccessorTestCase selector: #testPrimGetGid) run"	| id |	id := accessor primGetGid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:50'!testPrimGetPPid	"(UnixProcessAccessorTestCase selector: #testPrimGetPPid) run"	| id |	id := accessor primGetPPid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:50'!testPrimGetPid	"(UnixProcessAccessorTestCase selector: #testPrimGetPid) run"	| id |	id := accessor primGetPid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 8/19/2005 06:32'!testPrimGetSession	"As of OSPP version 4 and greater, the session ID should always be obtained from	the interpreter. Previously it was deduced by looking at the handle of an open file."	"(UnixProcessAccessorTestCase selector: #testPrimGetSession) run"	| id expectedSessionSize |	expectedSessionSize := [OSProcess accessor sizeOfInt] on: Error do: [4].	id := OSProcess accessor primGetSession.	self assert: (id isNil or: [id isKindOf: ByteArray]).	id := OSProcess accessor getSessionIdentifier.	self assert: (id isKindOf: ByteArray).	self assert: (id size / expectedSessionSize) == 1! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 09:50'!testPrimGetUid	"(UnixProcessAccessorTestCase selector: #testPrimGetUid) run"	| id |	id := accessor primGetUid.	self should: [id isKindOf: Integer]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/7/2001 14:07'!testPrimUnsetEnv	"(UnixProcessAccessorTestCase selector: #testPrimUnsetEnv) run"	| oldVal newVal resetVal |	oldVal := accessor environmentAt: 'AAAA'.	newVal := 'this is a test string'.	accessor environmentAt: 'AAAA' put: newVal.	resetVal := accessor environmentAt: 'AAAA'.	self should: [resetVal notNil and: [resetVal isEmpty not]].	self should: [newVal = resetVal].	accessor primUnsetEnv: 'AAAA', (Character value: 0) asString.	resetVal := accessor environmentAt: 'AAAA'.	self should: [resetVal isNil].	accessor environmentAt: 'AAAA' put: oldVal.	self should: [oldVal = (accessor environmentAt: 'AAAA')]! !!UnixProcessAccessorTestCase methodsFor: 'testing - external process access' stamp: 'dtl 10/6/2001 10:03'!testRealpath	"(UnixProcessAccessorTestCase selector: #testRealpath) run"	| p |	p := accessor realpath: '/usr/bin'.	self should: [p notNil and: [p isEmpty not]].	p := accessor realpath: '/bogus/path/name'.	self should: [p isNil]! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 6/6/2015 09:40'!testRedirectStdOutTo	"Perform a dup2() call on the standard output descriptor to assign it	to a new file stream"	"(UnixProcessAccessorTestCase selector: #testRedirectStdOutTo) run"	| out aFileStream contents outFd saveFd newFileNo saveFs |	out := OSProcess thisOSProcess stdOut.	"save file number to allow cleanup at end of test"	OSProcess deleteFileNamed: '/tmp/delete.2.me'.		saveFs := FileStream newFileNamed: '/tmp/delete.2.me'.	outFd := OSProcess accessor primUnixFileNumber: out fileID.	saveFd := OSProcess accessor primUnixFileNumber: saveFs fileID.	OSProcess accessor primDup: outFd to: saveFd.	"Original stdout file descriptor is saved as safeFd, to be restored at end of test"	OSProcess deleteFileNamed: '/tmp/delete.me'.		aFileStream := FileStream newFileNamed: '/tmp/delete.me'.	"nb - #contentsOfEntireFile closes the file, do not use"	aFileStream reset.	self assert: aFileStream upToEnd isEmpty.	"note - do not close aFileStream as this affects actual stdout"	out nextPutAll: 'foo'; flush.	aFileStream reset.	self assert: aFileStream upToEnd isEmpty.	OSProcess thisOSProcess redirectStdOutTo: aFileStream.	out nextPutAll: 'foo'; flush.	aFileStream reset.	contents := aFileStream upToEnd.	self deny: contents isEmpty.	self assert: contents = 'foo'. "assume noone else is using stdout right now"	"ensure the we can still find the real stdout"	self deny: OSProcess thisOSProcess stdOut closed.	OSProcess thisOSProcess stdOut nextPutAll: 'bar'; flush.	aFileStream reset.	contents := aFileStream upToEnd.	self deny: contents isEmpty.	self assert: contents = 'foobar'.	"Restore the original file number. The stdOut stream is cached in ThisOSProcess	(and should probably be recalculated following a dup2(), so find the real handle	with getStdOutHandle."	newFileNo := OSProcess accessor primUnixFileNumber: OSProcess accessor getStdOutHandle.	OSProcess accessor primDup: saveFd to: newFileNo.	OSProcess thisOSProcess stdOut lf; nextPutAll: 'UnixProcessAccessorTestCase>>testRedirectStdOutTo - this should appear on original console stdout'; lf.	saveFs close.	aFileStream close.		OSProcess deleteFileNamed: '/tmp/delete.me'.		OSProcess deleteFileNamed: '/tmp/delete.2.me'.	! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 10/1/2005 10:33'!testSessionIdentifier	"This is an indirect way to make sure that the primitive for obtaining the session ID does	not get out of kilter with respect to the method for obtaining session ID from an existing	open file. The dangerous failure mode is if the SQFile data stucture format changes and	OSProcess does not get updated to reflect the change.	As of approximately Squeak 3.8 and beyond, the session id has been moved to the	first slot of the data structure. Deducing the session ID from an open file will not	work for a Squeak VM beyond that point, and will not work for any 64 bit VM.	OSPP version 4.0 or higher obtains session ID from the interpreter, so this is no	longer an issue. Skip this test for OSPP 4.0 and higher."	"(UnixProcessAccessorTestCase selector: #testSessionIdentifier) debug"	| installedOSPPMajorVersion |	self should: [accessor getSessionIdentifier isKindOf: ByteArray].	installedOSPPMajorVersion := (OSProcess accessor osppModuleVersionString		ifNil: [-1]) asInteger.	(installedOSPPMajorVersion >= 4)		ifTrue: ["ignore this test"]		ifFalse: [self should:			[accessor getSessionIdentifierFromSourcesFile = accessor getSessionIdentifier]]! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'eem 3/27/2014 11:32'!testSignalNumbers	"Signal numbers as reported by UnixOSProcessPlugin. Note that some signal definitions	are architecture dependent, with specific number assignments differing between e.g. Intel	and Sparc. Intel architecture is assumed for this test."	"NOTE OSPP prior to version 4.4.12 had several incorrect signal number assignments.	Check the version level of OSPP by evaluating this expression:		OSProcess accessor primOSProcessPluginModuleVersionString"	self assert: OSProcess accessor primSigHupNumber = 1.	self assert: OSProcess accessor primSigIntNumber = 2.	self assert: OSProcess accessor primSigKillNumber = 9.	self assert: OSProcess accessor primSigPipeNumber = 13.	self assert: OSProcess accessor primSigQuitNumber = 3.	self assert: OSProcess accessor primSigTermNumber = 15.	OSProcess platformName caseOf:		{ ['unix']		->			[self assert: OSProcess accessor primSigUsr1Number = 10.			 self assert: OSProcess accessor primSigUsr2Number = 12.			 self assert: OSProcess accessor primSigChldNumber = 17.].		   ['Mac OS']	->			[self assert: OSProcess accessor primSigUsr1Number = 30.			 self assert: OSProcess accessor primSigUsr2Number = 31.			 self assert: OSProcess accessor primSigChldNumber = 20.]}		! !!UnixProcessAccessorTestCase methodsFor: 'testing' stamp: 'dtl 9/10/2011 09:26'!testUnixFileNumber	"For purposes of this test, assume that stdin and stderr have not been	directed."	"(UnixProcessAccessorTestCase selector: #testUnixFileNumber) run"	| err errFileNo errHandle in inFileNo inHandle aFileStream fFileNo fHandle |	err := OSProcess thisOSProcess stdErr.	errHandle := err fileID.	errFileNo := OSProcess accessor unixFileNumber: errHandle.	self assert: errFileNo == 2.	in := OSProcess thisOSProcess stdIn.	inHandle := in fileID.	inFileNo := OSProcess accessor unixFileNumber: inHandle.	self assert: inFileNo == 0.	aFileStream := FileStream fileNamed: '/tmp/delete.me'.	fHandle := aFileStream fileID.	fFileNo := OSProcess accessor unixFileNumber: fHandle.	self assert: fFileNo notNil.	self assert: fFileNo > 2.	aFileStream close! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 12:13'!testUnlockFileUnixCompatible	"(UnixProcessAccessorTestCase selector: #testUnlockFileUnixCompatible) debug"	| mode fs result |	mode := OSProcess accessor emulateWin32FileLocking. "remember setting"	fs := FileStream fileNamed: 'junkfile'.	[OSProcessAccessor emulateWin32FileLocking: false. "unix mode"	fs nextPutAll: 'ABCDEFG'.	result := OSProcess accessor unlockFile: fs.	"On Unix, the fcntl call to unlock the file will succeed even if	the file is not locked."	self should: (result isKindOf: OSFileLock).	result := OSProcess accessor lockFile: fs.	self should: (result isKindOf: OSFileLock).	result := OSProcess accessor unlockFile: fs.	self should: (result isKindOf: OSFileLock).	fs close.	result := OSProcess accessor unlockFile: fs.	self should: result == nil] ensure:		[OSProcessAccessor emulateWin32FileLocking: mode.		fs close]! !!UnixProcessAccessorTestCase methodsFor: 'file locking' stamp: 'dtl 5/7/2006 12:11'!testUnlockFileWin32Compatible	"(UnixProcessAccessorTestCase selector: #testUnlockFileWin32Compatible) debug"	| mode fs result |	mode := OSProcess accessor emulateWin32FileLocking. "remember setting"	fs := FileStream fileNamed: 'junkfile'.	[OSProcessAccessor emulateWin32FileLocking: true. "win32 mode"	fs nextPutAll: 'ABCDEFG'.	result := OSProcess accessor unlockFile: fs.	self should: result == nil.	result := OSProcess accessor lockFile: fs.	self should: (result isKindOf: OSFileLock).	result := OSProcess accessor unlockFile: fs.	self should: (result isKindOf: OSFileLock).	fs close.	result := OSProcess accessor unlockFile: fs.	self should: result == nil] ensure:		[OSProcessAccessor emulateWin32FileLocking: mode.		fs close]! !!UnixProcessFileLockTestCase commentStamp: 'dtl 3/7/2005 21:57' prior: 35117391!This test case was provided by Julian Fitzell. It provides more file locking tests in addition to those in UnitProcessFileLockingTestCase.!!UnixProcessFileLockTestCase methodsFor: 'asserting' stamp: 'jf 2/22/2004 19:07'!assertLock: lock1 lock: lock2 conflicts: aBoolean	self assert: (lock1 conflictsWith: lock2) = aBoolean.	self assert: (lock2 conflictsWith: lock1) = aBoolean.! !!UnixProcessFileLockTestCase methodsFor: 'data' stamp: 'jf 2/22/2004 19:11'!entireExclusiveLock	^ OSFileLock onFile: self fileStream exclusive: true! !!UnixProcessFileLockTestCase methodsFor: 'data' stamp: 'jf 2/22/2004 19:11'!entireSharedLock	^ OSFileLock onFile: self fileStream exclusive: false! !!UnixProcessFileLockTestCase methodsFor: 'accessing' stamp: 'jf 2/21/2004 18:14'!fileStream	^ fileStream! !!UnixProcessFileLockTestCase methodsFor: 'data' stamp: 'jf 2/22/2004 19:22'!regionExclusiveLock	^ self regionLockFrom: 10 to: 20 exclusive: true! !!UnixProcessFileLockTestCase methodsFor: 'data' stamp: 'jf 2/22/2004 19:22'!regionLockFrom: from to: to exclusive: exclusive	^ OSFileRegionLock onFile: self fileStream from: from to: to exclusive: exclusive! !!UnixProcessFileLockTestCase methodsFor: 'data' stamp: 'jf 2/22/2004 19:22'!regionSharedLock	^ self regionLockFrom: 10 to: 20 exclusive: false! !!UnixProcessFileLockTestCase methodsFor: 'running' stamp: 'jf 2/21/2004 18:12'!setUp	fileStream := FileStream fileNamed: 'junkfile'.! !!UnixProcessFileLockTestCase methodsFor: 'running' stamp: 'dtl 1/23/2013 19:42'!tearDown	fileStream close.	OSProcess deleteFileNamed: fileStream fullName! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:27'!testDistinctExclusiveRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: true)		lock: (self regionLockFrom: 30 to: 40 exclusive: true)		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:27'!testDistinctExclusiveRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: true)		lock: (self regionLockFrom: 30 to: 40 exclusive: false)		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:27'!testDistinctSharedRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: false)		lock: (self regionLockFrom: 30 to: 40 exclusive: true)		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:26'!testDistinctSharedRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: false)		lock: (self regionLockFrom: 30 to: 40 exclusive: false)		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:12'!testEntireExclusiveWithEntireExclusive	self		assertLock: self entireExclusiveLock		lock: self entireExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:16'!testEntireExclusiveWithExclusiveRegion	self		assertLock: self entireExclusiveLock		lock: self regionExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:17'!testEntireExclusiveWithSharedRegion	self		assertLock: self entireExclusiveLock		lock: self regionSharedLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:12'!testEntireSharedWithEntireExclusive	self		assertLock: self entireSharedLock		lock: self entireExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:12'!testEntireSharedWithEntireShared	self		assertLock: self entireSharedLock		lock: self entireSharedLock		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:14'!testEntireSharedWithExclusiveRegion	self		assertLock: self entireSharedLock		lock: self regionExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:15'!testEntireSharedWithSharedRegion	self		assertLock: self entireSharedLock		lock: self regionSharedLock		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:18'!testExclusiveRegionWithExclusiveRegion	self		assertLock: self regionExclusiveLock		lock: self regionExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:25'!testIdenticalExclusiveRegionWithExclusiveRegion	self		assertLock: self regionExclusiveLock		lock: self regionExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:24'!testIdenticalSharedRegionWithExclusiveRegion	self		assertLock: self regionSharedLock		lock: self regionExclusiveLock		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:24'!testIdenticalSharedRegionWithSharedRegion	self		assertLock: self regionSharedLock		lock: self regionSharedLock		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:25'!testOverlappingExclusiveRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: true)		lock: (self regionLockFrom: 20 to: 30 exclusive: true)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:26'!testOverlappingExclusiveRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: true)		lock: (self regionLockFrom: 20 to: 30 exclusive: false)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:26'!testOverlappingSharedRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: false)		lock: (self regionLockFrom: 20 to: 30 exclusive: true)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:26'!testOverlappingSharedRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 20 exclusive: false)		lock: (self regionLockFrom: 20 to: 30 exclusive: false)		conflicts: false! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:21'!testSupersetExclusiveRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 40 exclusive: true)		lock: (self regionLockFrom: 20 to: 30 exclusive: true)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:23'!testSupersetExclusiveRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 40 exclusive: true)		lock: (self regionLockFrom: 20 to: 30 exclusive: false)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:23'!testSupersetSharedRegionWithExclusiveRegion	self		assertLock: (self regionLockFrom: 10 to: 40 exclusive: false)		lock: (self regionLockFrom: 20 to: 30 exclusive: true)		conflicts: true! !!UnixProcessFileLockTestCase methodsFor: 'testing' stamp: 'jf 2/22/2004 19:24'!testSupersetSharedRegionWithSharedRegion	self		assertLock: (self regionLockFrom: 10 to: 40 exclusive: false)		lock: (self regionLockFrom: 20 to: 30 exclusive: false)		conflicts: false! !!UnixProcessTestCase commentStamp: '<historical>' prior: 35117591!Unit tests for the Unix portion of OSProcess.!!UnixProcessTestCase class methodsFor: 'failures' stamp: 'eem 3/27/2014 11:20'!expectedFailures	^UnixOSProcessAccessor basicNew safeToForkSqueak		ifTrue: [#()]		ifFalse: [#(	testClassForkHeadlessSqueakAndDo					testClassForkHeadlessSqueakAndDoThenQuit					testClassForkSqueak					testClassForkSqueakAndDo					testClassForkSqueakAndDoThenQuit					testForkHeadlessSqueakAndDo					testForkHeadlessSqueakAndDoThenQuit					testForkSqueak					testForkSqueakAndDo					testForkSqueakAndDoThenQuit					testHeadlessChild					testSpawnTenHeadlessChildren)]! !!UnixProcessTestCase methodsFor: 'failures' stamp: 'eem 3/27/2014 11:29'!expectedFailures	^UnixOSProcessAccessor basicNew safeToForkSqueak		ifTrue: [#()]		ifFalse: [#(	testClassForkHeadlessSqueakAndDo					testClassForkHeadlessSqueakAndDoThenQuit					testClassForkSqueak					testClassForkSqueakAndDo					testClassForkSqueakAndDoThenQuit					testEightLeafSqueakTree					testForkHeadlessSqueakAndDo					testForkHeadlessSqueakAndDoThenQuit					testForkSqueak					testForkSqueakAndDo					testForkSqueakAndDoThenQuit					testHeadlessChild					testSpawnTenHeadlessChildren)]! !!UnixProcessTestCase methodsFor: 'private' stamp: 'dtl 1/23/2013 21:30'!numberOfOpenFiles	"Answer the number of files currently open for this OS process. This works	only on a system with a /proc filesystem and file descriptors located in a	directory called /proc/<pid>/fd. On other systems, just answer 0."	"UnixProcessTestCase new numberOfOpenFiles"	| path |	path := '/proc/' , OSProcess thisOSProcess pid printString, '/fd'.	^ (OSProcess directoryExists: path)		ifTrue: [(OSProcess directoryEntryNames: path) size]		ifFalse: [0]! !!UnixProcessTestCase methodsFor: 'running' stamp: 'dtl 3/10/2002 10:52'!runAll	"If you get intermittent failures, try doing a garbage collect. Some of these	tests can fail intermittently on the open file handle count checks"	"UnixProcessTestCase new runAll"	| result suite |	Smalltalk garbageCollect.	suite := TestSuite new.	suite addTest: (UnixProcessTestCase selector: #testClassForkSqueak).	suite addTest: (UnixProcessTestCase selector: #testClassForkSqueakAndDo).	suite addTest: (UnixProcessTestCase selector: #testClassForkSqueakAndDoThenQuit).	suite addTest: (UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDo).	suite addTest: (UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDoThenQuit).	suite addTest: (UnixProcessTestCase selector: #testForkSqueak).	suite addTest: (UnixProcessTestCase selector: #testForkSqueakAndDo).	suite addTest: (UnixProcessTestCase selector: #testForkSqueakAndDoThenQuit).	suite addTest: (UnixProcessTestCase selector: #testForkHeadlessSqueakAndDo).	suite addTest: (UnixProcessTestCase selector: #testForkHeadlessSqueakAndDoThenQuit).	suite addTest: (UnixProcessTestCase selector: #testHeadlessChild).	suite addTest: (UnixProcessTestCase selector: #testSpawnTenHeadlessChildren).	suite addTest: (UnixProcessTestCase selector: #testEightLeafSqueakTree).	suite addTest: (UnixProcessTestCase selector: #testCatAFile).	suite addTest: (UnixProcessTestCase selector: #testCatFromFileToFiles).	suite addTest: (UnixProcessTestCase selector: #testRunCommand).	suite addTest: (UnixProcessTestCase selector: #testPipe).	suite addTest: (UnixProcessTestCase selector: #testPipeLine).	result := suite run.	self should: [result defects size == 0].	^ result! !!UnixProcessTestCase methodsFor: 'running' stamp: 'dtl 7/30/2010 16:47'!setUp	(self respondsTo: #timeout: ) "Recent Squeak images with test case timeout"		ifTrue: [self perform: #timeout: with: 60].	thisOSProcess := OSProcess thisOSProcess! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 6/11/2011 12:26'!testCatAFile	"(UnixProcessTestCase selector: #testCatAFile) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [p := UnixProcess catAFile]		raise: Warning.	self assert: p notNil.	self should: [p isRunning].	[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].	self should: [p isComplete].	self should: [p exitStatus == 0].	self should: [p initialStdIn closed]. "Used a file for input, should be closed"	self shouldnt: [p initialStdOut closed]. "Shared stdout with the VM, should be open"	self shouldnt: [p initialStdErr closed]. "Shared stderr with the VM, should be open"	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 1/23/2013 21:36'!testCatFromFileToFiles	"(UnixProcessTestCase selector: #testCatFromFileToFiles) run"	| p f openFileCount |	openFileCount := self numberOfOpenFiles.	OSProcess deleteFileNamed: '/tmp/deleteMe.out'.	OSProcess deleteFileNamed: '/tmp/deleteMe.err'.	self shouldnt: [p := UnixProcess catFromFileToFiles]		raise: Warning.	self assert: p notNil.	self should: [p isRunning].	[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].	self should: [p isComplete].	self should: [p exitStatus == 0].	self should: [p initialStdIn closed].	self should: [p initialStdOut closed].	self should: [p initialStdErr closed].	f := FileStream oldFileNamed: '/tmp/deleteMe.out'.	self shouldnt: [f upToEnd isEmpty].	f close.	f := FileStream oldFileNamed: '/tmp/deleteMe.err'.	self should: [f upToEnd isEmpty].	f close.	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class side methods' stamp: 'dtl 6/29/2005 14:24'!testClassForkHeadlessSqueakAndDo	"(UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDo) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:		[p := UnixProcess forkHeadlessSqueakAndDo:			[(Delay forMilliseconds: 100) wait.			OSProcess snapshot: false andQuit: true]]		raise: Warning. "Catch warning if fork fails"	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class side methods' stamp: 'dtl 6/29/2005 14:26'!testClassForkHeadlessSqueakAndDoThenQuit	"(UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDoThenQuit) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:		[p := UnixProcess forkHeadlessSqueakAndDoThenQuit:			[(Delay forMilliseconds: 100) wait]]		raise: Warning. "Catch warning if fork fails"	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class side methods' stamp: 'dtl 6/10/2011 15:38'!testClassForkSqueak	"(UnixProcessTestCase selector: #testClassForkSqueak) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [p := UnixProcess forkSqueak]		raise: Warning.	self assert: p notNil.	(p == thisOSProcess)		ifTrue:			["Child Squeak"			p inspect.			(Delay forMilliseconds: 100) wait.			OSProcess snapshot: false andQuit: true]		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class side methods' stamp: 'dtl 6/10/2011 15:43'!testClassForkSqueakAndDo	"(UnixProcessTestCase selector: #testClassForkSqueakAndDo) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := UnixProcess forkSqueakAndDo:					[(Delay forMilliseconds: 100) wait.					OSProcess snapshot: false andQuit: true]]		raise: Warning.	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class side methods' stamp: 'dtl 6/10/2011 15:43'!testClassForkSqueakAndDoThenQuit	"(UnixProcessTestCase selector: #testClassForkSqueakAndDoThenQuit) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := UnixProcess forkSqueakAndDoThenQuit:					[(Delay forMilliseconds: 100) wait]]		raise: Warning.	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 6/10/2011 15:55'!testEightLeafSqueakTree	"(UnixProcessTestCase selector: #testEightLeafSqueakTree) run"	| a openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [a := UnixProcess eightLeafSqueakTree]		raise: Warning.	self assert: (a isKindOf: Array).	self assert: a size == 3.	(a includes: 0)		ifTrue:			[Smalltalk quitPrimitive].	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - child process creation' stamp: 'dtl 6/10/2011 15:47'!testForkHeadlessSqueakAndDo	"(UnixProcessTestCase selector: #testForkHeadlessSqueakAndDo) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := thisOSProcess forkHeadlessSqueakAndDo:					[(Delay forMilliseconds: 100) wait.					OSProcess snapshot: false andQuit: true]]		raise: Warning. "Catch warning if fork fails"	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - child process creation' stamp: 'dtl 6/10/2011 15:47'!testForkHeadlessSqueakAndDoThenQuit	"(UnixProcessTestCase selector: #testForkHeadlessSqueakAndDoThenQuit) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := thisOSProcess forkHeadlessSqueakAndDoThenQuit:					[(Delay forMilliseconds: 100) wait]]		raise: Warning. "Catch warning if fork fails"	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - child process creation' stamp: 'dtl 6/29/2005 14:30'!testForkSqueak	"(UnixProcessTestCase selector: #testForkSqueak) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [p := thisOSProcess forkSqueak]		raise: Warning. "Catch warning if fork fails"	self assert: p notNil.	(p == thisOSProcess)		ifTrue:			["Child Squeak"			p inspect.			(Delay forMilliseconds: 100) wait.			OSProcess snapshot: false andQuit: true]		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - child process creation' stamp: 'dtl 6/10/2011 15:45'!testForkSqueakAndDo	"(UnixProcessTestCase selector: #testForkSqueakAndDo) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := thisOSProcess forkSqueakAndDo:					[(Delay forMilliseconds: 100) wait.					OSProcess snapshot: false andQuit: true]]		raise: Warning.	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - child process creation' stamp: 'dtl 6/10/2011 15:46'!testForkSqueakAndDoThenQuit	"(UnixProcessTestCase selector: #testForkSqueakAndDoThenQuit) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt:			[p := thisOSProcess forkSqueakAndDoThenQuit:					[(Delay forMilliseconds: 100) wait]]		raise: Warning.	self assert: p notNil.	(p == thisOSProcess)		ifFalse:			["Parent Squeak process"			self should: [p isRunning].			[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].			self should: [p isComplete].			self should: [p exitStatus == 0].			self assert: self numberOfOpenFiles == openFileCount]! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 6/29/2005 14:32'!testHeadlessChild	"(UnixProcessTestCase selector: #testHeadlessChild) run"	| p openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [p := UnixProcess headlessChild]		raise: Warning. "Catch warning if fork fails"	[p isComplete] whileFalse: [(Delay forMilliseconds: 100) wait].	self assert: p isComplete.	self assert: p exitStatus == 0.	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 10/12/2001 08:32'!testPipe	"(UnixProcessTestCase selector: #testPipe) run"	| openFileCount |	openFileCount := self numberOfOpenFiles.	self should: [UnixProcess testPipe = 'this is some text to write into the pipe'].	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 10/12/2001 08:32'!testPipeLine	"(UnixProcessTestCase selector: #testPipeLine) run"	| openFileCount |	openFileCount := self numberOfOpenFiles.	self should: ['This is the text to write*' match: UnixProcess testPipeLine].	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 1/23/2013 21:36'!testRunCommand	"(UnixProcessTestCase selector: #testRunCommand) run"	| p f openFileCount |	openFileCount := self numberOfOpenFiles.	OSProcess deleteFileNamed: '/tmp/deleteMe.out'.	OSProcess deleteFileNamed: '/tmp/deleteMe.err'.	self shouldnt: [p := UnixProcess testRunCommand]		raise: Warning.	self assert: p notNil.	self should: [p isRunning].	[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].	self should: [p isComplete].	self should: [p exitStatus > 0].	"Forced an error exit status"	"stdin was shared with the Squeak VM, so it should not have been closed."	self shouldnt: [p initialStdIn closed].	"but the output and error streams should have been closed."	self should: [p initialStdOut closed].	self should: [p initialStdErr closed].	f := FileStream oldFileNamed: '/tmp/deleteMe.out'.	self shouldnt: [f upToEnd isEmpty].	f close.	f := FileStream oldFileNamed: '/tmp/deleteMe.err'.	self shouldnt: [f upToEnd isEmpty].	f close.	self assert: self numberOfOpenFiles == openFileCount! !!UnixProcessTestCase methodsFor: 'testing - class examples' stamp: 'dtl 6/29/2005 14:33'!testSpawnTenHeadlessChildren	"(UnixProcessTestCase selector: #testSpawnTenHeadlessChildren) run"	| a openFileCount |	openFileCount := self numberOfOpenFiles.	self shouldnt: [a := UnixProcess spawnTenHeadlessChildren]		raise: Warning. "Catch warning if fork fails"	[(a detect: [:p | p isComplete not] ifNone: []) notNil]		whileTrue: [(Delay forMilliseconds: 100) wait].	self should: [(a select: [:p | p isComplete not]) isEmpty].	self assert: self numberOfOpenFiles == openFileCount! !"OSProcess-Tests"!!PPStyler commentStamp: 'CiprianTeodorov 11/3/2015 00:23' prior: 0!This class is a copy of the PPTextHighlighter class found in the PetitGui package. Since It can live without a glamour dependency I believe that it should be in a different package.This is a utility class for creating a highlighted text. For this we need:- a parser: PPParser- an attributeMapperHere is a template to use it:PPStyler new	parser: YourParser new;	color: 'tokenName1' with: Color blue;	color: 'tokenName2' with: Color gray;	highlight: string.!!PPStyler commentStamp: 'CiprianTeodorov 11/3/2015 00:23' prior: 35258332!This class is a copy of the PPTextHighlighter class found in the PetitGui package. Since It can live without a glamour dependency I believe that it should be in a different package.This is a utility class for creating a highlighted text. For this we need:- a parser: PPParser- an attributeMapperHere is a template to use it:PPStyler new	parser: YourParser new;	color: 'tokenName1' with: Color blue;	color: 'tokenName2' with: Color gray;	highlight: string.!!PPStyler methodsFor: 'public' stamp: 'CiprianTeodorov 11/2/2015 18:38'!addAttribute: aTextAttribute for: anElementString 	| attributes |	attributes := self attributeMapper at: anElementString ifAbsentPut: [OrderedCollection new].	attributes add: aTextAttribute! !!PPStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2015 18:38'!attributeMapper 	"returns a dictionary with keys corresponding to parser names and 	values corresponding to a collection of TextAttributes"	^ attributeMapper! !!PPStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2015 18:38'!attributeMapper: aDictionary 	attributeMapper := aDictionary! !!PPStyler methodsFor: 'public' stamp: 'CiprianTeodorov 11/2/2015 18:38'!bold: anElementString	self addAttribute: TextEmphasis bold for: anElementString! !!PPStyler methodsFor: 'public' stamp: 'CiprianTeodorov 11/2/2015 18:38'!color: anElementString with: aColor	self addAttribute: (TextColor new color: aColor) for: anElementString! !!PPStyler methodsFor: 'public' stamp: 'CiprianTeodorov 11/2/2015 18:38'!highlight: aString	| text highlighter |	text := aString asText.	highlighter := parser transform: [ :p |		attributeMapper at: p name			ifPresent: [ :attributes | 				p token ==> [ :token | 					attributes do: [:each |						text 							addAttribute: each 							from: token start 							to: token stop ] ] ]			ifAbsent: [ p ] ].	highlighter parse: text.	^ text! !!PPStyler methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/2/2015 18:38'!initialize	parser := #any asParser.	attributeMapper := Dictionary new! !!PPStyler methodsFor: 'public' stamp: 'CiprianTeodorov 11/2/2015 21:10'!italic: anElementString	self addAttribute: TextEmphasis italic for: anElementString! !!PPStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2015 18:38'!parser	^ parser! !!PPStyler methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2015 18:38'!parser: aParser	parser := aParser! !"PetitStyler"!!PPScriptingTest commentStamp: '<historical>' prior: 0!These are some simple demo-scripts of parser combinators for the compiler construction course.http://www.iam.unibe.ch/~scg/Teaching/CC/index.html!!PPStream commentStamp: '<historical>' prior: 0!A positional stream implementation used for parsing. It overrides some methods for optimization reasons.!!PPContext commentStamp: 'JanKurs 8/26/2014 16:11' prior: 0!A PPContext is provides contextual information to the parsing function.Instance Variables	globals:		<Dictionary>	properties:		<Dictionar>	root:		<PPParser>	stream:		<PPStream>globals	- properties that are not restored after backtrackingproperties	- properties that are restored after backtrackingroot	- the root parserstream	- input stream!!PPFailure commentStamp: 'BernardoContreras 3/16/2015 21:39' prior: 0!The failure object in PetitParser. It is the only class that responds to #isPetitFailure with true. It contains an error message and a position of the occurrence of the failure.Instance Variables:	message	<String>	The error message of this failure.	position	<Integer>	The position of this failure in the input stream.!!PPMemento commentStamp: 'BernardoContreras 3/16/2015 21:40' prior: 0!PPMemento is an internal class used by PPMemoizedParser to cache results and detect left-recursive calls.Instance Variables:	result	<Object>	The cached result.	count	<Integer>	The number of recursive cycles followed.	!!PPParser commentStamp: 'BernardoContreras 3/16/2015 21:32' prior: 0!An abstract parser for all parsers in PetitParser. Subclasses implement #parseOn: to perform the actual recursive-descent parsing. All parsers support a variety of methods to perform an actual parse, see the methods in the #parsing protocol. Parsers are combined with a series of operators that can be found in the #operations protocol.Instance Variables:	properties	<Dictionary>	Stores additional state in the parser object.!!PPDelegateParser commentStamp: 'BernardoContreras 3/16/2015 21:31' prior: 0!A parser that delegates to another parser.Instance Variables:	parser	<PPParser>	The parser to delegate to.!!PPActionParser commentStamp: 'BernardoContreras 3/16/2015 21:31' prior: 0!A parser that performs an action block with the successful parse result of the delegate.Instance Variables:	block	<BlockClosure>	The action block to be executed.!!PPWrappingParser commentStamp: '<historical>' prior: 0!A parser that performs an action block upon activation with the stream and a continuation block.!!PPAndParser commentStamp: 'TudorGirba 2/27/2011 22:22' prior: 0!The and-predicate, a parser that succeeds whenever its delegate does, but does not consume the input stream [Parr 1994, 1995].!!PPCompositeParser commentStamp: 'BernardoContreras 3/16/2015 21:36' prior: 0!A PPCompositeParser is composed parser built from various primitive parsers. Every production in the receiver is specified as a method that returns its parser. Note that every production requires an instance variable of the same name, otherwise the production is not cached and cannot be used in recursive grammars. Productions should refer to each other by reading the respective inst-var. Note: these inst-vars are typically not written, as the assignment happens in the initialize method using reflection.The start production is defined in the method start. It is aliased to the inst-var parser defined in the superclass of PPCompositeParser.!!PPConditionalParser commentStamp: 'JanKurs 2/4/2015 18:03' prior: 0!A PPConditionalParser is a delegate parser that evaluates a block and if that returns true, the delegate parser is invoked and its result returned. If the block evaluates to false, the PPFailure is returned.The block accepts one argument, context.E.g.    ('a' asParser if: [ :ctx | (ctx propertyAt: #myProperty) isNotNil ]) parse: 'a'!!PPEndOfInputParser commentStamp: 'lr 4/18/2008 13:46' prior: 0!A parser that succeeds only at the end of the input stream.!!PPExpressionParser commentStamp: '<historical>' prior: 0!A PPExpressionParser is a parser to conveniently define an expression grammar with prefix, postfix, and left- and right-associative infix operators.The following code initializes a parser for arithmetic expressions. First we instantiate an expression parser, a simple parser for expressions in parenthesis and a simple parser for integer numbers.	expression := PPExpressionParser new.	parens := $( asParser token trim , expression , $) asParser token trim 		==> [ :nodes | nodes second ].	integer := #digit asParser plus token trim		==> [ :token | token value asInteger ].	Then we define on what term the expression grammar is built on:	expression term: parens / integer.	Finally we define the operator-groups in descending precedence. Note, that the action blocks receive both, the terms and the parsed operator in the order they appear in the parsed input. 		expression		group: [ :g |			g prefix: $- asParser token trim do: [ :op :a | a negated ] ];		group: [ :g |			g postfix: '++' asParser token trim do: [ :a :op | a + 1 ].			g postfix: '--' asParser token trim do: [ :a :op | a - 1 ] ];		group: [ :g |			g right: $^ asParser token trim do: [ :a :op :b | a raisedTo: b ] ];		group: [ :g |			g left: $* asParser token trim do: [ :a :op :b | a * b ].			g left: $/ asParser token trim do: [ :a :op :b | a / b ] ];		group: [ :g |			g left: $+ asParser token trim do: [ :a :op :b | a + b ].			g left: $- asParser token trim do: [ :a :op :b | a - b ] ].		After evaluating the above code the 'expression' is an efficient parser that evaluates examples like:	expression parse: '-8++'.	expression parse: '1+2*3'.	expression parse: '1*2+3'.	expression parse: '(1+2)*3'.	expression parse: '8/4/2'.	expression parse: '8/(4/2)'.	expression parse: '2^2^3'.	expression parse: '(2^2)^3'.	Instance Variables:	operators	<Dictionary>	The operators defined in the current group.!!PPFlattenParser commentStamp: 'lr 11/22/2009 13:09' prior: 0!A parser that answers a flat copy of the range my delegate parses.!!PPTokenParser commentStamp: 'lr 2/25/2013 23:31' prior: 0!A parser that answers a token with the value of my delegate parses.Instance Variables:	tokenClass	<PPToken class>	The token sub-class to be used.!!PPMemoizedParser commentStamp: '<historical>' prior: 0!A memoized parser, for refraining redundant computations.Instance Variables:	stream	<PositionableStream>	The stream of the associated memento objects.	buffer	<Array of: PPMemento>	The buffer of memento objects.!!PPNotParser commentStamp: '<historical>' prior: 0!The not-predicate, a parser that succeeds whenever its delegate does not, but consumes no input [Parr 1994, 1995].!!PPOptionalParser commentStamp: 'lr 4/3/2011 14:46' prior: 0!A parser that optionally parsers its delegate, or answers nil.!!PPRepeatingParser commentStamp: 'lr 4/3/2011 14:45' prior: 0!An abstract parser that repeatedly parses between 'min' and 'max' instances of its delegate. The default configuration parses an infinite number of elements, as 'min' is set to 0 and 'max' to infinity (SmallInteger maxVal).Instance Variables:	min	<Integer>	The minimum number of repetitions.	max	<Integer>	The maximum number of repetitions.!!PPLimitedRepeatingParser commentStamp: 'BernardoContreras 3/16/2015 21:30' prior: 0!An abstract parser that repeatedly parses between 'min' and 'max' instances of my delegate and that requires the input to be completed with a specified parser 'limit'. Subclasses provide repeating behavior as typically seen in regular expression implementations (non-blind).Instance Variables:	limit	<PPParser>	The parser to complete the input with.!!PPGreedyRepeatingParser commentStamp: 'lr 4/3/2011 15:08' prior: 0!A greedy repeating parser, commonly seen in regular expression implementations. It aggressively consumes as much input as possible and then backtracks to meet the 'limit' condition.This class essentially implements the iterative version of the following recursive parser composition:	| parser |	parser := PPChoiceParser new.	parser setParsers: (Array		with: (self , parser map: [ :each :rest | rest addFirst: each; yourself ])		with: (limit and ==> [ :each | OrderedCollection new ])).	^ parser ==> [ :rest | rest asArray ]!!PPLazyRepeatingParser commentStamp: 'lr 4/3/2011 15:08' prior: 0!A lazy repeating parser, commonly seen in regular expression implementations. It limits its consumption to meet the 'limit' condition as early as possible.This class essentially implements the iterative version of the following recursive parser composition:	| parser |	parser := PPChoiceParser new.	parser setParsers: (Array		with: (limit and ==> [ :each | OrderedCollection new ])		with: (self , parser map: [ :each :rest | rest addFirst: each; yourself ])).	^ parser ==> [ :rest | rest asArray ]!!PPPossessiveRepeatingParser commentStamp: 'lr 4/3/2011 14:35' prior: 0!The default repeating parser with standard PEG semantics (i.e. possessive, blind, eager).!!PPTrimmingParser commentStamp: 'BernardoContreras 3/16/2015 21:29' prior: 0!A parser that silently consumes spaces before and after the delegate parser.!!PPEndOfFileParser commentStamp: 'JanKurs 2/4/2015 17:52' prior: 0!A PPEndOfFileParser is parser that will will return true if the stream position is at the end, returns failure otherwise.The diffirenece between PPEndOfFIleParser and PPEndOfInputParser is: - PPEndOfFileParser can be created using #eof asParser - PPEndOfInputParser can be created by using parser end - PPEndOfFileParser does not delegate to any other parser - PPEndOfInputParser parsers its delegate and then decides if the input is at the end.The PPEndOfFileParser can be used to accept some input only if it is at the end of the input, e.g:   ('a' asParser, #eof asParser) parse: 'a'   ('a' asParser, #eof asParser) parse: 'aa'!!PPEndOfLineParser commentStamp: 'JanKurs 10/29/2014 15:49' prior: 0!A PPEndOfLineParser is a parser that does not fail, if the stream position is at the end of a line. It does not consume anything.!!PPEpsilonParser commentStamp: 'lr 5/15/2008 15:09' prior: 0!A parser that consumes nothing and always succeeds.!!PPFailingParser commentStamp: 'BernardoContreras 3/16/2015 21:29' prior: 0!A parser that consumes nothing and always fails.Instance Variables:	message <String>	The failure message.!!PPListParser commentStamp: 'BernardoContreras 3/16/2015 21:28' prior: 0!Abstract parser that parses a list of things in some way (to be specified by the subclasses).Instance Variables:	parsers	<SequenceableCollection of: PPParser>	A sequence of other parsers to delegate to.!!PPChoiceParser commentStamp: 'lr 4/18/2008 15:35' prior: 0!A parser that uses the first parser that succeeds.!!PPLimitedChoiceParser commentStamp: 'JanKurs 11/12/2014 11:53' prior: 0!A PPLimitedChoiceParser is similar to the choice parser except for the fact, that limit must pass if one of the choices passes. This is similar strategy as with the PPLimitedRepeatingParsers.This way, one can implement choices that successfully parse this (if limit is filled with 'a'):('aa' // 'a') 'a' parse: 'aa'The limit can be automatically filled using elements from either follow or next set (see methods  PPParser>>followSets or PPParser>>nextSets).Limit is by default epsilon and therefore it behaves as an ordinary ordered choice.Instance Variables	limit:		<Object>limit	- xxxxx!!PPSequenceParser commentStamp: 'lr 4/18/2008 15:34' prior: 0!A parser that parses a sequence of parsers.!!PPLiteralParser commentStamp: 'BernardoContreras 3/16/2015 21:20' prior: 0!Abstract literal parser that parses some kind of literal type (to be specified by subclasses).Instance Variables:	literal	<Object>	The literal object to be parsed.	message	<String>	The error message to be generated.!!PPLiteralObjectParser commentStamp: '<historical>' prior: 0!A parser that accepts a single literal object, such as a character. This is the same as the predicate parser 'PPPredicateParser expect: literal' but slightly more efficient.!!PPLiteralSequenceParser commentStamp: 'lr 12/4/2009 18:39' prior: 0!A parser accepts a sequence of literal objects, such as a String. This is an optimization to avoid having to compose longer sequences from PPSequenceParser.!!PPPattern commentStamp: '<historical>' prior: 0!PPPattern is meta-parser that is solely used to match other types of parsers. It cannot be used for actually parsing something. The constructor method determines what can be matched.!!PPListPattern commentStamp: '<historical>' prior: 0!PPListPattern that is used to match any number of parsers. As its superclass, it cannot be used for actually parsing something.!!PPPluggableParser commentStamp: 'BernardoContreras 3/16/2015 21:19' prior: 0!A pluggable parser that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.Instance Variables:	block	<BlockClosure>	The pluggable one-argument block.!!PPPredicateParser commentStamp: '<historical>' prior: 0!An abstract parser that accepts if a given predicate holds.Instance Variables:	predicate	<BlockClosure>	The block testing for the predicate.	predicateMessage	<String>	The error message of the predicate.	negated	<BlockClosure>	The block testing for the negation of the predicate.	negatedMessage	<String>	The error message of the negated predicate.!!PPPredicateObjectParser commentStamp: 'BernardoContreras 3/16/2015 21:18' prior: 0!A parser that accepts if a given predicate on one element of the input sequence holds.!!PPPredicateSequenceParser commentStamp: 'BernardoContreras 3/16/2015 21:18' prior: 0!A parser that accepts if a given predicate on an arbitrary number of elements of the input sequence holds.Instance Variables:	size	<Integer>	The number of elements to consume.!!PPStartOfLineParser commentStamp: 'JanKurs 10/29/2014 15:48' prior: 0!A PPStartOfLineParser is that does not fail, if the stream position is at the beginning of a line. It does not consume anything.!!PPStartOfLogicalLineParser commentStamp: 'JanKurs 1/8/2015 15:56' prior: 0!A PPStartOfLogicalLineParser is that does not fail, if the stream position is at the first non-blank character of a line. It does not consume anything.!!PPStartOfWordParser commentStamp: 'JanKurs 12/12/2014 16:50' prior: 0!A PPStartOfWordParser is that matches a word boundary.I return success if no word character preceeds my position and if word chracter succeeds my position.Word characters are any alphanumeric characters.!!PPUnresolvedParser commentStamp: 'lr 11/28/2009 18:50' prior: 0!This is a temporary placeholder or forward reference to a parser that has not been defined yet. If everything goes well it will eventually be replaced with the real parser instance.!!PPProcessor commentStamp: '<historical>' prior: 0!PPProcessor is an abstract superclass to PPRewriter and PPSearcher. It implements common functionality to search and transform grammars.The implementation of these matching algorithms is inspired from the refactoring engine by Don Roberts and John Brant. Contrary to the original implementation that worked on syntax trees, this implementation was generalized and works on possibly cyclic search patterns and grammar graphs.Instance Variables:	searches	<Collection of: PPRule>	The rules to be processed.	context	<Dictionary>	The current search context.!!PPRewriter commentStamp: '<historical>' prior: 0!PPRewriter walks over a grammar graph and transforms its parsers. If the grammar is modified, #hasChanged returns true.Instance Variables:	changed	<Boolean>	Indicates if the last operation has changed anything.!!PPSearcher commentStamp: '<historical>' prior: 0!PPSearcher walks over a grammar specification and matches its parsers against the patterns using #match:inContext:.Instance Variables:	answer <Object>	The answer propagated between matches.!!PPRule commentStamp: '<historical>' prior: 0!PPRule is the abstract superclass of all of the grammar search rules. A rule is the first class representation of a particular pattern to search for. The owner of the rule is the algorithms that actually executes the search. This arrangement allows multiple searches to be conducted by a single processor.Instance Variables:	owner	<PPProcessor>	The processor that is actually performing the search.	search	<PPParser>	The parse pattern to be searched.!!PPReplaceRule commentStamp: '<historical>' prior: 0!PPReplaceRule is the abstract superclass of all of the transforming rules. The rules change the grammar by replacing the node that matches the rule. Subclasses implement different strategies for this replacement.Instance Variables:	verificationBlock	<BlockClosure>	Is evaluated with the matching parser and allows for further verification of a match.!!PPBlockReplaceRule commentStamp: '<historical>' prior: 0!PPBlockReplaceRule replaces the matching node by the result of evaluating replaceBlock. This allows arbitrary computation to come up with a replacement.Instance Variables:	replaceBlock <BlockClosure>	The block that returns the parer to replace to matching parser with.!!PPParserReplaceRule commentStamp: '<historical>' prior: 0!PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.Instance Variables:	replaceParser	<PPParser>	The parser to replace the matched parser with.!!PPSearchRule commentStamp: '<historical>' prior: 0!PPSearchRule is a rule that simply searches for matches to the rule. Every time a match is found, answerBlock is evaluated with the parser that matches and the current answer. This two-argument approach allows a collection to be formed from all of the matches, like with #inject:into:.Instance Variables:	answerBlock	<BlockClosure>	Block to evaluate with the matching node and the current answer.!!PPToken commentStamp: 'BernardoContreras 3/16/2015 21:41' prior: 0!PPToken represents a parsed part of the input stream. Contrary to a simple String it remembers where it came from, the original collection and its start and stop position.Instance Variables:	collection	<SequenceableCollection>	The collection this token comes from.	start	<Integer>	The start position in the collection.	stop	<Integer>	The stop position in the collection.!!SequenceableCollection methodsFor: '*petitparser-core-converting' stamp: 'lr 2/7/2010 20:53'!asPetitStream	^ PPStream on: self! !!Character methodsFor: '*petitparser-core-converting' stamp: 'lr 12/18/2011 15:58'!asParser	"Answer a parser that accepts the receiving character."		^ PPLiteralObjectParser on: self! !!PositionableStream methodsFor: '*petitparser-core-converting' stamp: 'JanKurs 11/4/2014 09:38'!asPetitStream	"Some of my subclasses do not use the instance-variables collection, position and readLimit but instead have a completely different internal representation. In these cases just use the super implementation that is inefficient but should work in all cases.""	Disabled until we agree on some way how to optimize this	^ (collection isNil or: [ position isNil or: [ readLimit isNil ] ])		ifFalse: [ PPStream on: collection from: ( position + 1 ) to: readLimit ]      ifTrue: [ super asPetitStream ]"	^ super asPetitStream! !!PositionableStream methodsFor: '*petitparser-core' stamp: 'sback 9/3/2010 10:00'!peekTwice	"Answer what would be returned if the message next were sent to the 	receiver. If the receiver is at the end, answer nil."	| array |	self atEnd 		ifTrue: [^Array with: nil with: nil].	array := Array with: (self next) with: (self peek).	position := position - 1.	^array! !!Interval methodsFor: '*petitparser-core-converting' stamp: 'JanKurs 11/17/2014 11:36'!asParser    	"Create a range of characters between start and stop."    self assert:start isCharacter.    self assert:stop isCharacter.    self assert:step == 1.    ^ PPPredicateObjectParser between: start and: stop    "		($a to: $f) asParser parse: 'a'		($a to: $f) asParser parse: 'g'    "! !!Symbol methodsFor: '*petitparser-core-converting' stamp: 'lr 12/18/2011 15:58'!asParser	"Answer a predicate parser named after the receiving symbol. Possible symbols are the method selectors on the class-side of PPPredicateObjectParser."	^ PPPredicateObjectParser perform: self! !!String methodsFor: '*petitparser-core-converting' stamp: 'lr 11/29/2011 20:48'!asParser	"Answer a parser that accepts the receiving string."	^ PPLiteralSequenceParser on: self! !!Stream methodsFor: '*petitparser-core-converting' stamp: 'lr 4/8/2010 14:46'!asPetitStream	^ self contents asPetitStream! !!PPParserResource methodsFor: 'accessing' stamp: 'lr 9/15/2010 12:12'!parserAt: aParserClass	"Answer a cached instance of aParserClass."		^ parsers at: aParserClass name ifAbsentPut: [ aParserClass new ]! !!PPParserResource methodsFor: 'running' stamp: 'lr 3/29/2010 15:20'!setUp	super setUp.	parsers := Dictionary new! !!PPAbstractParserTest class methodsFor: 'testing' stamp: 'lr 1/12/2011 21:23'!isAbstract	^ self name = #PPAbstractParserTest! !!PPAbstractParserTest class methodsFor: 'accessing' stamp: 'lr 6/12/2010 08:22'!packageNamesUnderTest	^ #('PetitParser' 'PetitTests')! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'DamienPollet 8/11/2011 01:50'!assert: aParser fail: aCollection	^ self assert: aParser fail: aCollection end: 0! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'JanKurs 9/23/2014 18:08'!assert: aParser fail: aCollection end: anInteger	| stream result context |	self 		assert: aParser isPetitParser		description: 'Parser invalid'.	stream := aCollection asPetitStream.	context := self context.			result := aParser parse: stream withContext: context.	self 		assert: result isPetitFailure		description: 'Parser did not fail'.	self		assert: context position = anInteger		description: 'Parser failed at wrong position'.	^ result! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'JamesFoster 2/20/2015 11:37'!assert: string1 includesSubstring: string2	"Support portability by using ANSI search method"	self assert: (string1 notEmpty and: [string2 notEmpty and: [0 < (string1 indexOfSubCollection: string2 startingAt: 1)]])! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'DamienPollet 8/11/2011 01:49'!assert: aParser parse: aCollection	^ self assert: aParser parse: aCollection to: nil end: aCollection size ! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'DamienPollet 8/11/2011 01:49'!assert: aParser parse: aCollection end: anInteger	^ self assert: aParser parse: aCollection to: nil end: anInteger! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'DamienPollet 8/11/2011 01:49'!assert: aParser parse: aCollection to: anObject	^ self assert: aParser parse: aCollection to: anObject end: aCollection size ! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'JanKurs 9/17/2014 20:03'!assert: aParser parse: aCollection to: aTargetObject end: anInteger	| stream result context |	self assert: aParser isPetitParser description: 'Parser invalid'.	stream := aCollection asPetitStream.	context := self context.		result := aParser parse: stream withContext: context.	aTargetObject isNil		ifTrue: [ self deny: result isPetitFailure ]		ifFalse: [ self assert: result equals: aTargetObject ].	self assert: context position = anInteger description: 'Parser accepted at wrong position'.	^ result! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'lr 2/26/2013 00:43'!assert: aParser parse: aCollection toToken: aStartInteger stop: aStopInteger	^ self assert: aParser parse: aCollection toToken: aStartInteger stop: aStopInteger end: aCollection size! !!PPAbstractParserTest methodsFor: 'utilities' stamp: 'Nicolasanquetil 5/3/2013 15:13'!assert: aParser parse: aParserObject toToken: aStartInteger stop: aStopInteger end: anEndInteger	| token |	token := self		assert: aParser		parse: aParserObject		to: nil		end: anEndInteger.	self assert: (token isKindOf: PPToken).	self assert: token start equals: aStartInteger.	self assert: token stop equals: aStopInteger.	^ token! !!PPAbstractParserTest methodsFor: 'context' stamp: 'JanKurs 9/17/2014 20:03'!context	^ PPContext new! !!PPAnalyzerTest class methodsFor: 'accessing' stamp: 'lr 11/19/2009 21:51'!packageNamesUnderTest	^ #('PetitAnalyzer')! !!PPAnalyzerTest methodsFor: 'utilities' stamp: 'lr 2/7/2010 20:54'!assert: aCollection includes: aString epsilon: aBoolean	| parsers checker stream |	parsers := aCollection		collect: [ :each | each end ].	checker := [ :string |		parsers anySatisfy: [ :parser |			(parser parse: string asPetitStream)				isPetitFailure not ] ].	stream := WriteStream on: String new.	32 to: 127 do: [ :index |		(checker value: (String with: (Character value: index)))			ifTrue: [ stream nextPut: (Character value: index) ] ].	self		assert: stream contents = aString		description: 'Expected ' , aString printString , ', but got ' , stream contents printString.	self		assert: (checker value: '') = aBoolean		description: 'Expected epsilon to ' , (aBoolean ifTrue: [ 'be' ] ifFalse: [ 'not be' ]) , '  included'! !!PPAnalyzerTest methodsFor: 'accessing' stamp: 'lr 11/20/2009 15:29'!grammarA	"Güting, Erwig, Übersetzerbau, Springer (p.63)"	| grammar |	grammar := Dictionary new.		" terminals "	grammar at: #a put: $a asParser.	grammar at: #b put: $b asParser.	grammar at: #c put: $c asParser.	grammar at: #d put: $d asParser.	grammar at: #e put: nil asParser.		" non terminals "	grammar at: #B put: (grammar at: #b) / (grammar at: #e).	grammar at: #A put: (grammar at: #a) / (grammar at: #B).	grammar at: #S put: (grammar at: #A) , (grammar at: #B) , (grammar at: #c) , (grammar at: #d).		^ grammar	! !!PPAnalyzerTest methodsFor: 'accessing' stamp: 'lr 11/19/2009 23:42'!grammarB	"The canonical grammar to exercise first- and follow-set calculation, probably originally from the dragon-book."	| grammar |	grammar := Dictionary new.	#(E Ep T Tp F) 		do: [ :each | grammar at: each put: (PPUnresolvedParser named: each) ].			(grammar at: #E)		def: (grammar at: #T) , (grammar at: #Ep).	(grammar at: #Ep)	def: ($+ asParser , (grammar at: #T) , (grammar at: #Ep)) optional.		(grammar at: #T)		def: (grammar at: #F) , (grammar at: #Tp).	(grammar at: #Tp)	def: ($* asParser , (grammar at: #F) , (grammar at: #Tp)) optional.		(grammar at: #F)		def: ($( asParser , (grammar at: #E) , $) asParser) / $i asParser.				#(E Ep T Tp F) 		do: [ :each | (grammar at: each) name: each ].		^ grammar! !!PPAnalyzerTest methodsFor: 'accessing' stamp: 'DiegoLont 9/2/2013 12:16'!grammarC	"A highly recrusive grammar."	| grammar |	grammar := PPUnresolvedParser new.	grammar def: (grammar , $+ asParser , grammar) / $1 asParser.	^grammar! !!PPAnalyzerTest methodsFor: 'accessing' stamp: 'DiegoLont 9/2/2013 12:37'!grammarD	"A highly ambiguous grammar from: Saichaitanya Jampana. Exploring the problem of ambiguity in context-free grammars. Master's thesis, Oklahoma State University, July 2005."	| grammar |	grammar := Dictionary new.	#(S A a B b)			do: [ :each | grammar at: each put: (PPUnresolvedParser named: each) ].	(grammar at: #a)		def: $a asParser.	(grammar at: #b)		def: $b asParser.			(grammar at: #S)		def: (grammar at: #A) , (grammar at: #B) / (grammar at: #a).	(grammar at: #A)		def: (grammar at: #S) , (grammar at: #B) / (grammar at: #b).	(grammar at: #B)		def: (grammar at: #B) , (grammar at: #A) / (grammar at: #a).			^ grammar! !!PPAnalyzerTest methodsFor: 'accessing' stamp: 'lr 11/19/2009 23:52'!grammarE	"The most stupid parser, it just references itself and never consumes anything. All algorithms should survive such an attack."	| parser |	parser := PPDelegateParser new.	parser setParser: parser.	^ parser! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:20'!testAllNamedParsers	| p1 p2 p3 |	p1 := #digit asParser name: 'a'.	p2 := (#digit asParser name: 'b') star.	p3 := (#digit asParser name: 'c') token end.	self assert: p1 allNamedParsers size equals: 1.	self assert: p1 allNamedParsers first name equals: 'a'.	self assert: p2 allNamedParsers size equals: 1.	self assert: p2 allNamedParsers first name equals: 'b'.	self assert: p3 allNamedParsers size equals: 1.	self assert: p3 allNamedParsers first name equals: 'c'! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:06'!testAllParsers	| p1 p2 p3 |	p1 := #lowercase asParser.	p2 := p1 ==> #asUppercase.	p3 := PPUnresolvedParser new.	p3 def: p2 / p3.	self assert: p1 allParsers size equals: 1.	self assert: p2 allParsers size equals: 2.	self assert: p3 allParsers size equals: 3! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'lr 11/20/2009 00:00'!testCycleSetGrammarA	self grammarA do: [ :each | self assert: each cycleSet isEmpty ]! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'lr 11/20/2009 00:01'!testCycleSetGrammarB	self grammarB do: [ :each | self assert: each cycleSet isEmpty ]! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testCycleSetGrammarC	| grammar cycleSet |	grammar := self grammarC.	cycleSet := grammar cycleSet.	self assert: cycleSet size equals: 2.	self assert: (cycleSet includes: grammar)! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'Nicolasanquetil 5/3/2013 15:20'!testCycleSetGrammarD	| grammar cycleSet |	grammar := self grammarD.	cycleSet := (grammar at: #S) cycleSet.	self assert: cycleSet size equals: 4.	self assert: (cycleSet includes: (grammar at: #A)).	self assert: (cycleSet includes: (grammar at: #S)).	cycleSet := (grammar at: #A) cycleSet.	self assert: cycleSet size equals: 4.	self assert: (cycleSet includes: (grammar at: #A)).	self assert: (cycleSet includes: (grammar at: #S)).	cycleSet := (grammar at: #B) cycleSet.	self assert: cycleSet size equals: 2.	self assert: (cycleSet includes: (grammar at: #B))! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'Nicolasanquetil 5/3/2013 15:07'!testCycleSetGrammarE	| grammar cycleSet |	grammar := self grammarE.	cycleSet := grammar cycleSet.	self assert: cycleSet size equals: 1.	self assert: (cycleSet includes: grammar)! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testCycleSetInChoice	| parser cycleSet |	parser := PPUnresolvedParser new.	parser def: parser / $a asParser.	cycleSet := parser cycleSet.	self assert: cycleSet size equals: 1.	self assert: (cycleSet includes: parser).	parser := PPUnresolvedParser new.	parser def: $a asParser / parser.	cycleSet := parser cycleSet.	self assert: cycleSet size equals: 1.	self assert: (cycleSet includes: parser)! !!PPAnalyzerTest methodsFor: 'testing-cycleset' stamp: 'Nicolasanquetil 5/3/2013 14:58'!testCycleSetInSequence	| parser cycleSet |	parser := PPUnresolvedParser new.	parser def: parser , $a asParser.	cycleSet := parser cycleSet.	self assert: cycleSet size equals: 1.	self assert: (cycleSet includes: parser).	parser := PPUnresolvedParser new.	parser def: nil asParser , parser.	cycleSet := parser cycleSet.	self assert: cycleSet size equals: 1.	self assert: (cycleSet includes: parser).	parser := PPUnresolvedParser new.	parser def: $a asParser , parser.	cycleSet := parser cycleSet.	self assert: cycleSet isEmpty! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 12:19'!testDelegateReplace	| one other delegate |	one := $a asParser.	other := $b asParser.	delegate := one token.	self assert: delegate children first == one.	self deny: delegate children first == other.		delegate replace: other with: one.	self assert: delegate children first == one.	self deny: delegate children first == other.		delegate replace: one with: other.	self deny: delegate children first == one.	self assert: delegate children first == other! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 7/17/2011 12:22'!testFirstSetExpression	| grammar |	grammar := PPArithmeticParser new.	self assert: grammar start firstSet includes: '(-0123456789' epsilon: false.	self assert: grammar addition firstSet includes: '(-0123456789' epsilon: false.	self assert: grammar factors firstSet includes:  '(-0123456789' epsilon: false.	self assert: grammar multiplication firstSet includes:  '(-0123456789' epsilon: false.	self assert: grammar number firstSet includes: '-0123456789' epsilon: false.	self assert: grammar parentheses firstSet includes: '(' epsilon: false.	self assert: grammar power firstSet includes: '(-0123456789' epsilon: false.	self assert: grammar primary firstSet includes: '(-0123456789' epsilon: false.	self assert: grammar terms firstSet includes: '(-0123456789' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 11/12/2009 17:53'!testFirstSetGrammarA	| grammar |	grammar := self grammarA.	self assert: (grammar at: #a) firstSet includes: 'a' epsilon: false.	self assert: (grammar at: #b) firstSet includes: 'b' epsilon: false.	self assert: (grammar at: #c) firstSet includes: 'c' epsilon: false.	self assert: (grammar at: #d) firstSet includes: 'd' epsilon: false.	self assert: (grammar at: #e) firstSet includes: '' epsilon: true.	self assert: (grammar at: #S) firstSet includes: 'abc' epsilon: false.	self assert: (grammar at: #A) firstSet includes: 'ab' epsilon: true.	self assert: (grammar at: #B) firstSet includes: 'b' epsilon: true! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 11/12/2009 17:53'!testFirstSetGrammarB	| grammar |	grammar := self grammarB.	self assert: (grammar at: #E) firstSet includes: '(i' epsilon: false.	self assert: (grammar at: #Ep) firstSet includes: '+' epsilon: true.	self assert: (grammar at: #T) firstSet includes: '(i' epsilon: false.	self assert: (grammar at: #Tp) firstSet includes: '*' epsilon: true.	self assert: (grammar at: #F) firstSet includes: '(i' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 11/12/2009 17:53'!testFirstSetGrammarC	| grammar |	grammar := self grammarC.	self assert: grammar firstSet includes: '1' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'TestRunner 11/12/2009 17:55'!testFirstSetGrammarD	| grammar |	grammar := self grammarD.	self assert: (grammar at: #S) firstSet includes: 'ab' epsilon: false.	self assert: (grammar at: #A) firstSet includes: 'ab' epsilon: false.	self assert: (grammar at: #B) firstSet includes: 'a' epsilon: false.	self assert: (grammar at: #a) firstSet includes: 'a' epsilon: false.	self assert: (grammar at: #b) firstSet includes: 'b' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 11/19/2009 23:55'!testFirstSetGrammarE	self assert: self grammarE firstSet includes: '' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-firstset' stamp: 'lr 10/22/2009 18:10'!testFirstSetLambda	| grammar |	grammar := PPLambdaParser new.	self assert: grammar start firstSet includes: '(ABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyz' epsilon: false.	self assert: grammar abstraction firstSet includes: '\' epsilon: false.	self assert: grammar application firstSet includes: '(' epsilon: false.	self assert: grammar expression firstSet includes: '(ABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyz' epsilon: false.	self assert: grammar variable firstSet includes: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-followset' stamp: 'lr 10/22/2009 19:53'!testFollowSetExampleA	| grammar followSets |	grammar := self grammarA.	followSets := (grammar at: #S) followSets.	self assert: (followSets at: (grammar at: #a)) includes: 'bc' epsilon: false.	self assert: (followSets at: (grammar at: #b)) includes: 'bc' epsilon: false.	self assert: (followSets at: (grammar at: #c)) includes: 'd' epsilon: false.	self assert: (followSets at: (grammar at: #d)) includes: '' epsilon: true.	self assert: (followSets at: (grammar at: #e)) includes: 'bc' epsilon: false.	self assert: (followSets at: (grammar at: #S)) includes: '' epsilon: true.	self assert: (followSets at: (grammar at: #A)) includes: 'bc' epsilon: false.	self assert: (followSets at: (grammar at: #B)) includes: 'bc' epsilon: false! !!PPAnalyzerTest methodsFor: 'testing-followset' stamp: 'lr 10/22/2009 19:06'!testFollowSetExampleB	| grammar followSets |	grammar := self grammarB.	followSets := (grammar at: #E) followSets.	self assert: (followSets at: (grammar at: #E)) includes: ')' epsilon: true.	self assert: (followSets at: (grammar at: #Ep)) includes: ')' epsilon: true.	self assert: (followSets at: (grammar at: #T)) includes: ')+' epsilon: true.	self assert: (followSets at: (grammar at: #Tp)) includes: ')+' epsilon: true.	self assert: (followSets at: (grammar at: #F)) includes: ')*+' epsilon: true! !!PPAnalyzerTest methodsFor: 'testing-followset' stamp: 'lr 10/22/2009 19:10'!testFollowSetExampleC	self assert: self grammarC followSet includes: '+' epsilon: true! !!PPAnalyzerTest methodsFor: 'testing-followset' stamp: 'lr 11/12/2009 18:00'!testFollowSetExampleD	| grammar followSets |	grammar := self grammarD.	followSets := (grammar at: #S) followSets.	self assert: (followSets at: (grammar at: #S)) includes: 'a' epsilon: true.	self assert: (followSets at: (grammar at: #A)) includes: 'ab' epsilon: true.	self assert: (followSets at: (grammar at: #B)) includes: 'ab' epsilon: true.	self assert: (followSets at: (grammar at: #a)) includes: 'ab' epsilon: true.	self assert: (followSets at: (grammar at: #b)) includes: 'ab' epsilon: true! !!PPAnalyzerTest methodsFor: 'testing-followset' stamp: 'lr 11/19/2009 23:54'!testFollowSetExampleE	self assert: self grammarE followSet includes: '' epsilon: true! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:07'!testInnerChildren	| p1 p2 p3 |	p1 := #digit asParser name: 'a'.	p2 := #digit asParser star name: 'b'.	p3 := (#digit asParser name: 'c') token star end.	self assert: p1 innerChildren isEmpty.	self assert: p2 innerChildren size equals: 1.	self assert: (p2 innerChildren allSatisfy: [ :each | each name isNil ]).	self assert: p3 innerChildren size equals: 2.	self assert: (p3 innerChildren allSatisfy: [ :each | each name isNil ])! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'lr 11/20/2009 15:29'!testIsNullable	self assert: $a asParser star isNullable.	self assert: nil asParser isNullable.	self deny: $a asParser plus isNullable.		self deny: PPLiteralSequenceParser new isNullable.	self deny: PPLiteralObjectParser new isNullable.	self deny: PPPredicateParser new isNullable.	self deny: PPChoiceParser new isNullable.	self deny: PPSequenceParser new isNullable.	self deny: PPAndParser new isNullable.	self deny: PPTokenParser new isNullable! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'lr 6/12/2010 09:04'!testIsTerminal	self assert: PPEpsilonParser new isTerminal.	self assert: PPFailingParser new isTerminal.	self assert: PPPluggableParser new isTerminal.	self assert: PPLiteralObjectParser new isTerminal.	self assert: PPLiteralSequenceParser new isTerminal.	self assert: PPPredicateObjectParser new isTerminal.	self assert: PPPredicateSequenceParser new isTerminal.		self deny: ($a asParser / $b asParser) isTerminal.	self deny: ($a asParser , $b asParser) isTerminal.	self deny: ($a asParser and) isTerminal.	self deny: ($a asParser not) isTerminal! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 12:21'!testListReplace	| one other another list |	one := $a asParser.	other := $b asParser.	another := $c asParser.	list := one , another , one.	self assert: list children first == one.	self assert: list children second == another.	self assert: list children last == one.		list replace: other with: one.	self assert: list children first == one.	self assert: list children second == another.	self assert: list children last == one.		list replace: one with: other.	self assert: list children first == other.	self assert: list children second == another.	self assert: list children last == other.		list replace: another with: one.	self assert: list children first == other.	self assert: list children second == one.	self assert: list children last == other! !!PPAnalyzerTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testNamedChildren	| p1 p2 p3 p4 |	p1 := #digit asParser name: 'a'.	p2 := (#digit asParser name: 'b') star.	p3 := (#digit asParser name: 'c') token end.	p4 := ((#digit asParser name: 'c') token name: 'd') end.	self assert: p1 namedChildren isEmpty.	self assert: p2 namedChildren size equals: 1.	self assert: p2 namedChildren first name equals: 'b'.	self assert: p3 namedChildren size equals: 1.	self assert: p3 namedChildren first name equals: 'c'.	self assert: p4 namedChildren size equals: 1.	self assert: p4 namedChildren first name equals: 'd'! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/4/2011 19:22'!testRepetitionReplace	| one two otherone othertwo repetition |	one := $a asParser.	two := $b asParser.	otherone := $1 asParser.	othertwo := $2 asParser.		repetition := one starLazy: two.	self assert: repetition children first == one.	self assert: repetition children second == two.		repetition replace: one with: otherone.	self assert: repetition children first == otherone.	self assert: repetition children second == two.		repetition replace: two with: othertwo.	self assert: repetition children first == otherone.	self assert: repetition children second == othertwo! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 23:33'!testTransformIdentityGrammarC	| orig tran |	orig := self grammarC.	tran := orig transform: [ :each | each ].	self deny: orig == tran.	self deny: orig children first == tran children first.	self deny: orig children first children first == tran children first children first.	self deny: orig children first children last == tran children first children last.	self deny: orig children last == tran children last.		self assert: orig class == PPChoiceParser.	self assert: orig children first class == PPSequenceParser.	self assert: orig children first children first == orig.	self assert: orig children first children last == orig.	self assert: orig children last class == PPLiteralObjectParser.	self assert: tran class == PPChoiceParser.	self assert: tran children first class == PPSequenceParser.	self assert: tran children first children first == tran.	self assert: tran children first children last == tran.	self assert: tran children last class == PPLiteralObjectParser! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 23:13'!testTransformIdentityGrammarE	| orig tran |	orig := self grammarE.	tran := orig transform: [ :each | each ].	self deny: orig == tran.	self deny: orig children first = tran children first.		self assert: orig class == PPDelegateParser.	self assert: orig children first == orig.		self assert: tran class == PPDelegateParser.	self assert: tran children first == tran! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 23:32'!testTransformWrapGrammarC	| orig tran |	orig := self grammarC.	tran := orig transform: [ :each | each memoized ].	self assert: orig class == PPChoiceParser.	self assert: orig children first class == PPSequenceParser.	self assert: orig children first children first == orig.	self assert: orig children first children last == orig.	self assert: orig children last class == PPLiteralObjectParser.		self assert: tran class == PPMemoizedParser.	self assert: tran children first class == PPChoiceParser.	self assert: tran children first children first class == PPMemoizedParser.	self assert: tran children first children first children first class == PPSequenceParser.	self assert: tran children first children first children first children first == tran.	self assert: tran children first children first children first children last == tran.	self assert: tran children first children last class == PPMemoizedParser.	self assert: tran children first children last children first class == PPLiteralObjectParser! !!PPAnalyzerTest methodsFor: 'testing-transform' stamp: 'lr 4/13/2010 23:08'!testTransformWrapGrammarE	| orig tran |	orig := self grammarE.	tran := orig transform: [ :each | each memoized ].		self assert: orig class == PPDelegateParser.	self assert: orig children first == orig.		self assert: tran class == PPMemoizedParser.	self assert: tran children first class == PPDelegateParser.	self assert: tran children first children first == tran! !!PPComposedTest methodsFor: 'accessing' stamp: 'lr 2/8/2010 16:44'!comment	^ ($" asParser , $" asParser negate star , $" asParser) flatten! !!PPComposedTest methodsFor: 'accessing' stamp: 'lr 2/8/2010 16:44'!identifier	^ (#letter asParser , #word asParser star) flatten! !!PPComposedTest methodsFor: 'accessing' stamp: 'lr 2/8/2010 16:44'!number	^ ($- asParser optional , #digit asParser plus , ($. asParser , #digit asParser plus) optional) flatten! !!PPComposedTest methodsFor: 'testing-examples' stamp: 'lr 2/8/2010 16:44'!testComment	self assert: self comment parse: '""' to: '""'.	self assert: self comment parse: '"a"' to: '"a"'.	self assert: self comment parse: '"ab"' to: '"ab"'.	self assert: self comment parse: '"abc"' to: '"abc"'.	self assert: self comment parse: '""a' to: '""' end: 2.	self assert: self comment parse: '"a"a' to: '"a"' end: 3.	self assert: self comment parse: '"ab"a' to: '"ab"' end: 4.	self assert: self comment parse: '"abc"a' to: '"abc"' end: 5.	self assert: self comment fail: '"'.	self assert: self comment fail: '"a'.	self assert: self comment fail: '"aa'.	self assert: self comment fail: 'a"'.	self assert: self comment fail: 'aa"'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 7/6/2009 08:34'!testDoubledString	| parser |	parser := ($' asParser , (($' asParser , $' asParser) / $' asParser negate) star flatten , $' asParser) 		==> [ :nodes | nodes second copyReplaceAll: '''''' with: '''' ].	self assert: parser parse: '''''' to: ''.	self assert: parser parse: '''a''' to: 'a'.	self assert: parser parse: '''ab''' to: 'ab'.	self assert: parser parse: '''a''''b''' to: 'a''b'.	self assert: parser parse: '''a''''''''b''' to: 'a''''b'! !!PPComposedTest methodsFor: 'testing' stamp: 'JanKurs 8/19/2014 17:21'!testEvenNumber	"Create a grammar that parses an even number of a's and b's."		| a as b bs s |	a := $a asParser ==> [ :char | as := as + 1 ].	b := $b asParser ==> [ :char | bs := bs + 1 ].	s := (a / b) star >=> [ :stream :cc |		as := bs := 0.		cc value.		(as even and: [ bs even ])			ifFalse: [ PPFailure message: 'Even number of a and b expected' context: stream at: 0 ] ].	self assert: s fail: 'a' end: 1.	self assert: s fail: 'b' end: 1.	self assert: s fail: 'ab' end: 2.	self assert: s fail: 'ba' end: 2.	self assert: s fail: 'aaa' end: 3.	self assert: s fail: 'bbb' end: 3.	self assert: s fail: 'aab' end: 3.	self assert: s fail: 'abb' end: 3.		self assert: s parse: ''.	self assert: s parse: 'aa'.	self assert: s parse: 'bb'.	self assert: s parse: 'aaaa'.	self assert: s parse: 'aabb'.	self assert: s parse: 'abab'.	self assert: s parse: 'baba'.	self assert: s parse: 'bbaa'.	self assert: s parse: 'bbbb'! !!PPComposedTest methodsFor: 'testing-examples' stamp: 'lr 2/8/2010 16:44'!testIdentifier	self assert: self identifier parse: 'a' to: 'a'.	self assert: self identifier parse: 'a1' to: 'a1'.	self assert: self identifier parse: 'a12' to: 'a12'.	self assert: self identifier parse: 'ab' to: 'ab'.	self assert: self identifier parse: 'a1b' to: 'a1b'.	self assert: self identifier parse: 'a_' to: 'a' end: 1.	self assert: self identifier parse: 'a1-' to: 'a1' end: 2.	self assert: self identifier parse: 'a12+' to: 'a12' end: 3.	self assert: self identifier parse: 'ab^' to: 'ab' end: 2.	self assert: self identifier parse: 'a1b*' to: 'a1b' end: 3.	self assert: self identifier fail: ''.	self assert: self identifier fail: '1'.	self assert: self identifier fail: '1a'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:11'!testIfThenElse	"S ::= if C then S else S | if C then S | X"	| start if then else cond expr parser |	start := PPDelegateParser new.	if := 'if' asParser token trim.	then := 'then' asParser token trim.	else := 'else' asParser token trim.	cond := 'C' asParser token trim.	expr := 'X' asParser token trim.	start setParser: (if , cond , then , start , else , start) / (if , cond , then , start) / expr.	parser := start end.	self assert: parser parse: 'X'.	self assert: parser parse: 'if C then X'.	self assert: parser parse: 'if C then X else X'.	self assert: parser parse: 'if C then if C then X'.	self assert: parser parse: 'if C then if C then X else if C then X'.	self assert: parser parse: 'if C then if C then X else X else if C then X'.	self assert: parser parse: 'if C then if C then X else X else if C then X else X'.	self assert: parser fail: 'if C'.	self assert: parser fail: 'if C else X'.	self assert: parser fail: 'if C then if C'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:09'!testLeftRecursion	"S ::= S 'x' S / '1'"		| parser |	parser := PPDelegateParser new.	parser setParser: ((parser , $x asParser , parser) / $1 asParser) memoized flatten.	self assert: parser parse: '1' to: '1'.	self assert: parser parse: '1x1' to: '1x1'.	self assert: parser parse: '1x1x1' to: '1x1x1'.	self assert: parser parse: '1x1x1x1' to: '1x1x1x1'.	self assert: parser parse: '1x1x1x1x1' to: '1x1x1x1x1'.	self assert: parser parse: '1x1x1x1x1x1' to: '1x1x1x1x1x1'! !!PPComposedTest methodsFor: 'testing' stamp: 'JamesFoster 2/20/2015 12:01'!testListOfIntegers	"S ::= S , number | number"		| number list parser |	number := #digit asParser plus flatten trim		==> [ :node | node asInteger ].	list := (number separatedBy: $, asParser token trim)		==> [ :node | node select: [ :each | each isKindOf: Integer ] ].	parser := list end.	self assert: parser parse: '1' to: (1 to: 1) asArray.	self assert: parser parse: '1,2' to: (1 to: 2) asArray.	self assert: parser parse: '1,2,3' to: (1 to: 3) asArray.	self assert: parser parse: '1,2,3,4' to: (1 to: 4) asArray.	self assert: parser parse: '1,2,3,4,5' to: (1 to: 5) asArray.	self assert: parser parse: '1' to: (1 to: 1) asArray.	self assert: parser parse: '1, 2' to: (1 to: 2) asArray.	self assert: parser parse: '1, 2, 3' to: (1 to: 3) asArray.	self assert: parser parse: '1, 2, 3, 4' to: (1 to: 4) asArray.	self assert: parser parse: '1, 2, 3, 4, 5' to: (1 to: 5) asArray.	self assert: parser parse: '1' to: (1 to: 1) asArray.	self assert: parser parse: '1 ,2' to: (1 to: 2) asArray.	self assert: parser parse: '1 ,2 ,3' to: (1 to: 3) asArray.	self assert: parser parse: '1 ,2 ,3 ,4' to: (1 to: 4) asArray.	self assert: parser parse: '1 ,2 ,3 ,4 ,5' to: (1 to: 5) asArray.		self assert: parser fail: ''.	self assert: parser fail: ','.	self assert: parser fail: '1,'.	self assert: parser fail: '1,,2'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:09'!testNestedComments	"C ::= B I* E"	"I ::= !!E (C | T)"	"B ::= /*"	"E ::= */"	"T ::= ."		| begin end any inside parser |	begin := '/*' asParser.	end := '*/' asParser.	any := #any asParser.		parser := PPDelegateParser new.	inside := end not , (parser / any).	parser setParser: begin , inside star , end.		self assert: parser parse: '/*ab*/cd' end: 6.	self assert: parser parse: '/*a/*b*/c*/'.	self assert: parser fail: '/*a/*b*/c'! !!PPComposedTest methodsFor: 'testing-examples' stamp: 'lr 2/8/2010 16:44'!testNumber	self assert: self number parse: '1' to: '1'.	self assert: self number parse: '12' to: '12'.	self assert: self number parse: '12.3' to: '12.3'.	self assert: self number parse: '12.34' to: '12.34'.	self assert: self number parse: '1..' to: '1' end: 1.	self assert: self number parse: '12-' to: '12' end: 2.	self assert: self number parse: '12.3.' to: '12.3' end: 4.	self assert: self number parse: '12.34.' to: '12.34' end: 5.		self assert: self number parse: '-1' to: '-1'.	self assert: self number parse: '-12' to: '-12'.	self assert: self number parse: '-12.3' to: '-12.3'.	self assert: self number parse: '-12.34' to: '-12.34'.		self assert: self number fail: ''.	self assert: self number fail: '-'.	self assert: self number fail: '.'.	self assert: self number fail: '.1'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:10'!testPalindrome	"S0 ::= a S1 a | b S1 b | ...	 S1 ::= S0 | epsilon"		| s0 s1 parser |	s0 := PPDelegateParser new.	s1 := PPDelegateParser new.	s0 setParser: ($a asParser , s1 , $a asParser)		/ ($b asParser , s1 , $b asParser)		/ ($c asParser , s1 , $c asParser).		s1 setParser: s0 / nil asParser.	parser := s0 flatten end.	self assert: parser parse: 'aa' to: 'aa'.	self assert: parser parse: 'bb' to: 'bb'.	self assert: parser parse: 'cc' to: 'cc'.		self assert: parser parse: 'abba' to: 'abba'.	self assert: parser parse: 'baab' to: 'baab'.	self assert: parser parse: 'abccba' to: 'abccba'.	self assert: parser parse: 'abaaba' to: 'abaaba'.	self assert: parser parse: 'cbaabc' to: 'cbaabc'.	self assert: parser fail: 'a'.	self assert: parser fail: 'ab'.	self assert: parser fail: 'aab'.	self assert: parser fail: 'abccbb'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:10'!testParseAaaBbb	"S0 ::= a S1 b	 S1 ::= S0 | epsilon"		| s0 s1 parser |	s0 := PPDelegateParser new.	s1 := PPDelegateParser new.	s0 setParser: $a asParser , s1 , $b asParser.	s1 setParser: s0 / nil asParser.	parser := s0 flatten.	self assert: parser parse: 'ab' to: 'ab'.	self assert: parser parse: 'aabb' to: 'aabb'.	self assert: parser parse: 'aaabbb' to: 'aaabbb'.	self assert: parser parse: 'aaaabbbb' to: 'aaaabbbb'.	self assert: parser parse: 'abb' to: 'ab' end: 2.	self assert: parser parse: 'aabbb' to: 'aabb' end: 4.	self assert: parser parse: 'aaabbbb' to: 'aaabbb' end: 6.	self assert: parser parse: 'aaaabbbbb' to: 'aaaabbbb' end: 8.	self assert: parser fail: 'a'.	self assert: parser fail: 'b'.	self assert: parser fail: 'aab'.	self assert: parser fail: 'aaabb'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:10'!testParseAaaaaa	"S ::= a a S | epsilon"		| s0 s1 parser |	s0 := PPDelegateParser new.	s1 := $a asParser , $a asParser , s0.	s0 setParser: s1 / nil asParser.	parser := s0 flatten.	self assert: parser parse: '' to: ''.	self assert: parser parse: 'aa' to: 'aa'.	self assert: parser parse: 'aaaa' to: 'aaaa'.	self assert: parser parse: 'aaaaaa' to: 'aaaaaa'.	self assert: parser parse: 'a' to: '' end: 0.	self assert: parser parse: 'aaa' to: 'aa' end: 2.	self assert: parser parse: 'aaaaa' to: 'aaaa' end: 4.	self assert: parser parse: 'aaaaaaa' to: 'aaaaaa' end: 6! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 9/18/2008 09:26'!testParseAbAbAb	"S ::= (A B)+"		| parser |	parser := ($a asParser , $b asParser) plus flatten.	self assert: parser parse: 'ab' to: 'ab'.	self assert: parser parse: 'abab' to: 'abab'.	self assert: parser parse: 'ababab' to: 'ababab'.	self assert: parser parse: 'abababab' to: 'abababab'.	self assert: parser parse: 'abb' to: 'ab' end: 2.	self assert: parser parse: 'ababa' to: 'abab' end: 4.	self assert: parser parse: 'abababb' to: 'ababab' end: 6.	self assert: parser parse: 'ababababa' to: 'abababab' end: 8.		self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'bab'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 9/18/2008 09:26'!testParseAbabbb	"S ::= (A | B)+"	| parser |	parser := ($a asParser / $b asParser) plus flatten.	self assert: parser parse: 'a' to: 'a'.	self assert: parser parse: 'b' to: 'b'.	self assert: parser parse: 'ab' to: 'ab'.	self assert: parser parse: 'ba' to: 'ba'.	self assert: parser parse: 'aaa' to: 'aaa'.	self assert: parser parse: 'aab' to: 'aab'.	self assert: parser parse: 'aba' to: 'aba'.	self assert: parser parse: 'baa' to: 'baa'.	self assert: parser parse: 'abb' to: 'abb'.	self assert: parser parse: 'bab' to: 'bab'.	self assert: parser parse: 'bba' to: 'bba'.	self assert: parser parse: 'bbb' to: 'bbb'.	self assert: parser parse: 'ac' to: 'a' end: 1.	self assert: parser parse: 'bc' to: 'b' end: 1.	self assert: parser parse: 'abc' to: 'ab' end: 2.	self assert: parser parse: 'bac' to: 'ba' end: 2.		self assert: parser fail: ''.	self assert: parser fail: 'c'! !!PPComposedTest methodsFor: 'testing' stamp: 'lr 6/24/2011 06:11'!testParseAnBnCn	"PEGs for a non context- free language: 				a^n , b^n , c^n			S <- &P1 P2 	P1 <- AB 'c' 	AB <- 'a' AB 'b' / epsilon	P2 <- 'a'* BC end	BC <- 'b' BC 'c' / epsilon"		| s p1 ab p2 bc |	s := PPDelegateParser new.	p1 := PPDelegateParser new.	ab := PPDelegateParser new.	p2 := PPDelegateParser new.	bc := PPDelegateParser new.		s setParser: (p1 and , p2 end) flatten.	p1 setParser: ab , $c asParser.	ab setParser: ($a asParser , ab , $b asParser) optional.	p2 setParser: $a asParser star , bc.	bc setParser: ($b asParser , bc , $c asParser) optional.		self assert: s parse: 'abc' to: 'abc'.	self assert: s parse: 'aabbcc' to: 'aabbcc'.	self assert: s parse: 'aaabbbccc' to: 'aaabbbccc'.	self assert: s fail: 'bc'.	self assert: s fail: 'ac'.	self assert: s fail: 'ab'.	self assert: s fail: 'abbcc'.	self assert: s fail: 'aabcc'.	self assert: s fail: 'aabbc'! !!PPComposedTest methodsFor: 'testing-examples' stamp: 'lr 2/25/2013 23:51'!testReturn	| number spaces return |	number := #digit asParser plus flatten.	spaces := #space asParser star.	return := (spaces , $^ asParser token , spaces , number)		==> [ :nodes | Array with: #return with: (nodes at: 4) ].	self assert: return parse: '^1' to: #(return '1').	self assert: return parse: '^12' to: #(return '12').	self assert: return parse: '^ 123' to: #(return '123').	self assert: return parse: '^  1234' to: #(return '1234').		self assert: return fail: '1'.	self assert: return fail: '^'! !!PPArithmeticParserTest methodsFor: 'accessing' stamp: 'FirstnameLastname 11/26/2009 21:53'!parserClass	^ PPArithmeticParser! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/30/2008 17:21'!testAdd	self assert: '1 + 2' is: 3.	self assert: '2 + 1' is: 3.	self assert: '1 + 2.3' is: 3.3.	self assert: '2.3 + 1' is: 3.3.	self assert: '1 + -2' is: -1.	self assert: '-2 + 1' is: -1! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/21/2008 10:23'!testAddMany	self assert: '1' is: 1.	self assert: '1 + 2' is: 3.	self assert: '1 + 2 + 3' is: 6.	self assert: '1 + 2 + 3 + 4' is: 10.	self assert: '1 + 2 + 3 + 4 + 5' is: 15! !!PPArithmeticParserTest methodsFor: 'testing-expression' stamp: 'lr 4/21/2008 10:03'!testBrackets	self assert: '(1)' is: 1.	self assert: '(1 + 2)' is: 3.		self assert: '((1))' is: 1.	self assert: '((1 + 2))' is: 3.	self assert: '2 * (3 + 4)' is: 14.	self assert: '(2 + 3) * 4' is: 20.	self assert: '6 / (2 + 4)' is: 1.	self assert: '(2 + 6) / 2' is: 4! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/21/2008 09:32'!testDiv	self assert: '12 / 3' is: 4.	self assert: '-16 / -4' is: 4! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 7/3/2008 15:46'!testDivMany	self assert: '100 / 2' is: 50.	self assert: '100 / 2 / 2' is: 25.	self assert: '100 / 2 / 2 / 5' is: 5.	self assert: '100 / 2 / 2 / 5 / 5' is: 1	! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/21/2008 09:31'!testMul	self assert: '2 * 3' is: 6.	self assert: '2 * -4' is: -8! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/21/2008 10:16'!testMulMany	self assert: '1 * 2' is: 2.	self assert: '1 * 2 * 3' is: 6.	self assert: '1 * 2 * 3 * 4' is: 24.	self assert: '1 * 2 * 3 * 4 * 5' is: 120! !!PPArithmeticParserTest methodsFor: 'testing' stamp: 'lr 4/21/2008 09:32'!testNum	self assert: '0' is: 0.	self assert: '0.0' is: 0.0.	self assert: '1' is: 1.	self assert: '1.2' is: 1.2.	self assert: '34' is: 34.	self assert: '56.78' is: 56.78.	self assert: '-9' is: -9.	self assert: '-9.9' is: -9.9! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 7/3/2008 15:28'!testPow	self assert: '2 ^ 3' is: 8.	self assert: '-2 ^ 3' is: -8.	self assert: '-2 ^ -3' is: -0.125! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 7/3/2008 15:45'!testPowMany	self assert: '4 ^ 3' is: 64.	self assert: '4 ^ 3 ^ 2' is: 262144.	self assert: '4 ^ 3 ^ 2 ^ 1' is: 262144.	self assert: '4 ^ 3 ^ 2 ^ 1 ^ 0' is: 262144! !!PPArithmeticParserTest methodsFor: 'testing-expression' stamp: 'lr 4/21/2008 10:00'!testPriority	self assert: '2 * 3 + 4' is: 10.	self assert: '2 + 3 * 4' is: 14.	self assert: '6 / 3 + 4' is: 6.	self assert: '2 + 6 / 2' is: 5! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 8/14/2010 13:38'!testSub	self assert: '1 - 2' is: -1.	self assert: '1.2 - 1.2' is: 0.	self assert: '1 - -2' is: 3.	self assert: '-1 - -2' is: 1! !!PPArithmeticParserTest methodsFor: 'testing-operations' stamp: 'lr 4/28/2008 11:56'!testSubMany	self assert: '1' is: 1.	self assert: '1 - 2' is: -1.	self assert: '1 - 2 - 3' is: -4.	self assert: '1 - 2 - 3 - 4' is: -8.	self assert: '1 - 2 - 3 - 4 - 5' is: -13! !!PPExpressionParserTest class methodsFor: 'testing' stamp: 'lr 4/6/2010 19:40'!shouldInheritSelectors	^ true! !!PPExpressionParserTest methodsFor: 'accessing' stamp: 'lr 2/25/2013 23:50'!parserInstance	| expression parens number |	expression := PPExpressionParser new.	parens := $( asParser trim , expression , $) asParser trim		==> [ :value | value second ].	number := (#digit asParser plus , ($. asParser , #digit asParser plus) optional) flatten trim		==> [ :value | value asNumber ].	expression term: parens / number.	expression		group: [ :g |			g prefix: $- asParser trim do: [ :op :a | a negated ] ];		group: [ :g |			g postfix: '++' asParser trim do: [ :a :op | a + 1 ].			g postfix: '--' asParser trim do: [ :a :op | a - 1 ] ];		group: [ :g |			g right: $^ asParser trim do: [ :a :op :b | a raisedTo: b ] ];		group: [ :g |			g left: $* asParser trim do: [ :a :op :b | a * b ].			g left: $/ asParser trim do: [ :a :op :b | a / b ] ];		group: [ :g |			g left: $+ asParser trim do: [ :a :op :b | a + b ].			g left: $- asParser trim do: [ :a :op :b | a - b ] ].	^ expression end! !!PPExpressionParserTest methodsFor: 'testing' stamp: 'FirstnameLastname 11/26/2009 22:13'!testPostfixAdd	self assert: '0++' is: 1.	self assert: '0++++' is: 2.	self assert: '0++++++' is: 3.	self assert: '0+++1' is: 2.	self assert: '0+++++1' is: 3.	self assert: '0+++++++1' is: 4! !!PPExpressionParserTest methodsFor: 'testing' stamp: 'FirstnameLastname 11/26/2009 22:11'!testPostfixSub	self assert: '1--' is: 0.	self assert: '2----' is: 0.	self assert: '3------' is: 0.	self assert: '2---1' is: 0.	self assert: '3-----1' is: 0.	self assert: '4-------1' is: 0.! !!PPExpressionParserTest methodsFor: 'testing' stamp: 'FirstnameLastname 11/26/2009 22:13'!testPrefixNegate	self assert: '1' is: 1.	self assert: '-1' is: -1.	self assert: '--1' is: 1.	self assert: '---1' is: -1! !!PPCompositeParserTest class methodsFor: 'testing' stamp: 'lr 10/4/2009 17:09'!isAbstract	^ self name = #PPCompositeParserTest! !!PPCompositeParserTest class methodsFor: 'accessing' stamp: 'lr 3/29/2010 15:21'!resources	^ Array with: PPParserResource! !!PPCompositeParserTest methodsFor: 'utilities' stamp: 'lr 11/29/2010 11:20'!assert: aCollection is: anObject	self parse: aCollection.	self		assert: result = anObject		description: 'Got: ' , result printString , '; Expected: ' , anObject printString		resumable: true! !!PPCompositeParserTest methodsFor: 'parsing' stamp: 'JanKurs 9/17/2014 20:35'!fail: aString rule: aSymbol 	| production context |	production := self parserInstanceFor: aSymbol.	context := self context.		result := production end parse: aString withContext: context.		self		assert: result isPetitFailure		description: 'Able to parse ' , aString printString.	^ result! !!PPCompositeParserTest methodsFor: 'parsing' stamp: 'lr 11/29/2010 11:26'!parse: aString 	^ self parse: aString rule: #start! !!PPCompositeParserTest methodsFor: 'parsing' stamp: 'JanKurs 9/26/2014 16:54'!parse: aString rule: aSymbol	| production context |	production := self parserInstanceFor: aSymbol.	context := self context.		result := production end parse: aString withContext: context.	self		deny: result isPetitFailure		description: 'Unable to parse ' , aString printString.	^ result! !!PPCompositeParserTest methodsFor: 'accessing' stamp: 'FirstnameLastname 11/26/2009 21:52'!parserClass	self subclassResponsibility! !!PPCompositeParserTest methodsFor: 'accessing' stamp: 'lr 3/29/2010 15:21'!parserInstance	^ PPParserResource current parserAt: self parserClass! !!PPCompositeParserTest methodsFor: 'accessing' stamp: 'lr 11/18/2011 19:44'!parserInstanceFor: aSymbol	^ aSymbol = #start		ifTrue: [ self parserInstance ]		ifFalse: [			self parserInstance				productionAt: aSymbol 				ifAbsent: [ self error: 'Production ' , self parserClass name , '>>' , aSymbol printString , ' not found.' ] ]! !!PPCompositeParserTest methodsFor: 'running' stamp: 'FirstnameLastname 11/26/2009 21:48'!setUp	super setUp.	parser := self parserInstance! !!PPCompositeParserTest methodsFor: 'running' stamp: 'lr 11/29/2010 11:19'!tearDown	super tearDown.	parser := result := nil! !!PPLambdaParserTest methodsFor: 'accessing' stamp: 'FirstnameLastname 11/26/2009 21:53'!parserClass	^ PPLambdaParser! !!PPLambdaParserTest methodsFor: 'testing' stamp: 'lr 4/30/2008 09:38'!testAbstraction	self assert: '\x.y' is: #('x' 'y').	self assert: '\x.\y.z' is: #('x' ('y' 'z'))! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:17'!testAnd	self assert: self parserClass and equals: #('p' #('q' #(#('p' 'q') 'p')))! !!PPLambdaParserTest methodsFor: 'testing' stamp: 'lr 4/30/2008 09:38'!testApplication	self assert: '(x x)' is: #('x' 'x').	self assert: '(x y)' is: #('x' 'y').	self assert: '((x y) z)' is: #(('x' 'y') 'z').	self assert: '(x (y z))' is: #('x' ('y' 'z'))! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:02'!testFalse	self assert: self parserClass false equals: #('x' #('y' 'y'))! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:11'!testIfThenElse	self assert: self parserClass ifthenelse equals: #('p' 'p')! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:18'!testNot	self assert: self parserClass not equals: #('p' #('a' #('b' #(#('p' 'b') 'a'))))! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:03'!testOr	self assert: self parserClass or equals: #('p' #('q' #(#('p' 'p') 'q')))! !!PPLambdaParserTest methodsFor: 'testing-utilities' stamp: 'JamesFoster 2/20/2015 11:28'!testParseOnError	| beenHere |	result := self parserClass parse: '\x.y' onError: [ self fail ].	self assert: result equals: #('x' 'y').	beenHere := false.	result := self parserClass parse: '\x.' onError: [ beenHere := true ].	self assert: beenHere.	beenHere := false.	result := self parserClass		parse: '\x.'		onError: [ :fail | 			beenHere := true.			fail ].	self assert: beenHere.	self assert: result message includesSubstring: 'separator'.	self assert: result message includesSubstring: 'expected'.	self assert: result position equals: 3.	beenHere := false.	result := self parserClass		parse: '\x.'		onError: [ :msg :pos | 			self assert: msg includesSubstring: 'separator'.			self assert: msg includesSubstring: 'expected'.			self assert: pos equals: 3.			beenHere := true ].	self assert: result.	self assert: beenHere! !!PPLambdaParserTest methodsFor: 'testing-utilities' stamp: 'JanKurs 8/25/2014 15:23'!testParseStartingAtOnError	| beenHere |	result := self parserClass parse: 'x' startingAt: #variable onError: [ self fail ].	self assert: result equals: 'x'.	beenHere := false.	result := self parserClass parse: '\' startingAt: #variable onError: [ beenHere := true ].	self assert: beenHere.	beenHere := false.	result := self parserClass		parse: '\'		startingAt: #variable		onError: [ :fail | 			beenHere := true.			fail ].	self assert: beenHere.	self assert: result message equals: 'separator expected'.	self assert: result position equals: 0.	beenHere := false.	result := self parserClass		parse: '\'		startingAt: #variable		onError: [ :msg :pos | 			self assert: msg equals: 'separator expected'.			self assert: pos equals: 0.			beenHere := true ].	self assert: beenHere! !!PPLambdaParserTest methodsFor: 'testing-utilities' stamp: 'FirstnameLastname 11/26/2009 21:56'!testProductionAt	self assert: (parser productionAt: #foo) isNil.	self assert: (parser productionAt: #foo ifAbsent: [ true ]).		self assert: (parser productionAt: #start) notNil.	self assert: (parser productionAt: #start ifAbsent: [ true ]) notNil.		self assert: (parser productionAt: #variable) notNil.	self assert: (parser productionAt: #variable ifAbsent: [ true ]) notNil! !!PPLambdaParserTest methodsFor: 'testing-curch' stamp: 'Nicolasanquetil 5/3/2013 15:04'!testTrue	self assert: self parserClass true equals: #('x' #('y' 'x'))! !!PPLambdaParserTest methodsFor: 'testing' stamp: 'lr 4/30/2008 09:33'!testVariable	self assert: 'x' is: 'x'.	self assert: 'xy' is: 'xy'.	self assert: 'x12' is: 'x12'! !!PPConditionalParserTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:08'!context	^ context! !!PPConditionalParserTest methodsFor: 'as yet unclassified' stamp: 'JamesFoster 2/20/2015 12:02'!setUp	super setUp.	context := PPContext new! !!PPConditionalParserTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:09'!testConditionCtxAccess	| parser |	parser := ('a' asParser if: [ :ctx | (ctx propertyAt: #foo) = #bar ]).		context propertyAt: #foo put: #bar.	self assert: parser parse: 'a' .	context propertyAt: #foo put: #zorg.	self assert: parser fail: 'a' .! !!PPConditionalParserTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:06'!testConditionFalse	| parser |	parser := ('a' asParser if: [ :ctx | false ]).		self assert: parser fail: 'a'.	self assert: parser fail: 'b'.! !!PPConditionalParserTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:06'!testConditionTrue	| parser |	parser := ('a' asParser if: [ :ctx | true ]).		self assert: parser parse: 'a'.	self assert: parser fail: 'b'.! !!PPConditionalParserTests methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:08'!context	^ context! !!PPConditionalParserTests methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/21/2015 13:09'!setUp	super setUp.	context := PPContext new! !!PPConditionalParserTests methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:09'!testConditionCtxAccess	| parser |	parser := ('a' asParser if: [ :ctx | (ctx propertyAt: #foo) = #bar ]).		context propertyAt: #foo put: #bar.	self assert: parser parse: 'a' .	context propertyAt: #foo put: #zorg.	self assert: parser fail: 'a' .! !!PPConditionalParserTests methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:06'!testConditionFalse	| parser |	parser := ('a' asParser if: [ :ctx | false ]).		self assert: parser fail: 'a'.	self assert: parser fail: 'b'.! !!PPConditionalParserTests methodsFor: 'as yet unclassified' stamp: 'JanKurs 2/4/2015 18:06'!testConditionTrue	| parser |	parser := ('a' asParser if: [ :ctx | true ]).		self assert: parser parse: 'a'.	self assert: parser fail: 'b'.! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'lr 5/2/2010 18:18'!testCharacter	| parser |	parser := $a asParser.	self assert: parser parse: 'a' to: $a.	self assert: parser fail: 'b'! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'lr 11/29/2011 20:38'!testChoice	| parser |	parser := #(1 2) asChoiceParser.	self assert: parser parse: #(1) to: 1.	self assert: parser parse: #(2) to: 2.	self assert: parser parse: #(1 2) to: 1 end: 1.	self assert: parser parse: #(2 1) to: 2 end: 1.	self assert: parser fail: #().	self assert: parser fail: #(3)! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'JanKurs 8/19/2014 16:59'!testClosure	| parser |	parser := [ :stream | stream upTo: $s ] asParser.	self assert: parser parse: '' to: ''.	self assert: parser parse: 'a' to: 'a'.	self assert: parser parse: 'aa' to: 'aa'.	self assert: parser parse: 's' to: ''.	self assert: parser parse: 'as' to: 'a'.	self assert: parser parse: 'aas' to: 'aa'.	self assert: parser parse: 'sa' to: '' end: 1.	self assert: parser parse: 'saa' to: '' end: 1.		parser := [ :stream | stream upTo: $s. PPFailure message: 'stream' context: stream ] asParser.	self assert: parser fail: ''.	self assert: parser fail: 's'.	self assert: parser fail: 'as'	! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'Nicolasanquetil 5/3/2013 14:59'!testEpsilon	| parser |	parser := nil asParser.	self assert: parser asParser equals: parser! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'Nicolasanquetil 5/3/2013 15:08'!testParser	| parser |	parser := $a asParser.	self assert: parser asParser equals: parser! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'JanKrus 10/15/2014 13:05'!testRange	| parser |	parser := ($a to: $c) asParser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'b' to: $b.	self assert: parser parse: 'c' to: $c.	self assert: parser fail: 'd'! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'lr 11/29/2011 20:40'!testSequence	| parser |	parser := #(1 2) asSequenceParser.	self assert: parser parse: #(1 2) to: #(1 2).	self assert: parser parse: #(1 2 3) to: #(1 2) end: 2.	self assert: parser fail: #().	self assert: parser fail: #(1).	self assert: parser fail: #(1 1).	self assert: parser fail: #(1 1 2)! !!PPExtensionTest methodsFor: 'testing-stream' stamp: 'JamesFoster 2/20/2015 12:07'!testStream	| dot stream |	dot := (Character codePoint: 183) asString.	stream := 'abc' readStream asPetitStream.	self assert: stream class equals: PPStream.	self assert: stream printString equals: dot , 'abc'.	self assert: stream peek equals: $a.	self assert: stream uncheckedPeek equals: $a.	self assert: stream next equals: $a.	self assert: stream printString equals: 'a' , dot , 'bc'.	self assert: stream asPetitStream equals: stream! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'lr 5/2/2010 18:18'!testString	| parser |	parser := 'ab' asParser.	self assert: parser parse: 'ab' to: 'ab'.	self assert: parser parse: 'aba' to: 'ab' end: 2.	self assert: parser parse: 'abb' to: 'ab' end: 2.	self assert: parser fail: 'a'.	self assert: parser fail: 'ac'! !!PPExtensionTest methodsFor: 'testing-parser' stamp: 'lr 9/17/2008 22:03'!testSymbol	| parser |	parser := #any asParser.	self assert: parser parse: 'a'.	self assert: parser fail: ''! !!PPExtensionTest methodsFor: 'testing-stream' stamp: 'Nicolasanquetil 5/3/2013 15:00'!testText	| stream |	stream := 'abc' asText asPetitStream.	self assert: stream class equals: PPStream! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:42'!testFoldLeft2	| parser |	parser := #any asParser star 		foldLeft: [ :a :b | Array with: a with: b ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b) to: #(a b).	self assert: parser parse: #(a b c) to: #((a b) c).	self assert: parser parse: #(a b c d) to: #(((a b) c) d).	self assert: parser parse: #(a b c d e) to: #((((a b) c) d) e)! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:42'!testFoldLeft3	| parser |	parser := #any asParser star 		foldLeft: [ :a :b :c | Array with: a with: b with: c ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b c) to: #(a b c).	self assert: parser parse: #(a b c d e) to: #((a b c) d e)! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:43'!testFoldRight2	| parser |	parser := #any asParser star 		foldRight: [ :a :b | Array with: a with: b ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b) to: #(a b).	self assert: parser parse: #(a b c) to: #(a (b c)).	self assert: parser parse: #(a b c d) to: #(a (b (c d))).	self assert: parser parse: #(a b c d e) to: #(a (b (c (d e))))! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:43'!testFoldRight3	| parser |	parser := #any asParser star 		foldRight: [ :a :b :c | Array with: a with: b with: c ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b c) to: #(a b c).	self assert: parser parse: #(a b c d e) to: #(a b (c d e))! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:43'!testMap1	| parser |	parser := #any asParser 		map: [ :a | Array with: a ].	self assert: parser parse: #(a) to: #(a)! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:43'!testMap2	| parser |	parser := (#any asParser , #any asParser) 		map: [ :a :b | Array with: b with: a ].	self assert: parser parse: #(a b) to: #(b a)! !!PPMappingTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 10/30/2014 12:43'!testMap3	| parser |	parser := (#any asParser , #any asParser , #any asParser)		map: [ :a :b :c | Array with: c with: b with: a ].	self assert: parser parse: #(a b c) to: #(c b a)! !!PPObjectTest methodsFor: 'parsers' stamp: 'JamesFoster 2/20/2015 12:13'!integer	^ PPPredicateObjectParser		on: [ :each | each isKindOf: Integer ]		message: 'integer expected'! !!PPObjectTest methodsFor: 'parsers' stamp: 'JamesFoster 2/20/2015 12:15'!string	^ PPPredicateObjectParser		on: [ :each | each isKindOf: String ]		message: 'string expected'! !!PPObjectTest methodsFor: 'testing-operators' stamp: 'lr 12/9/2010 10:25'!testChoice	| parser |	parser := self integer / self string.	self assert: parser parse: #(123) to: 123.	self assert: parser parse: #('abc') to: 'abc'! !!PPObjectTest methodsFor: 'testing-fancy' stamp: 'JanKurs 8/19/2014 17:01'!testFibonacci	"This parser accepts fibonacci sequences with arbitrary start pairs."		| parser |	parser := ((self integer , self integer) end ==> [ :pair | pair first + pair last ])		/ (self integer , (self integer , self integer) and >=> [ :stream :continuation |			| result |			result := continuation value.			(result isPetitFailure or: [ result first + result last first ~= result last last ])				ifFalse: [ parser parseOn: stream ]				ifTrue: [ PPFailure message: 'invalid fibonacci sequence' context: stream ] ]).	self assert: parser parse: #(1 1) to: 2.	self assert: parser parse: #(1 1 2) to: 3.	self assert: parser parse: #(1 1 2 3) to: 5.	self assert: parser parse: #(1 1 2 3 5) to: 8.	self assert: parser parse: #(1 1 2 3 5 8) to: 13.	self assert: parser parse: #(1 1 2 3 5 8 13) to: 21.	self assert: parser fail: #().	self assert: parser fail: #(1).	self assert: parser fail: #(1 2 3 4) end: 2	! !!PPObjectTest methodsFor: 'testing' stamp: 'lr 12/9/2010 10:25'!testInteger	self assert: self integer parse: #(123) to: 123.	self assert: self integer fail: #('abc')! !!PPObjectTest methodsFor: 'testing-operators' stamp: 'lr 12/9/2010 10:25'!testSequence	| parser |	parser := self integer , self string.	self assert: parser parse: #(123 'abc') to: #(123 'abc').	self assert: parser fail: #(123 456).	self assert: parser fail: #('abc' 'def').	self assert: parser fail: #('abc' 123)	! !!PPObjectTest methodsFor: 'testing' stamp: 'lr 10/30/2010 12:47'!testString	self assert: self string parse: #('abc') to: 'abc'.	self assert: self string fail: #(123)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testAction	| block parser |	block := [ :char | char asUppercase ].	parser := #any asParser ==> block.	self assert: parser block equals: block.	self assert: parser parse: 'a' to: $A.	self assert: parser parse: 'b' to: $B! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:20'!testAnd	| parser |	parser := 'foo' asParser flatten , 'bar' asParser flatten and.	self		assert: parser		parse: 'foobar'		to: #('foo' 'bar')		end: 3.	self assert: parser fail: 'foobaz'.	parser := 'foo' asParser and.	self assert: parser and equals: parser! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testAnswer	| parser |	parser := $a asParser answer: $b.		self assert: parser parse: 'a' to: $b.		self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/2/2009 19:56'!testBlock	| parser |	parser := [ :s | s next ] asParser.		self assert: parser parse: 'ab' to: $a end: 1.	self assert: parser parse: 'b' to: $b.	self assert: parser parse: '' to: nil! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:07'!testChildren	| p1 p2 p3 |	p1 := #lowercase asParser.	p2 := p1 ==> #asUppercase.	p3 := PPUnresolvedParser new.	p3 def: p2 / p3.	self assert: p1 children isEmpty.	self assert: p2 children size equals: 1.	self assert: p3 children size equals: 2! !!PPParserTest methodsFor: 'testing' stamp: 'lr 9/15/2008 09:24'!testChoice	| parser |	parser := $a asParser / $b asParser.		self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'b' to: $b.	self assert: parser parse: 'ab' to: $a end: 1.	self assert: parser parse: 'ba' to: $b end: 1.	self assert: parser fail: ''.	self assert: parser fail: 'c'.	self assert: parser fail: 'ca'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 5/7/2008 08:58'!testDelimitedBy	| parser |	parser := $a asParser delimitedBy: $b asParser.		self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aba' to: #($a $b $a).	self assert: parser parse: 'ababa' to: #($a $b $a $b $a).	self assert: parser parse: 'ab' to: #($a $b).	self assert: parser parse: 'abab' to: #($a $b $a $b).	self assert: parser parse: 'ababab' to: #($a $b $a $b $a $b).		self assert: parser parse: 'ac' to: #($a) end: 1.	self assert: parser parse: 'abc' to: #($a $b) end: 2.	self assert: parser parse: 'abac' to: #($a $b $a) end: 3.	self assert: parser parse: 'ababc' to: #($a $b $a $b) end: 4.		self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'c'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 2/25/2012 16:56'!testDelimitedByWithoutSeparators	| parser |	parser := ($a asParser delimitedBy: $b asParser)		withoutSeparators.		self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aba' to: #($a $a).	self assert: parser parse: 'ababa' to: #($a $a $a).	self assert: parser parse: 'ab' to: #($a).	self assert: parser parse: 'abab' to: #($a $a).	self assert: parser parse: 'ababab' to: #($a $a $a).		self assert: parser parse: 'ac' to: #($a) end: 1.	self assert: parser parse: 'abc' to: #($a) end: 2.	self assert: parser parse: 'abac' to: #($a $a) end: 3.	self assert: parser parse: 'ababc' to: #($a $a) end: 4.		self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'c'! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testEndOfInput	| parser |	parser := PPEndOfInputParser on: $a asParser.	self assert: parser end equals: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser fail: ''.	self assert: parser fail: 'aa'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 9/17/2008 22:47'!testEndOfInputAfterMatch	| parser |	parser := 'stuff' asParser end.	self assert: parser parse: 'stuff' to: 'stuff'.	self assert: parser fail: 'stufff'.	self assert: parser fail: 'fluff'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 11/20/2009 15:31'!testEpsilon	| parser |	parser := nil asParser.		self assert: parser parse: '' to: nil.		self assert: parser parse: 'a' to: nil end: 0.	self assert: parser parse: 'ab' to: nil end: 0! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 14:58'!testFailing	| parser result |	parser := PPFailingParser message: 'Plonk'.	self assert: parser message equals: 'Plonk'.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'aa'.	result := parser parse: 'a'.	self assert: result message equals: 'Plonk'.	self assert: result printString equals: 'Plonk at 0'! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'JanKurs 8/25/2014 15:21'!testFailure	| failure |	failure := PPFailure message: 'Error' context: PPContext new at: 3.	self assert: failure message equals: 'Error'.	self assert: failure position equals: 3.	self assert: failure isPetitFailure.	self deny: 4 isPetitFailure.	self deny: 'foo' isPetitFailure! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 5/2/2010 12:18'!testFlatten	| parser |	parser := $a asParser flatten.		self assert: parser parse: 'a' to: 'a'.	self assert: parser parse: #($a) to: #($a).		self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testFoldLeft2	| parser |	parser := #any asParser star 		foldLeft: [ :a :b | Array with: a with: b ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b) to: #(a b).	self assert: parser parse: #(a b c) to: #((a b) c).	self assert: parser parse: #(a b c d) to: #(((a b) c) d).	self assert: parser parse: #(a b c d e) to: #((((a b) c) d) e)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testFoldLeft3	| parser |	parser := #any asParser star 		foldLeft: [ :a :b :c | Array with: a with: b with: c ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b c) to: #(a b c).	self assert: parser parse: #(a b c d e) to: #((a b c) d e)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testFoldRight2	| parser |	parser := #any asParser star 		foldRight: [ :a :b | Array with: a with: b ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b) to: #(a b).	self assert: parser parse: #(a b c) to: #(a (b c)).	self assert: parser parse: #(a b c d) to: #(a (b (c d))).	self assert: parser parse: #(a b c d e) to: #(a (b (c (d e))))! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testFoldRight3	| parser |	parser := #any asParser star 		foldRight: [ :a :b :c | Array with: a with: b with: c ].	self assert: parser parse: #(a) to: #a.	self assert: parser parse: #(a b c) to: #(a b c).	self assert: parser parse: #(a b c d e) to: #(a b (c d e))! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:38'!testHasProperty	| parser |	parser := PPParser new.	self deny: (parser hasProperty: #foo).	parser propertyAt: #foo put: 123.	self assert: (parser hasProperty: #foo)! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testListConstructor	| p1 p2 p3 |	p1 := PPChoiceParser with: $a asParser.	p2 := PPChoiceParser with: $a asParser with: $b asParser.	p3 := PPChoiceParser withAll: (Array with: $a asParser with: $b asParser with: $c asParser).	self assert: p1 children size equals: 1.	self assert: p2 children size equals: 2.	self assert: p3 children size equals: 3! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 14:59'!testLiteralObject	| parser |	parser := PPLiteralObjectParser on: $a message: 'letter "a" expected'.	self assert: parser literal equals: $a.	self assert: parser message equals: 'letter "a" expected'.	self assert: parser parse: 'a' to: $a.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 6/1/2010 22:30'!testLiteralObjectCaseInsensitive	| parser |	parser := $a asParser caseInsensitive.		self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'A' to: $A.	self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'B'	! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:08'!testLiteralSequence	| parser |	parser := PPLiteralSequenceParser on: 'abc' message: 'sequence "abc" expected'.	self assert: parser size equals: 3.	self assert: parser literal equals: 'abc'.	self assert: parser message equals: 'sequence "abc" expected'.	self assert: parser parse: 'abc' to: 'abc'.	self assert: parser fail: 'ab'.	self assert: parser fail: 'abd'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 6/1/2010 22:31'!testLiteralSequenceCaseInsensitive	| parser |	parser := 'abc' asParser caseInsensitive.		self assert: parser parse: 'abc' to: 'abc'.	self assert: parser parse: 'ABC' to: 'ABC'.	self assert: parser parse: 'abC' to: 'abC'.	self assert: parser parse: 'AbC' to: 'AbC'.		self assert: parser fail: 'ab'.	self assert: parser fail: 'abd'! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testMap1	| parser |	parser := #any asParser 		map: [ :a | Array with: a ].	self assert: parser parse: #(a) to: #(a)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testMap2	| parser |	parser := (#any asParser , #any asParser) 		map: [ :a :b | Array with: b with: a ].	self assert: parser parse: #(a b) to: #(b a)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testMap3	| parser |	parser := (#any asParser , #any asParser , #any asParser)		map: [ :a :b :c | Array with: c with: b with: a ].	self assert: parser parse: #(a b c) to: #(c b a)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testMapFail1	self		should: [ #any asParser map: [  ] ]		raise: Error.	self		should: [ #any asParser map: [ :a :b | ] ]		raise: Error! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 6/24/2011 06:16'!testMapFail2	self		should: [ (#any asParser , #any asParser) map: [ :a | ] ]		raise: Error.	self		should: [ (#any asParser , #any asParser) map: [ :a :b :c | ] ]		raise: Error! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'lr 2/8/2010 00:32'!testMatches	| parser |	parser := $a asParser.		self assert: (parser matches: 'a').	self deny: (parser matches: 'b').		self assert: (parser matches: 'a' readStream).	self deny: (parser matches: 'b' readStream)! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testMatchesIn	| parser result |	parser := $a asParser.	result := parser matchesIn: 'abba'.	self assert: result size equals: 2.	self assert: result first equals: $a.	self assert: result last equals: $a.	result := parser matchesIn: 'baaah'.	self assert: result size equals: 3.	self assert: result first equals: $a.	self assert: result last equals: $a! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:00'!testMatchesInEmpty	"Empty matches should properly advance and match at each position and at the end."	| parser result |	parser := [ :stream | stream position ] asParser.	result := parser matchesIn: '123'.	self assert: result asArray equals: #(0 1 2 3)! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:09'!testMatchesInOverlapping	"Matches that overlap should be properly reported."	| parser result |	parser := #digit asParser , #digit asParser.	result := parser matchesIn: 'a123b'.	self assert: result size equals: 2.	self assert: result first equals: #($1 $2).	self assert: result last equals: #($2 $3)! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:16'!testMatchesSkipIn	| parser result |	parser := $a asParser.	result := parser matchesSkipIn: 'abba'.	self assert: result size equals: 2.	self assert: result first equals: $a.	self assert: result last equals: $a.	result := parser matchesSkipIn: 'baaah'.	self assert: result size equals: 3.	self assert: result first equals: $a.	self assert: result last equals: $a! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:00'!testMatchesSkipInOverlapping	"Matches that overlap should be properly reported."	| parser result |	parser := #digit asParser , #digit asParser.	result := parser matchesSkipIn: 'a123b'.	self assert: result size equals: 1.	self assert: result first equals: #($1 $2)! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:09'!testMatchingRangesIn	| input parser result |	input := 'a12b3'.	parser := #digit asParser plus.	result := parser matchingRangesIn: input.	result := result collect: [ :each | input copyFrom: each first to: each last ].	self assert: result size equals: 3.	self assert: result first equals: '12'.	self assert: result second equals: '2'.	self assert: result last equals: '3'! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:17'!testMatchingSkipRangesIn	| input parser result |	input := 'a12b3'.	parser := #digit asParser plus.	result := parser matchingSkipRangesIn: input.	result := result collect: [ :each | input copyFrom: each first to: each last ].	self assert: result size equals: 2.	self assert: result first equals: '12'.	self assert: result last equals: '3'! !!PPParserTest methodsFor: 'testing' stamp: 'JamesFoster 2/20/2015 12:17'!testMax	| parser printString suffix |	parser := $a asParser max: 2.	self assert: parser min equals: 0.	self assert: parser max equals: 2.	self assert: parser parse: '' to: #().	self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aa' to: #($a $a).	self		assert: parser		parse: 'aaa'		to: #($a $a)		end: 2.	self		assert: parser		parse: 'aaaa'		to: #($a $a)		end: 2.	printString := parser printString.	suffix := printString copyFrom: printString size - 5 to: printString size.	self assert: suffix = '[0, 2]'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 21:02'!testMaxGreedy	| parser |	parser := #word asParser max: 2 greedy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abc'.		self assert: parser parse: '1' to: #() end: 0.	self assert: parser parse: 'a1' to: #($a) end: 1.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser fail: 'abc1'.		self assert: parser parse: '12' to: #($1) end: 1.	self assert: parser parse: 'a12' to: #($a $1) end: 2.	self assert: parser parse: 'ab12' to: #($a $b) end: 2.	self assert: parser fail: 'abc12'.		self assert: parser parse: '123' to: #($1 $2) end: 2.	self assert: parser parse: 'a123' to: #($a $1) end: 2.	self assert: parser parse: 'ab123' to: #($a $b) end: 2.	self assert: parser fail: 'abc123'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 21:03'!testMaxLazy	| parser |	parser := #word asParser max: 2 lazy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abc'.		self assert: parser parse: '1' to: #() end: 0.	self assert: parser parse: 'a1' to: #($a) end: 1.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser fail: 'abc1'.		self assert: parser parse: '12' to: #() end: 0.	self assert: parser parse: 'a12' to: #($a) end: 1.	self assert: parser parse: 'ab12' to: #($a $b) end: 2.	self assert: parser fail: 'abc12'.		self assert: parser parse: '123' to: #() end: 0.	self assert: parser parse: 'a123' to: #($a) end: 1.	self assert: parser parse: 'ab123' to: #($a $b) end: 2.	self assert: parser fail: 'abc123'! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:10'!testMemoized	| count parser twice |	count := 0.	parser := [ :s | 	count := count + 1.	s next ] asParser memoized.	twice := parser and , parser.	count := 0.	self assert: parser parse: 'a' to: $a.	self assert: count equals: 1.	count := 0.	self assert: twice parse: 'a' to: #($a $a).	self assert: count equals: 1.	self assert: parser memoized equals: parser! !!PPParserTest methodsFor: 'testing' stamp: 'JamesFoster 2/20/2015 12:17'!testMin	| parser printString suffix |	parser := $a asParser min: 2.	self assert: parser min equals: 2.	self assert: parser max > parser min.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser parse: 'aa' to: #($a $a).	self assert: parser parse: 'aaa' to: #($a $a $a).	self assert: parser parse: 'aaaa' to: #($a $a $a $a).	printString := parser printString.	suffix := printString copyFrom: printString size - 5 to: printString size.	self assert: suffix = '[2, *]'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 21:12'!testMinGreedy	| parser |	parser := #word asParser min: 2 greedy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abcde'.		self assert: parser fail: '1'.	self assert: parser fail: 'a1'.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser parse: 'abc1' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1' to: #($a $b $c $d) end: 4.	self assert: parser parse: 'abcde1' to: #($a $b $c $d $e) end: 5.		self assert: parser fail: '12'.	self assert: parser parse: 'a12' to: #($a $1) end: 2.	self assert: parser parse: 'ab12' to: #($a $b $1) end: 3.	self assert: parser parse: 'abc12' to: #($a $b $c $1) end: 4.	self assert: parser parse: 'abcd12' to: #($a $b $c $d $1) end: 5.	self assert: parser parse: 'abcde12' to: #($a $b $c $d $e $1) end: 6.		self assert: parser parse: '123' to: #($1 $2) end: 2.	self assert: parser parse: 'a123' to: #($a $1 $2) end: 3.	self assert: parser parse: 'ab123' to: #($a $b $1 $2) end: 4.	self assert: parser parse: 'abc123' to: #($a $b $c $1 $2) end: 5.	self assert: parser parse: 'abcd123' to: #($a $b $c $d $1 $2) end: 6.	self assert: parser parse: 'abcde123' to: #($a $b $c $d $e $1 $2) end: 7.		self assert: parser parse: '1234' to: #($1 $2 $3) end: 3.	self assert: parser parse: 'a1234' to: #($a $1 $2 $3) end: 4.	self assert: parser parse: 'ab1234' to: #($a $b $1 $2 $3) end: 5.	self assert: parser parse: 'abc1234' to: #($a $b $c $1 $2 $3) end: 6.	self assert: parser parse: 'abcd1234' to: #($a $b $c $d $1 $2 $3) end: 7.	self assert: parser parse: 'abcde1234' to: #($a $b $c $d $e $1 $2 $3) end: 8! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 21:15'!testMinLazy	| parser |	parser := #word asParser min: 2 lazy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abcde'.		self assert: parser fail: '1'.	self assert: parser fail: 'a1'.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser parse: 'abc1' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1' to: #($a $b $c $d) end: 4.	self assert: parser parse: 'abcde1' to: #($a $b $c $d $e) end: 5.		self assert: parser fail: '12'.	self assert: parser parse: 'a12' to: #($a $1) end: 2.	self assert: parser parse: 'ab12' to: #($a $b) end: 2.	self assert: parser parse: 'abc12' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd12' to: #($a $b $c $d) end: 4.	self assert: parser parse: 'abcde12' to: #($a $b $c $d $e) end: 5.		self assert: parser parse: '123' to: #($1 $2) end: 2.	self assert: parser parse: 'a123' to: #($a $1) end: 2.	self assert: parser parse: 'ab123' to: #($a $b) end: 2.	self assert: parser parse: 'abc123' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd123' to: #($a $b $c $d) end: 4.	self assert: parser parse: 'abcde123' to: #($a $b $c $d $e) end: 5.		self assert: parser parse: '1234' to: #($1 $2) end: 2.	self assert: parser parse: 'a1234' to: #($a $1) end: 2.	self assert: parser parse: 'ab1234' to: #($a $b) end: 2.	self assert: parser parse: 'abc1234' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1234' to: #($a $b $c $d) end: 4.	self assert: parser parse: 'abcde1234' to: #($a $b $c $d $e) end: 5! !!PPParserTest methodsFor: 'testing' stamp: 'JamesFoster 2/20/2015 12:17'!testMinMax	| parser printString suffix |	parser := $a asParser min: 2 max: 4.	self assert: parser min equals: 2.	self assert: parser max equals: 4.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser parse: 'aa' to: #($a $a).	self assert: parser parse: 'aaa' to: #($a $a $a).	self assert: parser parse: 'aaaa' to: #($a $a $a $a).	self		assert: parser		parse: 'aaaaa'		to: #($a $a $a $a)		end: 4.	self		assert: parser		parse: 'aaaaaa'		to: #($a $a $a $a)		end: 4.	printString := parser printString.	suffix := printString copyFrom: printString size - 5 to: printString size.	self assert: suffix = '[2, 4]'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 20:54'!testMinMaxGreedy	| parser |	parser := #word asParser min: 2 max: 4 greedy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abcde'.		self assert: parser fail: '1'.	self assert: parser fail: 'a1'.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser parse: 'abc1' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde1'.		self assert: parser fail: '12'.	self assert: parser parse: 'a12' to: #($a $1) end: 2.	self assert: parser parse: 'ab12' to: #($a $b $1) end: 3.	self assert: parser parse: 'abc12' to: #($a $b $c $1) end: 4.	self assert: parser parse: 'abcd12' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde12'.		self assert: parser parse: '123' to: #($1 $2) end: 2.	self assert: parser parse: 'a123' to: #($a $1 $2) end: 3.	self assert: parser parse: 'ab123' to: #($a $b $1 $2) end: 4.	self assert: parser parse: 'abc123' to: #($a $b $c $1) end: 4.	self assert: parser parse: 'abcd123' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde123'.		self assert: parser parse: '1234' to: #($1 $2 $3) end: 3.	self assert: parser parse: 'a1234' to: #($a $1 $2 $3) end: 4.	self assert: parser parse: 'ab1234' to: #($a $b $1 $2) end: 4.	self assert: parser parse: 'abc1234' to: #($a $b $c $1) end: 4.	self assert: parser parse: 'abcd1234' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde1234'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/3/2011 20:57'!testMinMaxLazy	| parser |	parser := #word asParser min: 2 max: 4 lazy: #digit asParser.		self assert: parser fail: ''.	self assert: parser fail: 'abcde'.		self assert: parser fail: '1'.	self assert: parser fail: 'a1'.	self assert: parser parse: 'ab1' to: #($a $b) end: 2.	self assert: parser parse: 'abc1' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde1'.		self assert: parser fail: '12'.	self assert: parser parse: 'a12' to: #($a $1) end: 2.	self assert: parser parse: 'ab12' to: #($a $b) end: 2.	self assert: parser parse: 'abc12' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd12' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde12'.		self assert: parser parse: '123' to: #($1 $2) end: 2.	self assert: parser parse: 'a123' to: #($a $1) end: 2.	self assert: parser parse: 'ab123' to: #($a $b) end: 2.	self assert: parser parse: 'abc123' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd123' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde123'.		self assert: parser parse: '1234' to: #($1 $2) end: 2.	self assert: parser parse: 'a1234' to: #($a $1) end: 2.	self assert: parser parse: 'ab1234' to: #($a $b) end: 2.	self assert: parser parse: 'abc1234' to: #($a $b $c) end: 3.	self assert: parser parse: 'abcd1234' to: #($a $b $c $d) end: 4.	self assert: parser fail: 'abcde1234'! !!PPParserTest methodsFor: 'testing-accessing' stamp: 'Nicolasanquetil 5/3/2013 15:11'!testNamed	| parser |	parser := PPSequenceParser new.	self assert: parser name isNil.	parser := PPChoiceParser named: 'choice'.	self assert: parser name equals: 'choice'.	parser := $* asParser name: 'star'.	self assert: parser name equals: 'star'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 2/7/2010 20:10'!testNegate	| parser |	parser := 'foo' asParser negate.		self assert: parser parse: 'f' to: $f end: 1.	self assert: parser parse: 'fo' to: $f end: 1.	self assert: parser parse: 'fob' to: $f end: 1.	self assert: parser parse: 'ffoo' to: $f end: 1.		self assert: parser fail: ''.	self assert: parser fail: 'foo'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 8/26/2010 09:54'!testNot	| parser |	parser := 'foo' asParser flatten , 'bar' asParser flatten not.		self assert: parser parse: 'foobaz' to: #('foo' nil) end: 3.	self assert: parser fail: 'foobar'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/29/2008 11:32'!testOptional	| parser |	parser := $a asParser optional.		self assert: parser parse: '' to: nil.	self assert: parser parse: 'a' to: $a.		self assert: parser parse: 'aa' to: $a end: 1.	self assert: parser parse: 'ab' to: $a end: 1.	self assert: parser parse: 'b' to: nil end: 0.	self assert: parser parse: 'bb' to: nil end: 0.	self assert: parser parse: 'ba' to: nil end: 0! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'JamesFoster 2/20/2015 11:34'!testParse	| parser result |	parser := $a asParser.	self assert: (parser parse: 'a') equals: $a.	self assert: (result := parser parse: 'b') isPetitFailure.	self assert: result message includesSubstring: $a printString.	self assert: result message includesSubstring: 'expected'.	self assert: result position equals: 0.	self assert: (parser parse: 'a' readStream) equals: $a.	self assert: (result := parser parse: 'b' readStream) isPetitFailure.	self assert: result message includesSubstring: $a printString.	self assert: result message includesSubstring: 'expected'.	self assert: result position equals: 0! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'Nicolasanquetil 5/3/2013 15:03'!testParseOnError0	| parser result seen |	parser := $a asParser.	result := parser parse: 'a' onError: [ self signalFailure: 'Not supposed to report an error' ].	self assert: result equals: $a.	result := parser parse: 'b' onError: [ seen := true ].	self assert: result.	self assert: seen! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'JamesFoster 2/20/2015 11:34'!testParseOnError1	| parser result seen |	parser := $a asParser.	result := parser parse: 'a' onError: [ self signalFailure: 'Not supposed to report an error' ].	self assert: result equals: $a.	result := parser		parse: 'b'		onError: [ :failure | 			self assert: failure position equals: 0.			self assert: failure message includesSubstring: $a printString.			self assert: failure message includesSubstring: 'expected'.			seen := true ].	self assert: result.	self assert: seen! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'JamesFoster 2/20/2015 11:34'!testParseOnError2	| parser result seen |	parser := $a asParser.	result := parser parse: 'a' onError: [ self signalFailure: 'Not supposed to report an error' ].	self assert: result equals: $a.	result := parser		parse: 'b'		onError: [ :msg :pos | 			self assert: msg includesSubstring: $a printString.			self assert: msg includesSubstring: 'expected'.			self assert: pos equals: 0.			seen := true ].	self assert: result.	self assert: seen! !!PPParserTest methodsFor: 'testing-utilities' stamp: 'lr 8/6/2010 19:06'!testParser	| parser |	parser := PPParser new.		self assert: parser isPetitParser.	self deny: 4 isPetitParser.	self deny: 'foo' isPetitParser! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 1/8/2010 12:09'!testPermutation	| parser |	parser := #any asParser , #any asParser , #any asParser.	self assert: (parser permutation: #()) parse: '123' to: #().	self assert: (parser permutation: #(1)) parse: '123' to: #($1).	self assert: (parser permutation: #(1 3)) parse: '123' to: #($1 $3).	self assert: (parser permutation: #(3 1)) parse: '123' to: #($3 $1).	self assert: (parser permutation: #(2 2)) parse: '123' to: #($2 $2).	self assert: (parser permutation: #(3 2 1)) parse: '123' to: #($3 $2 $1).		self should: [ parser permutation: #(0) ] raise: Error.	self should: [ parser permutation: #(4) ] raise: Error.	self should: [ parser permutation: #($2) ] raise: Error! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:04'!testPluggable	| block parser |	block := [ :stream | stream position ].	parser := block asParser.	self assert: parser block equals: block! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:12'!testPlus	| parser |	parser := $a asParser plus.	self assert: parser min equals: 1.	self assert: parser max > parser min.	self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aa' to: #($a $a).	self assert: parser parse: 'aaa' to: #($a $a $a).	self		assert: parser		parse: 'ab'		to: #($a)		end: 1.	self		assert: parser		parse: 'aab'		to: #($a $a)		end: 2.	self		assert: parser		parse: 'aaab'		to: #($a $a $a)		end: 3.	self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'ba'! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:19'!testPlusGreedy	| limit parser |	limit := #digit asParser.	parser := #word asParser plusGreedy: limit.	self assert: parser min equals: 1.	self assert: parser max > parser min.	self assert: parser limit equals: limit.	self assert: parser children size equals: 2.	self assert: parser children last equals: limit.	self assert: parser fail: ''.	self assert: parser fail: '1'.	self assert: parser fail: 'a'.	self assert: parser fail: 'ab'.	self		assert: parser		parse: 'a1'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab1'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc1'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: 'a12'		to: #($a $1)		end: 2.	self		assert: parser		parse: 'ab12'		to: #($a $b $1)		end: 3.	self		assert: parser		parse: 'abc12'		to: #($a $b $c $1)		end: 4.	self		assert: parser		parse: 'a123'		to: #($a $1 $2)		end: 3.	self		assert: parser		parse: 'ab123'		to: #($a $b $1 $2)		end: 4.	self		assert: parser		parse: 'abc123'		to: #($a $b $c $1 $2)		end: 5! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:04'!testPlusLazy	| limit parser |	limit := #digit asParser.	parser := #word asParser plusLazy: limit.	self assert: parser min equals: 1.	self assert: parser max > parser min.	self assert: parser limit equals: limit.	self assert: parser children size equals: 2.	self assert: parser children last equals: limit.	self assert: parser fail: ''.	self assert: parser fail: '1'.	self assert: parser fail: 'a'.	self assert: parser fail: 'ab'.	self		assert: parser		parse: 'a1'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab1'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc1'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: 'a12'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab12'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc12'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: 'a123'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab123'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc123'		to: #($a $b $c)		end: 3! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:41'!testPostCopy	| parser copy |	parser := PPParser new.	parser propertyAt: #foo put: true.	copy := parser copy.	copy propertyAt: #foo put: false.	self assert: (parser propertyAt: #foo).	self deny: (copy propertyAt: #foo)! !!PPParserTest methodsFor: 'testing-accessing' stamp: 'JamesFoster 2/20/2015 11:35'!testPrint	| parser |	parser := PPParser new.	self assert: parser printString includesSubstring: 'PPParser'.		parser := PPParser named: 'choice'.	self assert: parser printString includesSubstring: 'PPParser(choice'.		parser := PPLiteralObjectParser on: $a.	self assert: parser printString includesSubstring: $a printString.		parser := PPFailingParser message: 'error'.	self assert: parser printString includesSubstring: 'error'.		parser := PPPredicateObjectParser on: [ :c | true ] message: 'error'.	self assert: parser printString includesSubstring: 'error'! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:36'!testPropertyAt	| parser |	parser := PPParser new.	self should: [ parser propertyAt: #foo ] raise: Error.	parser propertyAt: #foo put: true.	self assert: (parser propertyAt: #foo)! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:37'!testPropertyAtIfAbsent	| parser |	parser := PPParser new.	self assert: (parser propertyAt: #foo ifAbsent: [ true ]).	parser propertyAt: #foo put: true.	self assert: (parser propertyAt: #foo ifAbsent: [ false ])! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:37'!testPropertyAtIfAbsentPut	| parser |	parser := PPParser new.	self assert: (parser propertyAt: #foo ifAbsentPut: [ true ]).	self assert: (parser propertyAt: #foo ifAbsentPut: [ false ])! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:37'!testRemoveProperty	| parser |	parser := PPParser new.	self should: [ parser removeProperty: #foo ] raise: Error.	parser propertyAt: #foo put: true.	self assert: (parser removeProperty: #foo)! !!PPParserTest methodsFor: 'testing-properties' stamp: 'lr 4/19/2010 10:37'!testRemovePropertyIfAbsent	| parser |	parser := PPParser new.	self assert: (parser removeProperty: #foo ifAbsent: [ true ]).	parser propertyAt: #foo put: true.	self assert: (parser removeProperty: #foo ifAbsent: [ false ])! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/29/2008 11:42'!testSeparatedBy	| parser |	parser := $a asParser separatedBy: $b asParser.		self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aba' to: #($a $b $a).	self assert: parser parse: 'ababa' to: #($a $b $a $b $a).		self assert: parser parse: 'ab' to: #($a) end: 1.	self assert: parser parse: 'abab' to: #($a $b $a) end: 3.	self assert: parser parse: 'ac' to: #($a) end: 1.	self assert: parser parse: 'abac' to: #($a $b $a) end: 3.		self assert: parser fail: ''.	self assert: parser fail: 'c'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 2/25/2012 16:55'!testSeparatedByWithoutSeparators	| parser |	parser := ($a asParser separatedBy: $b asParser)		withoutSeparators.		self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aba' to: #($a $a).	self assert: parser parse: 'ababa' to: #($a $a $a).		self assert: parser parse: 'ab' to: #($a) end: 1.	self assert: parser parse: 'abab' to: #($a $a) end: 3.	self assert: parser parse: 'ac' to: #($a) end: 1.	self assert: parser parse: 'abac' to: #($a $a) end: 3.		self assert: parser fail: ''.	self assert: parser fail: 'c'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/29/2008 11:33'!testSequence	| parser |	parser := $a asParser , $b asParser.		self assert: parser parse: 'ab' to: #($a $b).		self assert: parser parse: 'aba' to: #($a $b) end: 2.	self assert: parser parse: 'abb' to: #($a $b) end: 2.		self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'aa'.	self assert: parser fail: 'ba'.	self assert: parser fail: 'bab'! !!PPParserTest methodsFor: 'testing-fixtures' stamp: 'lr 2/7/2010 22:00'!testSideEffectChoice	"Adding another element to a choice should create a copy, otherwise we get unwanted side-effects."	| p1 p2 p3 |	p1 := $a asParser.	p2 := p1 / $b asParser.	p3 := p1 / $c asParser.		self assert: p1 parse: 'a'.	self assert: p1 fail: 'b'.	self assert: p1 fail: 'c'.		self assert: p2 parse: 'a'.	self assert: p2 parse: 'b'.	self assert: p2 fail: 'c'.		self assert: p3 parse: 'a'.	self assert: p3 fail: 'b'.	self assert: p3 parse: 'c'! !!PPParserTest methodsFor: 'testing-fixtures' stamp: 'lr 5/31/2010 19:25'!testSideEffectListCopy	| old new |	old := $a asParser , $b asParser.	new := old copy.		self deny: old == new.	self deny: old children == new children.	self assert: old children first == new children first.	self assert: old children last == new children last! !!PPParserTest methodsFor: 'testing-fixtures' stamp: 'lr 4/14/2010 11:38'!testSideEffectSequence	"Adding another element to a sequence should create a copy, otherwise we get unwanted side-effects."	| p1 p2 p3 |	p1 := $a asParser.	p2 := p1 , $b asParser.	p3 := p1 , $c asParser.		self assert: p1 parse: 'a'.		self assert: p1 parse: 'ab' end: 1.	self assert: p1 parse: 'ac' end: 1.		self assert: p2 fail: 'a'.		self assert: p2 parse: 'ab'.	self assert: p2 fail: 'ac'.	self assert: p3 fail: 'a'.		self assert: p3 fail: 'ab'.	self assert: p3 parse: 'ac'! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:13'!testStar	| parser |	parser := $a asParser star.	self assert: parser min equals: 0.	self assert: parser max > parser min.	self assert: parser parse: '' to: #().	self assert: parser parse: 'a' to: #($a).	self assert: parser parse: 'aa' to: #($a $a).	self assert: parser parse: 'aaa' to: #($a $a $a).	self		assert: parser		parse: 'b'		to: #()		end: 0.	self		assert: parser		parse: 'ab'		to: #($a)		end: 1.	self		assert: parser		parse: 'aab'		to: #($a $a)		end: 2.	self		assert: parser		parse: 'aaab'		to: #($a $a $a)		end: 3! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:19'!testStarGreedy	| limit parser |	limit := #digit asParser.	parser := #word asParser starGreedy: limit.	self assert: parser min equals: 0.	self assert: parser max > parser min.	self assert: parser limit equals: limit.	self assert: parser children size equals: 2.	self assert: parser children last equals: limit.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'ab'.	self		assert: parser		parse: '1'		to: #()		end: 0.	self		assert: parser		parse: 'a1'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab1'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc1'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: '12'		to: #($1)		end: 1.	self		assert: parser		parse: 'a12'		to: #($a $1)		end: 2.	self		assert: parser		parse: 'ab12'		to: #($a $b $1)		end: 3.	self		assert: parser		parse: 'abc12'		to: #($a $b $c $1)		end: 4.	self		assert: parser		parse: '123'		to: #($1 $2)		end: 2.	self		assert: parser		parse: 'a123'		to: #($a $1 $2)		end: 3.	self		assert: parser		parse: 'ab123'		to: #($a $b $1 $2)		end: 4.	self		assert: parser		parse: 'abc123'		to: #($a $b $c $1 $2)		end: 5! !!PPParserTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:05'!testStarLazy	| limit parser |	limit := #digit asParser.	parser := #word asParser starLazy: limit.	self assert: parser min equals: 0.	self assert: parser max > parser min.	self assert: parser limit equals: limit.	self assert: parser children size equals: 2.	self assert: parser children last equals: limit.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'ab'.	self		assert: parser		parse: '1'		to: #()		end: 0.	self		assert: parser		parse: 'a1'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab1'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc1'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: '12'		to: #()		end: 0.	self		assert: parser		parse: 'a12'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab12'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc12'		to: #($a $b $c)		end: 3.	self		assert: parser		parse: '123'		to: #()		end: 0.	self		assert: parser		parse: 'a123'		to: #($a)		end: 1.	self		assert: parser		parse: 'ab123'		to: #($a $b)		end: 2.	self		assert: parser		parse: 'abc123'		to: #($a $b $c)		end: 3! !!PPParserTest methodsFor: 'testing' stamp: 'lr 9/15/2010 09:53'!testTimes	| parser |	parser := $a asParser times: 2.		self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser parse: 'aa' to: #($a $a).	self assert: parser parse: 'aaa' to: #($a $a) end: 2! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'Nicolasanquetil 5/3/2013 15:13'!testToken	| parser |	parser := $a asParser token.	self assert: parser tokenClass equals: PPToken.	self		assert: parser		parse: 'a'		toToken: 1		stop: 1.	self assert: parser fail: 'b'.	self assert: parser fail: ''.	parser := $a asParser token: PPToken.	self assert: parser tokenClass equals: PPToken.	self		assert: parser		parse: 'a'		toToken: 1		stop: 1.	self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 7/11/2011 11:05'!testTrim	| parser |	parser := $a asParser token trim.		self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: 'a ' toToken: 1 stop: 1.	self assert: parser parse: 'a	' toToken: 1 stop: 1.	self assert: parser parse: 'a  ' toToken: 1 stop: 1.	self assert: parser parse: 'a 	 ' toToken: 1 stop: 1.			self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: ' a' toToken: 2 stop: 2.	self assert: parser parse: '	a' toToken: 2 stop: 2.	self assert: parser parse: '    a' toToken: 5 stop: 5.	self assert: parser parse: '   a' toToken: 5 stop: 5.		self assert: parser parse: 'aa' toToken: 1 stop: 1 end: 1.	self assert: parser parse: 'a	a' toToken: 1 stop: 1 end: 2.	self assert: parser parse: 'a  a' toToken: 1 stop: 1 end: 3.		self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 7/31/2010 12:07'!testTrimBlanks	| parser |	parser := $a asParser token trimBlanks.		self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: 'a ' toToken: 1 stop: 1.	self assert: parser parse: 'a	' toToken: 1 stop: 1.	self assert: parser parse: 'a  ' toToken: 1 stop: 1.		self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: ' a' toToken: 2 stop: 2.	self assert: parser parse: '	a' toToken: 2 stop: 2.	self assert: parser parse: '    a' toToken: 5 stop: 5.		self assert: parser parse: 'aa' toToken: 1 stop: 1 end: 1.	self assert: parser parse: 'a	a' toToken: 1 stop: 1 end: 2.	self assert: parser parse: 'a  a' toToken: 1 stop: 1 end: 3.		self assert: parser fail: ''.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: 'b'.! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 7/11/2011 11:05'!testTrimCustom	| parser |	parser := $a asParser token trim: $b asParser.		self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: 'ab' toToken: 1 stop: 1.	self assert: parser parse: 'abb' toToken: 1 stop: 1.			self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: 'ba' toToken: 2 stop: 2.	self assert: parser parse: 'bba' toToken: 3 stop: 3.		self assert: parser parse: 'aa' toToken: 1 stop: 1 end: 1.	self assert: parser parse: 'ab' toToken: 1 stop: 1 end: 2.	self assert: parser parse: 'abba' toToken: 1 stop: 1 end: 3.		self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'lr 7/31/2010 12:07'!testTrimSpaces	| parser |	parser := $a asParser token trimSpaces.		self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: 'a ' toToken: 1 stop: 1.	self assert: parser parse: 'a	' toToken: 1 stop: 1.	self assert: parser parse: 'a  ' toToken: 1 stop: 1.	self assert: parser parse: 'a 	 ' toToken: 1 stop: 1.			self assert: parser parse: 'a' toToken: 1 stop: 1.	self assert: parser parse: ' a' toToken: 2 stop: 2.	self assert: parser parse: '	a' toToken: 2 stop: 2.	self assert: parser parse: '    a' toToken: 5 stop: 5.	self assert: parser parse: '   a' toToken: 5 stop: 5.		self assert: parser parse: 'aa' toToken: 1 stop: 1 end: 1.	self assert: parser parse: 'a	a' toToken: 1 stop: 1 end: 2.	self assert: parser parse: 'a  a' toToken: 1 stop: 1 end: 3.		self assert: parser fail: ''.	self assert: parser fail: 'b'! !!PPParserTest methodsFor: 'testing' stamp: 'lr 11/20/2009 15:31'!testUnresolved	| parser |	parser := PPUnresolvedParser new.		self assert: parser isUnresolved.	self should: [ parser parse: '' ] raise: Error.	self should: [ parser parse: 'a' ] raise: Error.	self should: [ parser parse: 'ab' ] raise: Error.		parser := nil asParser.	self deny: parser isUnresolved! !!PPParserTest methodsFor: 'testing' stamp: 'tg 7/29/2010 22:39'!testWrapped	| parser |	parser := $a asParser wrapped.		self assert: parser parse: 'a' to: $a.	self assert: parser fail: 'b'.		parser := (($a asParser , $b asParser ) wrapped , $c asParser).	self assert: parser parse: 'abc' to: #(#($a $b) $c)! !!PPParserTest methodsFor: 'testing-mapping' stamp: 'Nicolasanquetil 5/3/2013 15:20'!testWrapping	| parser result |	parser := #digit asParser plus >=> [ :stream :cc | Array with: stream position with: cc value with: stream position ].	self assert: parser parse: '1' to: #(0 #($1) 1).	self assert: parser parse: '12' to: #(0 #($1 $2) 2).	self assert: parser parse: '123' to: #(0 #($1 $2 $3) 3).	result := parser parse: 'a'.	self assert: result first equals: 0.	self assert: result second isPetitFailure.	self assert: result last equals: 0! !!PPParserTest methodsFor: 'testing' stamp: 'lr 4/14/2010 16:30'!testXor	| parser |	parser := ($a asParser / $b asParser)			|  ($b asParser / $c asParser).		self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'c' to: $c.		self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'd'.		" truly symmetric "	parser := ($b asParser / $c asParser)			|  ($a asParser / $b asParser).		self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'c' to: $c.		self assert: parser fail: ''.	self assert: parser fail: 'b'.	self assert: parser fail: 'd'! !!PPPredicateTest methodsFor: 'utilities' stamp: 'lr 6/12/2010 08:37'!assertCharacterSets: aParser	"Assert the character set of aParser does not overlap with the character set with the negated parser, and that they both cover the complete character space."	| positives negatives |	positives := self parsedCharacterSet: aParser.	negatives := self parsedCharacterSet: aParser negate.	self charactersDo: [ :char | 		| positive negative |		positive := positives includes: char.		negative := negatives includes: char.		self 			assert: ((positive and: [ negative not ])				or: [ positive not and: [ negative ] ])			description: char printString , ' should be in exactly one set' ]! !!PPPredicateTest methodsFor: 'private' stamp: 'lr 6/12/2010 08:37'!charactersDo: aBlock	1 to: 256 do: [ :index | aBlock value: (Character codePoint: index) ]! !!PPPredicateTest methodsFor: 'utilities' stamp: 'JamesFoster 2/20/2015 12:21'!parsedCharacterSet: aParser	| result |	result := WriteStream on: String new.	self charactersDo: [ :char |		(aParser matches: (char asString))			ifTrue: [ result nextPut: char ] ].	^ result contents! !!PPPredicateTest methodsFor: 'testing-objects' stamp: 'lr 11/29/2009 09:32'!testAny	| parser |	parser := #any asParser.	self assertCharacterSets: parser.	self assert: parser parse: ' ' to: $ .	self assert: parser parse: '1' to: $1.	self assert: parser parse: 'a' to: $a.	self assert: parser fail: ''! !!PPPredicateTest methodsFor: 'testing-objects' stamp: 'tg 7/12/2010 11:26'!testAnyExceptAnyOf	| parser |	parser := PPPredicateObjectParser anyExceptAnyOf: #($: $,).	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'z' to: $z.	self assert: parser fail: ':'.	self assert: parser fail: ','! !!PPPredicateTest methodsFor: 'testing-objects' stamp: 'lr 6/12/2010 09:16'!testAnyOf	| parser |	parser := PPPredicateObjectParser anyOf: #($a $z).	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'z' to: $z.	self assert: parser fail: 'x'! !!PPPredicateTest methodsFor: 'testing-objects' stamp: 'lr 6/12/2010 09:16'!testBetweenAnd	| parser |	parser := PPPredicateObjectParser between: $b and: $d.	self assertCharacterSets: parser.	self assert: parser fail: 'a'.	self assert: parser parse: 'b' to: $b.	self assert: parser parse: 'c' to: $c.	self assert: parser parse: 'd' to: $d.	self assert: parser fail: 'e'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 5/5/2010 14:15'!testBlank	| parser |	parser := #blank asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: Character space) to: Character space.	self assert: parser parse: (String with: Character tab) to: Character tab.	self assert: parser fail: ''.	self assert: parser fail: '1'.	self assert: parser fail: (String with: Character cr)! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 5/2/2010 12:51'!testChar	| parser |	parser := $* asParser.	self assertCharacterSets: parser.	self assert: parser parse: '*' to: $*.	self assert: parser parse: '**' to: $* end: 1.	self assert: parser fail: ''.	self assert: parser fail: '1'.	self assert: parser fail: 'a'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JanKurs 10/15/2014 13:13'!testCr	| parser |	parser := #cr asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: (Character codePoint: 13)) to: (Character codePoint: 13)! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testDigit	| parser |	parser := #digit asParser.	self assertCharacterSets: parser.	self assert: parser parse: '0' to: $0.	self assert: parser parse: '9' to: $9.	self assert: parser fail: ''.	self assert: parser fail: 'a'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JamesFoster 2/20/2015 12:22'!testEndOfFile	| parser |	parser := (#letter asParser / #blank asParser) star, #eof asParser.		self assert: parser parse: 'lorem ipsum'.		parser := #any asParser, #eof asParser, #any asParser star.	self assert: parser fail: 'a', Character cr asString, 'b'.	self assert: parser fail: Character cr asString , Character lf asString.	self assert: parser parse: 'a'.! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JamesFoster 2/20/2015 12:22'!testEndOfLine	| cr crlf lf parser |	cr := Character cr asString.	crlf := Character cr asString , Character lf asString.	lf := Character lf asString.	parser := (#letter asParser / #blank asParser) star, #endOfLine asParser.		self assert: parser parse: 'lorem ipsum'.		parser := #any asParser, #endOfLine asParser, #any asParser star.	self assert: parser parse: 'a', cr, 'b'.	self assert: parser fail: crlf.	self assert: parser fail: 'lorem ipsum'.		parser := #endOfLine asParser, #any asParser, #endOfLine asParser negate star, #endOfLine asParser.	self assert: parser parse: cr, 'lorem ipsum'.	self assert: parser parse: lf, 'lorem ipsum'.		self assert: parser parse: crlf, 'lorem ipsum'.			self assert: parser parse: crlf.	self assert: parser parse: cr.	self assert: parser parse: lf.		parser := #endOfLine asParser negate star, #endOfLine asParser, #any asParser star.	self assert: parser parse: crlf, 'lorem ipsum'.	self assert: parser parse: crlf.! !!PPPredicateTest methodsFor: 'testing-objects' stamp: 'lr 6/12/2010 09:16'!testExpect	| parser |	parser := PPPredicateObjectParser expect: $a.	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser fail: 'b'.	self assert: parser fail: ''! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testHex	| parser |	parser := #hex asParser.	self assertCharacterSets: parser.	self assert: parser parse: '0' to: $0.	self assert: parser parse: '5' to: $5.	self assert: parser parse: '9' to: $9.	self assert: parser parse: 'A' to: $A.	self assert: parser parse: 'D' to: $D.	self assert: parser parse: 'F' to: $F.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'e' to: $e.	self assert: parser parse: 'f' to: $f.	self assert: parser fail: ''.	self assert: parser fail: 'g'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testLetter	| parser |	parser := #letter asParser.	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'Z' to: $Z.	self assert: parser fail: ''.	self assert: parser fail: '0'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testLf	| parser |	parser := #lf asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: Character lf) to: Character lf! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testLowercase	| parser |	parser := #lowercase asParser.	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'z' to: $z.	self assert: parser fail: ''.	self assert: parser fail: 'A'.	self assert: parser fail: '0'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:36'!testNewline	| parser |	parser := #newline asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: Character cr) to: Character cr.	self assert: parser parse: (String with: Character lf) to: Character lf.	self assert: parser fail: ' '! !!PPPredicateTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:06'!testOnMessage	| block parser |	block := [ :char | char = $* ].	parser := PPPredicateObjectParser on: block message: 'starlet'.	self assert: parser block equals: block.	self assert: parser message equals: 'starlet'.	self assertCharacterSets: parser.	self assert: parser parse: '*' to: $*.	self		assert: parser		parse: '**'		to: $*		end: 1.	self assert: parser fail: ''.	self assert: parser fail: '1'.	self assert: parser fail: 'a'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 5/5/2010 14:14'!testPunctuation	| parser |	parser := #punctuation asParser.	self assertCharacterSets: parser.	self assert: parser parse: '.' to: $..	self assert: parser parse: ',' to: $,.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: '1'! !!PPPredicateTest methodsFor: 'testing-sequence' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testSequenceParser	| parser |	parser := PPPredicateSequenceParser		on: [ :value | value first isUppercase ]		message: 'uppercase 3 letter words'		size: 3.	self assert: parser size equals: 3.	self assert: parser parse: 'Abc'.	self assert: parser parse: 'ABc'.	self assert: parser parse: 'ABC'.	self assert: parser fail: 'abc'.	self assert: parser fail: 'aBC'.	self assert: parser fail: 'Ab'.	parser := parser negate.	self assert: parser size equals: 3.	self assert: parser fail: 'Abc'.	self assert: parser fail: 'ABc'.	self assert: parser fail: 'ABC'.	self assert: parser parse: 'abc'.	self assert: parser parse: 'aBC'.	self assert: parser fail: 'Ab'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testSpace	| parser |	parser := #space asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: Character tab) to: Character tab.	self assert: parser parse: ' ' to: Character space.	self assert: parser fail: ''.	self assert: parser fail: 'a'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JamesFoster 2/20/2015 12:23'!testStartOfLine	| cr crlf lf parser |	cr := Character cr asString.	crlf := Character cr asString , Character lf asString.	lf := Character lf asString.	parser := #startOfLine asParser, #any asParser star.		self assert: parser parse: 'lorem ipsum'.		parser := #any asParser, #startOfLine asParser, #any asParser star.	self assert: parser fail: 'lorem ipsum'.		parser := #startOfLine asParser, #any asParser, #startOfLine asParser, #any asParser star.	self assert: parser parse: cr, 'lorem ipsum'.	self assert: parser parse: lf, 'lorem ipsum'.		self assert: parser fail: crlf, 'lorem ipsum'.			self assert: parser fail: crlf.	self assert: parser parse: cr.	self assert: parser parse: lf.		parser := #startOfLine asParser, #any asParser, #any asParser, #startOfLine asParser, #any asParser star.	self assert: parser parse: crlf, 'lorem ipsum'.	self assert: parser parse: crlf.! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JanKurs 1/2/2015 18:34'!testStartOfLogicalLine	| parser |	parser := #startOfLogicalLine asParser, #any asParser star.		self assert: parser parse: 'lorem'.	self assert: parser fail: ' lorem'.		parser := #any asParser, #startOfLogicalLine asParser, #any asParser star.	self assert: parser fail: 'lorem'.	self assert: parser fail: '        lorem'.	self assert: parser parse: ' lorem'.	self assert: parser parse: '	lorem'.! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'JanKurs 1/6/2015 14:00'!testStartOfWord	| parser |	parser := #startOfWord asParser, #word asParser plus.		self assert: parser parse: 'lorem'.		parser := #any asParser, #startOfWord asParser, #word asParser plus.	self assert: parser fail: 'lorem'.	self assert: parser fail: '1234'.		self assert: parser parse: ' lorem'.		self assert: parser parse: ' 123'.	self assert: parser parse: ')lorem'.	self assert: parser parse: ':lorem'.		parser := #startOfWord asParser, #any asParser optional.	self assert: parser fail: ''.	self assert: parser parse: 'a'.	self assert: parser fail: '.'.! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testTab	| parser |	parser := #tab asParser.	self assertCharacterSets: parser.	self assert: parser parse: (String with: Character tab) to: Character tab! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testUppercase	| parser |	parser := #uppercase asParser.	self assertCharacterSets: parser.	self assert: parser parse: 'A' to: $A.	self assert: parser parse: 'Z' to: $Z.	self assert: parser fail: ''.	self assert: parser fail: 'a'.	self assert: parser fail: '0'! !!PPPredicateTest methodsFor: 'testing-chars' stamp: 'lr 11/29/2009 09:32'!testWord	| parser |	parser := #word asParser.	self assertCharacterSets: parser.	self assert: parser parse: 'a' to: $a.	self assert: parser parse: 'A' to: $A.	self assert: parser parse: '0' to: $0.	self assert: parser fail: ''.	self assert: parser fail: '-'! !!PPRewriterTest methodsFor: 'running' stamp: 'lr 4/29/2010 08:47'!setUp	rewriter := PPRewriter new! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:20'!testDuplicationRemoval	| duplicate before between after result |	duplicate := PPPattern any.	before := PPListPattern any.	between := PPListPattern any.	after := PPListPattern any.	rewriter replace: before / duplicate / between / duplicate / after with: before / duplicate / between / after.	result := rewriter execute: $a asParser / $a asParser.	self assert: rewriter hasChanged.	self assert: result children size equals: 1.	self assert: result children first literal equals: $a.	result := rewriter execute: $b asParser / $a asParser / $a asParser.	self assert: rewriter hasChanged.	self assert: result children size equals: 2.	self assert: result children first literal equals: $b.	self assert: result children last literal equals: $a.	result := rewriter execute: $a asParser / $b asParser / $a asParser.	self assert: rewriter hasChanged.	self assert: result children size equals: 2.	self assert: result children first literal equals: $a.	self assert: result children last literal equals: $b.	result := rewriter execute: $a asParser / $a asParser / $b asParser.	self assert: rewriter hasChanged.	self assert: result children size equals: 2.	self assert: result children first literal equals: $a.	self assert: result children last literal equals: $b! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:06'!testPatternRemoval	| pattern result |	pattern := PPPattern class: PPLiteralObjectParser.	rewriter replace: pattern / pattern with: pattern.	result := rewriter execute: $a asParser / $a asParser.	self assert: rewriter hasChanged.	self assert: result class equals: PPLiteralObjectParser.	self assert: result literal equals: $a.	result := rewriter execute: $a asParser / $a asParser / $a asParser.	self deny: rewriter hasChanged.	self assert: result class equals: PPChoiceParser.	self assert: result children size equals: 3! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:14'!testPatternReplacement	| pattern result |	pattern := PPPattern class: PPLiteralObjectParser.	rewriter replace: pattern with: pattern , pattern.	result := rewriter execute: $a asParser.	self assert: rewriter hasChanged.	self assert: result class equals: PPSequenceParser.	self assert: result children first literal equals: $a.	self assert: result children last literal equals: $a.	result := rewriter execute: #any asParser.	self deny: rewriter hasChanged.	self assert: result class equals: PPPredicateObjectParser! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 14:58'!testReplaceLiteral	| result |	rewriter replace: $a asParser with: $b asParser.	result := rewriter execute: $a asParser.	self assert: rewriter hasChanged.	self assert: result literal equals: $b.	result := rewriter execute: $c asParser.	self deny: rewriter hasChanged.	self assert: result literal equals: $c.	result := rewriter execute: $a asParser , $b asParser , $c asParser.	self assert: rewriter hasChanged.	self assert: result children size equals: 3.	self assert: result children first literal equals: $b.	self assert: result children last literal equals: $c! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:07'!testSwapTwoPattern	| first second result |	first := PPPattern any.	second := PPPattern any.	rewriter replace: first , second with: second , first.	result := rewriter execute: $a asParser , $b asParser.	self assert: rewriter hasChanged.	self assert: result children first literal equals: $b.	self assert: result children last literal equals: $a.	result := rewriter execute: $a asParser / $b asParser.	self deny: rewriter hasChanged.	self assert: result children first literal equals: $a.	self assert: result children last literal equals: $b! !!PPRewriterTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testWrapLiteral	| result |	rewriter replace: $a asParser withValueFrom: [ :parser | parser token ].	result := rewriter execute: $a asParser.	self assert: rewriter hasChanged.	self assert: result class equals: PPTokenParser.	self assert: result children first literal equals: $a.	result := rewriter execute: $c asParser.	self deny: rewriter hasChanged.	self assert: result literal equals: $c.	result := rewriter execute: $a asParser , $b asParser.	self assert: rewriter hasChanged.	self assert: result children first class equals: PPTokenParser.	self assert: result children first children first literal equals: $a.	self assert: result children last class equals: PPLiteralObjectParser.	self assert: result children last literal equals: $b! !!PPScriptingTest commentStamp: '<historical>' prior: 35261383!These are some simple demo-scripts of parser combinators for the compiler construction course.http://www.iam.unibe.ch/~scg/Teaching/CC/index.html!!PPScriptingTest methodsFor: 'examples' stamp: 'JanKurs 10/15/2014 13:14'!expressionInterpreter	"Same as #expressionInterpreter but with semantic actions."		| mul prim add dec |	add := PPUnresolvedParser new.	mul := PPUnresolvedParser new.	prim := PPUnresolvedParser new.	dec := ($0 to: $9) asParser ==> [ :token | token codePoint - $0 codePoint ].	add def: ((mul , $+ asParser , add) ==> [ :nodes | (nodes at: 1) + (nodes at: 3) ])		/ mul.	mul def: ((prim , $* asParser , mul) ==> [ :nodes | (nodes at: 1) * (nodes at: 3) ])		/ prim.	prim def: (($( asParser , add , $) asParser) ==> [ :nodes | nodes at: 2 ])		/ dec.	^ add end! !!PPScriptingTest methodsFor: 'examples' stamp: 'JanKurs 10/15/2014 15:12'!expressionParser	"Simple demo of scripting an expression parser."		| mul prim add dec |	add := PPUnresolvedParser new.	mul := PPUnresolvedParser new.	prim := PPUnresolvedParser new.	dec := ($0 to: $9) asParser.	add def: (mul , $+ asParser , add)		/ mul.	mul def: (prim , $* asParser , mul)		/ prim.	prim def: ($( asParser , add , $) asParser)		/ dec.	^ add end! !!PPScriptingTest methodsFor: 'examples' stamp: 'JanKurs 10/15/2014 15:13'!straightLineParser	| goal stm stmList id char dec exp expList mulExp primExp nonzero num lower upper |	goal := PPUnresolvedParser new.	stmList := PPUnresolvedParser new.	stm := PPUnresolvedParser new.	exp := PPUnresolvedParser new.	expList := PPUnresolvedParser new.	mulExp := PPUnresolvedParser new.	primExp := PPUnresolvedParser new.		lower := ($a to: $z) asParser.	upper := ($A to: $Z) asParser.	char := lower / upper.	nonzero := ($1 to: $9) asParser.	dec := ($0 to: $9) asParser.	id := char, ( char / dec ) star.	num := $0 asParser / ( nonzero, dec star).	goal def: stmList end.	stmList def: stm , ( $; asParser, stm ) star.	stm def: ( id, ':=' asParser, exp )		/ ( 'print' asParser, $( asParser, expList, $) asParser ). 	exp def: mulExp, ( ( $+ asParser / $- asParser ), mulExp ) star.	expList def: exp, ( $, asParser, exp ) star.	mulExp def: primExp, ( ( $* asParser / $/ asParser ), primExp ) star.	primExp def: id		/ num		/ ( $( asParser, stmList, $, asParser, exp, $) asParser ).	^ goal! !!PPScriptingTest methodsFor: 'tests' stamp: 'lr 6/12/2010 08:31'!testExpressionInterpreter	self 		assert: self expressionInterpreter		parse: '2*(3+4)'		to: 14! !!PPScriptingTest methodsFor: 'tests' stamp: 'lr 6/12/2010 08:31'!testExpressionParser	self		assert: self expressionParser		parse: '2*(3+4)'		to: #($2 $* ($( ($3 $+ $4) $)))! !!PPScriptingTest methodsFor: 'tests' stamp: 'lr 9/17/2008 22:44'!testSLassign		self assert: self straightLineParser		parse: 'abc:=1'		to: #(#($a #($b $c) ':=' #(#(#($1 #()) #()) #())) #())! !!PPScriptingTest methodsFor: 'tests' stamp: 'lr 6/12/2010 08:27'!testSLprint	self 		assert: self straightLineParser		parse: 'print(3,4)'		to: #(('print' $( ((($3 ()) ()) () (($, ((($4 ()) ()) ())))) $)) ())! !!PPSearcherTest methodsFor: 'running' stamp: 'lr 4/29/2010 08:09'!setUp	searcher := PPSearcher new! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 14:59'!testAnyPattern	| result |	searcher		matches: PPPattern any		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	result := searcher execute: $a asParser star initialAnswer: OrderedCollection new.	self assert: result size equals: 2.	result := searcher execute: $a asParser , $b asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 3! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:08'!testClassPattern	| result |	searcher		matches: (PPPattern class: PPLiteralObjectParser)		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	self assert: (result allSatisfy: [ :each | each class = PPLiteralObjectParser ]).	result := searcher execute: 'abc' asParser initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: #any asParser initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: $a asParser / #any asParser , $b asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 2.	self assert: (result allSatisfy: [ :each | each class = PPLiteralObjectParser ])! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/31/2010 19:16'!testCopyMatchAction	| old new |	old := $a asParser ==> [ :token | $b ].	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 4/30/2010 08:04'!testCopyMatchDelegate	| old new |	old := $a asParser token trim.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 9/1/2010 22:08'!testCopyMatchEpsilon	| old new |	old := nil asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/31/2010 19:17'!testCopyMatchFailure	| old new |	old := PPFailingParser message: 'problem'.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 4/30/2010 08:04'!testCopyMatchList	| old new |	old := $a asParser , $b asParser , $c asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 4/30/2010 08:04'!testCopyMatchLiteral	| old new |	old := $a asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/31/2010 19:18'!testCopyMatchPluggable	| old new |	old := [ :stream | ] asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/31/2010 19:17'!testCopyMatchPredicate	| old new |	old := #word asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 1/14/2013 08:37'!testCopyMatchPredicateSequence	| old new |	old := 'foo' asParser caseInsensitive.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 4/30/2010 08:15'!testCopyMatchRecursiveDelegate	| old new |	old := PPDelegateParser new.	old setParser: old.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 4/30/2010 08:16'!testCopyMatchRecursiveList	| old new |	old := PPChoiceParser new.	old setParsers: (Array with: old).	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/8/2011 20:25'!testCopyMatchRepetition	| old new |	old := #word asParser star.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/8/2011 20:25'!testCopyMatchRepetitionGreedy	| old new |	old := #word asParser starGreedy: #digit asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/8/2011 20:25'!testCopyMatchRepetitionLazy	| old new |	old := #word asParser starLazy: #digit asParser.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing-copy' stamp: 'lr 5/8/2011 20:26'!testCopyMatchRepetitionMinMax	| old new |	old := #word asParser min: 5 max: 10.	new := old copyInContext: Dictionary new.	self assert: (old match: old inContext: Dictionary new).	self assert: (old match: new inContext: Dictionary new).	self deny: (old == new).! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testKindPattern	| result |	searcher		matches: (PPPattern kind: PPLiteralParser)		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	self assert: (result allSatisfy: [ :each | each class = PPLiteralObjectParser ]).	result := searcher execute: 'abc' asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	self assert: (result allSatisfy: [ :each | each class = PPLiteralSequenceParser ]).	result := searcher execute: #any asParser initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: $a asParser / #any asParser , $b asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 2.	self assert: (result allSatisfy: [ :each | each class = PPLiteralObjectParser ])! !!PPSearcherTest methodsFor: 'testing-lists' stamp: 'lr 6/4/2010 13:37'!testListInfix	| result |	searcher		matches: PPListPattern any , $a asParser , PPListPattern any		do: [ :parser :answer | true ].		result := searcher		execute: $a asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $a asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $b asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $b asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser , $b asParser		initialAnswer: false.	self deny: result! !!PPSearcherTest methodsFor: 'testing-lists' stamp: 'lr 6/4/2010 13:37'!testListPostfix	| result |	searcher		matches: PPListPattern any , $b asParser		do: [ :parser :answer | true ].		result := searcher		execute: $a asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $b asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $a asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $b asParser , $a asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $b asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $b asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser , $b asParser		initialAnswer: false.	self assert: result! !!PPSearcherTest methodsFor: 'testing-lists' stamp: 'lr 6/4/2010 13:37'!testListPrefix	| result |	searcher		matches: $a asParser , PPListPattern any		do: [ :parser :answer | true ].		result := searcher		execute: $a asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $b asParser , $b asParser		initialAnswer: false.	self deny: result.				result := searcher		execute: $a asParser , $a asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $b asParser , $a asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $a asParser , $a asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $b asParser , $a asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $a asParser , $b asParser , $b asParser		initialAnswer: false.	self assert: result.		result := searcher		execute: $b asParser , $a asParser , $b asParser		initialAnswer: false.	self deny: result.		result := searcher		execute: $b asParser , $b asParser , $b asParser		initialAnswer: false.	self deny: result! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 14:59'!testMatchesAny	| result |	searcher		matchesAnyOf: (Array with: $a asParser with: $b asParser)		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser , $b asParser , $c asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 2.	self assert: result first literal equals: $a.	self assert: result last literal equals: $b! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:09'!testMultiplePattern	| result |	searcher		matches: $a asParser		do: [ :parser :answer | 			answer first add: parser.			answer ].	searcher		matches: PPPattern any		do: [ :parser :answer | 			answer second add: parser.			answer ].	result := searcher		execute: $a asParser , $a asParser , $b asParser		initialAnswer: (Array with: OrderedCollection new with: OrderedCollection new).	self assert: result first size equals: 2.	self assert: result first first literal equals: $a.	self assert: result first last literal equals: $a.	self assert: result last size equals: 2.	self assert: result last first class equals: PPSequenceParser.	self assert: result last last literal equals: $b! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:16'!testNamePattern	| result |	searcher		matches: (PPPattern name: 'foo')		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: ($a asParser name: 'foo') initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	self assert: result first name equals: 'foo'.	result := searcher execute: ($a asParser name: 'bar') , ($b asParser name: 'foo') initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	self assert: result first name equals: 'foo'! !!PPSearcherTest methodsFor: 'testing' stamp: 'lr 4/29/2010 21:03'!testNewPattern	self 		should: [ PPPattern new ]		raise: Error! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:00'!testRecursivePattern	| recursive |	recursive := PPDelegateParser new.	recursive setParser: recursive.	searcher matches: recursive do: [ :parser :answer | parser ].	self assert: (searcher execute: recursive) equals: recursive.	self assert: (searcher execute: $a asParser) isNil.	self assert: (searcher execute: $a asParser / $b asParser star) isNil! !!PPSearcherTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:09'!testRepeatedPattern	| pattern result |	searcher		matches: (pattern := PPPattern any) , pattern		do: [ :parser :answer | 			answer				add: parser;				yourself ].	result := searcher execute: $a asParser , $b asParser initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: $a asParser , $a asParser initialAnswer: OrderedCollection new.	self assert: result size equals: 1.	result := searcher execute: $a asParser , ($a asParser , $b asParser) initialAnswer: OrderedCollection new.	self assert: result isEmpty.	result := searcher execute: $b asParser , ($a asParser , $a asParser) initialAnswer: OrderedCollection new.	self assert: result size equals: 1! !!PPTokenTest methodsFor: 'accessing' stamp: 'lr 4/3/2009 08:51'!identifier	^ #word asParser plus token! !!PPTokenTest methodsFor: 'utilities' stamp: 'lr 3/29/2010 15:34'!parse: aString using: aParser	^ aParser parse: aString! !!PPTokenTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:15'!testCollection	| input result |	input := 'foo    '.	result := self parse: input using: self identifier.	self assert: result collection equals: input.	self assert: result collection == input! !!PPTokenTest methodsFor: 'testing-querying' stamp: 'JanKurs 10/15/2014 15:16'!testColumn	| input parser result |	input := '1' , (String with: (Character codePoint: 13)) , '12' , (String with: (Character codePoint: 13) with: (Character codePoint: 10)) , '123'		, (String with: (Character codePoint: 10)) , '1234'.	parser := #any asParser token star.	result := parser parse: input.	result with: #(1 2 1 2 3 4 1 2 3 4 1 2 3 4) do: [ :token :line | self assert: token column equals: line ]! !!PPTokenTest methodsFor: 'testing-copying' stamp: 'Nicolasanquetil 5/3/2013 15:08'!testCopyFromTo	| result other |	result := PPToken on: 'abc'.	other := result copyFrom: 2 to: 2.	self assert: other size equals: 1.	self assert: other start equals: 2.	self assert: other stop equals: 2.	self assert: other collection equals: result collection! !!PPTokenTest methodsFor: 'testing-comparing' stamp: 'Nicolasanquetil 5/3/2013 15:16'!testEquality	| token1 token2 |	token1 := self parse: 'foo' using: self identifier.	token2 := self parse: 'foo' using: self identifier.	self deny: token1 == token2.	self assert: token1 equals: token2.	self assert: token1 hash equals: token2 hash! !!PPTokenTest methodsFor: 'testing' stamp: 'lr 2/26/2013 02:50'!testInitialize	PPToken initialize! !!PPTokenTest methodsFor: 'testing-values' stamp: 'Nicolasanquetil 5/3/2013 15:00'!testInputValue	| input result |	input := 'foo'.	result := self parse: input using: self identifier.	self assert: result inputValue equals: input.	self deny: result inputValue == input! !!PPTokenTest methodsFor: 'testing-querying' stamp: 'JanKurs 10/30/2014 12:52'!testLine	| input parser result |	input := '1' , (String with: (Character codePoint: 13)) , '12' , (String with: (Character codePoint: 13) with: (Character codePoint: 10)) , '123'		, (String with: (Character codePoint: 10)) , '1234'.	parser := #any asParser token star.	result := parser parse: input.	result with: #(1 1 2 2 2 2 3 3 3 3 4 4 4 4) do: [ :token :line | self assert: token line equals: line ]! !!PPTokenTest methodsFor: 'testing' stamp: 'lr 4/14/2010 11:44'!testNew	self should: [ PPToken new ] raise: Error.	! !!PPTokenTest methodsFor: 'testing-values' stamp: 'Nicolasanquetil 5/3/2013 15:16'!testParsedValue	| input result |	input := 'foo'.	result := self parse: input using: self identifier.	self assert: result parsedValue equals: #($f $o $o)! !!PPTokenTest methodsFor: 'testing' stamp: 'JamesFoster 2/20/2015 11:35'!testPrinting	| result |	result := PPToken on: 'var'.	self assert: result printString includesSubstring: 'PPToken[1,3]'! !!PPTokenTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:01'!testSize	| result |	result := self parse: 'foo' using: self identifier.	self assert: result size equals: 3! !!PPTokenTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:10'!testStart	| result |	result := self parse: 'foo' using: self identifier.	self assert: result start equals: 1! !!PPTokenTest methodsFor: 'testing' stamp: 'Nicolasanquetil 5/3/2013 15:17'!testStop	| result |	result := self parse: 'foo' using: self identifier.	self assert: result stop equals: 3! !!PPTokenTest methodsFor: 'testing' stamp: 'lr 2/26/2013 02:49'!testValue	| result |	result := PPToken on: 'var'.	self should: [ result value ] raise: Notification! !!PPContextMementoTest methodsFor: 'accessing' stamp: 'JanKurs 8/26/2014 13:55'!memento	^ PPContextMemento new! !!PPContextMementoTest methodsFor: 'running' stamp: 'JamesFoster 2/20/2015 12:03'!setUp	super setUp.	memento := self memento.! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 8/28/2014 10:26'!testEquality	| m1 m2  |	m1 := self memento.	m2 := self memento.		self assert: m1 = m2.		m1 propertyAt: #foo put: #bar.	self assert: (m1 = m2) not.		m2 propertyAt: #foo put: #bar.	self assert: m1 = m2.! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 8/28/2014 10:26'!testEquality2	| m1 m2  |	m1 := self memento.	m2 := self memento.		self assert: m1 = m2.		m1 propertyAt: #foo put: #bar.	self assert: (m1 = m2) not.		m2 propertyAt: #bar put: #foo.	self assert: (m1 = m2) not.! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 8/28/2014 10:27'!testGetProperty		| c retval retval2 |	c := OrderedCollection new.		memento propertyAt: #foo put: c.		retval := memento propertyAt: #foo.	self assert: retval size = c size.	self assert: (retval == c) not.	self assert: retval = c.		c add: #element.	self assert: (retval = c) not.	retval2 := memento propertyAt: #foo.	self assert: (retval = retval2).	self assert: (retval == retval2) not.		retval add: #element.	self assert: (retval = retval2) not.! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 15:43'!testKeysAndValuesDo	|   |	memento keysAndValuesDo: [ :key :value |		self signalFailure: 'Should not be called'	].! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 15:43'!testKeysAndValuesDo2	| c1 c2   |	c1 := OrderedCollection new.	c2 := OrderedCollection new.	memento propertyAt: #foo put: c1.	memento propertyAt: #bar put: c2.	memento keysAndValuesDo: [ :key :value |		self assert: (value == c1) not.		self assert: (value == c2) not.	].! !!PPContextMementoTest methodsFor: 'tests' stamp: 'JanKurs 9/13/2014 21:49'!testPutProperty	| c retval  |	c := OrderedCollection new.	self assert: (memento hasProperty: #foo) not.	self assert: (memento hasProperty: #bar) not.			self should: [ memento propertyAt: #foo ] raise: Error.	self assert: (memento propertyAt: #foo ifAbsent: [ c ]) == c.		retval := memento propertyAt: #foo ifAbsentPut: [ c ].	self assert: retval size = c size.		self assert: (retval == c) not.	self assert: retval = c.	self assert: (memento hasProperty: #foo).		retval := memento propertyAt: #bar put: c.	self assert: retval size = c size.		self assert: (retval == c) not.	self assert: retval = c.	self assert: (memento hasProperty: #foo).	! !!PPContextTest methodsFor: 'as yet unclassified' stamp: 'JanKurs 8/26/2014 11:58'!context	^ PPContext new! !!PPContextTest methodsFor: 'as yet unclassified' stamp: 'JamesFoster 2/20/2015 13:14'!setUp	super setUp.	context := self context.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 12:24'!testFurthestFailure	| f1 f2 |		f1 := PPFailure message: #foo context: context at: 1.	self assert: context furthestFailure = f1.		f2 := PPFailure message: #foo context: context at: 1.	self assert: context furthestFailure = f1.		f2 := PPFailure message: #foo context: context at: 3.	self assert: context furthestFailure = f2.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 17:11'!testMemoization	| stream memento memento2 collection |	stream := 'abc' asPetitStream.	context := context stream: stream.	collection := OrderedCollection new.	context propertyAt: #foo put: collection.		memento := context remember.		self assert: memento isNil not.		context next.	collection add: #element.	self assert: (context propertyAt: #foo) size = 1. 		memento2 := context remember.	context restore: memento.	self assert: (context propertyAt: #foo) size = 0. 	self assert: context position = 0.		context restore: memento2.	self assert: (context propertyAt: #foo) size = 1. 	self assert: context position = 1.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 14:58'!testMemoization2	| stream memento |	stream := 'abc' asPetitStream.	context := context stream: stream.		memento := context remember.		context next.	self assert: context position = 1.		context restore: memento.	self assert: context position = 0.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 11/4/2014 17:15'!testMemoization3	| stream memento memento2 collection |	stream := 'abc' asPetitStream.	context := context stream: stream.	collection := OrderedCollection new.	memento := context remember.	context propertyAt: #foo put: collection.	memento2 := context remember.		context restore: memento.	self assert: (context hasProperty: #foo) not.		context restore: memento2.	self assert: (context hasProperty: #foo).! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 9/13/2014 18:23'!testPutGlobals	self assert: (context hasGlobal: #foo) not.	self assert: (context hasGlobal: #bar) not.			self should: [ context globalAt: #foo ] raise: Error.	self assert: (context globalAt: #foo ifAbsent: [ #bar ]) = #bar.		self assert: (context globalAt: #foo ifAbsentPut: [ #bar ]) = #bar.		self assert: (context hasGlobal: #foo).	self assert: (context hasGlobal: #bar) not.		self assert: (context globalAt: #foo) = #bar.		self assert: (context globalAt: #foo ifAbsentPut: [ #zorg ]) = #bar.		self assert: (context hasGlobal: #foo).	self assert: (context hasGlobal: #bar) not.		self assert: (context globalAt: #foo) = #bar.		self assert: (context globalAt: #foo put: #zorg) = #zorg.		self assert: (context hasGlobal: #foo).	self assert: (context hasGlobal: #bar) not.		self assert: (context globalAt: #foo) = #zorg.		self should: [ context globalAt: #bar ] raise: Error.	self assert: (context globalAt: #bar put: #foo) = #foo.	self assert: (context globalAt: #foo) = #zorg.	self assert: (context globalAt: #bar) = #foo.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 9/13/2014 18:22'!testPutProperties	self assert: (context hasProperty: #foo) not.	self assert: (context hasProperty: #bar) not.			self should: [ context propertyAt: #foo ] raise: Error.	self assert: (context propertyAt: #foo ifAbsent: [ #bar ]) = #bar.		self assert: (context propertyAt: #foo ifAbsentPut: [ #bar ]) = #bar.		self assert: (context hasProperty: #foo).	self assert: (context hasProperty: #bar) not.		self assert: (context propertyAt: #foo) = #bar.		self assert: (context propertyAt: #foo ifAbsentPut: [ #zorg ]) = #bar.		self assert: (context hasProperty: #foo).	self assert: (context hasProperty: #bar) not.		self assert: (context propertyAt: #foo) = #bar.		self assert: (context propertyAt: #foo put: #zorg) = #zorg.		self assert: (context hasProperty: #foo).	self assert: (context hasProperty: #bar) not.		self assert: (context propertyAt: #foo) = #zorg.		self should: [ context propertyAt: #bar ] raise: Error.	self assert: (context propertyAt: #bar put: #foo) = #foo.	self assert: (context propertyAt: #foo) = #zorg.	self assert: (context propertyAt: #bar) = #foo.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 9/13/2014 18:23'!testRemoveGlobals	context globalAt: #foo put: #zorg.	context globalAt: #bar put: #qwark.		self assert: (context removeGlobal: #foo) = #zorg.	self assert: (context removeGlobal: #bar) = #qwark.		self should: [context removeGlobal: #foo] raise: Error.	self assert: (context removeGlobal: #bar ifAbsent: [ #foobar ]) = #foobar.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 9/13/2014 18:23'!testRemoveProperties	context propertyAt: #foo put: #zorg.	context propertyAt: #bar put: #qwark.		self assert: (context removeProperty: #foo) = #zorg.	self assert: (context removeProperty: #bar) = #qwark.		self should: [context removeProperty: #foo] raise: Error.	self assert: (context removeProperty: #bar ifAbsent: [ #foobar ]) = #foobar.! !!PPContextTest methodsFor: 'tests' stamp: 'JanKurs 8/26/2014 12:08'!testStreamProtocol	context stream: 'hi there' asPetitStream.		self assert: context position = 0.	self assert: context peek = $h.	self assert: context uncheckedPeek = $h.	self assert: context next = $h.	self assert: context peek = $i.	self assert: context uncheckedPeek = $i.	self assert: context position = 1.		context skip: 2.	self assert: context position = 3.	self assert: context peek = $t.	self assert: context atEnd not.		self assert: (context next: 5) = 'there'.	self assert: context position = 8.	self assert: context atEnd.! !!PPStream commentStamp: '<historical>' prior: 35261580!A positional stream implementation used for parsing. It overrides some methods for optimization reasons.!!PPStream methodsFor: 'converting' stamp: 'lr 2/7/2010 20:53'!asPetitStream	^ self! !!PPStream methodsFor: 'accessing' stamp: 'lr 2/13/2012 20:25'!collection	"Answer the underlying collection."		^ collection! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 11/12/2014 15:48'!column	^ self column: position.! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 1/9/2015 11:17'!column: pos	| nl |	(pos = -1) ifTrue: [  ^ 0 ].	(pos > readLimit) ifTrue: [ ^ self error: 'Out of limit' ].		nl := self newlines.	nl keysAndValuesDo: [ :index :value |		(value > pos) ifTrue: [ ^ pos - (nl at: (index - 1)) + 1]	].		^ pos - (nl at: (nl size )) + 1! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 1/9/2015 09:55'!fillNewlines	| tmp line |	newlines := OrderedCollection new.			tmp := position.	line := 0.		(0 to: readLimit) do: [:index |		position := index.		self isStartOfLine ifTrue: [ newlines add: position ]	].	position := tmp.	newlines := newlines asArray.	^ newlines! !!PPStream methodsFor: 'queries' stamp: 'JanKurs 10/15/2014 15:26'!insideCRLF	(position < 1) ifTrue: [ ^ false ].		^ (self peek = (Character codePoint: 10)) and: [ self peekBack = (Character codePoint: 13) ]! !!PPStream methodsFor: 'queries' stamp: 'JanKurs 10/29/2014 15:50'!isEndOfLine	self atEnd ifTrue: [ ^ true ].	self insideCRLF ifTrue: [ ^ false ].	^ (self peek = (Character codePoint: 13) or: [ self peek = (Character codePoint: 10)]).! !!PPStream methodsFor: 'queries' stamp: 'JanKurs 10/15/2014 15:27'!isStartOfLine	(position = 0) ifTrue: [ ^ true ].	self insideCRLF ifTrue: [ ^ false ].		^ (self peekBack = (Character codePoint: 13)) or: [ self peekBack = (Character codePoint: 10)].! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 11/12/2014 15:48'!line	^ self line: position! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 1/9/2015 10:00'!line: pos	| nl |	(pos = -1) ifTrue: [  ^ 0 ].	(pos > readLimit) ifTrue: [ ^ self error: 'Out of limit' ].		nl := self newlines.	nl keysAndValuesDo: [ :index :value |		(value > pos) ifTrue: [ ^ (index - 1)]	].		^ nl size! !!PPStream methodsFor: 'positioning' stamp: 'JanKurs 1/9/2015 09:47'!newlines	^ newlines ifNil: [ 		newlines := self fillNewlines.	]! !!PPStream methodsFor: 'accessing' stamp: 'JanKurs 10/15/2014 15:27'!next: anInteger 	"Answer up to anInteger elements of my collection. Overridden for efficiency."	| answer endPosition |	endPosition := position + anInteger min: readLimit.	answer := collection copyFrom: position + 1 to: endPosition.	position := endPosition.	^ answer! !!PPStream methodsFor: 'accessing' stamp: 'lr 4/29/2008 21:48'!peek	"An improved version of peek, that is slightly faster than the built in version."	^ self atEnd ifFalse: [ collection at: position + 1 ]! !!PPStream methodsFor: 'accessing' stamp: 'lr 8/25/2010 11:36'!position: anInteger	"The receiver does not check for invalid arguments passed to this method, as it is solely used with valid indexes for backtracking."	position := anInteger! !!PPStream methodsFor: 'printing' stamp: 'lr 11/4/2010 19:23'!printOn: aStream	collection isString		ifFalse: [ ^ super printOn: aStream ].	aStream		nextPutAll: (collection copyFrom: 1 to: position);		nextPutAll: '·';		nextPutAll: (collection copyFrom: position + 1 to: readLimit)! !!PPStream methodsFor: 'accessing' stamp: 'JanKurs 10/15/2014 15:29'!size	"		The same implementation as a ReadStream. Implemented here for compatibility with Smalltalk/X		that has different implementation in a ReadStream	"	^readLimit! !!PPStream methodsFor: 'accessing' stamp: 'lr 10/5/2010 16:29'!uncheckedPeek	"An unchecked version of peek that throws an error if we try to peek over the end of the stream, even faster than #peek."	^ collection at: position + 1! !!BlockClosure methodsFor: '*petitparser-core-converting' stamp: 'lr 11/29/2011 20:48'!asParser	"Answer a parser implemented in the receiving one-argument block."	^ PPPluggableParser on: self! !!UndefinedObject methodsFor: '*petitparser-converting' stamp: 'lr 11/29/2011 20:49'!asParser	"Answer a parser that succeeds and does not consume anything."		^ PPEpsilonParser new! !!Text methodsFor: '*petitparser-core-converting' stamp: 'lr 2/7/2010 20:53'!asPetitStream	^ string asPetitStream! !!Collection methodsFor: '*petitparser-core-converting' stamp: 'lr 11/29/2011 20:38'!asChoiceParser	^ PPChoiceParser withAll: (self collect: [ :each | each asParser ])! !!Collection methodsFor: '*petitparser-converting' stamp: 'JanKurs 10/15/2014 15:50'!asParser    	"Create a range of characters between start and stop."	(self allSatisfy: [ :e | e isCharacter ]) ifTrue: [ 		| charSet |		charSet := PPCharSetPredicate on: [ :char | self includes: char ] .     	^ PPPredicateObjectParser on: charSet message: 'One of these charactes expected: ', self printString.	].	^ super asParser	"		($a to:$f) asParser parse:'a'		($a to:$f) asParser parse:'g'	"! !!Collection methodsFor: '*petitparser-core-converting' stamp: 'lr 11/29/2011 20:38'!asSequenceParser	^ PPSequenceParser withAll: (self collect: [ :each | each asParser ])! !!Object methodsFor: '*petitparser-core-converting' stamp: 'lr 12/18/2011 15:58'!asParser	"Answer a parser accepting the receiving object."	^ PPPredicateObjectParser expect: self! !!Object methodsFor: '*petitparser-core-testing' stamp: 'lr 2/7/2010 20:54'!isPetitFailure	^ false! !!Object methodsFor: '*petitparser-core-testing' stamp: 'lr 8/6/2010 16:44'!isPetitParser	^ false! !!PPCharSetPredicate class methodsFor: 'instance creation' stamp: 'lr 8/25/2010 11:05'!on: aBlock	^ self basicNew initializeOn: aBlock! !!PPCharSetPredicate methodsFor: 'initialization' stamp: 'JanKurs 2/20/2015 08:42'!initializeOn: aBlock	block := aBlock.	classification := Array new: 255.	1 to: classification size do: [ :index |		classification at: index put: (block			value: (Character codePoint: index)) ]! !!PPCharSetPredicate methodsFor: 'evaluating' stamp: 'lr 8/30/2010 12:19'!value: aCharacter	| index |	index := aCharacter asInteger.	index == 0		ifTrue: [ ^ block value: aCharacter ].	index > 255		ifTrue: [ ^ block value: aCharacter ].	^ classification at: index! !!PPContext commentStamp: 'JanKurs 8/26/2014 16:11' prior: 35261747!A PPContext is provides contextual information to the parsing function.Instance Variables	globals:		<Dictionary>	properties:		<Dictionar>	root:		<PPParser>	stream:		<PPStream>globals	- properties that are not restored after backtrackingproperties	- properties that are restored after backtrackingroot	- the root parserstream	- input stream!!PPContext class methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/16/2014 14:38'!on: aPPParser stream: aStream	^ self basicNew 		initialize;		root: aPPParser;		stream: aStream asPetitStream;		yourself! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 1/16/2014 12:13'!atEnd	^ stream atEnd! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 9/5/2014 13:50'!back	^ stream back! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 8/19/2014 14:08'!collection	^ stream collection  ! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 9/30/2014 15:32'!contents 	^ stream contents! !!PPContext methodsFor: 'failures' stamp: 'JanKurs 2/20/2015 08:56'!furthestFailure	" the furthest failure encountered while parsing the input stream "		"^ self globalAt: #furthestFailure ifAbsent: [ nil ]"	"performance optimization:"	^ furthestFailure! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:25'!globalAt: aKey	"Answer the global property value associated with aKey."		^ self globalAt: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:09'!globalAt: aKey ifAbsent: aBlock	"Answer the global property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."		^ globals isNil		ifTrue: [ aBlock value ]		ifFalse: [ globals at: aKey ifAbsent: aBlock ]! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:10'!globalAt: aKey ifAbsentPut: aBlock	"Answer the global property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."		^ self globalAt: aKey ifAbsent: [ self globalAt: aKey put: aBlock value ]! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:25'!globalAt: aKey put: anObject	"Set the global property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."	^ (globals ifNil: [ globals := Dictionary new: 1 ])		at: aKey put: anObject! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:10'!hasGlobal: aKey	"Test if the global property aKey is present."		^ globals notNil and: [ globals includesKey: aKey ]! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!hasProperty: aKey	"Test if the property aKey is present."		^ properties notNil and: [ properties includesKey: aKey ]! !!PPContext methodsFor: 'initialization' stamp: 'JanKurs 8/25/2014 17:08'!initialize	stream := nil.! !!PPContext methodsFor: 'initialization' stamp: 'JanKurs 4/30/2015 10:52'!initializeFor: parser	parser == root ifTrue: [ ^ self ].		root := parser.! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 10/29/2014 15:50'!isEndOfLine	^ stream isEndOfLine! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 8/28/2014 10:20'!isStartOfLine	^ stream isStartOfLine! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 1/15/2014 16:02'!next	^ stream next! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 8/26/2014 12:07'!next: anInteger	^ stream next: anInteger! !!PPContext methodsFor: 'failures' stamp: 'JanKurs 2/20/2015 08:57'!noteFailure: aPPFailure	"record the furthest failure encountered while parsing the input stream "	( furthestFailure isNil or: [ aPPFailure position > furthestFailure position ]) 		ifTrue: [ furthestFailure := aPPFailure ].! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 4/29/2014 16:24'!peek	^ stream peek! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 4/29/2014 16:25'!peekTwice	^ stream peekTwice! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 9/30/2014 15:31'!position	^ stream position! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 9/30/2014 15:31'!position: anInteger	^ stream position: anInteger! !!PPContext methodsFor: 'printing' stamp: 'JanKurs 12/5/2014 22:40'!printOn: aStream	super printOn: aStream.	aStream nextPut: $:.	aStream nextPut: $ .	stream printOn: aStream! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!propertyAt: aKey	"Answer the property value associated with aKey."		^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!propertyAt: aKey ifAbsent: aBlock	"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."		^ properties isNil		ifTrue: [ aBlock value ]		ifFalse: [ properties at: aKey ifAbsent: aBlock ]! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."		^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!propertyAt: aKey put: anObject	"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."	^ (properties ifNil: [ properties := Dictionary new: 1 ])		at: aKey put: anObject! !!PPContext methodsFor: 'memoization' stamp: 'JanKurs 8/26/2014 16:58'!remember	| memento |	memento := PPContextMemento new		stream: stream;		position: stream position;		yourself.			self rememberProperties: memento.	^ memento! !!PPContext methodsFor: 'memoization' stamp: 'JanKurs 8/26/2014 16:52'!rememberProperties: aPPContextMemento	properties ifNil: [ ^ self ].		properties keysAndValuesDo: [ :key :value |		aPPContextMemento propertyAt: key put: value	].! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:09'!removeGlobal: aKey	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."		^ self removeGlobal: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContext methodsFor: 'accessing-globals' stamp: 'JanKurs 8/26/2014 16:09'!removeGlobal: aKey ifAbsent: aBlock	"Remove the global property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."		| answer |	globals isNil ifTrue: [ ^ aBlock value ].	answer := globals removeKey: aKey ifAbsent: aBlock.	globals isEmpty ifTrue: [ globals := nil ].	^ answer! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!removeProperty: aKey	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."		^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContext methodsFor: 'accessing-properties' stamp: 'JanKurs 1/16/2014 11:25'!removeProperty: aKey ifAbsent: aBlock	"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."		| answer |	properties isNil ifTrue: [ ^ aBlock value ].	answer := properties removeKey: aKey ifAbsent: aBlock.	properties isEmpty ifTrue: [ properties := nil ].	^ answer! !!PPContext methodsFor: 'memoization' stamp: 'JanKurs 8/26/2014 16:58'!restore: aPPContextMemento	aPPContextMemento stream == stream ifFalse: [ self error: 'Oops!!' ].	stream position: aPPContextMemento position.	self restoreProperties: aPPContextMemento.! !!PPContext methodsFor: 'memoization' stamp: 'JanKurs 11/4/2014 17:18'!restoreProperties: aPPContextMemento	aPPContextMemento stream == stream ifFalse: [ self error: 'Oops!!' ].		properties ifNil: [ ^ self ].		properties keysDo: [ :key |		(aPPContextMemento hasProperty: key)			ifTrue: [ properties at: key put: (aPPContextMemento propertyAt: key) ]			ifFalse: [ properties removeKey: key  ]. 	].	aPPContextMemento keysAndValuesDo: [ :key :value |		properties at: key put: value	]! !!PPContext methodsFor: 'acessing' stamp: 'JanKurs 10/29/2013 10:13'!root	^ root ! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 8/19/2014 14:08'!skip: anInteger 	^ stream skip: anInteger ! !!PPContext methodsFor: 'stream mimicry' stamp: 'StephanEggermont 11/10/2014 11:57'!skipTo: anObject 	^ stream skipTo: anObject ! !!PPContext methodsFor: 'stream mimicry' stamp: 'StephanEggermont 11/10/2014 12:00'!skipToAll: aString	"Set the access position of the receiver to be past the next occurrence of the subCollection. Answer whether subCollection is found.  No wildcards, and case does matter."	| pattern startMatch |	pattern := aString readStream.	startMatch := nil.	[ pattern atEnd ] whileFalse: 		[ stream atEnd ifTrue: [ ^ false ].		stream next = pattern next 			ifTrue: [ pattern position = 1 ifTrue: [ startMatch := stream position ] ]			ifFalse: 				[ pattern position: 0.				startMatch ifNotNil: 					[ stream position: startMatch.					startMatch := nil ] ] ].	^ true! !!PPContext methodsFor: 'stream mimicry' stamp: 'StephanEggermont 11/10/2014 12:01'!skipToAnyOf: aCharacterSet 	"Set the access position of the receiver to be past the next occurrence of	a character in the character set. Answer whether a fitting character is found."	[stream atEnd]		whileFalse: [ (aCharacterSet includes: stream next) ifTrue: [^true]].	^false! !!PPContext methodsFor: 'acessing' stamp: 'JanKurs 1/16/2014 15:12'!stream	^ stream! !!PPContext methodsFor: 'acessing' stamp: 'JanKurs 1/15/2014 15:36'!stream: aStream	stream := aStream.! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 8/19/2014 14:08'!uncheckedPeek	^ stream uncheckedPeek! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 1/15/2014 16:11'!upTo: anObject	^ stream upTo: anObject! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 4/29/2014 16:29'!upToAll: whatever	^ stream upToAll: whatever! !!PPContext methodsFor: 'stream mimicry' stamp: 'JanKurs 4/29/2014 16:31'!upToAnyOf: whatever	^ stream upToAnyOf: whatever! !!PPContextMemento methodsFor: 'comparing' stamp: 'JanKurs 8/26/2014 15:41'!= anObject		(self == anObject) ifTrue: [ ^ true ].	(anObject class = PPContextMemento) ifFalse: [ ^ false ].		(anObject stream == stream) ifFalse: [ ^ false ].	(anObject position = position) ifFalse: [ ^ false ].	(self propertiesSize = anObject propertiesSize) ifFalse: [ ^ false ].	self keysAndValuesDo: [ :key :value |		(anObject hasProperty: key) ifFalse: [ ^ false ].		((anObject propertyAt: key) = value) ifFalse: [ ^ false ].  	].		^ true.! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 3/19/2014 12:14'!hasProperty: aKey	"Test if the property aKey is present."		^ properties notNil and: [ properties includesKey: aKey ]! !!PPContextMemento methodsFor: 'comparing' stamp: 'JanKurs 3/19/2014 13:04'!hash	^ (position hash bitXor: stream hash) bitXor: properties hash.! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 8/26/2014 14:59'!keysAndValuesDo: aBlock	properties ifNil: [ ^ self ].	properties keysAndValuesDo: [ :key :value | aBlock value: key value: value copy ] ! !!PPContextMemento methodsFor: 'accessing' stamp: 'JanKurs 10/28/2013 16:51'!position	^ position! !!PPContextMemento methodsFor: 'accessing' stamp: 'JanKurs 10/28/2013 16:52'!position: anInteger	position := anInteger ! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 8/26/2014 15:32'!propertiesSize	properties ifNil: [ ^ 0 ].	^ properties size.! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 3/19/2014 12:14'!propertyAt: aKey	"Answer the property value associated with aKey."		^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 11/17/2014 11:37'!propertyAt: aKey ifAbsent: aBlock	"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."		properties isNil		ifTrue: [ ^ aBlock value ]		ifFalse: [ 			(properties includesKey: aKey) ifTrue: [ 				^ (properties at: aKey) copy			].			^ aBlock value		]! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 3/19/2014 12:15'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."		^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 8/26/2014 13:42'!propertyAt: aKey put: anObject	"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."	^ (properties ifNil: [ properties := Dictionary new: 1 ])		at: aKey put: (anObject copy)! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 3/19/2014 12:15'!removeProperty: aKey	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."		^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPContextMemento methodsFor: 'accessing - properties' stamp: 'JanKurs 3/19/2014 12:15'!removeProperty: aKey ifAbsent: aBlock	"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."		| answer |	properties isNil ifTrue: [ ^ aBlock value ].	answer := properties removeKey: aKey ifAbsent: aBlock.	properties isEmpty ifTrue: [ properties := nil ].	^ answer! !!PPContextMemento methodsFor: 'accessing' stamp: 'JanKurs 10/28/2013 16:51'!stream	^ stream! !!PPContextMemento methodsFor: 'accessing' stamp: 'JanKurs 10/28/2013 16:52'!stream: aStream	stream := aStream! !!PPFailure commentStamp: 'BernardoContreras 3/16/2015 21:39' prior: 35262178!The failure object in PetitParser. It is the only class that responds to #isPetitFailure with true. It contains an error message and a position of the occurrence of the failure.Instance Variables:	message	<String>	The error message of this failure.	position	<Integer>	The position of this failure in the input stream.!!PPFailure class methodsFor: 'instance creation' stamp: 'JanKurs 9/17/2014 20:27'!message: aString	^ self basicNew initializeMessage: aString ! !!PPFailure class methodsFor: 'instance creation' stamp: 'JanKurs 9/30/2014 16:21'!message: aString at: anInteger	"One should not use this method if the furthest failure is supposed to be reported correctly"	^ self basicNew initializeMessage: aString at: anInteger! !!PPFailure class methodsFor: 'instance creation' stamp: 'JanKurs 8/19/2014 16:32'!message: aString context: aPPContext	^ self basicNew initializeMessage: aString context: aPPContext! !!PPFailure class methodsFor: 'instance creation' stamp: 'JanKurs 8/19/2014 16:57'!message: aString context: aPPContext at: position	^ self basicNew initializeMessage: aString context: aPPContext position: position! !!PPFailure methodsFor: 'initialization' stamp: 'JanKurs 9/17/2014 20:28'!initializeMessage: aString		message := aString.! !!PPFailure methodsFor: 'initialization' stamp: 'JanKurs 9/30/2014 16:21'!initializeMessage: aString at: anInteger	"One should not use this method if the furthest failure is supposed to be reported correctly"	message := aString.	position := anInteger.! !!PPFailure methodsFor: 'initialization' stamp: 'JanKurs 8/19/2014 16:57'!initializeMessage: aString context: aPPContext	self initializeMessage: aString context:  aPPContext position: aPPContext position! !!PPFailure methodsFor: 'initialization' stamp: 'JanKurs 8/25/2014 15:02'!initializeMessage: aString context: aPPContext position: anInteger	message := aString.	context := aPPContext.	position := anInteger.		"record the furthest failure encountered while parsing the input stream "	aPPContext noteFailure: self.	! !!PPFailure methodsFor: 'testing' stamp: 'lr 2/7/2010 20:54'!isPetitFailure	"I am the only class that should implement this method to return true."	^ true! !!PPFailure methodsFor: 'accessing' stamp: 'lr 5/5/2010 13:56'!message	"Answer a human readable error message of this parse failure."		^ message! !!PPFailure methodsFor: 'accessing' stamp: 'lr 5/5/2010 13:55'!position	"Answer the position in the source string that caused this parse failure."	^ position! !!PPFailure methodsFor: 'printing' stamp: 'JanKurs 8/19/2014 16:30'!printOn: aStream	aStream nextPutAll: self message; nextPutAll: ' at '; print: self position! !!PPMemento commentStamp: 'BernardoContreras 3/16/2015 21:40' prior: 35262573!PPMemento is an internal class used by PPMemoizedParser to cache results and detect left-recursive calls.Instance Variables:	result	<Object>	The cached result.	count	<Integer>	The number of recursive cycles followed.	!!PPMemento class methodsFor: 'instance creation' stamp: 'lr 4/22/2008 18:21'!new	^ self basicNew initialize! !!PPMemento methodsFor: 'accessing' stamp: 'JanKurs 1/15/2014 16:09'!contextMemento	^ context! !!PPMemento methodsFor: 'accessing' stamp: 'JanKurs 1/15/2014 16:09'!contextMemento: aPPContextMemento	context  := aPPContextMemento ! !!PPMemento methodsFor: 'accessing-readonly' stamp: 'lr 4/22/2008 18:23'!count	^ count! !!PPMemento methodsFor: 'actions' stamp: 'lr 4/22/2008 18:20'!increment	count := count + 1! !!PPMemento methodsFor: 'initialization' stamp: 'lr 4/22/2008 18:21'!initialize	count := 0	! !!PPMemento methodsFor: 'accessing' stamp: 'lr 4/24/2008 10:15'!result	^ result! !!PPMemento methodsFor: 'accessing' stamp: 'lr 4/22/2008 18:23'!result: anObject	result := anObject! !!PPParser commentStamp: 'BernardoContreras 3/16/2015 21:32' prior: 35262867!An abstract parser for all parsers in PetitParser. Subclasses implement #parseOn: to perform the actual recursive-descent parsing. All parsers support a variety of methods to perform an actual parse, see the methods in the #parsing protocol. Parsers are combined with a series of operators that can be found in the #operations protocol.Instance Variables:	properties	<Dictionary>	Stores additional state in the parser object.!!PPDelegateParser commentStamp: 'BernardoContreras 3/16/2015 21:31' prior: 35263376!A parser that delegates to another parser.Instance Variables:	parser	<PPParser>	The parser to delegate to.!!PPActionParser commentStamp: 'BernardoContreras 3/16/2015 21:31' prior: 35263563!A parser that performs an action block with the successful parse result of the delegate.Instance Variables:	block	<BlockClosure>	The action block to be executed.!!PPActionParser class methodsFor: 'instance creation' stamp: 'lr 5/2/2010 16:58'!on: aParser block: aBlock	^ (self on: aParser) setBlock: aBlock! !!PPActionParser methodsFor: 'accessing' stamp: 'lr 4/30/2010 11:10'!block	"Answer the action block of the receiver."	^ block! !!PPActionParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 5/7/2011 15:08'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self block = aParser block ]! !!PPActionParser methodsFor: 'parsing' stamp: 'JanKurs 11/11/2013 09:31'!parseOn: aPPContext	| element |	^ (element := parser parseOn: aPPContext) isPetitFailure		ifFalse: [ block value: element ]		ifTrue: [ element ]! !!PPActionParser methodsFor: 'initialization' stamp: 'lr 5/2/2010 16:58'!setBlock: aBlock	block := aBlock! !!PPWrappingParser commentStamp: '<historical>' prior: 35263787!A parser that performs an action block upon activation with the stream and a continuation block.!!PPWrappingParser methodsFor: 'parsing' stamp: 'JanKurs 11/11/2013 09:31'!parseOn: aPPContext	^ block value: aPPContext value: [ parser parseOn: aPPContext ]! !!PPAndParser commentStamp: 'TudorGirba 2/27/2011 22:22' prior: 35263951!The and-predicate, a parser that succeeds whenever its delegate does, but does not consume the input stream [Parr 1994, 1995].!!PPAndParser methodsFor: 'operators' stamp: 'lr 5/1/2010 16:16'!and	^ self! !!PPAndParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:45'!parseOn: aPPContext	| element memento |	memento := aPPContext remember.	element := parser parseOn: aPPContext.	aPPContext restore: memento.	^ element! !!PPCompositeParser commentStamp: 'BernardoContreras 3/16/2015 21:36' prior: 35264158!A PPCompositeParser is composed parser built from various primitive parsers. Every production in the receiver is specified as a method that returns its parser. Note that every production requires an instance variable of the same name, otherwise the production is not cached and cannot be used in recursive grammars. Productions should refer to each other by reading the respective inst-var. Note: these inst-vars are typically not written, as the assignment happens in the initialize method using reflection.The start production is defined in the method start. It is aliased to the inst-var parser defined in the superclass of PPCompositeParser.!!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 2/25/2013 23:46'!addition	^ (factors separatedBy: ($+ asParser / $- asParser) trim) 		foldLeft: [ :a :op :b | a perform: op asSymbol with: b ]! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 9/15/2008 09:28'!factors	^ multiplication / power! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 2/25/2013 23:47'!multiplication	^ (power separatedBy: ($* asParser / $/ asParser) trim)		foldLeft: [ :a :op :b | a perform: op asSymbol with: b ]! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 2/25/2013 23:47'!number	^ ($- asParser optional , #digit asParser plus , ($. asParser , #digit asParser plus) optional) flatten trim 		==> [ :value | value asNumber ]! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'JamesFoster 2/20/2015 11:59'!parentheses	^ $( asParser trim , terms , $) asParser trim		==> [ :nodes | nodes at: 2 ]! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 2/25/2013 23:49'!power	^ (primary separatedBy: $^ asParser trim)		foldRight: [ :a :op :b | a raisedTo: b ]! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 9/15/2008 09:28'!primary	^ number / parentheses! !!PPArithmeticParser methodsFor: 'accessing' stamp: 'lr 7/3/2008 17:06'!start	^ terms end! !!PPArithmeticParser methodsFor: 'grammar' stamp: 'lr 9/15/2008 09:29'!terms	^ addition / factors! !!PPCompositeParser class methodsFor: 'accessing' stamp: 'lr 3/16/2013 21:42'!dependencies	"Answer a collection of PPCompositeParser classes that this parser directly dependends on. Override this method in subclasses to declare dependent parsers. The default implementation does not depend on other PPCompositeParser."	^ #()! !!PPCompositeParser class methodsFor: 'accessing' stamp: 'lr 1/29/2010 11:35'!ignoredNames	"Answer a collection of instance-variables that should not be automatically initialized with productions, but that are used internal to the composite parser."	^ PPCompositeParser allInstVarNames! !!PPCompositeParser class methodsFor: 'instance creation' stamp: 'lr 12/7/2009 08:24'!new	"Answer a new parser starting at the default start symbol."	^ self newStartingAt: self startSymbol! !!PPCompositeParser class methodsFor: 'instance creation' stamp: 'lr 3/16/2013 21:21'!newStartingAt: aSymbol	"Answer a new parser starting at aSymbol. The code makes sure to resolve all dependent parsers correctly."	| parsers remaining |	parsers := IdentityDictionary new.	remaining := OrderedCollection with: self.	[ remaining isEmpty ] whileFalse: [		| dependency |		dependency := remaining removeLast.		(parsers includesKey: dependency) ifFalse: [			parsers at: dependency put: dependency basicNew.			remaining addAll: dependency dependencies ] ].	parsers keysAndValuesDo: [ :class :parser |		| dependencies |		dependencies := IdentityDictionary new.		class dependencies 			do: [ :dependency | dependencies at: dependency put: (parsers at: dependency) ].		parser 			initializeStartingAt: (class == self				ifTrue: [ aSymbol ]				ifFalse: [ class startSymbol ]) 			dependencies: dependencies ].	parsers keysAndValuesDo: [ :class :parser |		parser setParser: (parser perform: parser children first name).		parser productionNames keysAndValuesDo: [ :key :value |			(parser instVarAt: key) setParser: (parser perform: value) ] ].	^ parsers at: self! !!PPCompositeParser class methodsFor: 'parsing' stamp: 'lr 2/7/2010 20:57'!parse: anObject	^ self parse: anObject startingAt: self startSymbol! !!PPCompositeParser class methodsFor: 'parsing' stamp: 'lr 2/7/2010 21:02'!parse: anObject onError: aBlock	^ self parse: anObject startingAt: self startSymbol onError: aBlock! !!PPCompositeParser class methodsFor: 'parsing' stamp: 'lr 2/7/2010 20:57'!parse: anObject startingAt: aSymbol	^ (self newStartingAt: aSymbol) parse: anObject! !!PPCompositeParser class methodsFor: 'parsing' stamp: 'lr 2/7/2010 21:02'!parse: anObject startingAt: aSymbol onError: aBlock	^ (self newStartingAt: aSymbol) parse: anObject onError: aBlock! !!PPCompositeParser class methodsFor: 'accessing' stamp: 'lr 12/7/2009 08:20'!startSymbol	"Answer the method that represents the default start symbol."	^ #start! !!PPCompositeParser methodsFor: 'querying' stamp: 'lr 3/16/2013 21:41'!dependencyAt: aClass	"Answer the dependent parser aClass. Throws an error if this parser class is not declared in the method #dependencies on the class-side of the receiver."		^ dependencies at: aClass ifAbsent: [ self error: 'Undeclared dependency in ' , self class name , ' to ' , aClass name ]! !!PPCompositeParser methodsFor: 'initialization' stamp: 'lr 3/16/2013 17:15'!initializeStartingAt: aSymbol dependencies: aDictionary	self initialize.	parser := PPDelegateParser named: aSymbol.	self productionNames keysAndValuesDo: [ :key :value |		self instVarAt: key put: (PPDelegateParser named: value) ].	dependencies := aDictionary! !!PPCompositeParser methodsFor: 'querying' stamp: 'lr 12/4/2009 18:39'!productionAt: aSymbol	"Answer the production named aSymbol."		^ self productionAt: aSymbol ifAbsent: [ nil ]! !!PPCompositeParser methodsFor: 'querying' stamp: 'lr 6/4/2010 13:37'!productionAt: aSymbol ifAbsent: aBlock	"Answer the production named aSymbol, if there is no such production answer the result of evaluating aBlock."		(self class ignoredNames includes: aSymbol asString)		ifTrue: [ ^ aBlock value ].	(self class startSymbol = aSymbol)		ifTrue: [ ^ parser ].	^ self instVarAt: (self class allInstVarNames		indexOf: aSymbol asString		ifAbsent: [ ^ aBlock value ])! !!PPCompositeParser methodsFor: 'querying' stamp: 'lr 5/8/2011 15:45'!productionNames	"Answer a dictionary of slot indexes and production names."		| productionNames ignoredNames |	productionNames := Dictionary new.	ignoredNames := self class ignoredNames		collect: [ :each | each asSymbol ].	self class allInstVarNames keysAndValuesDo: [ :key :value |		(ignoredNames includes: value asSymbol)			ifFalse: [ productionNames at: key put: value asSymbol ] ].	^ productionNames! !!PPCompositeParser methodsFor: 'accessing' stamp: 'lr 5/16/2008 17:32'!start	"Answer the production to start this parser with."		self subclassResponsibility! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!and	^ self parse: '\p.\q.((p q) p)'! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!false	^ self parse: '\x.\y.y'! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!ifthenelse	^ self parse: '\p.p'! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!not	^ self parse: '\p.\a.\b.((p b) a)'! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!or	^ self parse: '\p.\q.((p p) q)'! !!PPLambdaParser class methodsFor: 'curch-booleans' stamp: 'lr 4/3/2009 08:28'!true	^ self parse: '\x.\y.x'! !!PPLambdaParser methodsFor: 'productions' stamp: 'JamesFoster 2/20/2015 12:10'!abstraction	^ $\ asParser trim , variable , $. asParser trim , expression 		==> [ :node | Array with: (node at: 2) with: (node at: 4) ]! !!PPLambdaParser methodsFor: 'productions' stamp: 'JamesFoster 2/20/2015 12:11'!application	^ $( asParser trim , expression , expression , $) asParser trim 			==> [ :node | Array with: (node at: 2) with: (node at: 3) ]! !!PPLambdaParser methodsFor: 'productions' stamp: 'lr 9/15/2008 09:29'!expression	^ variable / abstraction / application! !!PPLambdaParser methodsFor: 'accessing' stamp: 'lr 5/19/2008 11:35'!start	^ expression end! !!PPLambdaParser methodsFor: 'productions' stamp: 'lr 2/25/2013 23:44'!variable	^ (#letter asParser , #word asParser star) flatten trim! !!PPConditionalParser commentStamp: 'JanKurs 2/4/2015 18:03' prior: 35264879!A PPConditionalParser is a delegate parser that evaluates a block and if that returns true, the delegate parser is invoked and its result returned. If the block evaluates to false, the PPFailure is returned.The block accepts one argument, context.E.g.    ('a' asParser if: [ :ctx | (ctx propertyAt: #myProperty) isNotNil ]) parse: 'a'!!PPConditionalParser class methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/25/2015 16:27'!on: aPPParser block: block	^ (PPConditionalParser on: aPPParser)		block: block;		yourself! !!PPConditionalParser methodsFor: 'accessing' stamp: 'JanKurs 1/25/2015 16:28'!block: aBlock	block := aBlock! !!PPConditionalParser methodsFor: 'parsing' stamp: 'JanKurs 1/25/2015 16:27'!parseOn: aPPContext	^ (block value: aPPContext) 		ifTrue: [ parser parseOn: aPPContext ]		ifFalse: [ PPFailure message: block asString, ' was not evaluated to true.' context: aPPContext ]! !!PPDelegateParser class methodsFor: 'instance creation' stamp: 'lr 4/20/2008 16:22'!on: aParser	^ self new setParser: aParser! !!PPDelegateParser methodsFor: 'accessing' stamp: 'lr 10/21/2009 16:37'!children	^ Array with: parser! !!PPDelegateParser methodsFor: 'parsing' stamp: 'JanKurs 11/11/2013 09:31'!parseOn: aPPContext	^ parser parseOn: aPPContext! !!PPDelegateParser methodsFor: '*petitanalyzer-transforming' stamp: 'lr 4/13/2010 09:39'!replace: aParser with: anotherParser	super replace: aParser with: anotherParser.	parser == aParser ifTrue: [ parser := anotherParser ]! !!PPDelegateParser methodsFor: 'initialization' stamp: 'lr 4/20/2008 16:23'!setParser: aParser	parser := aParser! !!PPEndOfInputParser commentStamp: 'lr 4/18/2008 13:46' prior: 35265285!A parser that succeeds only at the end of the input stream.!!PPEndOfInputParser methodsFor: 'operators' stamp: 'lr 12/7/2009 08:53'!end	^ self! !!PPEndOfInputParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:45'!parseOn: aPPContext	| memento result |	memento := aPPContext remember.	result := parser parseOn: aPPContext.	(result isPetitFailure or: [ aPPContext stream atEnd ])		ifTrue: [ ^ result ].	result := PPFailure		message: 'end of input expected'		context: aPPContext.	aPPContext restore: memento.	^ result! !!PPExpressionParser commentStamp: '<historical>' prior: 35265405!A PPExpressionParser is a parser to conveniently define an expression grammar with prefix, postfix, and left- and right-associative infix operators.The following code initializes a parser for arithmetic expressions. First we instantiate an expression parser, a simple parser for expressions in parenthesis and a simple parser for integer numbers.	expression := PPExpressionParser new.	parens := $( asParser token trim , expression , $) asParser token trim 		==> [ :nodes | nodes second ].	integer := #digit asParser plus token trim		==> [ :token | token value asInteger ].	Then we define on what term the expression grammar is built on:	expression term: parens / integer.	Finally we define the operator-groups in descending precedence. Note, that the action blocks receive both, the terms and the parsed operator in the order they appear in the parsed input. 		expression		group: [ :g |			g prefix: $- asParser token trim do: [ :op :a | a negated ] ];		group: [ :g |			g postfix: '++' asParser token trim do: [ :a :op | a + 1 ].			g postfix: '--' asParser token trim do: [ :a :op | a - 1 ] ];		group: [ :g |			g right: $^ asParser token trim do: [ :a :op :b | a raisedTo: b ] ];		group: [ :g |			g left: $* asParser token trim do: [ :a :op :b | a * b ].			g left: $/ asParser token trim do: [ :a :op :b | a / b ] ];		group: [ :g |			g left: $+ asParser token trim do: [ :a :op :b | a + b ].			g left: $- asParser token trim do: [ :a :op :b | a - b ] ].		After evaluating the above code the 'expression' is an efficient parser that evaluates examples like:	expression parse: '-8++'.	expression parse: '1+2*3'.	expression parse: '1*2+3'.	expression parse: '(1+2)*3'.	expression parse: '8/4/2'.	expression parse: '8/(4/2)'.	expression parse: '2^2^3'.	expression parse: '(2^2)^3'.	Instance Variables:	operators	<Dictionary>	The operators defined in the current group.!!PPExpressionParser methodsFor: 'private' stamp: 'FirstnameLastname 11/26/2009 20:48'!build: aParser left: aChoiceParser	^ (aParser separatedBy: aChoiceParser) foldLeft: [ :a :op :b | op first value: a value: op second value: b ]! !!PPExpressionParser methodsFor: 'private' stamp: 'lr 12/4/2009 17:38'!build: aParser postfix: aChoiceParser	^ aParser , aChoiceParser star map: [ :term :ops | ops inject: term into: [ :result :operator | operator first value: result value: operator second ] ]! !!PPExpressionParser methodsFor: 'private' stamp: 'JanKurs 2/20/2015 08:46'!build: aParser prefix: aChoiceParser	^ aChoiceParser star , aParser map: [ :ops :term | ops reverse inject: term into: [ :result :operator | operator first value: operator second value: result ] ]! !!PPExpressionParser methodsFor: 'private' stamp: 'FirstnameLastname 11/26/2009 20:48'!build: aParser right: aChoiceParser	^ (aParser separatedBy: aChoiceParser) foldRight: [ :a :op :b | op first value: a value: op second value: b ]! !!PPExpressionParser methodsFor: 'private' stamp: 'FirstnameLastname 11/26/2009 21:15'!buildOn: aParser	^ self buildSelectors inject: aParser into: [ :term :selector |		| list |		list := operators at: selector ifAbsent: [ #() ].		list isEmpty			ifTrue: [ term ]			ifFalse: [				self					perform: selector with: term 					with: (list size = 1						ifTrue: [ list first first ==> [ :operator | Array with: list first second with: operator ] ]						ifFalse: [ 							list								inject: PPChoiceParser new								into: [ :choice :each | choice / (each first ==> [ :operator | Array with: each second with: operator ]) ] ]) ] ]! !!PPExpressionParser methodsFor: 'private' stamp: 'FirstnameLastname 11/26/2009 20:48'!buildSelectors	^ #(build:prefix: build:postfix: build:right: build:left:)! !!PPExpressionParser methodsFor: 'specifying' stamp: 'lr 2/7/2010 23:20'!group: aOneArgumentBlock	"Defines a priority group by evaluating aOneArgumentBlock."		operators := Dictionary new.	parser := [ 		aOneArgumentBlock value: self.	 	self buildOn: parser ]			ensure: [ operators := nil ]! !!PPExpressionParser methodsFor: 'specifying' stamp: 'FirstnameLastname 11/26/2009 20:49'!left: aParser do: aThreeArgumentBlock	"Define an operator aParser that is left-associative. Evaluate aThreeArgumentBlock with the first term, the operator, and the second term."		self operator: #build:left: parser: aParser do: aThreeArgumentBlock! !!PPExpressionParser methodsFor: 'private' stamp: 'lr 2/7/2010 23:23'!operator: aSymbol parser: aParser do: aBlock	parser isNil		ifTrue: [ ^ self error: 'You did not specify a term when creating the receiver.' ].	operators isNil		ifTrue: [ ^ self error: 'Use #group: to define precedence groups in descending order.' ].	(operators at: aSymbol ifAbsentPut: [ OrderedCollection new ])		addLast: (Array with: aParser asParser with: aBlock)! !!PPExpressionParser methodsFor: 'specifying' stamp: 'FirstnameLastname 11/26/2009 20:49'!postfix: aParser do: aTwoArgumentBlock	"Define a postfix operator aParser. Evaluate aTwoArgumentBlock with the term and the operator."	self operator: #build:postfix: parser: aParser do: aTwoArgumentBlock! !!PPExpressionParser methodsFor: 'specifying' stamp: 'FirstnameLastname 11/26/2009 20:49'!prefix: aParser do: aTwoArgumentBlock	"Define a prefix operator aParser. Evaluate aTwoArgumentBlock with the operator and the term."	self operator: #build:prefix: parser: aParser do: aTwoArgumentBlock! !!PPExpressionParser methodsFor: 'specifying' stamp: 'FirstnameLastname 11/26/2009 20:49'!right: aParser do: aThreeArgumentBlock	"Define an operator aParser that is right-associative. Evaluate aThreeArgumentBlock with the first term, the operator, and the second term."		self operator: #build:right: parser: aParser do: aThreeArgumentBlock! !!PPExpressionParser methodsFor: 'specifying' stamp: 'FirstnameLastname 11/26/2009 21:26'!term: aParser	"Defines the initial term aParser of the receiver."		parser isNil		ifTrue: [ parser := aParser ]		ifFalse: [ self error: 'Unable to redefine the term.' ]! !!PPFlattenParser commentStamp: 'lr 11/22/2009 13:09' prior: 35267376!A parser that answers a flat copy of the range my delegate parses.!!PPFlattenParser methodsFor: 'private' stamp: 'lr 2/25/2013 23:31'!on: aCollection start: aStartInteger stop: aStopInteger value: anObject	^ aCollection copyFrom: aStartInteger to: aStopInteger! !!PPFlattenParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:46'!parseOn: aPPContext	| start element |	start := aPPContext position.	element := parser parseOn: aPPContext.	element isPetitFailure ifTrue: [ ^ element ].	^ self on: aPPContext stream collection start: start + 1 stop: aPPContext position value: element! !!PPTokenParser commentStamp: 'lr 2/25/2013 23:31' prior: 35267504!A parser that answers a token with the value of my delegate parses.Instance Variables:	tokenClass	<PPToken class>	The token sub-class to be used.!!PPTokenParser methodsFor: 'private' stamp: 'lr 4/6/2010 19:18'!defaultTokenClass	^ PPToken! !!PPTokenParser methodsFor: 'initialization' stamp: 'lr 4/6/2010 19:19'!initialize	tokenClass := self defaultTokenClass	! !!PPTokenParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 6/18/2010 14:09'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self tokenClass = aParser tokenClass ]! !!PPTokenParser methodsFor: 'private' stamp: 'lr 2/25/2013 23:32'!on: aCollection start: aStartInteger stop: aStopInteger value: anObject	^ self tokenClass on: aCollection start: aStartInteger stop: aStopInteger value: anObject! !!PPTokenParser methodsFor: 'accessing' stamp: 'lr 4/6/2010 19:23'!tokenClass	^ tokenClass! !!PPTokenParser methodsFor: 'accessing' stamp: 'lr 4/6/2010 19:24'!tokenClass: aTokenClass	tokenClass := aTokenClass! !!PPMemoizedParser commentStamp: '<historical>' prior: 35267711!A memoized parser, for refraining redundant computations.Instance Variables:	stream	<PositionableStream>	The stream of the associated memento objects.	buffer	<Array of: PPMemento>	The buffer of memento objects.!!PPMemoizedParser methodsFor: 'operators' stamp: 'lr 4/2/2009 19:48'!memoized	"Ther is no point in memoizing more than once."	^ self! !!PPMemoizedParser methodsFor: 'parsing' stamp: 'JanKurs 9/9/2014 11:40'!parseOn: aPPContext	| memento contextMemento  aStream |	"TODO: JK memoizing needs review!!"		contextMemento := aPPContext remember.	(hash == aPPContext hash)		ifFalse: [ self reset: aPPContext ].	memento := (buffer at: contextMemento ifAbsentPut: [ PPMemento new ]).		memento contextMemento isNil		ifTrue: [			aStream := aPPContext stream.			memento result: (aStream size - aStream position + 2 < memento count				ifTrue: [ PPFailure message: 'overflow' context: aPPContext ]				ifFalse: [ memento increment. parser parseOn: aPPContext ]).			memento contextMemento: aPPContext remember ]		ifFalse: [ context restore: memento contextMemento ].	^ memento result.! !!PPMemoizedParser methodsFor: 'parsing' stamp: 'JanKurs 9/9/2014 11:39'!reset: aPPContext	hash := aPPContext hash.	context := aPPContext.	buffer := Dictionary new.! !!PPNotParser commentStamp: '<historical>' prior: 35267980!The not-predicate, a parser that succeeds whenever its delegate does not, but consumes no input [Parr 1994, 1995].!!PPNotParser methodsFor: '*petitanalyzer-private' stamp: 'JanKurs 5/31/2013 11:50'!firstSets: aFirstDictionary into: aSet	! !!PPNotParser methodsFor: '*petitanalyzer-testing' stamp: 'JanKurs 5/31/2013 11:50'!isFirstSetTerminal	^ true! !!PPNotParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:47'!parseOn: aPPContext	| element memento |	memento := aPPContext remember.	element := parser parseOn: aPPContext.	aPPContext restore: memento.	^ element isPetitFailure		ifFalse: [ PPFailure message: '' context: aPPContext ]! !!PPOptionalParser commentStamp: 'lr 4/3/2011 14:46' prior: 35268158!A parser that optionally parsers its delegate, or answers nil.!!PPOptionalParser methodsFor: '*petitanalyzer-testing' stamp: 'lr 9/1/2010 22:10'!isNullable	^ true! !!PPOptionalParser methodsFor: 'parsing' stamp: 'JanKurs 3/19/2014 15:12'!parseOn: aPPContext	| element |	element := parser parseOn: aPPContext.	^ element isPetitFailure ifFalse: [ element ]! !!PPRepeatingParser commentStamp: 'lr 4/3/2011 14:45' prior: 35268285!An abstract parser that repeatedly parses between 'min' and 'max' instances of its delegate. The default configuration parses an infinite number of elements, as 'min' is set to 0 and 'max' to infinity (SmallInteger maxVal).Instance Variables:	min	<Integer>	The minimum number of repetitions.	max	<Integer>	The maximum number of repetitions.!!PPLimitedRepeatingParser commentStamp: 'BernardoContreras 3/16/2015 21:30' prior: 35268717!An abstract parser that repeatedly parses between 'min' and 'max' instances of my delegate and that requires the input to be completed with a specified parser 'limit'. Subclasses provide repeating behavior as typically seen in regular expression implementations (non-blind).Instance Variables:	limit	<PPParser>	The parser to complete the input with.!!PPGreedyRepeatingParser commentStamp: 'lr 4/3/2011 15:08' prior: 35269140!A greedy repeating parser, commonly seen in regular expression implementations. It aggressively consumes as much input as possible and then backtracks to meet the 'limit' condition.This class essentially implements the iterative version of the following recursive parser composition:	| parser |	parser := PPChoiceParser new.	parser setParsers: (Array		with: (self , parser map: [ :each :rest | rest addFirst: each; yourself ])		with: (limit and ==> [ :each | OrderedCollection new ])).	^ parser ==> [ :rest | rest asArray ]!!PPGreedyRepeatingParser methodsFor: 'parsing' stamp: 'JanKurs 11/10/2014 17:58'!parseOn: aPPContext	| memento element elements positions |	memento := aPPContext remember.	elements := OrderedCollection new.	[ elements size < min ] whileTrue: [ 		(element := parser parseOn: aPPContext) isPetitFailure ifTrue: [ 			aPPContext restore: memento.			^ element ].		elements addLast: element ].	positions := OrderedCollection with: aPPContext remember.	[ elements size < max and: [ (element := parser parseOn: aPPContext) isPetitFailure not ] ] whileTrue: [		elements addLast: element.		positions addLast: aPPContext remember ].	[ positions isEmpty ] whileFalse: [		aPPContext restore: positions last.		element := limit parseOn: aPPContext.		element isPetitFailure ifFalse: [			aPPContext restore: positions last.			^ elements asArray ].		elements isEmpty ifTrue: [			aPPContext restore: memento.			^ element ].		elements removeLast.		positions removeLast ].	aPPContext restore: memento.	^ PPFailure message: 'overflow' context: aPPContext at: memento position! !!PPLazyRepeatingParser commentStamp: 'lr 4/3/2011 15:08' prior: 35269741!A lazy repeating parser, commonly seen in regular expression implementations. It limits its consumption to meet the 'limit' condition as early as possible.This class essentially implements the iterative version of the following recursive parser composition:	| parser |	parser := PPChoiceParser new.	parser setParsers: (Array		with: (limit and ==> [ :each | OrderedCollection new ])		with: (self , parser map: [ :each :rest | rest addFirst: each; yourself ])).	^ parser ==> [ :rest | rest asArray ]!!PPLazyRepeatingParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:47'!parseOn: aPPContext	| memento element elements |	memento := aPPContext remember.	elements := OrderedCollection new.	[ elements size < min ] whileTrue: [		(element := parser parseOn: aPPContext) isPetitFailure ifTrue: [			aPPContext restore: memento.			^ element ].		elements addLast: element ].	[ self matchesLimitOn: aPPContext ] whileFalse: [		elements size < max ifFalse: [			aPPContext restore: memento.			^ PPFailure message: 'overflow' context: aPPContext at: memento position ].		element := parser parseOn: aPPContext.		element isPetitFailure ifTrue: [			aPPContext restore: memento.			^ element ].		elements addLast: element ].	^ elements asArray! !!PPLimitedRepeatingParser class methodsFor: 'instance creation' stamp: 'lr 4/3/2011 14:58'!on: aParser limit: aLimitParser	^ (self on: aParser) setLimit: aLimitParser! !!PPLimitedRepeatingParser methodsFor: 'accessing' stamp: 'lr 4/4/2011 18:46'!children	^ Array with: parser with: limit! !!PPLimitedRepeatingParser methodsFor: 'accessing' stamp: 'lr 4/2/2011 10:00'!limit	"Answer the parser that limits (or ends) this repetition."		^ limit! !!PPLimitedRepeatingParser methodsFor: 'parsing' stamp: 'JanKurs 1/15/2014 16:04'!matchesLimitOn: aPPContext	| element position |	position := aPPContext remember.	element := limit parseOn: aPPContext.	aPPContext restore: position.	^ element isPetitFailure not! !!PPLimitedRepeatingParser methodsFor: '*petitanalyzer-transforming' stamp: 'lr 4/4/2011 18:46'!replace: aParser with: anotherParser	super replace: aParser with: anotherParser.	limit == aParser ifTrue: [ limit := anotherParser ]! !!PPLimitedRepeatingParser methodsFor: 'initialization' stamp: 'lr 4/2/2011 10:00'!setLimit: aParser	limit := aParser! !!PPPossessiveRepeatingParser commentStamp: 'lr 4/3/2011 14:35' prior: 35270322!The default repeating parser with standard PEG semantics (i.e. possessive, blind, eager).!!PPPossessiveRepeatingParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:48'!parseOn: aPPContext	| memento element elements |	memento := aPPContext remember.	elements := OrderedCollection new.	[ elements size < min ] whileTrue: [		(element := parser parseOn: aPPContext) isPetitFailure ifTrue: [			aPPContext restore: memento.			^ element ].		elements addLast: element ].	[ elements size < max ] whileTrue: [	 	(element := parser parseOn: aPPContext) isPetitFailure			ifTrue: [ ^ elements asArray ].		elements addLast: element ].	^ elements asArray! !!PPRepeatingParser methodsFor: '*petitanalyzer-private' stamp: 'JanKurs 5/31/2013 11:51'!followSets: aFollowDictionary firstSets: aFirstDictionary into: aSet	| firstSet |	super followSets: aFollowDictionary firstSets:  aFirstDictionary into: aSet.		firstSet := aFirstDictionary at: self.	self children do: [:p | (aFollowDictionary at: p) addAll: (firstSet reject: [:each | each isNullable]) ]! !!PPRepeatingParser methodsFor: 'initialization' stamp: 'lr 4/1/2011 21:06'!initialize	super initialize.	self setMin: 0; setMax: SmallInteger maxVal! !!PPRepeatingParser methodsFor: '*petitanalyzer-testing' stamp: 'lr 10/21/2009 12:13'!isNullable	^ min = 0! !!PPRepeatingParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 6/18/2010 14:09'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self min = aParser min and: [ self max = aParser max ] ]! !!PPRepeatingParser methodsFor: 'accessing' stamp: 'lr 4/30/2010 11:08'!max	"Answer the maximum number of repetitions."	^ max! !!PPRepeatingParser methodsFor: 'accessing' stamp: 'lr 4/30/2010 11:08'!min	"Answer the minimum number of repetitions."		^ min! !!PPRepeatingParser methodsFor: 'printing' stamp: 'lr 6/3/2010 14:00'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' ['; print: min; nextPutAll: ', '; nextPutAll: (max = SmallInteger maxVal		ifTrue: [ '*' ] ifFalse: [ max printString ]); nextPut: $]! !!PPRepeatingParser methodsFor: 'initialization' stamp: 'lr 4/1/2011 21:00'!setMax: anInteger	max := anInteger! !!PPRepeatingParser methodsFor: 'initialization' stamp: 'lr 4/1/2011 21:01'!setMin: anInteger	min := anInteger! !!PPTrimmingParser commentStamp: 'BernardoContreras 3/16/2015 21:29' prior: 35270491!A parser that silently consumes spaces before and after the delegate parser.!!PPTrimmingParser class methodsFor: 'instance creation' stamp: 'lr 7/31/2010 12:01'!on: aParser trimmer: aTrimParser	^ self new		setParser: aParser;		setTrimmer: aTrimParser;		yourself! !!PPTrimmingParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:48'!parseOn: aPPContext	| memento element |	memento := aPPContext remember.	[ (trimmer parseOn: aPPContext) isPetitFailure ]		whileFalse.	element := parser parseOn: aPPContext.	element isPetitFailure ifTrue: [		aPPContext restore: memento.		^ element ].	[ (trimmer parseOn: aPPContext) isPetitFailure ]		whileFalse.	^ element! !!PPTrimmingParser methodsFor: 'initialization' stamp: 'lr 7/31/2010 12:00'!setTrimmer: aParser	trimmer := aParser! !!PPEndOfFileParser commentStamp: 'JanKurs 2/4/2015 17:52' prior: 35270637!A PPEndOfFileParser is parser that will will return true if the stream position is at the end, returns failure otherwise.The diffirenece between PPEndOfFIleParser and PPEndOfInputParser is: - PPEndOfFileParser can be created using #eof asParser - PPEndOfInputParser can be created by using parser end - PPEndOfFileParser does not delegate to any other parser - PPEndOfInputParser parsers its delegate and then decides if the input is at the end.The PPEndOfFileParser can be used to accept some input only if it is at the end of the input, e.g:   ('a' asParser, #eof asParser) parse: 'a'   ('a' asParser, #eof asParser) parse: 'aa'!!PPEndOfFileParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 9/13/2014 19:04'!acceptsEpsilon	^ true! !!PPEndOfFileParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/27/2015 13:37'!exampleOn: aStream 	aStream nextPutAll: #'end-of-input'! !!PPEndOfFileParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 4/22/2013 18:25'!isNullable 	^ true! !!PPEndOfFileParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/7/2015 12:41'!nonEmpty	"I know I am empty, but it does not count in my case, I represent virtual non-existent character"	^ self! !!PPEndOfFileParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/27/2015 14:27'!parseOn: aPPContext	(aPPContext atEnd) ifFalse:	[		^ PPFailure message: 'end of input expected' context: aPPContext.	].	^ #'end-of-input'! !!PPEndOfLineParser commentStamp: 'JanKurs 10/29/2014 15:49' prior: 35271351!A PPEndOfLineParser is a parser that does not fail, if the stream position is at the end of a line. It does not consume anything.!!PPEndOfLineParser methodsFor: 'parsing' stamp: 'JanKurs 10/29/2014 15:50'!parseOn: aPPContext	(aPPContext isEndOfLine) ifTrue: [ 		^ #endOfLine	].	^ PPFailure message: 'End of line expected' context: aPPContext at: aPPContext position! !!PPEpsilonParser commentStamp: 'lr 5/15/2008 15:09' prior: 35271544!A parser that consumes nothing and always succeeds.!!PPEpsilonParser methodsFor: '*petitanalyzer-testing' stamp: 'lr 10/21/2009 12:11'!isNullable	^ true! !!PPEpsilonParser methodsFor: 'parsing' stamp: 'lr 2/7/2010 20:49'!parseOn: aStream	^ nil! !!PPSentinel class methodsFor: 'instance creation' stamp: 'lr 9/16/2010 17:54'!instance	^ instance ifNil: [ instance := self new ]! !!PPFailingParser commentStamp: 'BernardoContreras 3/16/2015 21:29' prior: 35271674!A parser that consumes nothing and always fails.Instance Variables:	message <String>	The failure message.!!PPFailingParser class methodsFor: 'instance creation' stamp: 'lr 5/2/2010 19:16'!message: aString	^ self new setMessage: aString! !!PPFailingParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 4/30/2010 12:01'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self message = aParser message ]! !!PPFailingParser methodsFor: 'accessing' stamp: 'lr 4/30/2010 11:10'!message	"Answer the error message of the receiving parser."	^ message! !!PPFailingParser methodsFor: 'pp-context' stamp: 'JanKurs 8/19/2014 16:59'!parseOn: aPPContext	^ PPFailure message: message context: aPPContext! !!PPFailingParser methodsFor: 'printing' stamp: 'lr 4/16/2010 21:27'!printNameOn: aStream	super printNameOn: aStream.	aStream nextPutAll: ', '; print: message! !!PPFailingParser methodsFor: 'initialization' stamp: 'lr 5/2/2010 19:16'!setMessage: aString	message := aString! !!PPListParser commentStamp: 'BernardoContreras 3/16/2015 21:28' prior: 35271859!Abstract parser that parses a list of things in some way (to be specified by the subclasses).Instance Variables:	parsers	<SequenceableCollection of: PPParser>	A sequence of other parsers to delegate to.!!PPChoiceParser commentStamp: 'lr 4/18/2008 15:35' prior: 35272128!A parser that uses the first parser that succeeds.!!PPChoiceParser methodsFor: 'operators' stamp: 'lr 9/17/2008 00:16'!/ aRule 	^ self copyWith: aRule! !!PPChoiceParser methodsFor: 'parsing' stamp: 'JanKurs 11/11/2013 09:31'!parseOn: aPPContext	"This is optimized code that avoids unnecessary block activations, do not change. When all choices fail, the last failure is answered."	| element |	1 to: parsers size do: [ :index |		element := (parsers at: index)			parseOn: aPPContext.		element isPetitFailure			ifFalse: [ ^ element ] ].	^ element! !!PPLimitedChoiceParser commentStamp: 'JanKurs 11/12/2014 11:53' prior: 35272254!A PPLimitedChoiceParser is similar to the choice parser except for the fact, that limit must pass if one of the choices passes. This is similar strategy as with the PPLimitedRepeatingParsers.This way, one can implement choices that successfully parse this (if limit is filled with 'a'):('aa' // 'a') 'a' parse: 'aa'The limit can be automatically filled using elements from either follow or next set (see methods  PPParser>>followSets or PPParser>>nextSets).Limit is by default epsilon and therefore it behaves as an ordinary ordered choice.Instance Variables	limit:		<Object>limit	- xxxxx!!PPLimitedChoiceParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 11/11/2014 17:55'!// aRule 	^ self copyWith: aRule! !!PPLimitedChoiceParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 11/12/2014 11:49'!initialize	limit := nil asParser! !!PPLimitedChoiceParser methodsFor: 'accessing' stamp: 'JanKurs 11/12/2014 11:50'!limit		^ limit! !!PPLimitedChoiceParser methodsFor: 'accessing' stamp: 'JanKurs 11/12/2014 11:52'!limit: anObject		limit := anObject! !!PPLimitedChoiceParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 11/12/2014 11:52'!parseOn: aPPContext	"This is optimized code that avoids unnecessary block activations, do not change. When all choices fail, the last failure is answered."	| element limitResult memento |	"self halt."	1 to: parsers size do: [ :index |		memento := aPPContext remember.				element := (parsers at: index)			parseOn: aPPContext.				(element isPetitFailure not) ifTrue: [ 			"check limit"			limitResult := limit parseOn: aPPContext.			limitResult isPetitFailure ifTrue: [ 				element := PPFailure message: 'limit failed' at: aPPContext position .				aPPContext restore: memento.			] ifFalse: [ ^ element ].		].	].		^ element! !!PPListParser class methodsFor: 'instance creation' stamp: 'lr 5/3/2010 20:26'!with: aParser	^ self withAll: (Array with: aParser)! !!PPListParser class methodsFor: 'instance creation' stamp: 'lr 9/23/2008 18:32'!with: aFirstParser with: aSecondParser	^ self withAll: (Array with: aFirstParser with: aSecondParser)! !!PPListParser class methodsFor: 'instance creation' stamp: 'JanKurs 11/11/2014 17:48'!withAll: aCollection	^ self basicNew initialize;		setParsers: aCollection! !!PPListParser methodsFor: 'accessing' stamp: 'lr 10/21/2009 16:37'!children	^ parsers! !!PPListParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 4/30/2010 08:15'!copyInContext: aDictionary seen: aSeenDictionary	| copy copies |	aSeenDictionary at: self ifPresent: [ :value | ^ value ].	copy := aSeenDictionary at: self put: self copy.	copies := OrderedCollection new.	parsers do: [ :each |		| result |		result := each 			copyInContext: aDictionary			seen: aSeenDictionary.		result isCollection			ifTrue: [ copies addAll: result ]			ifFalse: [ copies add: result ] ].	^ copy		setParsers: copies;		yourself! !!PPListParser methodsFor: 'copying' stamp: 'lr 9/17/2008 22:36'!copyWith: aParser	^ self species withAll: (parsers copyWith: aParser)! !!PPListParser methodsFor: 'initialization' stamp: 'lr 4/29/2010 10:12'!initialize	super initialize.	self setParsers: #()! !!PPListParser methodsFor: 'copying' stamp: 'lr 5/22/2010 10:26'!postCopy	super postCopy.	parsers := parsers copy! !!PPListParser methodsFor: '*petitanalyzer-transforming' stamp: 'lr 5/22/2010 10:24'!replace: aParser with: anotherParser	super replace: aParser with: anotherParser.	parsers keysAndValuesDo: [ :index :parser |		parser == aParser			ifTrue: [ parsers at: index put: anotherParser ] ]! !!PPListParser methodsFor: 'initialization' stamp: 'lr 4/29/2010 10:12'!setParsers: aCollection	parsers := aCollection asArray! !!PPSequenceParser commentStamp: 'lr 4/18/2008 15:34' prior: 35272922!A parser that parses a sequence of parsers.!!PPSequenceParser methodsFor: 'operators' stamp: 'lr 9/17/2008 00:17'!, aRule	^ self copyWith: aRule! !!PPSequenceParser methodsFor: '*petitanalyzer-private' stamp: 'lr 12/9/2010 10:37'!cycleSet: aDictionary	| firstSet |	1 to: parsers size do: [ :index |		firstSet := aDictionary at: (parsers at: index).		(firstSet anySatisfy: [ :each | each isNullable ])			ifFalse: [ ^ parsers copyFrom: 1 to: index ] ].	^ parsers! !!PPSequenceParser methodsFor: '*petitanalyzer-private' stamp: 'lr 9/16/2010 17:56'!firstSets: aFirstDictionary into: aSet	| nullable |	parsers do: [ :parser |		nullable := false.		(aFirstDictionary at: parser) do: [ :each |			each isNullable				ifTrue: [ nullable := true ]				ifFalse: [ aSet add: each ] ].		nullable			ifFalse: [ ^ self ] ].	aSet add: PPSentinel instance! !!PPSequenceParser methodsFor: '*petitanalyzer-private' stamp: 'lr 8/14/2010 13:51'!followSets: aFollowDictionary firstSets: aFirstDictionary into: aSet	parsers keysAndValuesDo: [ :index :parser |		| followSet firstSet |		followSet := aFollowDictionary at: parser.		index = parsers size			ifTrue: [ followSet addAll: aSet ]			ifFalse: [				(self class withAll: (parsers 					copyFrom: index + 1 to: parsers size))						firstSets: aFirstDictionary						into: (firstSet := IdentitySet new).				(firstSet anySatisfy: [ :each | each isNullable ])					ifTrue: [ followSet addAll: aSet ].				followSet addAll: (firstSet 					reject: [ :each | each isNullable ]) ] ]! !!PPSequenceParser methodsFor: 'operators-mapping' stamp: 'lr 5/6/2011 20:27'!map: aBlock	^ aBlock numArgs = self children size		ifTrue: [ self ==> [ :nodes | aBlock valueWithArguments: nodes ] ]		ifFalse: [ self error: aBlock numArgs asString , ' arguments expected.' ]! !!PPSequenceParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:49'!parseOn: aPPContext	"This is optimized code that avoids unnecessary block activations, do not change."		| memento elements element |	memento := aPPContext remember.	elements := Array new: parsers size.	1 to: parsers size do: [ :index |		element := (parsers at: index) 			parseOn: aPPContext.		element isPetitFailure ifTrue: [			aPPContext restore: memento.			^ element ].		elements at: index put: element ].	^ elements! !!PPSequenceParser methodsFor: 'operators-mapping' stamp: 'lr 1/8/2010 12:01'!permutation: anArrayOfIntegers	"Answer a permutation of the receivers sequence."		anArrayOfIntegers do: [ :index |		(index isInteger and: [ index between: 1 and: parsers size ])			ifFalse: [ self error: 'Invalid permutation index: ' , index printString ] ].	^ self ==> [ :nodes | anArrayOfIntegers collect: [ :index | nodes at: index ] ]! !!PPLiteralParser commentStamp: 'BernardoContreras 3/16/2015 21:20' prior: 35273044!Abstract literal parser that parses some kind of literal type (to be specified by subclasses).Instance Variables:	literal	<Object>	The literal object to be parsed.	message	<String>	The error message to be generated.!!PPLiteralObjectParser commentStamp: '<historical>' prior: 35273329!A parser that accepts a single literal object, such as a character. This is the same as the predicate parser 'PPPredicateParser expect: literal' but slightly more efficient.!!PPLiteralObjectParser methodsFor: 'operators' stamp: 'lr 8/18/2010 20:16'!caseInsensitive	"Answer a parser that can parse the receiver case-insensitive."		literal asUppercase = literal asLowercase ifTrue: [ ^ self ].	^ PPPredicateObjectParser on: [ :value | literal sameAs: value ] message: message! !!PPLiteralObjectParser methodsFor: 'operators' stamp: 'lr 4/28/2011 20:02'!negate	^ (PPPredicateObjectParser expect: literal message: message) negate! !!PPLiteralObjectParser methodsFor: 'parsing' stamp: 'JanKurs 8/19/2014 17:00'!parseOn: aPPContext	^ (aPPContext stream atEnd not and: [ literal = aPPContext stream uncheckedPeek ])		ifFalse: [ PPFailure message: message context: aPPContext ]		ifTrue: [ aPPContext stream next ]! !!PPLiteralParser class methodsFor: 'instance creation' stamp: 'lr 1/7/2010 15:30'!on: anObject	^ self on: anObject message: anObject printString , ' expected'! !!PPLiteralParser class methodsFor: 'instance creation' stamp: 'lr 1/7/2010 15:29'!on: anObject message: aString	^ self new initializeOn: anObject message: aString! !!PPLiteralParser methodsFor: 'operators' stamp: 'lr 6/1/2010 22:24'!caseInsensitive	"Answer a parser that can parse the receiver case-insensitive."		self subclassResponsibility! !!PPLiteralParser methodsFor: 'initialization' stamp: 'lr 5/2/2010 13:25'!initializeOn: anObject message: aString	literal := anObject.	message := aString! !!PPLiteralParser methodsFor: 'accessing' stamp: 'lr 5/2/2010 13:26'!literal	"Answer the parsed literal."	^ literal! !!PPLiteralParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 9/15/2010 12:08'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self literal = aParser literal and: [ self message = aParser message ] ]! !!PPLiteralParser methodsFor: 'accessing' stamp: 'lr 5/2/2010 13:26'!message	"Answer the failure message."		^ message! !!PPLiteralParser methodsFor: 'printing' stamp: 'lr 4/16/2010 16:38'!printNameOn: aStream	super printNameOn: aStream.	aStream nextPutAll: ', '; print: literal! !!PPLiteralSequenceParser commentStamp: 'lr 12/4/2009 18:39' prior: 35273574!A parser accepts a sequence of literal objects, such as a String. This is an optimization to avoid having to compose longer sequences from PPSequenceParser.!!PPLiteralSequenceParser methodsFor: 'operators' stamp: 'lr 8/18/2010 20:16'!caseInsensitive	"Answer a parser that can parse the receiver case-insensitive."		literal asUppercase = literal asLowercase ifTrue: [ ^ self ].	^ PPPredicateSequenceParser on: [ :value | literal sameAs: value ] message: message size: size! !!PPLiteralSequenceParser methodsFor: 'initialization' stamp: 'lr 6/1/2010 22:21'!initializeOn: anObject message: aString	super initializeOn: anObject message: aString.	size := literal size! !!PPLiteralSequenceParser methodsFor: 'parsing' stamp: 'JanKurs 8/26/2014 17:03'!parseOn: aPPContext	| memento result |	memento := aPPContext remember.	result := aPPContext next: size.	literal = result ifTrue: [ ^ result ].	aPPContext restore: memento.	^ PPFailure message: message context: aPPContext! !!PPLiteralSequenceParser methodsFor: 'accessing' stamp: 'lr 9/15/2010 11:16'!size	"Answer the sequence size of the receiver."	^ size! !!PPParser class methodsFor: 'instance creation' stamp: 'lr 10/27/2008 11:17'!named: aString	^ self new name: aString! !!PPParser class methodsFor: 'instance creation' stamp: 'lr 4/18/2008 14:00'!new	^ self basicNew initialize! !!PPParser methodsFor: 'operators' stamp: 'lr 9/23/2008 18:32'!, aParser 	"Answer a new parser that parses the receiver followed by aParser."	^ PPSequenceParser with: self with: aParser! !!PPParser methodsFor: 'operators' stamp: 'lr 4/14/2010 11:46'!/ aParser 	"Answer a new parser that parses the receiver, if the receiver fails try with aParser (ordered-choice)."		^ PPChoiceParser with: self with: aParser! !!PPParser methodsFor: 'operators' stamp: 'JanKurs 11/12/2014 11:54'!// aParser 	"		Answer a new parser that parses the receiver, if the receiver fails try with aParser (ordered-choice).		If the receiver passes, limit must pass as well.	"		^ PPLimitedChoiceParser with: self with: aParser! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 5/12/2010 20:32'!==> aBlock	"Answer a new parser that performs aBlock as action handler on success."	^ PPActionParser on: self block: aBlock! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 6/12/2010 10:20'!>=> aBlock	"Answer a new parser that wraps the receiving parser with a two argument block. The first argument is the parsed stream, the second argument a continuation block on the delegate parser."	^ PPWrappingParser on: self block: aBlock! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 11/23/2010 10:01'!allNamedParsers	"Answer all the named parse nodes of the receiver."	| result |	result := OrderedCollection new.	self allNamedParsersDo: [ :parser | result addLast: parser ].	^ result! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 11/23/2010 10:12'!allNamedParsersDo: aBlock	"Iterate over all the named parse nodes of the receiver."	self allParsersDo: [ :each | 		each name notNil			ifTrue: [ aBlock value: each ] ]! !!PPParser methodsFor: 'enumerating' stamp: 'lr 4/13/2010 08:36'!allParsers	"Answer all the parse nodes of the receiver."	| result |	result := OrderedCollection new.	self allParsersDo: [ :parser | result addLast: parser ].	^ result! !!PPParser methodsFor: 'enumerating' stamp: 'lr 4/13/2010 08:36'!allParsersDo: aBlock	"Iterate over all the parse nodes of the receiver."	self allParsersDo: aBlock seen: IdentitySet new! !!PPParser methodsFor: 'enumerating' stamp: 'lr 4/13/2010 08:35'!allParsersDo: aBlock seen: aSet	"Iterate over all the parse nodes of the receiver, do not visit and follow the ones contained in aSet."	(aSet includes: self)		ifTrue: [ ^ self ].	aSet add: self.	aBlock value: self.	self children		do: [ :each | each allParsersDo: aBlock seen: aSet ]! !!PPParser methodsFor: 'operators' stamp: 'lr 5/31/2010 15:12'!and	"Answer a new parser (logical and-predicate) that succeeds whenever the receiver does, but never consumes input."	^ PPAndParser on: self! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 2/19/2010 07:42'!answer: anObject	"Answer a new parser that always returns anObject from a successful parse."	^ self ==> [ :nodes | anObject ]! !!PPParser methodsFor: 'converting' stamp: 'lr 11/29/2011 20:48'!asParser	"Answer the receiving parser."		^ self! !!PPParser methodsFor: 'accessing' stamp: 'lr 10/21/2009 16:38'!children	"Answer a set of child parsers that could follow the receiver."	^ #()! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 4/30/2010 07:49'!copyInContext: aDictionary	^ self copyInContext: aDictionary seen: IdentityDictionary new! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 7/17/2011 11:53'!copyInContext: aDictionary seen: aSeenDictionary	| copy |	aSeenDictionary 		at: self 		ifPresent: [ :value | ^ value ].	copy := aSeenDictionary		at: self		put: self copy.	copy children do: [ :each |		copy			replace: each			with: (each copyInContext: aDictionary seen: aSeenDictionary) ].	^ copy! !!PPParser methodsFor: '*petitanalyzer-querying' stamp: 'lr 11/19/2009 23:49'!cycleSet	"Answer a set of all nodes that are within one or more cycles of left-recursion. This is generally not a problem if at least one of the nodes is memoized, but it might make the grammar very inefficient and should be avoided if possible."		| cycles |	cycles := IdentitySet new.	self cycleSet: OrderedCollection new firstSets: self firstSets into: cycles.	^ cycles! !!PPParser methodsFor: '*petitanalyzer-private' stamp: 'lr 11/19/2009 23:47'!cycleSet: aDictionary	"PRIVATE: Answer the children that could be part of a cycle-set with the receiver, subclasses might restrict the number of children returned. aDictionary is pre-calcualted first-sets."	^ self children! !!PPParser methodsFor: '*petitanalyzer-private' stamp: 'lr 5/22/2010 10:45'!cycleSet: aStack firstSets: aDictionary into: aSet	"PRIVATE: Try to find a cycle, where aStack contains the previously visited parsers. The method returns quickly when the receiver is a terminal, terminals cannot be part of a cycle. If aStack already contains the receiver, then we are in a cycle. In this case we don't process the children further and add the nodes to aSet."	| index |	self isTerminal		ifTrue: [ ^ self ].		(index := aStack indexOf: self) > 0		ifTrue: [ ^ aSet addAll: (aStack copyFrom: index to: aStack size) ].	aStack addLast: self.	(self cycleSet: aDictionary)		do: [ :each | each cycleSet: aStack firstSets: aDictionary into: aSet ].	aStack removeLast! !!PPParser methodsFor: 'operators' stamp: 'lr 12/3/2010 11:34'!def: aParser	"Redefine the receiver as the argument aParser. This method is useful when defining recursive parsers: instantiate a PPUnresolvedParser and later redefine it with another one."	^ self becomeForward: (aParser name: self name)! !!PPParser methodsFor: 'operators-convenience' stamp: 'lr 2/19/2010 07:42'!delimitedBy: aParser	"Answer a new parser that parses the receiver one or more times, separated and possibly ended by aParser."		^ (self separatedBy: aParser) , (aParser optional) ==> [ :node |		node second isNil			ifTrue: [ node first ]			ifFalse: [ node first copyWith: node second ] ]! !!PPParser methodsFor: 'operators' stamp: 'lr 4/30/2010 12:13'!end	"Answer a new parser that succeeds at the end of the input and return the result of the receiver."	^ PPEndOfInputParser on: self! !!PPParser methodsFor: '*petitanalyzer-querying' stamp: 'lr 10/22/2009 19:59'!firstSet	"Answer the first-set of the receiver. Note, this implementation is inefficient when called on different receivers of the same grammar, instead use #firstSets to calculate the first-sets at once."		^ self firstSets at: self! !!PPParser methodsFor: '*petitanalyzer-querying' stamp: 'JanKurs 5/31/2013 11:49'!firstSets	"Answer a dictionary with all the parsers reachable from the receiver as key and their first-set as value. The first-set of a parser is the list of terminal parsers that begin the parser derivable from that parser."		| firstSets |	firstSets := IdentityDictionary new.	self allParsersDo: [ :each |		firstSets at: each put: (each isFirstSetTerminal			ifTrue: [ IdentitySet with: each ]			ifFalse: [ IdentitySet new ]).		each isNullable			ifTrue: [ (firstSets at: each) add: PPSentinel instance ] ].	[	| changed tally |		changed := false.		firstSets keysAndValuesDo: [ :parser :first |			tally := first size.			parser firstSets: firstSets into: first.			changed := changed or: [ tally ~= first size ] ].		changed ] whileTrue.	^ firstSets! !!PPParser methodsFor: '*petitanalyzer-private' stamp: 'lr 11/12/2009 21:25'!firstSets: aFirstDictionary into: aSet	"PRIVATE: Try to add additional elements to the first-set aSet of the receiver, use the incomplete aFirstDictionary."	self children do: [ :parser | aSet addAll: (aFirstDictionary at: parser) ]! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 5/15/2008 16:08'!flatten	"Answer a new parser that flattens the underlying collection."		^ PPFlattenParser on: self! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 4/3/2011 15:00'!foldLeft: aBlock	"Answer a new parser that that folds the result of the receiver from left-to-right into aBlock. The argument aBlock must take two or more arguments."		| size args |	size := aBlock numArgs.	args := Array new: size.	^ self ==> [ :nodes |		args at: 1 put: nodes first.		2 to: nodes size by: size - 1 do: [ :index |			args				replaceFrom: 2 to: size with: nodes startingAt: index;				at: 1 put: (aBlock valueWithArguments: args) ].		args first ]! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 4/3/2011 14:59'!foldRight: aBlock	"Answer a new parser that that folds the result of the receiver from right-to-left into aBlock. The argument aBlock must take two or more arguments."	| size args |	size := aBlock numArgs.	args := Array new: size.	^ self ==> [ :nodes |		args at: size put: nodes last.		nodes size - size + 1 to: 1 by: 1 - size do: [ :index |			args				replaceFrom: 1 to: size - 1 with: nodes startingAt: index;				at: size put: (aBlock valueWithArguments: args) ].		args at: size ]! !!PPParser methodsFor: '*petitanalyzer-querying' stamp: 'lr 11/12/2009 21:13'!followSet	"Answer the follow-set of the receiver starting at the receiver. Note, this implementation is inefficient when called on different receivers of the same grammar, instead use #followSets to calculate the follow-sets at once."	^ self followSets at: self! !!PPParser methodsFor: '*petitanalyzer-querying' stamp: 'lr 9/16/2010 17:55'!followSets	"Answer a dictionary with all the parsers reachable from the receiver as key and their follow-set as value. The follow-set of a parser is the list of terminal parsers that can appear immediately to the right of that parser."		| current previous continue firstSets followSets |	current := previous := 0.	firstSets := self firstSets.	followSets := IdentityDictionary new.	self allParsersDo: [ :each | followSets at: each put: IdentitySet new ].	(followSets at: self) add: PPSentinel instance.	[	followSets keysAndValuesDo: [ :parser :follow |			parser 				followSets: followSets				firstSets: firstSets				into: follow ].		current := followSets			inject: 0			into: [ :result :each | result + each size ].		continue := previous < current.		previous := current.		continue ] whileTrue.	^ followSets! !!PPParser methodsFor: '*petitanalyzer-private' stamp: 'lr 11/12/2009 21:25'!followSets: aFollowDictionary firstSets: aFirstDictionary into: aSet	"PRIVATE: Try to add additional elements to the follow-set aSet of the receiver, use the incomplete aFollowDictionary and the complete aFirstDictionary."		self children do: [ :parser | (aFollowDictionary at: parser) addAll: aSet ]! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:32'!hasProperty: aKey	"Test if the property aKey is present."		^ properties notNil and: [ properties includesKey: aKey ]! !!PPParser methodsFor: 'operators' stamp: 'JanKurs 1/25/2015 16:23'!if: aBlock	^ PPConditionalParser on: self block: aBlock! !!PPParser methodsFor: 'initialization' stamp: 'lr 4/24/2008 10:33'!initialize! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 12/3/2010 16:45'!innerChildren	"Answer the inner children of the receiver."	| result |	result := OrderedCollection new.	self innerChildrenDo: [ :parser | result addLast: parser ].	^ result! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 12/3/2010 16:48'!innerChildrenDo: aBlock	"Iterate over the inner children of the receiver."	self innerChildrenDo: aBlock seen: IdentitySet new! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 12/3/2010 16:51'!innerChildrenDo: aBlock seen: aSet	"Iterate over the inner children of the receiver."		self children do: [ :each |		(aSet includes: each)			ifTrue: [ ^ self ].		aSet add: each.		each name isNil ifTrue: [			aBlock value: each.			each innerChildrenDo: aBlock seen: aSet ] ]! !!PPParser methodsFor: '*petitanalyzer-testing' stamp: 'JanKurs 5/31/2013 11:49'!isFirstSetTerminal	"Answer true if the receiver is a terminal or leaf parser, that means it does not delegate to any other parser."	^ self children isEmpty! !!PPParser methodsFor: '*petitanalyzer-testing' stamp: 'lr 11/12/2009 17:25'!isNullable	"Answer true if the receiver is a nullable parser, e.g. it can successfully parse nothing."		^ false! !!PPParser methodsFor: 'testing' stamp: 'lr 8/6/2010 16:44'!isPetitParser	^ true! !!PPParser methodsFor: '*petitanalyzer-testing' stamp: 'lr 5/22/2010 10:45'!isTerminal	"Answer true if the receiver is a terminal or leaf parser, that means it does not delegate to any other parser."	^ self children isEmpty! !!PPParser methodsFor: 'testing' stamp: 'lr 10/27/2008 11:28'!isUnresolved	^ false! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 5/6/2011 20:28'!map: aBlock	"Answer a new parser that works on the receiving sequence an passes in each element as a block argument."		^ aBlock numArgs = 1		ifTrue: [ self ==> aBlock ]		ifFalse: [ self error: aBlock numArgs asString , ' arguments expected.' ]! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 4/29/2010 23:14'!match: aParser inContext: aDictionary	^ self match: aParser inContext: aDictionary seen: IdentitySet new! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 6/18/2010 14:09'!match: aParser inContext: aDictionary seen: anIdentitySet	"This is the default implementation to match two parsers. This code can properly handle recursion. This is code is supposed to be overridden in subclasses that add new state."	(self == aParser or: [ anIdentitySet includes: self ])		ifTrue: [ ^ true ].	anIdentitySet add: self.	^ self class = aParser class and: [ self matchList: self children against: aParser children inContext: aDictionary seen: anIdentitySet ]! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 4/29/2010 23:07'!matchList: matchList against: parserList inContext: aDictionary seen: aSet	^ self matchList: matchList index: 1 against: parserList index: 1 inContext: aDictionary seen: aSet! !!PPParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 5/31/2010 18:37'!matchList: matchList index: matchIndex against: parserList index: parserIndex inContext: aDictionary seen: aSet	| parser currentIndex currentDictionary currentSeen parsers |	matchList size < matchIndex		ifTrue: [ ^ parserList size < parserIndex ].	parser := matchList at: matchIndex.	parser class = PPListPattern ifTrue: [		currentIndex := parserIndex - 1.		[ currentDictionary := aDictionary copy.		currentSeen := aSet copy.		parserList size < currentIndex or: [ 			parsers := parserList copyFrom: parserIndex to: currentIndex.			(currentDictionary at: parser ifAbsentPut: [ parsers ]) = parsers and: [ 				(self					matchList: matchList					index: matchIndex + 1					against: parserList					index: currentIndex + 1					inContext: currentDictionary					seen: currentSeen)					ifTrue: [ 						currentDictionary keysAndValuesDo: [ :key :value | aDictionary at: key put: value ].						^ true ].				false ] ] ] whileFalse: [ currentIndex := currentIndex + 1 ].		^ false ].	parserList size < parserIndex		ifTrue: [ ^ false ].	(parser match: (parserList at: parserIndex) inContext: aDictionary seen: aSet)		ifFalse: [ ^ false ].	^ self		matchList: matchList		index: matchIndex + 1		against: parserList		index: parserIndex + 1		inContext: aDictionary		seen: aSet! !!PPParser methodsFor: 'parsing' stamp: 'lr 2/8/2010 00:30'!matches: anObject	"Answer if anObject can be parsed by the receiver."		^ (self parse: anObject) isPetitFailure not! !!PPParser methodsFor: 'parsing' stamp: 'lr 6/4/2011 18:12'!matchesIn: anObject	"Search anObject repeatedly for the matches of the receiver. Answered an OrderedCollection of the matched parse-trees."	| result |	result := OrderedCollection new.	self 		matchesIn: anObject		do: [ :each | result addLast: each ].	^ result! !!PPParser methodsFor: 'parsing' stamp: 'lr 3/1/2010 21:51'!matchesIn: anObject do: aBlock	"Search anObject repeatedly for the matches of the receiver. Evaluate aBlock for each match with the matched parse-tree as the argument. Make sure to always consume exactly one character with each step, to not miss any match."	((self and ==> aBlock , #any asParser) / #any asParser) star parse: anObject! !!PPParser methodsFor: 'parsing' stamp: 'lr 8/16/2011 07:26'!matchesSkipIn: anObject	"Search anObject repeatedly for the matches of the receiver. Answer an OrderedCollection of the matched parse-trees. Skip over matches."	| result |	result := OrderedCollection new.	self 		matchesSkipIn: anObject		do: [ :each | result addLast: each ].	^ result! !!PPParser methodsFor: 'parsing' stamp: 'lr 8/16/2011 07:26'!matchesSkipIn: anObject do: aBlock	"Search anObject repeatedly for the matches of the receiver. Evaluate aBlock for each match with the matched parse-tree as the argument. Skip over matches."	(self ==> aBlock / #any asParser) star parse: anObject! !!PPParser methodsFor: 'parsing' stamp: 'lr 6/4/2011 18:12'!matchingRangesIn: anObject	"Search anObject repeatedly for the matches of the receiver. Answer an OrderedCollection of ranges of each match (index of first character to: index of last character)."		| result |	result := OrderedCollection new.	self		matchingRangesIn: anObject		do: [ :value | result addLast: value ].	^ result! !!PPParser methodsFor: 'parsing' stamp: 'lr 2/25/2013 23:41'!matchingRangesIn: anObject do: aBlock	"Search anObject repeatedly for the matches of the receiver. Evaluate aBlock with the range of each match (index of first character to: index of last character)."	self token		matchesIn: anObject		do: [ :token | aBlock value: (token start to: token stop) ]! !!PPParser methodsFor: 'parsing' stamp: 'DamienCassou 10/29/2011 19:18'!matchingSkipRangesIn: anObject	"Search anObject repeatedly for the matches of the receiver. Skip over matches. Answer an OrderedCollection of ranges of each match (index of first character to: index of last character)."		| result |	result := OrderedCollection new.	self		matchingSkipRangesIn: anObject		do: [ :value | result addLast: value ].	^ result! !!PPParser methodsFor: 'parsing' stamp: 'lr 2/25/2013 23:42'!matchingSkipRangesIn: anObject do: aBlock	"Search anObject repeatedly for the matches of the receiver. Skip over matches. Evaluate aBlock with the range of each match (index of first character to: index of last character)."		self token		matchesSkipIn: anObject		do: [ :token | aBlock value: (token start to: token stop) ]! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:03'!max: anInteger	"Answer a new parser that parses the receiver at most anInteger times."		^ self star setMax: anInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:56'!max: anInteger greedy: aParser	"Answer a new parser that parses the receiver at most anInteger times until it reaches aParser. This is a greedy non-blind implementation. aParser is not consumed."		^ (self starGreedy: aParser) setMax: anInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:57'!max: anInteger lazy: aParser	"Answer a new parser that parses the receiver at most anInteger times until it reaches aParser. This is a lazy non-blind implementation. aParser is not consumed."		^ (self starLazy: aParser) setMax: anInteger! !!PPParser methodsFor: 'operators' stamp: 'lr 5/31/2010 16:34'!memoized	"Answer a new memoized parser, for refraining redundant computations. This ensures polynomial time O(n^4) for left-recursive grammars and O(n^3) for non left-recursive grammars in the worst case. Not necessary for most grammars that are carefully written and in O(n) anyway."		^ PPMemoizedParser on: self! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:02'!min: anInteger	"Answer a new parser that parses the receiver at least anInteger times."		^ self star setMin: anInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:56'!min: anInteger greedy: aParser	"Answer a new parser that parses the receiver at least anInteger times until it reaches aParser. This is a greedy non-blind implementation. aParser is not consumed."		^ (self starGreedy: aParser) setMin: anInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:57'!min: anInteger lazy: aParser	"Answer a new parser that parses the receiver at least anInteger times until it reaches aParser. This is a lazy non-blind implementation. aParser is not consumed."		^ (self starLazy: aParser) setMin: anInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:03'!min: aMinInteger max: aMaxInteger	"Answer a new parser that parses the receiver at least aMinInteger and at most aMaxInteger times."		^ self star setMin: aMinInteger; setMax: aMaxInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:56'!min: aMinInteger max: aMaxInteger greedy: aParser	"Answer a new parser that parses the receiver at least aMinInteger and at most aMaxInteger times until it reaches aParser. This is a greedy non-blind implementation. aParser is not consumed."		^ (self starGreedy: aParser) setMin: aMinInteger; setMax: aMaxInteger! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/3/2011 14:57'!min: aMinInteger max: aMaxInteger lazy: aParser	"Answer a new parser that parses the receiver at least aMinInteger and at most aMaxInteger times until it reaches aParser. This is a greedy non-blind implementation. aParser is not consumed."		^ (self starLazy: aParser) setMin: aMinInteger; setMax: aMaxInteger! !!PPParser methodsFor: 'accessing' stamp: 'lr 4/19/2010 10:35'!name	"Answer the production name of the receiver."		^ self propertyAt: #name ifAbsent: [ nil ]! !!PPParser methodsFor: 'accessing' stamp: 'lr 4/19/2010 10:38'!name: aString	self propertyAt: #name put: aString! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 11/23/2010 10:55'!namedChildren	"Answer the named children of the receiver."	| result |	result := OrderedCollection new.	self namedChildrenDo: [ :parser | result addLast: parser ].	^ result! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 11/23/2010 10:55'!namedChildrenDo: aBlock	"Iterate over the named children of the receiver."	self namedChildrenDo: aBlock seen: IdentitySet new! !!PPParser methodsFor: '*petitanalyzer-named' stamp: 'lr 11/23/2010 10:55'!namedChildrenDo: aBlock seen: aSet	"Iterate over the named children of the receiver."		self children do: [ :each |		(aSet includes: each)			ifTrue: [ ^ self ].		aSet add: each.		each name isNil			ifTrue: [ each namedChildrenDo: aBlock seen: aSet ]			ifFalse: [ aBlock value: each ] ]! !!PPParser methodsFor: 'operators' stamp: 'lr 2/19/2010 07:36'!negate	"Answer a new parser consumes any input token but the receiver."		^ self not , #any asParser ==> #second! !!PPParser methodsFor: 'operators' stamp: 'lr 5/31/2010 15:12'!not	"Answer a new parser (logical not-predicate) that succeeds whenever the receiver fails, but never consumes input."	^ PPNotParser on: self! !!PPParser methodsFor: 'operators' stamp: 'lr 9/1/2010 22:03'!optional	"Answer a new parser that parses the receiver, if possible."	^ PPOptionalParser on: self! !!PPParser methodsFor: 'parsing' stamp: 'JanKurs 9/9/2014 15:04'!parse: anObject	"Parse anObject with the receiving parser and answer the parse-result or an instance of PPFailure."	^ self parse: anObject withContext: PPContext new! !!PPParser methodsFor: 'parsing' stamp: 'lr 10/29/2010 17:05'!parse: anObject onError: aBlock	"Parse anObject with the receiving parser and answer the parse-result or answer the result of evaluating aBlock. Depending on the number of arguments of the block it is simply evaluated, evaluated with the failure object, or evaluated with the error message and position."		| result |	result := self parse: anObject.	result isPetitFailure		ifFalse: [ ^ result ].	aBlock numArgs = 0		ifTrue: [ ^ aBlock value ].	aBlock numArgs = 1		ifTrue: [ ^ aBlock value: result ].	^ aBlock value: result message value: result position! !!PPParser methodsFor: 'context' stamp: 'JanKurs 8/19/2014 13:26'!parse: anObject withContext: aPPContext	"Parse anObject with the receiving parser and answer the parse-result or an instance of PPFailure."	aPPContext stream: anObject asPetitStream.	^ self parseWithContext: aPPContext.! !!PPParser methodsFor: 'parsing' stamp: 'JanKurs 11/11/2013 09:30'!parseOn: aPPContext	"Parse aStream with the receiving parser and answer the parse-result or an instance of PPFailure. Override this method in subclasses to specify custom parse behavior. Do not call this method from outside, instead use #parse:."		self subclassResponsibility! !!PPParser methodsFor: 'context' stamp: 'JanKurs 2/20/2015 08:47'!parseWithContext: context	| result |	context initializeFor: self.	result := self parseOn: context.		"Return the furthest failure, it gives better results than the last failure"	(result isPetitFailure and: [ context furthestFailure notNil]) 		ifTrue: [ ^ context furthestFailure ].	^ result	! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:03'!plus	"Answer a new parser that parses the receiver one or more times."	^ self star setMin: 1! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:04'!plusGreedy: aParser	"Answer a new parser that parses the receiver one or more times until it reaches aParser. This is a greedy non-blind implementation of the star operator. aParser is not consumed."		^ (self starGreedy: aParser) setMin: 1! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/1/2011 21:04'!plusLazy: aParser	"Answer a new parser that parses the receiver one or more times until it reaches aParser. This is a lazy non-blind implementation of the star operator. aParser is not consumed."		^ (self starLazy: aParser) setMin: 1! !!PPParser methodsFor: 'copying' stamp: 'lr 4/19/2010 10:33'!postCopy	super postCopy.	properties := properties copy! !!PPParser methodsFor: 'printing' stamp: 'lr 4/16/2010 16:36'!printNameOn: aStream	self name isNil		ifTrue: [ aStream print: self hash ]		ifFalse: [ aStream nextPutAll: self name ]! !!PPParser methodsFor: 'printing' stamp: 'lr 4/16/2010 16:36'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	self printNameOn: aStream.	aStream nextPut: $)! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:32'!propertyAt: aKey	"Answer the property value associated with aKey."		^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:32'!propertyAt: aKey ifAbsent: aBlock	"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."		^ properties isNil		ifTrue: [ aBlock value ]		ifFalse: [ properties at: aKey ifAbsent: aBlock ]! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:32'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."		^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:33'!propertyAt: aKey put: anObject	"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."	^ (properties ifNil: [ properties := Dictionary new: 1 ])		at: aKey put: anObject! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:33'!removeProperty: aKey	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."		^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]! !!PPParser methodsFor: 'accessing-properties' stamp: 'lr 4/19/2010 10:33'!removeProperty: aKey ifAbsent: aBlock	"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."		| answer |	properties isNil ifTrue: [ ^ aBlock value ].	answer := properties removeKey: aKey ifAbsent: aBlock.	properties isEmpty ifTrue: [ properties := nil ].	^ answer! !!PPParser methodsFor: '*petitanalyzer-transforming' stamp: 'lr 4/13/2010 09:38'!replace: aParser with: anotherParser	"Replace the references of the receiver pointing to aParser with anotherParser."! !!PPParser methodsFor: 'operators-convenience' stamp: 'lr 2/19/2010 07:56'!separatedBy: aParser	"Answer a new parser that parses the receiver one or more times, separated by aParser."		^ (PPSequenceParser with: self with: (PPSequenceParser with: aParser with: self) star) ==> [ :nodes |		| result |		result := Array new: 2 * nodes second size + 1.		result at: 1 put: nodes first.		nodes second 			keysAndValuesDo: [ :index :pair | result replaceFrom: 2 * index to: 2 * index + 1 with: pair startingAt: 1 ].		result ]! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/2/2011 10:02'!star	"Answer a new parser that parses the receiver zero or more times. This is a greedy and blind implementation that tries to consume as much input as possible and it does not consider what comes afterwards."	^ PPPossessiveRepeatingParser on: self! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/2/2011 10:01'!starGreedy: aParser	"Answer a new parser that parses the receiver zero or more times until it reaches aParser. This is a greedy non-blind implementation of the star operator. aParser is not consumed."		^ PPGreedyRepeatingParser on: self limit: aParser! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 4/2/2011 10:01'!starLazy: aParser	"Answer a new parser that parses the receiver zero or more times until it reaches aParser. This is a lazy non-blind implementation of the star operator. aParser is not consumed."		^ PPLazyRepeatingParser on: self limit: aParser! !!PPParser methodsFor: 'operators-repeating' stamp: 'lr 9/15/2010 09:34'!times: anInteger	"Answer a new parser that parses the receiver exactly anInteger times."		^ self min: anInteger max: anInteger! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 6/29/2010 14:25'!token	"Answer a new parser that transforms the input to a token."		^ PPTokenParser on: self! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 4/6/2010 19:26'!token: aTokenClass	"Answer a new parser that transforms the input to a token of class aTokenClass."		^ self token tokenClass: aTokenClass! !!PPParser methodsFor: '*petitanalyzer-transforming' stamp: 'lr 10/30/2010 11:54'!transform: aBlock	"Answer a copy of all parsers reachable from the receiver transformed using aBlock."	| mapping root |	mapping := IdentityDictionary new.	self allParsersDo: [ :each |		mapping			at: each			put: (aBlock value: each copy) ].	root := mapping at: self.	[	| changed |		changed := false.		root allParsersDo: [ :each |			each children do: [ :old |				mapping at: old ifPresent: [ :new |					each replace: old with: new.					changed := true ] ] ].		changed ] whileTrue.	^ root! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 7/31/2010 12:06'!trim	"Answer a new parser that consumes spaces before and after the receiving parser."		^ self trimSpaces! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 7/11/2011 11:03'!trim: aParser	"Answer a new parser that consumes and ignores aParser repeatedly before and after the receiving parser."		^ PPTrimmingParser on: self trimmer: aParser! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 7/11/2011 11:03'!trimBlanks	"Answer a new parser that consumes blanks before and after the receiving parser."		^ self trim: #blank asParser! !!PPParser methodsFor: 'operators-mapping' stamp: 'JanKurs 3/31/2015 17:50'!trimLeft	"Answer a new parser that consumes spaces before the receiving parser."		^ self trimSpacesLeft! !!PPParser methodsFor: 'operators-mapping' stamp: 'JanKurs 3/31/2015 17:31'!trimRight	"Answer a new parser that consumes spaces after the receiving parser."		^ self trimSpacesRight! !!PPParser methodsFor: 'operators-mapping' stamp: 'lr 7/11/2011 11:03'!trimSpaces	"Answer a new parser that consumes spaces before and after the receiving parser."		^ self trim: #space asParser! !!PPParser methodsFor: 'operators-mapping' stamp: 'JanKurs 3/31/2015 17:50'!trimSpacesLeft	"Answer a new parser that consumes spaces before the receiving parser."		^ (#space asParser star, self) ==> #second! !!PPParser methodsFor: 'operators-mapping' stamp: 'JanKurs 3/31/2015 17:31'!trimSpacesRight	"Answer a new parser that consumes spaces after the receiving parser."		^ (self, #space asParser star) ==> #first! !!PPParser methodsFor: 'operators-convenience' stamp: 'lr 2/25/2012 16:54'!withoutSeparators	"Filters out the separators from a parse result produced by one of the productions #delimitedBy: or #separatedBy:."		^ self ==> [ :items |		| result |		result := Array new: items size + 1 // 2.		1 to: result size do: [ :index | result at: index put: (items at: 2 * index - 1) ].		result ]! !!PPParser methodsFor: 'operators' stamp: 'lr 10/23/2008 14:05'!wrapped	"Answer a new parser that is simply wrapped."		^ PPDelegateParser on: self! !!PPParser methodsFor: 'operators' stamp: 'lr 4/14/2010 11:53'!| aParser	"Answer a new parser that either parses the receiver or aParser. Fail if both pass or fail (exclusive choice, unordered choice)."	^ (self not , aParser) / (aParser not , self) ==> #second! !!PPPattern commentStamp: '<historical>' prior: 35273782!PPPattern is meta-parser that is solely used to match other types of parsers. It cannot be used for actually parsing something. The constructor method determines what can be matched.!!PPListPattern commentStamp: '<historical>' prior: 35274020!PPListPattern that is used to match any number of parsers. As its superclass, it cannot be used for actually parsing something.!!PPPattern class methodsFor: 'instance creation' stamp: 'lr 4/30/2010 08:47'!any	"Matches all parsers."	^ self on: [ :parser :context | true ]! !!PPPattern class methodsFor: 'instance creation' stamp: 'lr 3/16/2013 21:45'!class: aBehavior	"Matches parsers that are of the class aBehavior."	^ self on: [ :parser :context | parser class = aBehavior ]! !!PPPattern class methodsFor: 'instance creation' stamp: 'lr 3/16/2013 21:45'!kind: aBehavior	"Matches parsers that are of the class aBehavior or one of its subclasses."	^ self on: [ :parser :context | parser isKindOf: aBehavior ]! !!PPPattern class methodsFor: 'instance creation' stamp: 'lr 4/30/2010 08:46'!name: aString	"Matches parsers with the name aString."	^ self on: [ :parser :context | parser name = aString ]! !!PPPattern class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 10:21'!new	self error: 'Use an explicit constructur on ' , self name! !!PPPattern class methodsFor: 'instance creation' stamp: 'lr 4/30/2010 08:46'!on: aBlock	"Matches parsers that satisfy an arbitrary condition in aBlock."	^ self basicNew initializeOn: aBlock! !!PPPattern methodsFor: 'comparing' stamp: 'lr 4/29/2010 10:33'!= aParser	^ self == aParser or: [ self name notNil and: [ self name = aParser name ] ]! !!PPPattern methodsFor: 'matching' stamp: 'lr 4/30/2010 07:53'!copyInContext: aDictionary seen: aSeenDictionary	^ aDictionary at: self! !!PPPattern methodsFor: 'comparing' stamp: 'lr 4/29/2010 10:33'!hash	^ self identityHash! !!PPPattern methodsFor: 'initialization' stamp: 'lr 4/29/2010 10:20'!initializeOn: aBlock	verificationBlock := aBlock! !!PPPattern methodsFor: 'matching' stamp: 'lr 4/30/2010 12:01'!match: aParser inContext: aDictionary seen: anIdentitySet	(verificationBlock value: aParser value: aDictionary)		ifFalse: [ ^ false ].	^ (aDictionary at: self ifAbsentPut: [ aParser ])		match: aParser inContext: aDictionary seen: anIdentitySet! !!PPPattern methodsFor: 'parsing' stamp: 'lr 4/30/2010 08:48'!parseOn: aStream	"This is just a pattern used for matching. It should not be used in actual grammars."	self shouldNotImplement! !!PPPluggableParser commentStamp: 'BernardoContreras 3/16/2015 21:19' prior: 35274228!A pluggable parser that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.Instance Variables:	block	<BlockClosure>	The pluggable one-argument block.!!PPPluggableParser class methodsFor: 'instance creation' stamp: 'lr 5/2/2010 16:52'!on: aBlock	^ self new initializeOn: aBlock! !!PPPluggableParser methodsFor: 'parsing' stamp: 'JanKurs 11/12/2014 11:48'!acceptsEpsilon	^ false! !!PPPluggableParser methodsFor: 'accessing' stamp: 'lr 4/30/2010 11:10'!block	"Answer the pluggable block."	^ block! !!PPPluggableParser methodsFor: 'initialization' stamp: 'lr 5/2/2010 16:52'!initializeOn: aBlock	block := aBlock! !!PPPluggableParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 6/18/2010 14:09'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self block = aParser block ]! !!PPPluggableParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:48'!parseOn: aPPContext	| memento result |	memento := aPPContext remember.	result := block value: aPPContext.	result isPetitFailure		ifTrue: [ aPPContext restore: memento ].	^ result! !!PPPredicateParser commentStamp: '<historical>' prior: 35274528!An abstract parser that accepts if a given predicate holds.Instance Variables:	predicate	<BlockClosure>	The block testing for the predicate.	predicateMessage	<String>	The error message of the predicate.	negated	<BlockClosure>	The block testing for the negation of the predicate.	negatedMessage	<String>	The error message of the negated predicate.!!PPPredicateObjectParser commentStamp: 'BernardoContreras 3/16/2015 21:18' prior: 35274967!A parser that accepts if a given predicate on one element of the input sequence holds.!!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JamesFoster 3/17/2015 15:50'!any	^self		cacheAt: #'any'		ifAbsentPut: [ self			on: [ :each | true ] message: 'input expected'			negated: [ :each | false ] message: 'no input expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'lr 4/1/2011 20:05'!anyExceptAnyOf: aCollection	^ self		on: [ :each | (aCollection includes: each) not ] message: 'any except ' , aCollection printString , ' expected'		negated: [ :each | aCollection includes: each ] message: aCollection printString ,  ' not expected'! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'lr 4/1/2011 20:05'!anyOf: aCollection	^ self		on: [ :each | aCollection includes: each ] message: 'any of ' , aCollection printString , ' expected'		negated: [ :each | (aCollection includes: each) not ] message: 'none of ' , aCollection printString ,  'expected'! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'lr 6/12/2010 09:10'!between: min and: max	^ self		on: [ :each | each >= min and: [ each <= max ] ] message: min printString , '..' , max printString , ' expected'		negated: [ :each | each < min or: [ each > max ] ] message: min printString , '..' , max printString , ' not expected'! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:51'!blank	^self		cacheAt: #'blank'		ifAbsentPut: [ self			chars: (String with: Character space with: Character tab) message: 'blank expected' ]! !!PPPredicateObjectParser class methodsFor: 'cache' stamp: 'JamesFoster 3/17/2015 16:15'!cacheAt: aSymbol ifAbsentPut: aBlock	cache ifNil: [ ^aBlock value ].	^(cache		at: aSymbol		ifAbsentPut: aBlock) copy! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'lr 8/25/2010 11:02'!char: aCharacter	^ self expect: aCharacter message: (String with: $" with: aCharacter with: $") , ' expected'! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'lr 8/25/2010 10:57'!char: aCharacter message: aString	^ self expect: aCharacter message: aString! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'lr 8/25/2010 11:06'!chars: aCollection message: aString	^ self on: (PPCharSetPredicate on: [ :char | aCollection includes: char ]) message: aString! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:51'!cr	^self		cacheAt: #'cr'		ifAbsentPut: [ self char: (Character codePoint: 13) message: 'carriage return expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:52'!digit	^self		cacheAt: #'digit'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isDigit ]) message: 'digit expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JanKurs 10/29/2014 15:52'!endOfLine		^ PPEndOfLineParser new.! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JanKurs 2/4/2015 17:53'!eof		^ PPEndOfFileParser new! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'lr 8/25/2010 10:57'!expect: anObject	^ self expect: anObject message: anObject printString , ' expected'! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'lr 8/25/2010 10:57'!expect: anObject message: aString	^ self 		on: [ :each | each = anObject ] message: aString		negated: [ :each | each ~= anObject ] message: 'no ' , aString! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:52'!hex	^self		cacheAt: #'hex'		ifAbsentPut: [ self		on: (PPCharSetPredicate on: [ :char | 			(char between: $0 and: $9) 				or: [ (char between: $a and: $f) 				or: [ (char between: $A and: $F) ] ] ])		message: 'hex digit expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:52'!letter	^self		cacheAt: #'letter'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isLetter ]) message: 'letter expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:52'!lf	^self		cacheAt: #'lf'		ifAbsentPut: [ self char: (Character codePoint: 10) ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:52'!lowercase	^self		cacheAt: #'lowercase'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isLowercase ]) message: 'lowercase letter expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:53'!newline	^self		cacheAt: #'newline'		ifAbsentPut: [ self chars: (String with: (Character codePoint: 13) with: (Character codePoint: 10)) message: 'newline expected' ]! !!PPPredicateObjectParser class methodsFor: 'instance creation' stamp: 'lr 6/12/2010 09:10'!on: aBlock message: aString	^ self on: aBlock message: aString negated: [ :each | (aBlock value: each) not ] message: 'no ' , aString! !!PPPredicateObjectParser class methodsFor: 'instance creation' stamp: 'lr 6/12/2010 09:10'!on: aBlock message: aString negated: aNegatedBlock message: aNegatedString	^ self new initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:53'!punctuation	^self		cacheAt: #'punctuation'		ifAbsentPut: [ self chars: '.,"''?!!;:#$%&()*+-/<>=@[]\^_{}|~' message: 'punctuation expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:53'!space	^self		cacheAt: #'space'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isSeparator ]) message: 'separator expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JanKurs 10/29/2014 15:48'!startOfLine		^ PPStartOfLineParser new.! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JanKurs 1/2/2015 18:35'!startOfLogicalLine		^ PPStartOfLogicalLineParser new.! !!PPPredicateObjectParser class methodsFor: 'factory-objects' stamp: 'JanKurs 12/12/2014 16:42'!startOfWord		^ PPStartOfWordParser new.! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:53'!tab	^self		cacheAt: #'tab'		ifAbsentPut: [ self char: Character tab message: 'tab expected' ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:54'!uppercase	^self		cacheAt: #'uppercase'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isUppercase ]) message: 'uppercase letter expected' ]! !!PPPredicateObjectParser class methodsFor: 'cache' stamp: 'JamesFoster 3/17/2015 16:15'!useCache: aBoolean"	PPPredicateObjectParser useCache: true.	PPPredicateObjectParser useCache: false."	cache := aBoolean 		ifTrue: [ Dictionary new ]		ifFalse: [ nil ]! !!PPPredicateObjectParser class methodsFor: 'factory-chars' stamp: 'JamesFoster 3/17/2015 15:54'!word	^self		cacheAt: #'word'		ifAbsentPut: [ self on: (PPCharSetPredicate on: [ :char | char isAlphaNumeric ]) message: 'letter or digit expected' ]! !!PPPredicateObjectParser methodsFor: 'initialization' stamp: 'lr 6/12/2010 09:12'!initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString	predicate := aBlock.	predicateMessage := aString.	negated := aNegatedBlock.	negatedMessage := aNegatedString! !!PPPredicateObjectParser methodsFor: 'operators' stamp: 'lr 6/12/2010 09:12'!negate	"Answer a parser that is the negation of the receiving predicate parser."		^ self class 		on: negated message: negatedMessage 		negated: predicate message: predicateMessage! !!PPPredicateObjectParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:48'!parseOn: aPPContext	^ (aPPContext atEnd not and: [ predicate value: aPPContext uncheckedPeek ])		ifFalse: [ PPFailure message: predicateMessage context: aPPContext ]		ifTrue: [ aPPContext next ]! !!PPPredicateParser methodsFor: 'accessing' stamp: 'lr 5/2/2010 13:36'!block	"Answer the predicate block of the receiver."		^ predicate! !!PPPredicateParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 9/15/2010 11:56'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self block = aParser block and: [ self message = aParser message ] ]! !!PPPredicateParser methodsFor: 'accessing' stamp: 'lr 5/2/2010 13:36'!message	"Answer the failure message."		^ predicateMessage! !!PPPredicateParser methodsFor: 'printing' stamp: 'lr 5/2/2010 13:37'!printNameOn: aStream	super printNameOn: aStream.	aStream nextPutAll: ', '; print: predicateMessage! !!PPPredicateSequenceParser commentStamp: 'BernardoContreras 3/16/2015 21:18' prior: 35275142!A parser that accepts if a given predicate on an arbitrary number of elements of the input sequence holds.Instance Variables:	size	<Integer>	The number of elements to consume.!!PPPredicateSequenceParser class methodsFor: 'instance creation' stamp: 'lr 6/12/2010 09:14'!on: aBlock message: aString negated: aNegatedBlock message: aNegatedString size: anInteger 	^ self new initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString size: anInteger! !!PPPredicateSequenceParser class methodsFor: 'instance creation' stamp: 'lr 6/12/2010 09:14'!on: aBlock message: aString size: anInteger	^ self on: aBlock message: aString negated: [ :each | (aBlock value: each) not ] message: 'no ' , aString size: anInteger ! !!PPPredicateSequenceParser methodsFor: 'initialization' stamp: 'lr 6/12/2010 09:13'!initializeOn: aBlock message: aString negated: aNegatedBlock message: aNegatedString size: anInteger	predicate := aBlock.	predicateMessage := aString.	negated := aNegatedBlock.	negatedMessage := aNegatedString.	size := anInteger ! !!PPPredicateSequenceParser methodsFor: '*petitanalyzer-matching' stamp: 'lr 6/18/2010 14:09'!match: aParser inContext: aDictionary seen: anIdentitySet	^ (super match: aParser inContext: aDictionary seen: anIdentitySet) and: [ self size = aParser size ]! !!PPPredicateSequenceParser methodsFor: 'operators' stamp: 'lr 6/12/2010 09:14'!negate	"Answer a parser that is the negation of the receiving predicate parser."		^ self class 		on: negated message: negatedMessage		negated: predicate message: predicateMessage		size: size! !!PPPredicateSequenceParser methodsFor: 'parsing' stamp: 'JanKurs 8/24/2014 14:49'!parseOn: aPPContext	| memento result |	memento := aPPContext remember.	result := aPPContext stream next: size.	(result size = size and: [ predicate value: result ])		ifTrue: [ ^ result ].	aPPContext restore: memento.	^ PPFailure message: predicateMessage context: aPPContext! !!PPPredicateSequenceParser methodsFor: 'accessing' stamp: 'lr 6/12/2010 08:58'!size	"Answer the sequence size of the receiver."	^ size! !!PPStartOfLineParser commentStamp: 'JanKurs 10/29/2014 15:48' prior: 35275395!A PPStartOfLineParser is that does not fail, if the stream position is at the beginning of a line. It does not consume anything.!!PPStartOfLineParser methodsFor: 'parsing' stamp: 'JanKurs 8/28/2014 10:19'!parseOn: aPPContext	(aPPContext isStartOfLine) ifTrue: [ 		^ #startOfLine	].	^ PPFailure message: 'Start of line expected' context: aPPContext at: aPPContext position! !!PPStartOfLogicalLineParser commentStamp: 'JanKurs 1/8/2015 15:56' prior: 35275603!A PPStartOfLogicalLineParser is that does not fail, if the stream position is at the first non-blank character of a line. It does not consume anything.!!PPStartOfLogicalLineParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/2/2015 18:32'!isBlank: character	^ (character == Character space or: [character == Character tab])! !!PPStartOfLogicalLineParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/2/2015 18:32'!parseOn: aPPContext	aPPContext peek isAlphaNumeric ifFalse: [ 		^ PPFailure message: 'Start of logical line expected' context: aPPContext 	].	aPPContext isStartOfLine ifTrue: [ ^ #startOfLogicalLine ].			[ aPPContext position ~= 0 ] whileTrue: [  		aPPContext back.		(self isBlank: aPPContext peek) ifFalse: [ 			^ PPFailure message: 'Start of logical line expected' context: aPPContext		].		aPPContext isStartOfLine ifTrue: [ ^ #startOfLogicalLine ].	]! !!PPStartOfWordParser commentStamp: 'JanKurs 12/12/2014 16:50' prior: 35275829!A PPStartOfWordParser is that matches a word boundary.I return success if no word character preceeds my position and if word chracter succeeds my position.Word characters are any alphanumeric characters.!!PPStartOfWordParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 12/12/2014 16:36'!acceptsEpsilon	^ true! !!PPStartOfWordParser methodsFor: 'as yet unclassified' stamp: 'JanKurs 1/2/2015 16:31'!parseOn: aPPContext	aPPContext atEnd ifTrue: [  		^ PPFailure message: 'Start of word expected' context: aPPContext at: aPPContext position 	].	(aPPContext position == 0) ifTrue: [ 		(aPPContext peek isAlphaNumeric) ifTrue: [ 			^ #startOfWord		] ifFalse: [ 			^ PPFailure message: 'Start of word expected' context: aPPContext at: aPPContext position 	 	]	].	aPPContext back.	aPPContext peek isAlphaNumeric ifTrue: [		^ PPFailure message: 'Start of word expected' context: aPPContext at: aPPContext position 	].	aPPContext next.		^ aPPContext peek isAlphaNumeric ifTrue: [ #startOfWord ] ifFalse: [ 		PPFailure message: 'Start of word expected' context: aPPContext at: aPPContext position 	]	! !!PPUnresolvedParser commentStamp: 'lr 11/28/2009 18:50' prior: 35276104!This is a temporary placeholder or forward reference to a parser that has not been defined yet. If everything goes well it will eventually be replaced with the real parser instance.!!PPUnresolvedParser methodsFor: 'testing' stamp: 'lr 10/27/2008 11:29'!isUnresolved	^ true! !!PPUnresolvedParser methodsFor: 'parsing' stamp: 'lr 2/7/2010 20:51'!parseOn: aStream	self error: self printString , ' need to be resolved before execution.'! !!PPProcessor commentStamp: '<historical>' prior: 35276339!PPProcessor is an abstract superclass to PPRewriter and PPSearcher. It implements common functionality to search and transform grammars.The implementation of these matching algorithms is inspired from the refactoring engine by Don Roberts and John Brant. Contrary to the original implementation that worked on syntax trees, this implementation was generalized and works on possibly cyclic search patterns and grammar graphs.Instance Variables:	searches	<Collection of: PPRule>	The rules to be processed.	context	<Dictionary>	The current search context.!!PPProcessor class methodsFor: 'instance creation' stamp: 'lr 4/30/2010 08:34'!new	^ self basicNew initialize! !!PPProcessor methodsFor: 'rules' stamp: 'lr 4/29/2010 09:34'!addRule: aGrammarRule	searches add: (aGrammarRule setOwner: self)! !!PPProcessor methodsFor: 'private' stamp: 'lr 4/29/2010 09:34'!context	^ context! !!PPProcessor methodsFor: 'initialization' stamp: 'lr 4/29/2010 09:38'!initialize	super initialize.	searches := OrderedCollection new.	context := Dictionary new! !!PPProcessor methodsFor: 'private' stamp: 'lr 9/1/2010 20:53'!performRule: aRule on: aParser	context := Dictionary new.	^ aRule performOn: aParser! !!PPProcessor methodsFor: 'private' stamp: 'lr 9/1/2010 20:56'!performRulesOn: aParser	| result |	searches do: [ :rule |		result := self performRule: rule on: aParser.		result notNil ifTrue: [ ^ result ] ].	^ nil! !!PPRewriter commentStamp: '<historical>' prior: 35276950!PPRewriter walks over a grammar graph and transforms its parsers. If the grammar is modified, #hasChanged returns true.Instance Variables:	changed	<Boolean>	Indicates if the last operation has changed anything.!!PPRewriter methodsFor: 'public' stamp: 'lr 9/1/2010 20:58'!execute: aParser	"Perform the replace rules of the receiver on aParser, answer the resulting parser."	| previous result |	previous := context.	changed := false.	context := Dictionary new.	result := aParser transform: [ :each |		| transformed |		transformed := self performRulesOn: each.		transformed isNil			ifTrue: [ each ]			ifFalse: [ changed := true. transformed ] ].	context := previous.	^ result! !!PPRewriter methodsFor: 'testing' stamp: 'lr 4/29/2010 21:28'!hasChanged	"Answer if the last operation has changed anything."		^ changed! !!PPRewriter methodsFor: 'initialization' stamp: 'lr 4/29/2010 21:28'!initialize	super initialize.	changed := false! !!PPRewriter methodsFor: 'accessing' stamp: 'lr 4/29/2010 10:16'!replace: aSearchParser with: aReplaceParser	self replace: aSearchParser with: aReplaceParser when: [ :node | true ]! !!PPRewriter methodsFor: 'accessing' stamp: 'lr 4/29/2010 08:25'!replace: aSearchParser with: aReplaceParser when: aValidationBlock	self addRule: (PPParserReplaceRule searchFor: aSearchParser replaceWith: aReplaceParser when: aValidationBlock)! !!PPRewriter methodsFor: 'accessing' stamp: 'lr 4/29/2010 10:16'!replace: aSearchParser withValueFrom: aReplaceBlock	self replace: aSearchParser withValueFrom: aReplaceBlock when: [ :node | true ]! !!PPRewriter methodsFor: 'accessing' stamp: 'lr 4/29/2010 08:25'!replace: aSearchParser withValueFrom: aReplaceBlock when: aValidationBlock	self addRule: (PPBlockReplaceRule searchFor: aSearchParser replaceWith: aReplaceBlock when: aValidationBlock)! !!PPSearcher commentStamp: '<historical>' prior: 35277216!PPSearcher walks over a grammar specification and matches its parsers against the patterns using #match:inContext:.Instance Variables:	answer <Object>	The answer propagated between matches.!!PPSearcher methodsFor: 'private' stamp: 'lr 4/29/2010 09:46'!answer	^ answer! !!PPSearcher methodsFor: 'public' stamp: 'lr 4/29/2010 09:45'!execute: aParser	"Perform the search rules of the receiver on aParser. Answer the result of the search."	^ self execute: aParser initialAnswer: nil! !!PPSearcher methodsFor: 'public' stamp: 'lr 9/1/2010 20:56'!execute: aParser initialAnswer: anObject	"Perform the search rules of the receiver on aParser. Inject anObject into the matches and answer the result."	| previous |	previous := context.	answer := anObject.	context := Dictionary new.	aParser allParsersDo: [ :each | 		self performRulesOn: each ].	context := previous.	^ answer! !!PPSearcher methodsFor: 'rules' stamp: 'lr 4/29/2010 09:48'!matches: aParser do: anAnswerBlock	"Add a search expression aParser, evaluate anAnswerBlock with the matched node and the previous answer."	self addRule: (PPSearchRule searchFor: aParser thenDo: anAnswerBlock)! !!PPSearcher methodsFor: 'rules' stamp: 'lr 4/29/2010 09:56'!matchesAnyOf: aCollectionOfParsers do: anAnswerBlock	"Add a collection of search expressions aCollectionOfParsers, evaluate anAnswerBlock with the matched node and the previous answer."		aCollectionOfParsers		do: [ :each | self matches: each do: anAnswerBlock ]! !!PPSearcher methodsFor: 'initialization' stamp: 'lr 4/29/2010 09:37'!setAnswer: anObject	answer := anObject! !!PPRule commentStamp: '<historical>' prior: 35277457!PPRule is the abstract superclass of all of the grammar search rules. A rule is the first class representation of a particular pattern to search for. The owner of the rule is the algorithms that actually executes the search. This arrangement allows multiple searches to be conducted by a single processor.Instance Variables:	owner	<PPProcessor>	The processor that is actually performing the search.	search	<PPParser>	The parse pattern to be searched.!!PPReplaceRule commentStamp: '<historical>' prior: 35277968!PPReplaceRule is the abstract superclass of all of the transforming rules. The rules change the grammar by replacing the node that matches the rule. Subclasses implement different strategies for this replacement.Instance Variables:	verificationBlock	<BlockClosure>	Is evaluated with the matching parser and allows for further verification of a match.!!PPBlockReplaceRule commentStamp: '<historical>' prior: 35278382!PPBlockReplaceRule replaces the matching node by the result of evaluating replaceBlock. This allows arbitrary computation to come up with a replacement.Instance Variables:	replaceBlock <BlockClosure>	The block that returns the parer to replace to matching parser with.!!PPBlockReplaceRule class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 08:28'!searchFor: aSearchParser replaceWith: aReplaceBlock when: aVerificationBlock	^ (self searchFor: aSearchParser) 		setReplaceBlock: aReplaceBlock;		setVerificationBlock: aVerificationBlock;		yourself! !!PPBlockReplaceRule methodsFor: 'matching' stamp: 'lr 6/5/2011 16:51'!foundMatchFor: aParser 	^ replaceBlock cull: aParser! !!PPBlockReplaceRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:29'!setReplaceBlock: aBlock	replaceBlock := aBlock! !!PPParserReplaceRule commentStamp: '<historical>' prior: 35278716!PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.Instance Variables:	replaceParser	<PPParser>	The parser to replace the matched parser with.!!PPParserReplaceRule class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 08:28'!searchFor: aSearchParser replaceWith: aReplaceParser when: aVerificationBlock	^ (self searchFor: aSearchParser) 		setReplaceParser: aReplaceParser;		setVerificationBlock: aVerificationBlock;		yourself! !!PPParserReplaceRule methodsFor: 'matching' stamp: 'lr 4/29/2010 08:16'!foundMatchFor: aParser 	^ replaceParser copyInContext: owner context! !!PPParserReplaceRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:29'!setReplaceParser: aParser	replaceParser := aParser! !!PPReplaceRule methodsFor: 'matching' stamp: 'lr 6/5/2011 16:52'!canMatch: aParser 	^ verificationBlock cull: aParser! !!PPReplaceRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:13'!initialize	super initialize.	verificationBlock := [ :parser | true ]! !!PPReplaceRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:26'!setVerificationBlock: aBlock	verificationBlock := aBlock! !!PPRule class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 09:51'!new	^ self basicNew initialize! !!PPRule class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 09:51'!searchFor: aParser	^ self new setSearch: aParser! !!PPRule methodsFor: 'matching' stamp: 'lr 4/28/2010 21:10'!canMatch: aParser 	^ true! !!PPRule methodsFor: 'matching' stamp: 'lr 4/29/2010 08:14'!foundMatchFor: aParser 	self subclassResponsibility! !!PPRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:51'!initialize! !!PPRule methodsFor: 'matching' stamp: 'lr 4/29/2010 08:53'!performOn: aParser	(search match: aParser inContext: owner context)		ifFalse: [ ^ nil ].	(self canMatch: aParser)		ifFalse: [ ^ nil ].	^ self foundMatchFor: aParser! !!PPRule methodsFor: 'initialization' stamp: 'lr 4/28/2010 20:45'!setOwner: aGrammarSearcher	owner := aGrammarSearcher! !!PPRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 08:23'!setSearch: aParser	search := aParser! !!PPSearchRule commentStamp: '<historical>' prior: 35278987!PPSearchRule is a rule that simply searches for matches to the rule. Every time a match is found, answerBlock is evaluated with the parser that matches and the current answer. This two-argument approach allows a collection to be formed from all of the matches, like with #inject:into:.Instance Variables:	answerBlock	<BlockClosure>	Block to evaluate with the matching node and the current answer.!!PPSearchRule class methodsFor: 'instance creation' stamp: 'lr 4/29/2010 08:21'!searchFor: aParser thenDo: aBlock	^ (self searchFor: aParser) setAnswerBlock: aBlock! !!PPSearchRule methodsFor: 'matching' stamp: 'lr 6/5/2011 16:51'!canMatch: aParser	owner setAnswer: (answerBlock cull: aParser cull: owner answer).	^ super canMatch: aParser! !!PPSearchRule methodsFor: 'matching' stamp: 'lr 4/29/2010 08:15'!foundMatchFor: aParser 	^ aParser! !!PPSearchRule methodsFor: 'initialization' stamp: 'lr 4/29/2010 09:51'!setAnswerBlock: aBlock	answerBlock := aBlock! !!PPToken commentStamp: 'BernardoContreras 3/16/2015 21:41' prior: 35279458!PPToken represents a parsed part of the input stream. Contrary to a simple String it remembers where it came from, the original collection and its start and stop position.Instance Variables:	collection	<SequenceableCollection>	The collection this token comes from.	start	<Integer>	The start position in the collection.	stop	<Integer>	The stop position in the collection.!!PPToken class methodsFor: 'initialization' stamp: 'JanKurs 10/15/2014 15:54'!initialize	"Platform independent newline sequence. LF: Unix, CR+LF: Windows, and CR: Apple."	| cr lf |	cr := Character codePoint: 13.	lf := Character codePoint: 10.	NewLineParser := lf asParser / (cr asParser , lf asParser optional)! !!PPToken class methodsFor: 'instance creation' stamp: 'lr 4/6/2010 20:58'!new	self error: 'Token can only be created using a dedicated constructor.'! !!PPToken class methodsFor: 'instance creation' stamp: 'lr 2/25/2013 23:36'!on: aSequenceableCollection	^ self on: aSequenceableCollection start: 1 stop: aSequenceableCollection size value: nil! !!PPToken class methodsFor: 'instance creation' stamp: 'lr 2/25/2013 23:39'!on: aSequenceableCollection start: aStartInteger stop: aStopInteger value: anObject	^ self basicNew 		initializeOn: aSequenceableCollection		start: aStartInteger stop: aStopInteger		value: anObject! !!PPToken methodsFor: 'comparing' stamp: 'JanKurs 5/1/2015 17:35'!= anObject	^ self class = anObject class and: [ self inputValue = anObject inputValue ]! !!PPToken methodsFor: 'accessing' stamp: 'lr 6/15/2010 23:34'!collection	"Answer the underlying collection of this token."	^ collection! !!PPToken methodsFor: 'querying' stamp: 'lr 9/7/2011 20:40'!column	"Answer the column number of this token in the underlying collection."		| position |	position := 0.	(NewLineParser , [ :stream |		start <= stream position			ifTrue: [ ^ start - position ].		position := stream position ] asParser		/ #any asParser) star			parse: collection.	 ^ start - position! !!PPToken methodsFor: 'copying' stamp: 'lr 2/26/2013 00:34'!copyFrom: aStartInteger to: aStopInteger	^ self class on: collection start: start + aStartInteger - 1 stop: stop + aStopInteger - 3 value: value! !!PPToken methodsFor: 'comparing' stamp: 'JanKurs 5/1/2015 17:36'!hash	^ self inputValue hash! !!PPToken methodsFor: 'initialization' stamp: 'lr 2/25/2013 23:36'!initializeOn: aSequenceableCollection start: aStartInteger stop: aStopInteger value: anObject	collection := aSequenceableCollection.	start := aStartInteger.	stop := aStopInteger.	value := anObject! !!PPToken methodsFor: 'accessing-values' stamp: 'lr 2/26/2013 00:32'!inputValue	"Answer the consumed input of this token."	^ collection copyFrom: start to: stop! !!PPToken methodsFor: 'querying' stamp: 'lr 9/7/2011 20:41'!line	"Answer the line number of this token in the underlying collection."		| line |	line := 1.	(NewLineParser , [ :stream |		start <= stream position			ifTrue: [ ^ line ].		line := line + 1 ] asParser		/ #any asParser) star			parse: collection.	^ line! !!PPToken methodsFor: 'accessing-values' stamp: 'lr 2/26/2013 00:32'!parsedValue	"Answer the parsed value of this token."	^ value! !!PPToken methodsFor: 'printing' stamp: 'JanKurs 5/1/2015 17:35'!printOn: aStream	super printOn: aStream.	aStream nextPut: $[; print: self start; nextPut: $,; print: self stop; nextPut: $].	aStream nextPut: $(; print: self inputValue; nextPut: $)! !!PPToken methodsFor: 'accessing' stamp: 'lr 2/25/2013 23:56'!size	"Answer the size of this token in the underlying collection."	^ stop - start + 1! !!PPToken methodsFor: 'accessing' stamp: 'lr 6/15/2010 23:33'!start	"Answer the start position of this token in the underlying collection."	^ start! !!PPToken methodsFor: 'accessing' stamp: 'lr 6/15/2010 23:33'!stop	"Answer the stop position of this token in the underlying collection."		^ stop! !!PPToken methodsFor: 'accessing-values' stamp: 'JanKurs 5/1/2015 17:37'!value	self notify: 'Token>>#value is no longer supported. Instead use Token>>#inputValue'.	^ self inputValue! !"PetitParser"!"PetitTests"!"PetitAnalyzer"!!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 7/7/2014 17:41'!do: aBlock	^Transition from: self key to: self value do: aBlock.! !!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 7/3/2014 13:37'!if: predicateBlock do: actionBlock	^Transition from: self key to: self value if: predicateBlock do: actionBlock.! !!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 9/20/2013 14:33'!when: array	^Transition from: self key to: self value when: array.! !!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 9/20/2013 20:51'!when: array do: aBlock	^Transition from: self key to: self value when: array do: aBlock.! !!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 7/3/2014 13:36'!when: array if: predicateBlock	^Transition from: self key to: self value when: array if: predicateBlock.! !!Association methodsFor: '*ClockSystem-Core' stamp: 'CiprianTeodorov 7/3/2014 13:35'!when: array if: predicateBlock do: actionBlock	^Transition from: self key to: self value when: array if: predicateBlock do: actionBlock.! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/21/2014 20:36'!from: a to: b do: actionBlock	^self from: a to: b when: {  } if: nil do: actionBlock! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/4/2014 21:41'!from: a to: b if: predicateBlock 	self error: 'predicateBlock handling not implemented yet'.	^self from: a to: b when: {  } if: predicateBlock do: nil! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/4/2014 21:40'!from: a to: b if: predicateBlock do: actionBlock	self error: 'predicateBlock handling not implemented yet'.	^self from: a to: b when: {  } if: predicateBlock do: actionBlock! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/21/2014 20:35'!from: a to: b when: array	^self from: a to: b when: array if: nil do: nil.! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/21/2014 20:35'!from: a to: b when: array do: actionBlock	^self from: a to: b when: array if: nil do: actionBlock! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/4/2014 21:41'!from: a to: b when: array if: predicateBlock	self error: 'predicateBlock handling not implemented yet'.	^self from: a to: b when: array if: predicateBlock do: nil.! !!Transition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/21/2014 20:36'!from: a to: b when: array if: predicateBlock do: actionBlock	| i  |	predicateBlock ifNotNil: [ ^self error: 'predicateBlock handling not implemented yet' ].	i := self key: a value: b.	i vector: array.	i predicate: predicateBlock.	i action: actionBlock.	^ i! !!Transition methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/8/2013 12:10'!= anotherTransition	^super = anotherTransition and: [ self vector = anotherTransition vector ]! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/20/2013 20:52'!action	^ action! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/20/2013 20:52'!action: anObject	action := anObject! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:18'!from	^key! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:19'!from: aSource	super key: aSource! !!Transition methodsFor: 'comparing' stamp: 'CiprianTeodorov 11/1/2013 19:33'!hash	^(self from hash bitXor: self to hash) bitXor: self vector hash! !!Transition methodsFor: 'testing' stamp: 'CiprianTeodorov 7/21/2014 20:42'!isFireableIn: automaton with: assignment	| stalled |	"check if the clocks that need to fire are assigned tick"	vector		do: [ :clock | 			(assignment at: clock index) == Tristate tick				ifFalse: [ ^ false ] ].		"check if the clock that are not allowed to fire are assigned notick"	stalled := automaton alphabet \ vector.	stalled		do: [ :clock | 			(assignment at: clock index) == Tristate notick				ifFalse: [ ^ false ] ].	^ true! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 7/3/2014 13:33'!predicate		^ predicate! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 7/3/2014 13:33'!predicate: anObject		predicate := anObject! !!Transition methodsFor: 'printing' stamp: 'CiprianTeodorov 9/23/2013 20:47'!printOn: aStream 		super printOn: aStream.	aStream nextPut: ${.	vector do: [:el | el printNameOn: aStream] separatedBy: [ aStream nextPutAll: '. '].	aStream nextPut: $}.	action ifNotNil: [ action printOn: aStream. ]! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:20'!target	^value! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:18'!to	^value! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:19'!to: target 		super value: target! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/20/2013 14:29'!vector	^ vector! !!Transition methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/20/2013 14:29'!vector: anObject	vector := anObject! !"ClockSystem-Core"!!ClockConcatenation commentStamp: 'CiprianTeodorov 6/4/2014 00:25' prior: 0!A ClockConcatenation is representing the sequential composition of constraints.It contains an array of expression ClockRelations from which  one is considered the current one.The first element of the state is the index of the current expression. Then by convention the second element is the state of the expression itself.Its alphabet contains the death clock.When added to the system it should somehow enable the current expression automaton, and the associated coincidence automaton.Instance Variables	coincidenceRelation:		a coincidence relation that is added between the Concatenation clock and the current expression clock	deathClock:		a clock unique to each concatenation that is used to perform the death transitionscoincidenceRelation	- xxxxxdeathClock	- xxxxx!!Clock class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 21:42'!named: aName	^self new clockName: aName! !!Clock class methodsFor: 'automata' stamp: 'CiprianTeodorov 3/29/2014 16:12'!tick	"A clock not constrained needs an automaton to make it tick sometimes"	^[:s :c |		{ s->s when: { c } } ]! !!Clock methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/8/2013 11:49'!= anotherClock	^clockName = anotherClock clockName! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!clockName	^ clockName! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!clockName: anObject	clockName := anObject! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!expression	^ expression! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!expression: anObject	expression := anObject! !!Clock methodsFor: 'comparing' stamp: 'CiprianTeodorov 9/23/2013 20:12'!hash	^clockName hash! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 5/29/2014 09:11'!index		^ index! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 5/29/2014 09:11'!index: anObject		index := anObject! !!Clock methodsFor: 'initialize-release' stamp: 'CiprianTeodorov 2/27/2014 22:04'!initialize	super initialize .	internal := false.! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 2/27/2014 22:00'!internal	^internal! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 2/27/2014 22:00'!internal: a	internal := a! !!Clock methodsFor: 'testing' stamp: 'CiprianTeodorov 10/30/2013 18:54'!isAlways	self expression ifNotNil: [ ^self expression isAlways ].	^false! !!Clock methodsFor: 'printing' stamp: 'CiprianTeodorov 9/23/2013 20:20'!printNameOn: aStream	aStream nextPutAll: clockName.! !!Clock methodsFor: 'printing' stamp: 'CiprianTeodorov 3/25/2014 21:44'!printOn: aStream	aStream nextPutAll: clockName.	expression		ifNotNil: [ 			aStream nextPutAll: ' := '.			expression printExpressionOn: aStream ].	aStream nextPut: $.! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!system	^ system! !!Clock methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!system: anObject	system := anObject! !!ClockConcatenation commentStamp: 'CiprianTeodorov 6/4/2014 00:25' prior: 35580648!A ClockConcatenation is representing the sequential composition of constraints.It contains an array of expression ClockRelations from which  one is considered the current one.The first element of the state is the index of the current expression. Then by convention the second element is the state of the expression itself.Its alphabet contains the death clock.When added to the system it should somehow enable the current expression automaton, and the associated coincidence automaton.Instance Variables	coincidenceRelation:		a coincidence relation that is added between the Concatenation clock and the current expression clock	deathClock:		a clock unique to each concatenation that is used to perform the death transitionscoincidenceRelation	- xxxxxdeathClock	- xxxxx!!ClockConcatenation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/4/2014 00:03'!alphabet 	^(clocks, {deathClock}) asSet! !!ClockConcatenation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/4/2014 00:02'!deathClock	^deathClock! !!ClockConcatenation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/4/2014 00:09'!do: aTransition withState: aState	| block forwardState |	aTransition vector first == self deathClock		ifTrue: [ |aidx|			aidx := aState at: 1 put: aState first + 1.			aState at: 2 put: 0.			coincidenceRelation clocks at: 2 put: (automata at: aidx) clocks last. ]		ifFalse: [ 			block := aTransition action.			forwardState := aState deepCopy				removeFirst;				yourself.			block ifNotNil: [ block value: forwardState ].			forwardState atWrap: 1 put: aTransition target.			aState				replaceFrom: 2				to: aState size				with: forwardState				startingAt: 1 ]! !!ClockConcatenation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 23:25'!startState	^({1. 0}, variables) asArray! !!ClockConcatenation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/4/2014 00:02'!transitionsInState: aState	| aidx childState |	aidx := aState first.	aidx > automata size ifTrue: [ ^{} ]. "the last clock in the concatenation died"	childState := aState second.	^ ((automata at: aidx) finalStates includes: childState)		ifTrue: [ { aidx -> (aidx + 1) when: { self deathClock } } ]		ifFalse: [ (self automata at: aidx) valueWithArguments: (aState copyFrom: 2 to: aState size) , constants , clocks ]! !!ClockRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 7/21/2014 20:38'!alphabet 	^alphabet! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 23:21'!automata		^ automata! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 23:21'!automata: anObject		automata := anObject! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:53'!clocks		^ clocks! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 7/21/2014 20:40'!clocks: anObject		clocks := anObject.	alphabet := clocks asSet.! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:53'!constants		^ constants! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:53'!constants: anObject		constants := anObject! !!ClockRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 3/25/2014 18:53'!do: aTransition withState: aState	|block|	block := aTransition action.	block ifNotNil: [ block value: aState ].	aState atWrap: 1 put: aTransition target.! !!ClockRelation methodsFor: 'initialization' stamp: 'CiprianTeodorov 6/18/2014 23:03'!initialize	super initialize.	isExpression := false.! !!ClockRelation methodsFor: 'testing' stamp: 'CiprianTeodorov 3/25/2014 22:35'!isAlways	^relationName == #always! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/18/2014 23:02'!isExpression		^ isExpression! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/18/2014 23:02'!isExpression: anObject		isExpression := anObject! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/18/2014 22:56'!libraryName		^ libraryName! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/18/2014 22:56'!libraryName: anObject		libraryName := anObject! !!ClockRelation methodsFor: 'printing' stamp: 'CiprianTeodorov 7/7/2014 17:19'!printExpressionOn: aStream	aStream nextPutAll: 'library: #', libraryName. 	aStream nextPutAll: ' expression: #', relationName , ' clocks: {'.	(1 to: clocks size - 1) do: [ :each | (clocks at: each) printNameOn: aStream ] separatedBy: [aStream nextPutAll: '. '].	aStream nextPut: $}.	constants		ifNotEmpty: [ 			aStream nextPutAll: ' constants: '.			constants printOn: aStream ].	variables		ifNotEmpty: [ 			aStream nextPutAll: ' variables: '.			variables printOn: aStream ]! !!ClockRelation methodsFor: 'printing' stamp: 'CiprianTeodorov 11/7/2014 11:21'!printOn: aStream	aStream nextPutAll: 'library: #', libraryName asString.	self isExpression		ifTrue: [ aStream nextPutAll: ' expression: #' , relationName , ' clocks: {' ]		ifFalse: [ aStream nextPutAll: ' relation: #' , relationName , ' clocks: {' ].	clocks do: [ :each | each printNameOn: aStream ] separatedBy: [ aStream nextPutAll: '. ' ].	aStream nextPut: $}.	constants		ifNotEmpty: [ 			aStream nextPutAll: ' constants: '.			constants printOn: aStream ].	variables		ifNotEmpty: [ 			aStream nextPutAll: ' variables: '.			variables printOn: aStream ]! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:54'!relationName		^ relationName! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:54'!relationName: anObject		relationName := anObject! !!ClockRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 3/25/2014 19:03'!startState	^({0}, variables) asArray! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 19:02'!system		^ system! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 19:02'!system: anObject		system := anObject! !!ClockRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 3/25/2014 19:03'!transitionsInState: aState 	^self automata valueWithArguments: aState, constants, clocks! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:53'!variables		^ variables! !!ClockRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/25/2014 18:53'!variables: anObject		variables := anObject! !!ClockSystem class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:38'!clockSystemSettingsOn: aBuilder	<systemsettings>	<clockSystem>	(aBuilder group: #ClockSystem)		label: 'ClockSystem';		with: [ 					(Smalltalk at: #ClockParallelComposition ifAbsent: [ nil ])						ifNotNil: [ 							(aBuilder pickOne: #compositionClass)								target: (Smalltalk at: #ClockParallelComposition);								label: 'Default Composition Strategy';								domainValues:										({(Smalltalk at: #ClockCartesianProductExploration).											(Smalltalk at: #ClockCartesianProductBDDExploration)} reject: #isNil);								default: (Smalltalk at: #ClockCartesianProductExploration ifAbsent: [nil]). ].					]! !!ClockSystem class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/17/2013 11:27'!named: aName	^self new systemName: aName! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 7/4/2014 22:02'!addClocks: aListOfSymbolsOrClocks	"add these clocks"	self clocks: aListOfSymbolsOrClocks! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 7/4/2014 22:02'!addInternalClocks: aListOfSymbolsOrClocks	self internalClocks: aListOfSymbolsOrClocks! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 10/21/2014 20:30'!addLibrary: aDictionary	library addAll: aDictionary.! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 3/29/2014 16:17'!clock: aSymbol	|clk|	((self class selectorsWithArgs: 0) includes: aSymbol) ifTrue: [ ^self error: aSymbol printString, ' is a reserved word. Name your clock differently' ].	clk := Clock new		clockName: aSymbol asSymbol ;		system: self.	(clocks includes: clk) ifTrue: [ ^self error: 'Clock named ', clk clockName, ' already defined' ].	clocks add: clk.	unconstrainedClocks add: clk.	^clk! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 19:18'!clockNamed: aSymbol	| result |	result := clocks select: [ :each | each clockName = aSymbol ].	result ifEmpty: [ ^ nil ].	result size > 1		ifTrue: [ ^ self error: 'multiple clocks with the same name' ].	^ result anyOne! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:33'!clocks	^ clocks! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 20:09'!clocks: aListOfSymbolsOrClocks	clocks addAll: (aListOfSymbolsOrClocks		collect: [ :each | 			each isSymbol				ifTrue: [ self clock: each ]				ifFalse: [ each ] ]) asSet ! !!ClockSystem methodsFor: 'error handling' stamp: 'CiprianTeodorov 4/15/2014 19:32'!doesNotUnderstand: aMessage	aMessage arguments		ifEmpty: [ 			| clock |			clock := self clockNamed: aMessage selector.			^ clock ifNil: [ super doesNotUnderstand: aMessage ] ifNotNil: [ clock ] ].	^ super doesNotUnderstand: aMessage! !!ClockSystem methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 21:12'!hierarchicalLookup: aLibraryName	^ aLibraryName		inject: self library		into: [ :currentLibrary :currentName | 			currentName = #'.'				ifTrue: [ currentLibrary ]				ifFalse: [ currentLibrary at: currentName ifPresent: [ :p | p ] ifAbsent: [ ^ nil ] ] ]! !!ClockSystem methodsFor: 'initialize-release' stamp: 'CiprianTeodorov 10/21/2014 20:30'!initialize	super initialize.	clocks := Set new.	unconstrainedClocks := Set new.	relations := OrderedCollection new.	uniqueId := 0.	library := Dictionary new.! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 20:03'!internalClock: aSymbol	^self internalClockNamed: (aSymbol, ((uniqueId := uniqueId + 1) printString)) asSymbol! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 20:07'!internalClockNamed: aSymbol	|clk|	clk := Clock new		clockName: aSymbol;		system: self;		internal: true.	(clocks includes: clk) ifTrue: [ ^self error: 'Clock named ', clk clockName, ' already defined' ].	clocks add: clk.	"since internal clocks are used in expressions they are always constrained.	thus we don't need to add them to the unconstrained set"	^clk! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 20:09'!internalClocks: aListOfSymbolsOrClocks	clocks addAll: (aListOfSymbolsOrClocks		collect: [ :each | 			each isSymbol				ifTrue: [ self internalClockNamed: each ]				ifFalse: [ each ] ]) asSet ! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2014 21:09'!library 	^library! !!ClockSystem methodsFor: 'expression - api' stamp: 'CiprianTeodorov 4/15/2014 20:18'!library: aLibName expression: sym clocks: clks 	^self library: aLibName expression: sym clocks: clks constants: {  } variables: {  }! !!ClockSystem methodsFor: 'expression - api' stamp: 'CiprianTeodorov 4/15/2014 20:18'!library: aLibName expression: sym clocks: clks constants: constants	^self library: aLibName expression: sym clocks: clks constants: constants variables: {  }! !!ClockSystem methodsFor: 'expression - api' stamp: 'CiprianTeodorov 6/18/2014 23:11'!library: aLibName expression: sym clocks: clks constants: constants variables: vars	| eClock exp |  	clks last isSymbol		ifTrue: [ 			eClock := self clockNamed: clks last.			clks at: (clks size) put: (eClock) ]		ifFalse: [ eClock := clks last ].	eClock internal		ifFalse: [ ^ self error: 'The clock ' , eClock clockName printString , ' should be an internal clock' ].	exp := self		library: aLibName		relation: sym		clocks: clks		constants: constants		variables: vars.	exp isExpression: true.	^eClock expression: exp! !!ClockSystem methodsFor: 'expression - api' stamp: 'CiprianTeodorov 4/15/2014 20:19'!library: aLibName expression: sym clocks: clks variables: vars	^self library: aLibName expression: sym clocks: clks constants: {  } variables: vars! !!ClockSystem methodsFor: 'relation - api' stamp: 'CiprianTeodorov 3/25/2014 22:59'!library: aRelationLibrary relation: sym clocks: clks	^self library: aRelationLibrary relation: sym clocks: clks constants: {  } variables: {  }! !!ClockSystem methodsFor: 'relation - api' stamp: 'CiprianTeodorov 3/25/2014 22:59'!library: aRelationLibrary relation: sym clocks: clks constants: constants	^self library: aRelationLibrary relation: sym clocks: clks constants: constants variables: {  }! !!ClockSystem methodsFor: 'relation - api' stamp: 'CiprianTeodorov 10/21/2014 21:08'!library: aRelationLibrary relation: sym clocks: clks constants: constants variables: vars	| re automata constrainedClocks |	"library := aRelationLibrary isSymbol ifTrue: [ Smalltalk at: aRelationLibrary ] ifFalse: [ aRelationLibrary  ].	automata := library perform: sym.	"	automata := self lookup: sym in: aRelationLibrary. 		"name resolution for clocks. Retrieves the clock from the clocks list if just a symbol is given"		constrainedClocks := clks		collect: [ :clockOrSymbol | 			clockOrSymbol isSymbol				ifTrue: [ |clk| clk := self clockNamed: clockOrSymbol. clk ifNil: [ self error: 'Clock ', clockOrSymbol printString, ' undefined'. ] ]				ifFalse: [ clockOrSymbol ] ].	constrainedClocks do: [ :clk | unconstrainedClocks remove: clk ifAbsent: [  ] ].	re := ClockRelation new		libraryName: aRelationLibrary;		relationName: sym;		automata: automata;		clocks: constrainedClocks;		constants: constants;		variables: vars;		system: self.	self relations add: re.	^ re! !!ClockSystem methodsFor: 'relation - api' stamp: 'CiprianTeodorov 3/25/2014 22:59'!library: aRelationLibrary relation: sym clocks: clks variables: vars	^self library: aRelationLibrary relation: sym clocks: clks constants: {  } variables: vars! !!ClockSystem methodsFor: 'private' stamp: 'CiprianTeodorov 10/21/2014 21:07'!lookup: aRelationName in: aLibraryName	"first try to lookup in the local library"	aLibraryName isSymbol ifTrue: [ 		"one level library"		self library at: aLibraryName ifPresent: [ :lib | lib at: aRelationName ifPresent: [:relation | ^relation ] ].				Smalltalk at: aLibraryName ifPresent: [ :libClass | (libClass respondsTo: aRelationName) ifTrue: [ ^libClass perform: aRelationName ] ] ].		aLibraryName isArray ifTrue: [ |lib|		lib := self hierarchicalLookup: aLibraryName.		lib ifNotNil: [ lib at: aRelationName ifPresent: [ :relation | ^relation ] ] ].		aLibraryName isClass ifTrue: [ 		(aLibraryName respondsTo: aRelationName ) ifTrue: [ ^aLibraryName perform: aRelationName ] ].		^self error: 'The relation ', aRelationName , ' is not present in library ', aLibraryName printString.	! !!ClockSystem methodsFor: 'api' stamp: 'CiprianTeodorov 4/15/2014 19:23'!name:	aString	systemName := aString! !!ClockSystem methodsFor: 'printing' stamp: 'CiprianTeodorov 3/25/2014 23:14'!printOn: aStream 	aStream nextPutAll: 'ClockSystem ', systemName; cr.	self clocks do:[:each | each printOn: aStream. aStream cr].	self relations do:[:each | each printOn: aStream. aStream cr].	! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:36'!relations	^ relations! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:36'!relations: anObject	relations := anObject! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!systemName	^ systemName! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 9/23/2013 19:37'!systemName: anObject	systemName := anObject! !!ClockSystem methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/29/2014 16:35'!unconstrainedClockAutomata	^ unconstrainedClocks asOrderedCollection		collect: [ :clk | 			ClockRelation new				relationName: #tick;				automata: Clock tick;				clocks: {clk};				constants: {};				variables: {};				system: self ]! !!Integer methodsFor: '*ClockSystem-Language' stamp: 'CiprianTeodorov 10/30/2013 21:29'!for: aNumber 	^Array new: aNumber withAll: self.! !!SettingTreeBuilder methodsFor: '*ClockSystem-Language' stamp: 'CiprianTeodorov 11/1/2015 18:25'!clockSystem	currentPragma methodClass theNonMetaClass perform: currentPragma selector with: self.! !"ClockSystem-Language"!!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 10:32'!* anotherClock 	^self intersection: anotherClock ! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 10:32'!+ anotherClock 	^self union: anotherClock ! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/26/2013 16:14'!, anotherClock	^self concat: anotherClock ! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:52'!< anotherClock	self strictlyPreceeds: anotherClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:54'!<= anotherClock	self preceeds: anotherClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 12:02'!<> anotherClock 	self exclusionWith: anotherClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:51'!=== anotherClock	self coincidesWith: anotherClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:54'!> anotherClock	anotherClock < self! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:55'!>= anotherClock	anotherClock <= self! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!alternatesWith: anotherClock	self system		relation: #alternation		clocks:			{self.			anotherClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!coincidesWith: anotherClock	self system		relation: #coincidence		clocks:			{self.			anotherClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:32'!concat: aClock	^ self system		expression: #concatenation		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:32'!deferred: aClock for: anArray	^ self system		expression: #deferred		clocks:			{self.			aClock}		variables: {anArray}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!delayFor: aNumber	^ self system expression: #delay clocks: {self} variables: {aNumber}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!exclusionWith: anotherClock	self system		relation: #exclusion		clocks:			{self.			anotherClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 6/18/2014 23:08'!filteredBy: twoBinaryWords	|offset binaryword|	binaryword := twoBinaryWords first, twoBinaryWords second.	offset := twoBinaryWords first size.	^ self system expression: #filtering clocks: {self} constants: { binaryword. offset }.! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:03'!glb: b	^self infimum: b! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 11/19/2013 22:23'!inf: b	(b isKindOf: Collection) ifTrue: [ |x|		b size = 1 ifTrue: [ ^self infimum: b first ].		x := b asOrderedCollection.		^(self inf: (x removeFirst)) inf: x.	 ].	^self infimum: b! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!infimum: aClock	^ self system		expression: #infimum		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/15/2013 13:11'!intersect: aClock	^self intersection: aClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!intersection: aClock	^ self system		expression: #intersection		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:03'!lub: b	^self supremum: b! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 14:57'!offset: anIntegerOrBinaryWord 		^self period: #() offset: anIntegerOrBinaryWord! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 6/8/2014 14:03'!period: anIntegerOrBinaryWord	^ self period: anIntegerOrBinaryWord offset: #()! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 14:37'!period: period offset: offset	|periodBW offsetBW| 	period isInteger ifTrue: [ periodBW := #(1), ((2 to: period) collect: [ :e | 0 ])  ]		ifFalse: [ periodBW := period ].	offset isInteger ifTrue: [ offsetBW := (1 to: offset) collect: [ :e | 0 ]  ]		ifFalse: [ offsetBW := offset ].	^self filteredBy: { offsetBW.  periodBW}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!preceeds: anotherClock	"unbounded precedence"	self system		relation: #precedence		clocks:			{self.			anotherClock}		constants: {-1}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!preceeds: anotherClock bound: k	"bounded precedence"	self system		relation: #precedence		clocks:			{self.			anotherClock}		constants: {k}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 15:45'!preempts: aClock	^aClock upTo: self! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 15:01'!sampledOn: baseClock	^self samplingOn: baseClock! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!sampling: aBaseClock	^ self system		expression: #sampling		clocks:			{self.			aBaseClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!samplingOn: aBaseClock	^ self system		expression: #samplingOn		clocks:			{self.			aBaseClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!strictSampling: aBaseClock	^ self system		expression: #strictSampling		clocks:			{self.			aBaseClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!strictlyPreceeds: anotherClock	"unbounded strict precedence"	self system		relation: #strictPrecedence		clocks:			{self.			anotherClock}		constants: {-1}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!strictlyPreceeds: anotherClock bound: k	"bounded strict precedence"	self system		relation: #strictPrecedence		clocks:			{self.			anotherClock}		constants: {k}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 19:17'!subclockOf: anotherClock	self system		relation: #subclocking		clocks:			{self.			anotherClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:03'!sup: b	^self supremum: b! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!supremum: aClock	^ self system		expression: #supremum		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!union: aClock	^ self system		expression: #union		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:33'!upTo: aClock	^ self system		expression: #preemption		clocks:			{self.			aClock}! !!Clock methodsFor: '*ClockSystem-Lib-Kernel-relations-synonyms' stamp: 'CiprianTeodorov 10/8/2013 11:57'!~ anotherClock 	self alternatesWith: anotherClock! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-multi-relations' stamp: 'CiprianTeodorov 10/15/2014 20:00'!allCoincide: someClocks 	1 to: someClocks size do: [ :i |		i+1 to: someClocks size do: [ :j |			|	lhs rhs	|			lhs := someClocks  at: i.			rhs := someClocks at: j.						lhs isSymbol ifTrue: [ lhs := self clockNamed: lhs ].			rhs isSymbol ifTrue: [ rhs := self clockNamed: rhs ].						lhs === rhs.					 ]	]! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-multi-relations' stamp: 'CiprianTeodorov 10/29/2013 00:12'!allExclusive: someClocks 	1 to: someClocks size do: [ :i |		i+1 to: someClocks size do: [ :j |			(someClocks at: i) <> (someClocks at: j).			 ]	]! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-multi-relations' stamp: 'CiprianTeodorov 7/7/2014 17:14'!allUnion: someClocks named: aSymbol	| current constrainedClocks |	someClocks size < 1		ifTrue: [ ^ self error: 'union needs at least one clock' ].	someClocks size < 2		ifTrue: [ ^ self error: 'union with only one clock is not supported yet' ].	someClocks size = 2		ifTrue: [ 			^ self				library: ClockKernelLibrary				expression: #union				clocks:					{(someClocks first).					(someClocks last).					aSymbol} ].			constrainedClocks := someClocks		collect: [ :clockOrSymbol | 			clockOrSymbol isSymbol				ifTrue: [ |clk| 					clk := self clockNamed: clockOrSymbol. 					clk ifNil: [ self error: 'Clock ', clockOrSymbol printString, ' undefined'. ] ]				ifFalse: [ clockOrSymbol ] ].					current := constrainedClocks first union: constrainedClocks second.	3 to: constrainedClocks size - 1 do: [ :i | current := current union: (constrainedClocks at: i) ].	^ self		library: ClockKernelLibrary		expression: #union		clocks:			{current.			(constrainedClocks last).			aSymbol}! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 3/25/2014 21:35'!always	"This is a clock that always ticks"	^self expression: #always clocks:  {  }.! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:32'!expression: sym clocks:  clks	^self expression: sym clocks: clks constants: {  } variables: {  }! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:32'!expression: sym clocks: clks constants: constants 	^self expression: sym clocks: clks constants: constants variables: {  }! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 6/18/2014 23:10'!expression: sym clocks: clks constants: constants variables: vars"	| eClock exp |	eClock := self internalClock: sym.	exp := self		relation: sym		clocks: clks , {eClock}		constants: constants		variables: vars.	eClock expression: exp.	^ eClock"	^self library: ClockKernelLibrary expression: sym clocks: clks, { self internalClock: sym } constants: constants variables: vars! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-expressions' stamp: 'CiprianTeodorov 3/25/2014 21:32'!expression: sym clocks: clks variables: vars	^self expression: sym clocks: clks constants: {  } variables: vars! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 3/25/2014 21:36'!forceOne	"this is a clock that ticks once then dies"	^self expression: #forceOne clocks:  {  }.! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 3/25/2014 21:36'!forceZero	"this is a clock that does not tick and then dies"	^self expression: #forceZero clocks:  {  }.! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 3/25/2014 21:36'!never	"This is a clock that never ticks"	^self expression: #never clocks:  {  }.! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 10/30/2013 18:33'!one	"This is a clock that always ticks"	^self always! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 21:41'!relation: sym clocks: clks 	^self relation: sym clocks: clks constants: { } variables: {  } ! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 21:41'!relation: sym clocks: clks constants: constants	^self relation: sym clocks: clks constants: constants variables: {  } ! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 21:41'!relation: sym clocks: clks constants: constants variables: vars	^self library: ClockKernelLibrary relation: sym clocks: clks constants: constants variables: vars! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-relations' stamp: 'CiprianTeodorov 3/25/2014 21:41'!relation: sym clocks: clks variables: vars	^self relation: sym clocks: clks constants: { } variables: vars! !!ClockSystem methodsFor: '*ClockSystem-Lib-Kernel-predefined-clocks' stamp: 'CiprianTeodorov 10/30/2013 18:33'!zero	"This is a clock that never ticks"	^self never! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!alternation	^ [ :s :a :b | 	s = 0		ifTrue: [ { 0 -> 1 when: {a} } ]		ifFalse: [ { 1 -> 0 when: {b} } ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!always	"The always automaton need particular treatment during exploration. 	since the transition should be always forced"	"The clock always tick"	^[:s :c |		{ s->s when: { c }}		]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 20:52'!await	"the awaiting clock expression a^n ticks in coincidence with the next nth strictly future tick of a, and then dies"	"DIES"	^[:s :a :c |		s = 1 ifTrue: [ 1->0 when: { a. c } ]			ifFalse: [ s->(s-1) when: { a } ]	]	! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!coincidence	^[:s :a :b | {s -> s when: { a. b}} ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!concatenation 	^[:s :a :b :c |		a isDead ifFalse: [{ s->s when: { a. c }.				s->s when: { b }.				s->s when: { a. b. c } }]			ifTrue: [				{ s->1 when: { b. c } } 			]		]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 22:13'!deferred	^[ :s :ns :a :b :c |	s = 0 ifTrue: [ { s->s when: { b }.			s->(s+2) when: { a }.			s->(s+2) when: { a. b } } ]		ifFalse: [ 			| sync advance next|			sync := nil.			((1 to: (s-1)) anySatisfy: [ :i | (ns at: i) = 1 ]) ifTrue: [ 				sync := { b. c }]			ifFalse: [ sync := { b } ].			advance := [:configuration | |state list|				state := configuration first.				list := configuration second.				1 to: (state-1) do: [:i |  |lI|					lI := list at: i.					lI > 0 ifTrue: [ list at: i put: (lI-1) ] ] ].			next := (ns size < s ifTrue: [s] ifFalse: [s+1]).			{			s->s when: sync do: advance.			s->next when: { a }.			s->next when: { a }, sync do: advance} ] ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 6/3/2014 22:49'!delay	"after n ticks of the base clock, the base clock and the delayed one become synchronous forever "	^[:s :n :a :c |		n < 1 ifTrue: [ {s->s when: { a. c }} ]			ifFalse: [ {s->(s+1) when: { a } do: [ :configuration | |m| 													m := configuration second.  													configuration at: 2 put: m - 1 ] }]		]! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!exclusion	^[:s :a :b |  		{ s -> s when: { a }. 			s -> s when: { b } } ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/29/2014 13:48'!filtering	^ [ :s :binaryWord :offset :baseClock :filtered | 	| whoTicks |	whoTicks := (s+1 <= binaryWord size and: [ (binaryWord at: s+1) = 1 ])		ifTrue: [ 			{baseClock. filtered} ]		ifFalse: [ {baseClock} ].	(s+1) <= offset		ifTrue: [ { s -> (s + 1) when: whoTicks } ]		ifFalse: [ 			| newS |			newS := (offset = binaryWord size and: [ (s+1) > offset ])				ifTrue: [ s ]				ifFalse: [ 					(s+1) = binaryWord size						ifTrue: [ offset ]						ifFalse: [ s + 1 ] ].			{ s -> newS when: whoTicks } ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 22:29'!forceOne	"DIES"	^[:s :c |		s = 0 			ifTrue: [ { s->1 when: { c } } ]			ifFalse: [ { "s->s+1 when: { die }" } ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 22:30'!forceZero	"DIES"	^ [ :s :c | 	s = 0		ifTrue: [ { s -> 1 when: {} } ]		ifFalse: [ { "s -> (s+1) when: { die }" } ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!infimum 	^[ :s :a :b :c |	s = 0 		ifTrue: [ 			{ s->s when: { a. b. c }.			s->(s+1) when: { a. c }.			s->(s-1) when: { b. c } } ]		ifFalse: [ 			s > 0 				ifTrue: [ 					{ s->s when: { a. b. c }.					s->(s+1) when: { a. c }.					s->(s-1) when: { b } } ]				ifFalse: [ 					{ s->s when: { a. b. c }.					s->(s+1) when: { a }.					s->(s-1) when: { b. c } } ] ] ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!intersection 	^[:s :a :b :c |		{ s->s when: { a }.		s->s when: { b }.		s->s when: { a. b. c } }		]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!never	"a clock that never ticks. we add the transition without clock so that the exploration mechanism ensures that the alphabet of the clock blocks its ticking"	^[:s :c |		{ s->s when: { }}		]! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/29/2014 14:20'!precedence	| warningBlock |	warningBlock := [ :configuration |		configuration first abs \\ 10 = 9			ifTrue: [ 				(self					confirm:						'one precedence relation exceeded ' , configuration first abs printString							, ' states. Do you want to continue?')			ifFalse: [ ^ self error ] ] ].	^ [ :s :bound :a :b | 	bound < 0		ifTrue: [ 			"unbounded precedence"			s = 0				ifTrue: [ 					{(s -> (s + 1) when: {a} do: warningBlock).					(s -> s						when:							{a.							b})} ]				ifFalse: [ 					{(s -> s						when:							{a.							b}).					(s -> (s + 1) when: {a} do: warningBlock).					(s -> (s - 1) when: {b} do: warningBlock)} ] ]		ifFalse: [ 			"bounded precedence"			s = bound				ifTrue: [ 					s = 0						ifTrue: [ 							{(s -> s								when:									{a.									b})} ]						ifFalse: [ 							{(s -> s								when:									{a.									b}).							(s -> (s - 1) when: {b})} ] ]				ifFalse: [ 					s = 0						ifTrue: [ 							{(s -> (s + 1) when: {a}).							(s -> s								when:									{a.									b})} ]						ifFalse: [ 							{(s -> s								when:									{a.									b}).							(s -> (s + 1) when: {a}).							(s -> (s - 1) when: {b})} ] ] ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 20:54'!preemption	"the preemption expression behaves as a while b does not tick. When b ticks, the expression dies"	"DIES"	^[:s :a :b :c |		s = 0 			ifTrue: [ { s -> s when: { a. c }.				s -> (s+1) when: { b }. 	"DIES"				s -> (s+1) when: { a. b }. 	"DIES" } ]			ifFalse: [ { s -> s when: { a. b }.				s -> s when: { a }.				s -> s when: { b } } ]			]	! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 20:54'!sampling	"the sampling ticks in coincidence with the tick of the base clock immediately following a tick of the trigger clock, and then dies. The sampling tick may be coincident with the trigger"	"DIES"	^[:s :trigger :baseClock :sampled |		s = 0 ifTrue: [ { s->s when: { baseClock }.			s->(s+2) when: { trigger. baseClock. sampled }	"DIES".			s->(s+1) when: { trigger } } ]		ifFalse: [ 			s = 1 ifTrue: [ 				{ s -> s when: { trigger }.				s ->(s+1) when: { baseClock. sampled }	"DIES" }				 ]			ifFalse: [ 			{ s->s when: { trigger. baseClock }.			s->s when: { trigger }.			s->s when: { baseClock } } ]]	]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!samplingOn	^[:s :trigger :base :sampled | 		s = 0 			ifTrue: [ 				{ 0->0 when: { base }.				0->0 when: { base. trigger. sampled }.				0->1 when: { trigger } } ]			ifFalse: [ 				{ 1->1 when: { trigger }.				  1->1 when: { base. trigger. sampled }.				  1->0 when: { base. sampled } } ]	].! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/25/2014 22:49'!strictPrecedence	| warningBlock |	warningBlock := [ :configuration |	configuration first abs \\ 10 = 9		ifTrue: [ 			(self				confirm:					'one precedence relation exceeded ' , configuration first abs printString						, ' states. Do you want to continue?')				ifFalse: [ ^ self error ] ] ].	^ [ :s :bound :a :b | 	bound < 0		ifTrue: [ 			"unbounded strict precedence"			s = 0				ifTrue: [ {(s -> (s + 1) when: {a} do: warningBlock )} ]				ifFalse: [ 					{(s -> s when: {a. b}).					(s -> (s + 1) when: {a} do: warningBlock ).					(s -> (s - 1) when: {b} do: warningBlock )} ] ]		ifFalse: [ 			"bounded strict precedence"			s = bound				ifTrue: [ 					s = 0						ifTrue: [ {} ]						ifFalse: [ 							{(s -> s when: {a. b}).							(s -> (s - 1) when: {b})} ] ]				ifFalse: [ 					s = 0						ifTrue: [ {(s -> (s + 1) when: {a})} ]						ifFalse: [ 							{(s -> s when: {a. b}).							(s -> (s + 1) when: {a}).							(s -> (s - 1) when: {b})} ] ] ] ]! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 20:54'!strictSampling	"the sampling ticks in coincidence with the tick of the base clock immediately following a tick of the trigger clock, and then dies. The sampling tick is not allowed to be coincident with the trigger"		"DIES"	^[:s :trigger :baseClock :sampled |		s = 0 ifTrue: [ { s->s when: { baseClock }.			s->(s+1) when: { trigger } } ]		ifFalse: [ 			s = 1 ifTrue: [ 				{ s -> s when: { trigger }.				s ->(s+1) when: { baseClock. sampled } 	"DIES"}				 ]			ifFalse: [ 			{ s->s when: { trigger. baseClock }.			s->s when: { trigger }.			s->s when: { baseClock } } ]]	]! !!ClockKernelLibrary class methodsFor: 'ccsl - relations - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!subclocking 	^[:s :a :b | { s -> s when: { b }.			s -> s when: { a. b } } ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!supremum	^[ :s :a :b :c |	s = 0 		ifTrue: [ 			{ s->s when: { a. b. c }.			s->(s+1) when: { a }.			s->(s-1) when: { b } } ]		ifFalse: [ 			s > 0 				ifTrue: [ 					{ s->s when: { a. b. c }.					s->(s+1) when: { a }.					s->(s-1) when: { b. c } } ]				ifFalse: [ 					{ s->s when: { a. b. c }.					s->(s+1) when: { a. c }.					s->(s-1) when: { b } } ] ] ].! !!ClockKernelLibrary class methodsFor: 'ccsl - expressions - sts' stamp: 'CiprianTeodorov 3/25/2014 19:33'!union	^[:s :a :b :c |		{ s->s when: { a. c }.		s->s when: { b. c }.		s->s when: { a. b. c } }	]	! !"ClockSystem-Lib-Kernel"!!ClockSystem methodsFor: '*ClockSystem-Composition' stamp: 'CiprianTeodorov 11/1/2013 19:53'!exploreModel	^ClockParallelComposition exploreModel: self! !!ClockAbstractSatisfiability methodsFor: 'public api' stamp: 'CiprianTeodorov 6/3/2014 20:51'!allSolutions: aConfiguration	^self subclassResponsibility ! !!ClockAbstractSatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!enabledTransitions		^ enabledTransitions! !!ClockAbstractSatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!enabledTransitions: anObject		enabledTransitions := anObject! !!ClockAbstractSatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!model		^ model! !!ClockAbstractSatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!model: anObject		model := anObject! !!ClockConfigurationGraph class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/8/2013 14:09'!system: aClockSystem	^self new		system: aClockSystem ! !!ClockConfigurationGraph methodsFor: 'adding' stamp: 'CiprianTeodorov 10/8/2013 14:02'!addTransition: aTransition	graph add: aTransition! !!ClockConfigurationGraph methodsFor: 'adding' stamp: 'CiprianTeodorov 4/29/2015 21:32'!at: aConfiguration add: aTransition	|adjSet|	adjSet := adjacencySet at: aConfiguration ifAbsentPut: [ Set new ].	adjSet add: aTransition.! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/16/2013 22:15'!configurations	^configurations! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/16/2013 22:14'!configurations: someConfigurations	configurations := someConfigurations! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 19:36'!graph	^ graph asOrderedCollection! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:05'!graph: anObject	graph := anObject! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 20:23'!initial	^ initial! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 20:23'!initial: anObject	initial := anObject! !!ClockConfigurationGraph methodsFor: 'initialization' stamp: 'CiprianTeodorov 4/29/2015 21:37'!initialize	super initialize.	graph := Set new.	configurations := Set new.	adjacencySet := IdentityDictionary new.! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:08'!system	^ system! !!ClockConfigurationGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/8/2013 14:08'!system: anObject	system := anObject! !!ClockCartesianProductExploration methodsFor: 'initialization' stamp: 'CiprianTeodorov 4/29/2015 23:12'!initialize	super initialize.	cartesianProductInstance := CartesianProduct instance.! !!ClockCartesianProductExploration methodsFor: 'exploration api' stamp: 'CiprianTeodorov 4/29/2015 23:12'!perform: activeAutomataAndFireable configuration: configuration withClocks: clockStates	| fireablePerAutomata nEIDX |	"from all the enabled transitions, select the fireable ones according to the current clockStates"	nEIDX := activeAutomataAndFireable first.	fireablePerAutomata := activeAutomataAndFireable second.		"Compute a cartesian product between the sets of fireable transitions per automata"	cartesianProductInstance 		cartesianProductIterative: fireablePerAutomata		do: [ :toFire | 			self				execute: toFire				configuration: configuration				notEmptyIdx: nEIDX				clockStates: clockStates ]! !!ClockParallelComposition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:43'!compositionClass	^ CompositionClass ifNil: [ CompositionClass := ClockCartesianProductExploration ] ifNotNil: [ CompositionClass ]! !!ClockParallelComposition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 13:22'!compositionClass: aClass	CompositionClass := aClass! !!ClockParallelComposition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 13:29'!defaultStrategy	^ thisContext receiver = ClockParallelComposition  		ifTrue: [ self compositionClass ]		ifFalse: [ thisContext receiver ]! !!ClockParallelComposition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2013 19:54'!exploreModel: aClockSystem	^ (self model: aClockSystem) exploreModel! !!ClockParallelComposition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2013 19:54'!model: aClockSystem	^ self defaultStrategy new model: aClockSystem! !!ClockParallelComposition methodsFor: 'exploration api' stamp: 'CiprianTeodorov 3/31/2014 00:51'!atEnd	^toSee isEmpty! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!automata	^automata! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 6/3/2014 21:16'!clockAssignmentsIn: aConfiguration transitions: enabledTransitions	^ self satSolver		enabledTransitions: enabledTransitions;		allSolutions: aConfiguration! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:49'!clocks	^clocks! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 21:34'!defaultSolver	| solverClass |	solverClass := Smalltalk		at: #ClockTristateSatisfiability		ifAbsent: [ 			self error: 'Tristate solver class not found'.			^ nil ].	^ solverClass new model: self! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 5/1/2015 15:55'!execute: transitions configuration: configuration notEmptyIdx: notEmptyIdx clockStates: clockStates	| newConfig |	newConfig := configuration deepCopy.	transitions		withIndexDo: [ :transition :nEIDX | 			| aidx |			aidx := notEmptyIdx at: nEIDX.				"advance to the new state with the transition"			(automata at: aidx) do: transition withState: (newConfig at: aidx) ].	(known includes: newConfig)		ifFalse: [ 			known add: newConfig.			toSee addLast: newConfig ].	"graph at: configuration add: (newConfig -> (self tickingClocks: clockStates))."	graph addTransition: (configuration -> newConfig when: (self tickingClocks: clockStates))! !!ClockParallelComposition methodsFor: 'exploration api' stamp: 'CiprianTeodorov 6/3/2014 18:23'!exploreModel	self initializeExploration.	[ self atEnd ] whileFalse: [ self next ].	graph configurations: known.	^ graph! !!ClockParallelComposition methodsFor: 'exploration api' stamp: 'CiprianTeodorov 6/3/2014 20:32'!filterClockAssignments: clockAssignmentSet	^clockAssignmentSet! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 6/3/2014 19:54'!fireable: transitionsPerAutomaton withClocks: clockStates	| fireablePerAutomata notEmptyIdx |	"from all the enabled transitions, select the fireable ones according to the current clockStates"	fireablePerAutomata := OrderedCollection new: automata size.		notEmptyIdx := OrderedCollection new.	transitionsPerAutomaton		withIndexDo: [ :enabledTransitions :aidx |			| fireable |			fireable := enabledTransitions select: [ :transition | transition isFireableIn: (automata at: aidx) with:  clockStates ].			fireable isEmpty				ifFalse: [ 					notEmptyIdx add: aidx.					fireablePerAutomata add: fireable ] ].	^{notEmptyIdx. fireablePerAutomata}! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 19:38'!graph	^ graph! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 11/1/2013 19:39'!initialConfiguration	^ (Array new: automata size streamContents: [ :stream | automata do: [ :each | stream nextPut: each startState ] ])! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 5/29/2014 09:11'!initializeExploration	|initialConfiguration|	graph := ClockConfigurationGraph system: model.	clocks := model clocks asOrderedCollection.	clocks doWithIndex: [ :each :idx | each index: idx ].	automata := model unconstrainedClockAutomata, model relations.	initialConfiguration := self initialConfiguration.	known := Set with: initialConfiguration.	toSee := OrderedCollection with: initialConfiguration.	graph initial: initialConfiguration.! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 19:38'!model	^ model! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2013 19:38'!model: anObject	model := anObject! !!ClockParallelComposition methodsFor: 'exploration api' stamp: 'CiprianTeodorov 10/28/2015 22:23'!next	| configuration transitionsPerAutomaton assignments |	configuration := toSee removeFirst.	transitionsPerAutomaton := Array new: automata size withAll: Array empty. "self halt."	assignments := self clockAssignmentsIn: configuration transitions: transitionsPerAutomaton.	assignments := self filterClockAssignments: assignments.	assignments		do: [ :clockValuation | "			(clockValuation reject: [ :clockState | clockState = Tristate notick ])				ifNotEmpty: [ "					| activeAutomataAndFireable |					"from all the enabled transitions, select the fireable ones according to the current clockStates"					activeAutomataAndFireable := self fireable: transitionsPerAutomaton withClocks: clockValuation.					activeAutomataAndFireable second						ifNotEmpty: [ 							"execute the fireable transitions"							self perform: activeAutomataAndFireable configuration: configuration withClocks: clockValuation ] ] "]"! !!ClockParallelComposition methodsFor: 'exploration api' stamp: 'CiprianTeodorov 6/3/2014 20:11'!perform: activeAutomataAndFireable configuration: configuration withClocks: clockStates	^self subclassResponsibility! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 21:15'!satSolver	^ satSolver ifNil: [ satSolver := self defaultSolver ] ifNotNil: [ satSolver ]! !!ClockParallelComposition methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 21:06'!satSolver: aSolver	satSolver := aSolver! !!ClockParallelComposition methodsFor: 'private' stamp: 'CiprianTeodorov 11/1/2013 19:48'!tickingClocks: clockStates	| clks |	clks := OrderedCollection new.	clockStates		withIndexDo: [ :state :idx | 			state = Tristate tick				ifTrue: [ clks add: (clocks at: idx) ] ].	^ clks! !"ClockSystem-Composition"!!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:06'!defaultStrategy	^ self simulationClass! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:01'!simulate: aClockSystem 	^self simulate: aClockSystem steps: nil! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:01'!simulate: system heuristic: aHeuristicSymbol	^self simulate: system heuristic: aHeuristicSymbol steps: nil! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:01'!simulate: system heuristic: heuristicSymbol steps: steps	 ^self defaultStrategy simulate: system heuristic: heuristicSymbol steps: steps! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:01'!simulate: aClockSystem steps: aNumber	^self simulate: aClockSystem heuristic: nil steps: aNumber! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:44'!simulationClass	^SimulationClass ifNil: [ SimulationClass := ClockSimulation ] ifNotNil: [ SimulationClass ]! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:01'!simulationClass: aClass	SimulationClass := aClass! !!ClockAbstractSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:37'!simulationSettingsOn: aBuilder	<systemsettings>	<clockSystem>	(aBuilder pickOne: #simulationClass)		parent: #ClockSystem;		target: ClockAbstractSimulation;		label: 'Default Simulation Class';		domainValues:				({(Smalltalk at: #ClockSimulation).					(Smalltalk at: #ClockBDDSimulation)} reject: #isNil);		default: (Smalltalk at: #ClockSimulation).! !!ClockAbstractSimulation methodsFor: 'exploration api' stamp: 'CiprianTeodorov 11/1/2015 14:00'!atEnd	^toSee isEmpty or: [ steps > 0 and: [ steps < simulatedInstants ] ]! !!ClockAbstractSimulation methodsFor: 'exploration api' stamp: 'CiprianTeodorov 11/1/2015 14:00'!filterClockAssignments: clockAssignmentSet	| clockValuation | 	clockValuation := clockAssignmentSet size > 1		ifTrue: [ 			Array with: (self runHeuristicOn: clockAssignmentSet) ]		ifFalse: [ 			clockAssignmentSet				ifEmpty: [ 					#()					 ]				ifNotEmpty: [ Array with: clockAssignmentSet first ] ].	^ clockValuation ! !!ClockAbstractSimulation methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2015 14:00'!heuristic: aHeuristicSymbol	heuristic := aHeuristicSymbol.	(heuristic endsWith: ':') ifFalse: [ heuristic := heuristic, ':' ].! !!ClockAbstractSimulation methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/1/2015 14:00'!initialize	super initialize.	steps := -1.	simulatedInstants := 1.! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!maximal: aSolution	| max maxidx |	max := 0.	aSolution		withIndexDo: [ :each :idx | 			| v |			v := each				inject: 0				into: [ :sum :e | 					e = Tristate tick						ifTrue: [ sum + 1 ]						ifFalse: [ sum ] ].			v > max				ifTrue: [ 					max := v.					maxidx := idx ] ].	^ aSolution at: maxidx! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!minimal: aSolution	| min minidx |	min := aSolution first size + 1.	aSolution		withIndexDo: [ :each :idx | 			| v |			v := each				inject: 0				into: [ :sum :e | 					e = Tristate tick						ifTrue: [ sum + 1 ]						ifFalse: [ sum ] ].			"exclude the points were we just do nothing"			(v > 0 and: [ v < min ])				ifTrue: [ 					min := v.					minidx := idx ] ].	^ aSolution at: minidx! !!ClockAbstractSimulation methodsFor: 'exploration api' stamp: 'CiprianTeodorov 11/1/2015 14:00'!next	super next.	simulatedInstants := simulatedInstants + 1.	"Transcript show: 'step ', simulatedInstants printString; cr."! !!ClockAbstractSimulation methodsFor: 'exploration api' stamp: 'CiprianTeodorov 11/1/2015 14:00'!perform: activeAutomataAndFireable configuration: configuration withClocks: clockStates	| fireablePerAutomata nEIDX toFire |	nEIDX := activeAutomataAndFireable first.	fireablePerAutomata := activeAutomataAndFireable second.		"get the first transition combination possible"	toFire := fireablePerAutomata collect: [ :each | each first ].	self		execute: toFire		configuration: configuration		notEmptyIdx: nEIDX		clockStates: clockStates! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!randomAllowNothing: aSolution	"select one clockAssignment at random. Without removing the steps not generating a new configuration we stop here"		^aSolution atRandom.! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!randomCasual: aSolution	"select one clock c at random, then get an assignment that containts c, all its required clock, no other clock"	<TODO>	^self shouldBeImplemented ! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!randomSAT: aSolution	"select one clockAssignment at random, pick another one if we found one that does nothing.	note that in a given solution we cannot have two assignment with notick allover.	hence we have at most two iteration of the following loop."		| assignment | 	[ 	assignment := aSolution atRandom.	(assignment reject: [ :clockState | clockState = Tristate notick ]) isEmpty ] whileTrue.	^ assignment! !!ClockAbstractSimulation methodsFor: 'heuristics' stamp: 'CiprianTeodorov 11/1/2015 14:00'!runHeuristicOn: clockAssignmentSet	^ heuristic		ifNil: [ self randomSAT: clockAssignmentSet ]		ifNotNil: [ self perform: heuristic with: clockAssignmentSet ]! !!ClockAbstractSimulation methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2015 14:00'!steps		^ steps! !!ClockAbstractSimulation methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2015 14:00'!steps: anObject		steps := anObject! !!ClockBDDSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:03'!simulate: system heuristic: heuristicSymbol steps: steps	| solver simulator buddy trace |	simulator := self model: system.	steps ifNotNil: [ simulator steps: steps].	simulator heuristic: heuristicSymbol.	solver := ClockBuDDySatisfiability new model: simulator.	simulator satSolver: solver.	self inform: 'BDD Simulation started.'.	buddy := BddH uniqueInstance.	[ 	| bddvars |	buddy init: 1000 arg2: 100.	buddy setvarnum: system clocks size.	bddvars := (1 to: system clocks size) collect: [ :idx | buddy ithvar: idx - 1 ].	solver		buddy: buddy;		bddvars: bddvars.	trace := simulator exploreModel ]		ensure: [ buddy done ].	^ trace! !!ClockSimulation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 14:03'!simulate: system heuristic: heuristicSymbol steps: steps	|simulator|	simulator := (self model: system).	steps ifNotNil: [ simulator steps: steps ].	simulator heuristic: heuristicSymbol.	self inform: 'Tristate Simulation started.'.	^simulator exploreModel ! !"ClockSystem-Simulation"!!ClockRandomPolicy methodsFor: 'api' stamp: 'CiprianTeodorov 11/2/2013 15:56'!chooseFrom: aList	^aList atRandom: self generator! !!ClockRandomPolicy methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 15:57'!generator	^generator ifNil: [ generator := Random new ] ifNotNil: [ generator ]! !!ClockTraceExtractor class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2013 15:49'!from: aCCG policy: aPolicy	^ self new		ccg: aCCG;		policy: aPolicy! !!ClockTraceExtractor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 15:49'!ccg	^ ccg! !!ClockTraceExtractor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 15:49'!ccg: anObject	ccg := anObject! !!ClockTraceExtractor methodsFor: 'extracting' stamp: 'CiprianTeodorov 11/2/2013 16:36'!extract	| current hasNext |	current := ccg initial.	hasNext := true.	[ (known includes: current) or: [ hasNext not ] ]		whileFalse: [ 			| next fanout |			known add: current.			fanout := self fanout: current.			fanout isEmpty				ifFalse: [ 					next := policy chooseFrom: (self fanout: current).					trace add: next.					current := next to ]				ifTrue: [ hasNext := false ] ].	^ trace! !!ClockTraceExtractor methodsFor: 'extracting' stamp: 'CiprianTeodorov 11/2/2013 16:09'!fanout: aConfiguration	^ccg graph select: [ :each | each from = aConfiguration ]! !!ClockTraceExtractor methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/2/2013 16:04'!initialize	known := Set new.	trace := OrderedCollection new.! !!ClockTraceExtractor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 15:49'!policy	^ policy! !!ClockTraceExtractor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 15:49'!policy: anObject	policy := anObject! !!ClockTraceInterpreter class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:45'!defaultInstants	^DefaultInstants ifNil: [ DefaultInstants := 400 ] ifNotNil: [ DefaultInstants ]! !!ClockTraceInterpreter class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 18:00'!defaultInstants: aNumber	DefaultInstants := aNumber! !!ClockTraceInterpreter class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 18:26'!interpreterSettingOn: aBuilder	<systemsettings>	<clockSystem>	(aBuilder setting: #interpretedInstances)		parent: #ClockSystem;		label: 'Number of instants';		target: ClockTraceInterpreter;		getSelector: #defaultInstants;		setSelector: #defaultInstants:;		notInStyle;		default: 400;		description: 'The maximum number of steps used to intepret a trace'! !!ClockTraceInterpreter class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 18:01'!run: aTrace	^self run: aTrace for: self defaultInstants.! !!ClockTraceInterpreter class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2013 16:15'!run: aTrace for: numberInstants	^self new		traceInstance: aTrace;		instants: numberInstants;		run.! !!ClockTraceInterpreter methodsFor: 'running' stamp: 'CiprianTeodorov 11/2/2013 16:28'!atEnd	^(currentInstant <= instants and: [ self hasNext ]) not! !!ClockTraceInterpreter methodsFor: 'running' stamp: 'CiprianTeodorov 11/2/2013 16:24'!hasNext		nextElement := traceInstance detect: [ :each | each from = currentElement to ] ifNone: [ nil ].	^nextElement isNil not! !!ClockTraceInterpreter methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/2/2013 16:29'!initialize	result := OrderedCollection new.	currentInstant := 1.! !!ClockTraceInterpreter methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 16:13'!instants	^ instants! !!ClockTraceInterpreter methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 16:13'!instants: anObject	instants := anObject! !!ClockTraceInterpreter methodsFor: 'running' stamp: 'CiprianTeodorov 11/2/2013 16:26'!next	currentInstant := currentInstant + 1.	^currentElement := nextElement! !!ClockTraceInterpreter methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/21/2014 14:58'!result	^result! !!ClockTraceInterpreter methodsFor: 'running' stamp: 'CiprianTeodorov 11/2/2013 16:37'!run	currentElement := traceInstance first.	result add: currentElement.	currentInstant := currentInstant + 1.	[ self atEnd ]		whileFalse: [ 			self next.			result add: currentElement ]! !!ClockTraceInterpreter methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 16:14'!traceInstance	^ traceInstance! !!ClockTraceInterpreter methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/2/2013 16:14'!traceInstance: anObject	traceInstance := anObject! !"ClockSystem-TraceExtraction"!!TraConfigurationGraph2LTS commentStamp: 'CiprianTeodorov 10/20/2014 13:50' prior: 0!A TraConfigurationGraph2LTS transforms a ClockConfigurationGraph to a LTS representation. It abstracts away the states by replacing it with numberical ids. !!TraCCSL2Fiacre class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 13:03'!ccg: ccg in: aFile 	^self new ccg: ccg in: aFile! !!TraCCSL2Fiacre class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/21/2013 22:24'!system: ccslSystem in: aFile 	^self new system: ccslSystem in: aFile! !!TraCCSL2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 22:35'!ccg	^ ccg! !!TraCCSL2Fiacre methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 14:20'!ccg:  aCCG in: aFile	"remove the internal clocks from the result"	TraRemoveInternalClocks runOn: aCCG.	"generate the fiacre graph, that generates the diamonds for the concidences"	fcrGraph := TraConfigurationGraph2FiacreGraph runOn: aCCG.	"generate the fiacre file"	TraFiacreGraph2Fiacre fiacre: fcrGraph in: aFile.	ccg := aCCG.! !!TraCCSL2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 22:35'!fcrGraph	^ fcrGraph! !!TraCCSL2Fiacre methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/21/2013 22:37'!system: system in: aFile	"explore the CCSL model"	ccg := system exploreModel.	"remove the internal clocks from the result"	TraRemoveInternalClocks runOn: ccg.	"generate the fiacre graph, that generates the diamonds for the concidences"	fcrGraph := TraConfigurationGraph2FiacreGraph runOn: ccg.	"generate the fiacre file"	TraFiacreGraph2Fiacre fiacre: fcrGraph in: aFile! !!TraConfigurationGraph2FiacreGraph class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2013 22:50'!runOn: aCCG	^self new extractGraph: aCCG! !!TraConfigurationGraph2FiacreGraph methodsFor: 'initialize-release' stamp: 'CiprianTeodorov 10/20/2013 22:39'!expandCoincidentFirings: firings from: source to: target	| current |	firings		permutationsDo: [ :order | 			current := source.			order				do: [ :clock | 					| adj to isLast|					isLast := clock = order last.					adj := graph at: current ifAbsentPut: [ Set new ].					to := (adj						detect: [ :each | 							each value = clock								ifTrue: [ 									isLast										ifTrue: [ each key asString beginsWith: 's' ]										ifFalse: [ each key asString beginsWith: 'i' ] ]								ifFalse: [ false ] ]						ifNone: [ 							(isLast								ifTrue: [ target ]								ifFalse: [ self newState ]) -> nil ]) key.					adj add: to -> clock.					current := to ] ]! !!TraConfigurationGraph2FiacreGraph methodsFor: 'initialize-release' stamp: 'CiprianTeodorov 10/20/2014 10:32'!extractGraph: aCCG	configMap at: aCCG initial put: 's0'.	self registerConfigurations: aCCG configurations.	aCCG graph		do: [ :each | 			| adjacencies from to |			from := self stateOf: each from.			to := self stateOf: each to.			adjacencies := graph at: from ifAbsentPut: [ Set new ].			each vector size = 1				ifTrue: [ adjacencies add: to -> each vector first ]				ifFalse: [ 					each vector isEmpty ifTrue: [ adjacencies add: to->nil ]					ifFalse: [ 					self expandCoincidentFirings: each vector from: from to: to ] ] ].	^aCCG system clocks -> graph! !!TraConfigurationGraph2FiacreGraph methodsFor: 'initialize-release' stamp: 'CiprianTeodorov 10/20/2013 23:02'!initialize 	super initialize.	configMap := Dictionary new.	idx := 0.	graph := Dictionary new.! !!TraConfigurationGraph2FiacreGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2013 22:53'!newState	|state|	state := ('i',( idx := idx + 1) printString) asSymbol.	^state.! !!TraConfigurationGraph2FiacreGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 22:08'!registerConfigurations: configurations	configurations		do: [ :configuration | configMap at: configuration ifAbsentPut: [ ('s' , (idx := idx + 1) printString) asSymbol ] ]! !!TraConfigurationGraph2FiacreGraph methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2013 23:02'!stateOf: aConfig	^configMap at: aConfig ifAbsent: [ self error: 'configuration not registered' ]! !!TraConfigurationGraph2GML class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2013 23:07'!gml: agraph in: aFilename	self new gml: agraph in: aFilename ! !!TraConfigurationGraph2GML methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 12:09'!gml: aGraph in: aFileOrStream	(aFileOrStream isKindOf: Stream)		ifTrue: [ self toGML: aGraph value in: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self toGML: aGraph value in: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraConfigurationGraph2GML methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/21/2014 21:19'!toGML: aCCG in: aStream	| idx conf2id |	aStream		nextPutAll: 'graph [ directed 1 id 42 label "clock configuration graph"';		cr.	aCCG graph size = 0		ifFalse: [ 			aStream				tab;				nextPutAll:						'node [ id 0 label "0" graphics [ center [ x 82.0000 y 42.0000 ] w 16.0000 h 16.0000 type "circle" fill "#000000" ]]' ].	idx := 0.	conf2id := Dictionary new.	aCCG configurations		do: [ :each | 			conf2id at: each put: (idx := idx + 1).			aStream				tab;				nextPutAll: 'node [ id ' , (conf2id at: each) printString , ' label "' , (idx := idx + 1) printString , '" ]';				cr ].	aCCG graph size = 0		ifFalse: [ 			aStream				tab;				nextPutAll: 'edge [ source 0 target ' , (conf2id at: aCCG initial) printString , ' label ""]';				cr.			aCCG graph				do: [ :each | 					aStream						tab;						nextPutAll:								'edge [ source ' , (conf2id at: each from) printString , ' target ' , (conf2id at: each to) printString , ' label "'.					aStream nextPut: ${.					each vector do: [ :clock | aStream nextPutAll: clock clockName ] separatedBy: [aStream nextPut: $.].					aStream nextPut: $}.					aStream						nextPutAll: '"]';						cr ] ].	aStream nextPutAll: ']'! !!TraConfigurationGraph2LTS commentStamp: 'CiprianTeodorov 10/20/2014 13:50' prior: 35645804!A TraConfigurationGraph2LTS transforms a ClockConfigurationGraph to a LTS representation. It abstracts away the states by replacing it with numberical ids. !!TraConfigurationGraph2LTS class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 13:39'!runOn: aCCG 	^self new runOn: aCCG! !!TraConfigurationGraph2LTS methodsFor: 'api' stamp: 'CiprianTeodorov 10/20/2014 13:52'!runOn: aCCG	| ccg conf2id idx |	ccg := ClockConfigurationGraph new.	ccg system: aCCG system.	idx := 0.	conf2id := Dictionary new.	ccg initial: (conf2id at: aCCG initial put: idx).	ccg		configurations:			(aCCG configurations				collect: [ :each | 					| id |					id := conf2id at: each ifAbsentPut: (idx := idx + 1).					id ]).	ccg		graph:			(aCCG graph				collect: [ :transition | (conf2id at: transition from) -> (conf2id at: transition to) when: transition vector ]).	^ ccg! !!TraConfigurationGraph2MatrixMarket class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 16:53'!mtx: agraph in: aFilename	self new mtx: agraph in: aFilename ! !!TraConfigurationGraph2MatrixMarket methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 16:53'!mtx: aGraph in: aFileOrStream	(aFileOrStream isKindOf: Stream)		ifTrue: [ self toMTX: aGraph value in: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self toMTX: aGraph value in: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraConfigurationGraph2MatrixMarket methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 18:38'!toMTX: aCCG in: aStream	| idx conf2id |	aStream		nextPutAll: '%%MatrixMarket matrix coordinate pattern general';		cr.	aCCG graph size = 0		ifFalse: [ aStream nextPutAll: aCCG configurations size printString, ' ' , aCCG configurations size printString, ' ' , aCCG graph size printString; cr].	idx := 0.	conf2id := Dictionary new."	conf2id at: aCCG initial put: idx."	aCCG configurations do: [ :each | conf2id at: each ifAbsentPut: (idx := idx + 1) ].	aCCG graph		do: [ :each | 			aStream				nextPutAll: (conf2id at: each from) printString , ' ' , (conf2id at: each to) printString;				cr ]! !!TraFiacreGraph2Fiacre class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2013 23:15'!fiacre: agraph in: aFilename	self new fiacre: agraph in: aFilename ! !!TraFiacreGraph2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2013 23:17'!fcrGraph	^ fcrGraph! !!TraFiacreGraph2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2013 23:17'!fcrGraph: anObject	fcrGraph := anObject! !!TraFiacreGraph2Fiacre methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 12:08'!fiacre: aFcrGraph in: aFileOrStream	self fcrGraph: aFcrGraph.	(aFileOrStream isKindOf: Stream)		ifTrue: [ self printFiacreOn: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self printFiacreOn: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraFiacreGraph2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 21:48'!initialize	super initialize.	states := Set new.! !!TraFiacreGraph2Fiacre methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/26/2013 00:34'!printFiacreOn: aStream	| transitionStream | 	transitionStream := String new writeStream.	self printTransitionsOn: transitionStream.	self printProcessOn: aStream.	self printStateSetOn: aStream.	aStream		crtab;		nextPutAll: 'init to s0'.	aStream nextPutAll: transitionStream contents! !!TraFiacreGraph2Fiacre methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/21/2013 22:21'!printProcessOn: aStream	aStream nextPutAll: 'process ccsl ['.	(fcrGraph key asArray select: [ :clock | clock expression isNil ])		do: [ :clock | clock printNameOn: aStream ]		separatedBy: [ 			aStream				nextPut: $,;				space ].	aStream		nextPutAll: ' : out none] is';		cr! !!TraFiacreGraph2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 22:21'!printStateSetOn: aStream	aStream tab; nextPutAll: 'states '.	states		do: [ :s | aStream nextPutAll: s ]		separatedBy: [ 			aStream				nextPut: $,;				space ].	aStream cr! !!TraFiacreGraph2Fiacre methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/21/2013 22:22'!printTransitionsOn: aStream	fcrGraph value		keysAndValuesDo: [ :start :targets | 			states add: start.			aStream				crtab;				nextPutAll: 'from ' , start.			aStream crtab: 2.			targets size = 1				ifTrue: [ 					aStream						nextPutAll: targets anyOne value clockName , '; to ' , (states add: targets anyOne key);						crtab: 2 ]				ifFalse: [ 					aStream						nextPutAll: 'select';						crtab: 3.					targets						do: [ :target | 							aStream								nextPutAll: target value clockName , '; to ' , (states add: target key);								crtab: 2 ]						separatedBy: [ 							aStream								nextPutAll: '[]';								tab ].					aStream						nextPutAll: 'end select' ] ]! !!TraFiacreGraph2GML class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2013 21:41'!gml: agraph in: aFilename	self new gml: agraph in: aFilename ! !!TraFiacreGraph2GML methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 12:09'!gml: aGraph in: aFileOrStream	(aFileOrStream isKindOf: Stream)		ifTrue: [ self toGML: aGraph value in: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self toGML: aGraph value in: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraFiacreGraph2GML methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 12:26'!toGML: aGraph in: aStream	| nodes idx|	aStream		nextPutAll: 'graph [ directed 1 id 42 label "clock configuration graph -- fiacre"';		cr.	aGraph size = 0		ifFalse: [ 			aStream				tab;				nextPutAll:						'node [ id 0 label "0" graphics [ center [ x 82.0000 y 42.0000 ] w 16.0000 h 16.0000 type "circle" fill "#000000" ]]'].		nodes := Dictionary new.	idx := 0.	aGraph keys		do: [ :each | 			nodes at: each put: (idx := idx + 1).			aStream				crtab;				nextPutAll: 'node [ id ' , idx printString, ' label "' , each , '"]' ].	aGraph size = 0 ifFalse: [ 	aStream				tab;				nextPutAll: 'edge [ source 0 target ' , (nodes at: #s0) printString , ' label ""]';				cr]. 	aGraph		keysAndValuesDo: [ :source :destinations | 			destinations				do: [ :each | 					| target |					target := each key.					nodes at: target						ifAbsent: [ 							nodes at: target put: (idx := idx + 1).							aStream								crtab;								nextPutAll: 'node [ id ' , idx printString , ' label "' , target , '"]' ].					aStream						crtab;						nextPutAll:								'edge [ source ' , (nodes at: source) printString , ' target ' , (nodes at: target) printString , ' label "' , (each value ifNil: [ '' ] ifNotNil: [ each value clockName ]), '"]' ] ]! !!TraFiacreGraph2Lts class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/26/2013 13:14'!lts: agraph in: aFilename	self new lts: agraph in: aFilename ! !!TraFiacreGraph2Lts class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/26/2013 13:22'!lts: agraph prefix: prefix in: aFilename	self new 	prefix: prefix;	lts: agraph in: aFilename ! !!TraFiacreGraph2Lts methodsFor: 'initialization' stamp: 'CiprianTeodorov 10/26/2013 13:30'!initialize 	super initialize.	idx := -1.	states := Dictionary new.	nTransitions := 0.! !!TraFiacreGraph2Lts methodsFor: 'printing' stamp: 'CiprianTeodorov 10/26/2013 13:15'!lts: aFcrGraph in: aFileOrStream	fcrGraph := aFcrGraph.	(aFileOrStream isKindOf: Stream)		ifTrue: [ self printLtsOn: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self printLtsOn: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraFiacreGraph2Lts methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2013 13:22'!prefix: aprefix	prefix := aprefix! !!TraFiacreGraph2Lts methodsFor: 'printing' stamp: 'CiprianTeodorov 10/26/2013 13:31'!printLtsOn: aStream 	|transitionStream| 	transitionStream := String new writeStream.	self printTransitionsOn: transitionStream.	aStream nextPutAll: states size printString, ' ', nTransitions printString; cr.	self printStatesOn: aStream.	aStream 		nextPutAll: transitionStream contents ! !!TraFiacreGraph2Lts methodsFor: 'printing' stamp: 'CiprianTeodorov 3/29/2014 13:58'!printStatesOn: aStream	| sortedStates |	sortedStates := states associations asSortedCollection: [ :a :b | a value < b value ].	sortedStates do: [ :each | aStream nextPutAll: each key , ' ' ]! !!TraFiacreGraph2Lts methodsFor: 'printing' stamp: 'CiprianTeodorov 10/20/2014 10:33'!printTransitionsOn: aStream	fcrGraph value		keysAndValuesDo: [ :start :targets | 			| from to |			from := self stateIdOf: start.			targets				do: [ :target | 					nTransitions := nTransitions + 1.					to := self stateIdOf: target key.					aStream						cr;						nextPutAll: from printString , ' '.					target value						ifNotNil: [ aStream nextPutAll: (prefix ifNil: [ '' ] ifNotNil: [ prefix , ':' ]) , target value clockName ].					aStream nextPutAll: ' ' , to printString ] ]! !!TraFiacreGraph2Lts methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/28/2013 23:50'!stateIdOf: aStateName	^states at: aStateName ifAbsentPut: [ (aStateName copyFrom: 2 to: aStateName size) asInteger ]! !!TraFullGraph2LTS class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/30/2015 19:20'!lts: agraph in: aFilename	self new lts: agraph in: aFilename ! !!TraFullGraph2LTS class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/30/2015 19:20'!lts: agraph prefix: prefix in: aFilename	self new 	prefix: prefix;	lts: agraph in: aFilename ! !!TraFullGraph2LTS methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/30/2015 20:30'!clockIdOf: aClock	^clock2id  at: aClock ! !!TraFullGraph2LTS methodsFor: 'initialization' stamp: 'CiprianTeodorov 4/30/2015 20:43'!initialize 	super initialize.	state2id := Dictionary new.	clock2id := IdentityDictionary new.! !!TraFullGraph2LTS methodsFor: 'printing' stamp: 'CiprianTeodorov 4/30/2015 19:21'!lts: aCCGraph in: aFileOrStream	ccg := aCCGraph.	(aFileOrStream isKindOf: Stream)		ifTrue: [ self printLtsOn: aFileOrStream ]		ifFalse: [ 			| stream |			[ 			stream := FileStream newFileNamed: aFileOrStream.			self printLtsOn: stream ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!TraFullGraph2LTS methodsFor: 'printing' stamp: 'CiprianTeodorov 4/30/2015 20:56'!printClocksOn: aStream	| clocks |	clocks := ccg system clocks asArray.	"serialize the clock names"	clocks doWithIndex: [ :each :id | 		aStream nextPutAll: each clockName, ' '.		clock2id at: each put: (id-1). ].	aStream cr.! !!TraFullGraph2LTS methodsFor: 'printing' stamp: 'CiprianTeodorov 4/30/2015 20:47'!printLtsOn: aStream 		ccg system clocks size printOn: aStream.	aStream space.	ccg configurations size printOn: aStream.	aStream space.	ccg graph size printOn: aStream.	aStream space.	(ccg initial flatCollect: [:each | each]) size printOn: aStream.	aStream cr.		self printClocksOn: aStream.	self printStatesOn: aStream.	self printTransitionsOn: aStream.! !!TraFullGraph2LTS methodsFor: 'printing' stamp: 'CiprianTeodorov 4/30/2015 20:56'!printStatesOn: aStream	| states |	states := ccg configurations asArray.	"serialize state names"	states doWithIndex: [ :each :id | 		aStream nextPutAll: 's', id printString, ' '.		state2id at: each put: (id-1). ].	"serialize the id of the initial state"	aStream cr; nextPutAll: (state2id at: ccg initial) printString; cr.	"serialize the contents of all configurations"	states do: [ :each | 		(each flatCollect: [:v |v ]) do:[:e | e printOn: aStream. aStream space. ].		aStream cr.].! !!TraFullGraph2LTS methodsFor: 'printing' stamp: 'CiprianTeodorov 12/3/2015 15:59'!printTransitionsOn: aStream	ccg graph		do: [ :transition | 			(self stateIdOf: transition from) printOn: aStream.			aStream space.			(transition vector collect: [ :each | (self clockIdOf: each) ]) do: [:each | aStream print: each ] separatedBy: [ aStream nextPut: $  ]. 			aStream space.			(self stateIdOf: transition to) printOn: aStream.			aStream cr. ]! !!TraFullGraph2LTS methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/30/2015 20:24'!stateIdOf: aState	^state2id at: aState ! !!TraMapTrace2ConfigurationGraphIndices class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 17:54'!mapTrace: aTrace onGraph: agraph indicesIn: aFilename	self new index: aTrace on: agraph in: aFilename ! !!TraMapTrace2ConfigurationGraphIndices methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 18:50'!index: aTrace on: aGraph in: aFile	| stream |	[ 	stream := FileStream newFileNamed: aFile , '_all.mtx'.	self toMTX: aGraph value in: stream ]		ensure: [ stream ifNotNil: [ stream close ] ].	[ 	stream := FileStream newFileNamed: aFile , '_trace.mtx'.	self toIndices: aTrace on: aGraph value in: stream ]		ensure: [ stream ifNotNil: [ stream close ] ]! !!TraMapTrace2ConfigurationGraphIndices methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 18:46'!toIndices: aTrace on: aCCG in: aStream		aStream		nextPutAll: '%%MatrixMarket matrix coordinate pattern general';		cr.	aCCG graph size = 0		ifFalse: [ aStream nextPutAll: aTrace configurations size printString, ' ' , aTrace configurations size printString, ' ' , aTrace graph size printString; cr].		aTrace graph		do: [ :each | 			aStream				nextPutAll: (conf2id at: each from) printString , ' ' , (conf2id at: each to) printString;				cr ]! !!TraMapTrace2ConfigurationGraphIndices methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/22/2014 18:45'!toMTX: aCCG in: aStream	| idx  |	aStream		nextPutAll: '%%MatrixMarket matrix coordinate pattern general';		cr.	aCCG graph size = 0		ifFalse: [ aStream nextPutAll: aCCG configurations size printString, ' ' , aCCG configurations size printString, ' ' , aCCG graph size printString; cr].	idx := 0.	conf2id := Dictionary new."	conf2id at: aCCG initial put: idx."	aCCG configurations do: [ :each | conf2id at: each ifAbsentPut: (idx := idx + 1) ].	aCCG graph		do: [ :each | 			aStream				nextPutAll: (conf2id at: each from) printString , ' ' , (conf2id at: each to) printString;				cr ]! !!TraRemoveInternalClocks class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2013 21:38'!runOn: aCCG 	^self new runOn: aCCG! !!TraRemoveInternalClocks methodsFor: 'api' stamp: 'CiprianTeodorov 2/27/2014 22:05'!runOn: aCCG	aCCG graph do:[:each | 		each vector: (each vector reject: [ :clock | (clock expression isNil not) or: [ clock internal ] ])	].! !!TraRemoveInternalEvents class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 14:19'!runOn: aCCG 	^self new runOn: aCCG! !!TraRemoveInternalEvents methodsFor: 'api' stamp: 'CiprianTeodorov 10/20/2014 15:16'!fanin: aState in: aSetOfTransitions	^aSetOfTransitions select: [ :transition | transition to = aState ]! !!TraRemoveInternalEvents methodsFor: 'api' stamp: 'CiprianTeodorov 10/20/2014 15:10'!fanout: aState in: aSetOfTransitions	^aSetOfTransitions select: [ :transition | transition from = aState ]! !!TraRemoveInternalEvents methodsFor: 'api' stamp: 'CiprianTeodorov 10/20/2014 17:20'!runOn: aCCG	| graph hasEmpty current configurations|	hasEmpty := true.	current := aCCG graph.	[ hasEmpty ]		whileTrue: [ 			hasEmpty := false.			graph := OrderedCollection new.			current				do: [ :transition | 					transition vector isEmpty						ifTrue: [ 							hasEmpty := true.							(self fanout: transition to in: current)								do: [ :fanout | 									| tran |									graph add: (tran := transition from -> fanout to when: fanout vector) ] ]						ifFalse: [ graph add: transition ] ].			current := graph ].	graph := OrderedCollection new.	configurations := Set new.	current asSet		do: [ :transition | 			transition from = aCCG initial				ifFalse: [ (self fanin: transition from in: current) ifNotEmpty: [ graph add: transition.						configurations add: transition from.						configurations add: transition to ] ]				ifTrue: [ graph add: transition.					configurations add: transition from.					configurations add: transition to ] ].	aCCG configurations: configurations.	aCCG graph: graph! !"ClockSystem-Transformations"!!Dontcare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/21/2014 14:19'!& a	^a! !!Dontcare methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 18:25'!printOn: aStream	aStream nextPut: $-! !!Notick methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/21/2014 14:21'!& a	(a == Tristate dontcare or: [ self == a ]) ifTrue: [ ^self ].	^nil! !!Notick methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 18:25'!printOn: aStream	aStream nextPut: $0! !!Tick methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/21/2014 14:21'!& a	(a == Tristate dontcare or: [ self == a ]) ifTrue: [ ^self ].	^nil! !!Tick methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 18:25'!printOn: aStream	aStream nextPut: $1! !!Tristate class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 17:07'!dontcare	^dontcareI isNil ifTrue: [ dontcareI := Dontcare new ] ifFalse: [ dontcareI ]! !!Tristate class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 17:06'!notick	^notickI isNil ifTrue: [ notickI := Notick new ] ifFalse: [ notickI ]! !!Tristate class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 17:06'!tick	^tickI isNil ifTrue: [ tickI := Tick new ] ifFalse: [ tickI ]! !!Tristate methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 21:24'!& a	^self subclassResponsibility ! !"ClockSystem-Tristate"!!ClockCartesianProductBDDExploration commentStamp: 'CiprianTeodorov 6/3/2014 21:12' prior: 0!A ClockCartesianProductBDDExploration is xxxxxxxxx.one variable per clocktransition with only one clock => "and" between the negation of stalled clocks onlytransitons with coincident clocks => "(AND(ci) or AND(not ci))" between all clocks ci, and the negation of all staled clocks"and" between automata "or" between transitions of the same automata (from the same state)Instance Variables	bddvars:		<Object>	buddy:		<Object>bddvars	- xxxxxbuddy	- xxxxx!!ClockBuDDySatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:53'!allSolutions: aConfiguration	| solutions stateBDD |	"it should be possible to initialize only once the BDD package and the vars used.	then each time this function is called we create a new bdd using the same variables.	if you do that don't forget to call buddy done at the end of the exploration"	solutions := OrderedCollection new.	[ 	stateBDD := buddy true.	model automata		withIndexDo: [ :automaton :idx | 			| transitions |			transitions := automaton transitionsInState: (aConfiguration at: idx).			stateBDD := buddy addref: (buddy and: stateBDD arg2: (self bdd4automaton: automaton transitions: transitions)).			enabledTransitions at: idx put: transitions ].	buddy allsat: stateBDD handler: (self handler: solutions) ]		ensure: [ buddy delref: stateBDD ].	^ solutions! !!ClockBuDDySatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:54'!bdd4automaton: automaton transitions: transitions	^ transitions		inject: buddy false		into: [ :bdd :transition | buddy addref: (buddy or: bdd arg2: (self constraintFor: transition inAutomaton: automaton)) ]! !!ClockBuDDySatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:55'!bddvars		^ bddvars! !!ClockBuDDySatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:55'!bddvars: anObject		bddvars := anObject! !!ClockBuDDySatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:55'!buddy		^ buddy! !!ClockBuDDySatisfiability methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/3/2014 20:55'!buddy: anObject		buddy := anObject! !!ClockBuDDySatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:55'!constraintFor: aTransition inAutomaton: automaton	| localBDD stalled |	"put notick for clocks not allowed to tick"	stalled := automaton alphabet \ aTransition vector.	localBDD := stalled		inject: buddy true		into: [ :bdd :stalledClock | buddy addref: (buddy and: bdd arg2: (buddy not: (bddvars at: stalledClock index))) ].	automaton isAlways		ifTrue: [ 			"The always clock ticks no matter what"			"However the transition has to have a syncronization vector. 			if it does not then the clock is dead. This is how the forceOne is implemented"			aTransition vector size = 1				ifTrue: [ localBDD := buddy addref: (buddy and: localBDD arg2: (bddvars at: aTransition vector anyOne index)) ] ]		ifFalse: [ 			aTransition vector size > 1				ifTrue: [ 					| coincidenceBDDs |					coincidenceBDDs := aTransition vector						inject: {nil. nil}						into: [ :bdd :clock | 							| bddvar |							bddvar := bddvars at: clock index.							bdd first								ifNil: [ 									{ bddvar. (buddy not: bddvar) } ]								ifNotNil: [ 									{(buddy addref: (buddy and: bdd first arg2: bddvar)).									(buddy addref: (buddy and: bdd second arg2: (buddy not: bddvar)))} ] ].					localBDD := buddy						addref: (buddy and: localBDD arg2: (buddy or: coincidenceBDDs first arg2: coincidenceBDDs second)) ] ].	^ localBDD! !!ClockBuDDySatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/21/2014 20:45'!handler: solutions	^ Bddallsathandler		on: [ :varset :size | 			| arr sols tick notick dontcare|			tick := Tristate tick. notick := Tristate notick. dontcare := Tristate dontcare.			arr := Array new: model clocks size.			sols := OrderedCollection with: arr.			1 to: size do: [ :idx | 				| value state trueS falseS |				value := varset byteAt: idx - 1.				value < 0					ifTrue: [ state := dontcare ]					ifFalse: [ 						value = 0							ifTrue: [ state := notick ]							ifFalse: [ state := tick ] ].				state == dontcare					ifTrue: [ "expand dont cares in true/false branches"						trueS := sols.						falseS := sols collect: [ :each | each copy ].						trueS do: [ :each | each at: idx put: tick ].						falseS do: [ :each | each at: idx put: notick ].						sols := trueS , falseS ]					ifFalse: [ sols do: [ :each | each at: idx put: state ] ]	"arr at: idx put: state." ].			solutions addAll: sols	"arr asArray" ]! !!ClockCartesianProductBDDExploration commentStamp: 'CiprianTeodorov 6/3/2014 21:12' prior: 35670004!A ClockCartesianProductBDDExploration is xxxxxxxxx.one variable per clocktransition with only one clock => "and" between the negation of stalled clocks onlytransitons with coincident clocks => "(AND(ci) or AND(not ci))" between all clocks ci, and the negation of all staled clocks"and" between automata "or" between transitions of the same automata (from the same state)Instance Variables	bddvars:		<Object>	buddy:		<Object>bddvars	- xxxxxbuddy	- xxxxx!!ClockCartesianProductBDDExploration methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 21:15'!defaultSolver	^ ClockBuDDySatisfiability new		model: self;		buddy: buddy;		bddvars: bddvars! !!ClockCartesianProductBDDExploration methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 18:16'!exploreModel	buddy := BddH uniqueInstance.	self initializeExploration.	[ 	buddy init: 1000 arg2: 100.	buddy setvarnum: clocks size.	bddvars := (1 to: clocks size) collect: [ :idx | buddy ithvar: idx - 1 ].	[ self atEnd ] whileFalse: [ self next ].	graph configurations: known ]		ensure: [ buddy done ].	^ graph! !"ClockSystem-BDD-Composition"!!TristateArray methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/16/2013 18:20'!tristateAnd: v	|new|	new := TristateArray new: self size.	self withIndexDo: [ :each :idx |		(new at: idx put: each & (v at: idx)) ifNil: [ ^nil ].	].^new! !!ClockTristateSatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:45'!allSolutions: aConfiguration	| solutions |	solutions := OrderedCollection new.	model automata		withIndexDo: [ :automaton :idx | 			| t |			t := automaton transitionsInState: (aConfiguration at: idx).			solutions := (t				inject: Set new				into: [ :union :transition | 					union addAll: (self constrain: solutions with: transition in: automaton).					union ]) asOrderedCollection.			enabledTransitions at: idx put: t ].	^ solutions! !!ClockTristateSatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:46'!constrain: solutions with: aTransition in: automaton	| stalled localC tick notick localSolutions |	localC := TristateArray new: model clocks size withAll: Tristate dontcare.		"put notick for clocks not allowed to tick"	stalled := automaton alphabet \ aTransition vector.	stalled do: [ :clock | localC at: clock index put: Tristate notick ].	automaton isAlways		ifTrue: [ 			"The always clock ticks no matter what"			"However the transition has to have a syncronization vector. 			if it does not then the clock is dead. This is how the forceOne is implemented"			aTransition vector size = 1 ifTrue: [			localC at: (aTransition vector anyOne index) put: Tristate tick].			localSolutions := {localC} ]		ifFalse: [ 			tick := localC.			notick := localC copy.			aTransition vector				do: [ :clock | 					| clockIdx |					clockIdx := clock index.					tick at: clockIdx put: Tristate tick.					notick at: clockIdx put: Tristate notick ].			localSolutions := { tick. notick } ].	^ solutions ifEmpty: [ localSolutions ] ifNotEmpty: [ self tristateAnd: localSolutions with: solutions ]! !!ClockTristateSatisfiability methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 6/3/2014 20:46'!tristateAnd: aTristateArray with: anotherTristateArray	| solution |	solution := OrderedCollection new: (aTristateArray size max: anotherTristateArray size).	aTristateArray		do: [ :first | 			anotherTristateArray				do: [ :second | 					| current |					(current := first tristateAnd: second) "ifNil: [ first inspect. second inspect. ] "ifNotNil: [ solution add: current ] ] ].	^ solution! !"ClockSystem-Tristate-Composition"!!ExampleSDF commentStamp: 'CiprianTeodorov 6/8/2014 14:15' prior: 0!An ExampleSDF is an implementation of SDF in CCSL as described in: The Clock Constraint Specification Language for building timed causality models. Application to Synchronous Data Flow graphs.http://dx.doi.org/10.1007/s11334-009-0109-0 Instance Variables	idx:		<Object>	system:		<Object>idx	- xxxxxsystem	- xxxxx!!ExampleSDF commentStamp: 'CiprianTeodorov 6/8/2014 14:15' prior: 35678534!An ExampleSDF is an implementation of SDF in CCSL as described in: The Clock Constraint Specification Language for building timed causality models. Application to Synchronous Data Flow graphs.http://dx.doi.org/10.1007/s11334-009-0109-0 Instance Variables	idx:		<Object>	system:		<Object>idx	- xxxxxsystem	- xxxxx!!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/7/2014 23:12'!example1	|sys a b c|	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	^(self on: sys)		arc: 0 source: a outRate: 1 target: b inRate: 2;		arc: 0 source: b outRate: 2 target: c inRate: 1;		arc: 2 source: c outRate: 1 target: b inRate: 2.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/10/2014 15:54'!example1moc	| sys |	sys := ClockSystem named: 'sdf'.	^(self on: sys)		actor: #A;		actor: #B;		actor: #C;		arc: 0			source: sys writeA			outRate: 1			target: sys readB			inRate: 2			capacity: -1;		arc: 0			source: sys writeB			outRate: 2			target: sys readC			inRate: 1			capacity: -1;		arc: 2			source: sys writeC			outRate: 1			target: sys readB			inRate: 2			capacity: -1.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/10/2014 16:07'!example1moc1	| sys  rb rc wa wb wc |	sys := ClockSystem named: 'sdf'.	rb := sys clock: #readB.	rc := sys clock: #readC.	wa := sys clock: #A.	wb := sys clock: #B.	wc := sys clock: #C.	rb === wb.	rc === wc.	^(self on: sys)		arc: 0			source: wa			outRate: 1			target: rb			inRate: 2			capacity: -1;		arc: 0			source: wb			outRate: 2			target: rc			inRate: 1			capacity: -1;		arc: 2			source: wc			outRate: 1			target: rb			inRate: 2			capacity: -1.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/10/2014 16:39'!example1moc2	| sys a b c |	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	^(self on: sys)		arc: 0			source: a			outRate: 1			target: b			inRate: 2			capacity: -1;		arc: 0			source: b			outRate: 2			target: c			inRate: 1			capacity: -1;		arc: 2			source: c			outRate: 1			target: b			inRate: 2			capacity: -1.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/20/2014 18:57'!example1moc3	|sys a b c|	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 2 capacity: -1;		edgeFrom: b to: c outRate: 2 initial: 0 inRate: 1 capacity: -1;		edgeFrom: c to: b outRate: 1 initial: 2 inRate: 2 capacity: -1.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/21/2014 21:46'!example1moc4	|sys a b c|	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 2 capacity: 1;		edgeFrom: b to: c outRate: 2 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: b outRate: 1 initial: 2 inRate: 2 capacity: 1.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/8/2014 15:15'!example2moc	| sys |	sys := ClockSystem named: 'sdf'.	^(self on: sys)		actor: #A;		actor: #B;		actor: #C;		arc: 0			source: sys writeA			outRate: 2			target: sys readB			inRate: 3			capacity: 4;		arc: 0			source: sys writeB			outRate: 1			target: sys readC			inRate: 2			capacity: 2.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 6/8/2014 15:18'!example2moc1	| sys a b c |	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	^ (self on: sys)		arc: 0			source: a			outRate: 2			target: b			inRate: 3			capacity: 4;		arc: 0			source: b			outRate: 1			target: c			inRate: 2			capacity: 2! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/9/2014 13:06'!example3moc	|sys a b c d|	sys := ClockSystem named: 'sdf'.	a := sys clock: #A.	b := sys clock: #B.	c := sys clock: #C.	d := sys clock: #D.	^(self on: sys)		edgeFrom: a to: b outRate: 2 initial: 0 inRate: 4 capacity: 4;		edgeFrom: b to: c outRate: 1 initial: 0 inRate: 2 capacity: 2;		edgeFrom: c to: d outRate: 2 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b to: d outRate: 2 initial: 0 inRate: 2 capacity: 4;		edgeFrom: d to: a outRate: 2 initial: 4 inRate: 1 capacity: 4.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/15/2014 20:17'!example4mocFFT4Date14	|sys a b c d e f|	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #AVG.	e := sys clock: #'Threshold'.	f  := sys clock: #Display2.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: d to: c outRate: 8 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: e outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: e to: f outRate: 1 initial: 0 inRate: 1 capacity: 1.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/15/2014 20:36'!example4mocFFT4Date14_16	|sys a b c d e f|	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #AVG.	e := sys clock: #'Threshold'.	f  := sys clock: #Display2.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: d to: c outRate: 8 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: e outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: e to: f outRate: 1 initial: 0 inRate: 1 capacity: 1.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:26'!example4mocFFT4Date14_16_3	|sys a b c   |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 2 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:27'!example4mocFFT4Date14_16_4	|sys a b c d  |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:30'!example4mocFFT4Date14_16_5	|sys a b c d e |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:32'!example4mocFFT4Date14_16_6	|sys a b c d e f |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/22/2014 16:32'!example4mocFFT4Date14_16_6_platform114	|sys a b c d e f   |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.		sys allExclusive: { c. d. e. f}.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/22/2014 16:31'!example4mocFFT4Date14_16_6_platform2112	|sys a b c d e f   |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.		sys allExclusive: { a. b}.	sys allExclusive: { d. e.}.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/22/2014 20:36'!example4mocFFT4Date14_16_6_platform24	|sys a b c d e f   |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.		sys allExclusive: { a. b }.	sys allExclusive: { c. d. e. f}.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:43'!example4mocFFT4Date14_16_6_platformDualCore	|sys a b c d e f mem  |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.	mem := sys clock: #MEM.		sys allExclusive: { a. b. c}.	sys allExclusive: { d. e. f }.	a ~ mem delayFor: 1.	b ~ mem delayFor: 1.	c ~ mem delayFor: 2.	d ~ mem delayFor: 1.	e ~ mem delayFor: 1.	f ~ mem delayFor: 1. 		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:45'!example4mocFFT4Date14_16_6_platformDualCoreMem	|sys a b c d e f mem  |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.	mem := sys clock: #MEM.		sys allExclusive: { a. b. c}.	sys allExclusive: { d. e. f }.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/17/2014 17:34'!example4mocFFT4Date14_16_6_platformSeq	|sys a b c d e f |	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #Threshold.	e := sys clock: #Display2.	f := sys clock: #AVG.		sys allExclusive: { a. b. c. d. e. f }.		^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: c to: d outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: d to: e outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: c to: f outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: f to: c outRate: 8 initial: 0 inRate: 16 capacity: 16.! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 7/15/2014 20:37'!example4mocFFT4Date14_32	|sys a b c d e f|	sys := ClockSystem named: 'fft'.	a := sys clock: #'Signal Provider'.	b := sys clock: #Display1.	c := sys clock: #NFFT.	d := sys clock: #AVG.	e := sys clock: #'Threshold'.	f  := sys clock: #Display2.	^(self on: sys)		edgeFrom: a to: b outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: a to: c outRate: 2 initial: 0 inRate: 32 capacity: 32;		edgeFrom: c to: d outRate: 32 initial: 32 inRate: 16 capacity: 32;		edgeFrom: d to: c outRate: 16 initial: 0 inRate: 32 capacity: 32;		edgeFrom: c to: e outRate: 32 initial: 0 inRate: 8 capacity: 32;		edgeFrom: e to: f outRate: 1 initial: 0 inRate: 1 capacity: 1.		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 10/17/2014 09:09'!example5Butterfly	|sys source b1s1 b2s1 b1s2 b2s2 drain|	sys := ClockSystem named: 'fft'.	source := sys clock: #Source_isExecuting.	b1s1 := sys clock: #B1S1_isExecuting.	b2s1 := sys clock: #B2S1_isExecuting.	b1s2 := sys clock: #B1S2_isExecuting.	b2s2 := sys clock: #B2S2_isExecuting.	drain  := sys clock: #Drain_isExecuting.	^(self on: sys)		edgeFrom: source to: b1s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b1s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b2s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b2s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;				edgeFrom: b1s1 to: b1s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b1s1 to: b2s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s1 to: b1s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s1 to: b2s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;				edgeFrom: b1s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b1s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2		! !!ExampleSDF class methodsFor: 'examples' stamp: 'CiprianTeodorov 10/17/2014 15:39'!example5ButterflyPushPop	|sys source b1s1 b2s1 b1s2 b2s2 drain s1 s2 s3 s4 x1 x2 x3 x4 x5 x6 x7 x8 y1 y2 y3 y4 y5 y6 y7 y8 d1 d2 d3 d4|	sys := ClockSystem named: 'fft'.	source := sys clock: #Source_isExecuting.	b1s1 := sys clock: #B1S1_isExecuting.	b2s1 := sys clock: #B2S1_isExecuting.	b1s2 := sys clock: #B1S2_isExecuting.	b2s2 := sys clock: #B2S2_isExecuting.	drain  := sys clock: #Drain_isExecuting.	s1 := sys clock: #Source2B1S1X1_push.s2 := sys clock: #Source2B1S1X2_push.s3 := sys clock: #Source2B2S1X1_push.s4 := sys clock: #Source2B2S1X2_push.x1 := sys clock: #Source2B1S1X1_pop. x2 := sys clock: #Source2B1S1X2_pop. x3 := sys clock: #Source2B2S1X1_pop. x4 := sys clock: #Source2B2S1X2_pop.y1 := sys clock: #B1S1TB1S2_push.y2 := sys clock: #B1S1TB2S2_push.y3 := sys clock: #B2S1TB1S2_push.y4 := sys clock: #B2S1TB2S2_push.x5 := sys clock: #B1S1TB1S2_pop. x6 := sys clock: #B1S1TB2S2_pop. x7 := sys clock: #B2S1TB1S2_pop. x8 := sys clock: #B2S1TB2S2_pop. y5 := sys clock: #B1S2TDY1_push.y6 := sys clock: #B1S2TDY2_push.y7 := sys clock: #B2S2TDY1_push.y8 := sys clock: #B2S2TDY2_push.d1 := sys clock: #B1S2TDY1_pop. d2 := sys clock: #B1S2TDY2_pop. d3 := sys clock: #B2S2TDY1_pop.	d4 := sys clock: #B2S2TDY2_pop.source ~ s1. source ~ s2. source ~ s3. source ~ s4.x1 ~ b1s1. x2 ~ b1s1. x3 ~ b2s1. x4 ~ b2s1.b1s1 ~ y1. b1s1 ~ y2. b2s1 ~ y3. b2s1 ~ y4.x5 ~b1s2. x6 ~ b1s2. x7 ~ b2s2. x8 ~ b2s2.b1s2 ~ y5. b1s2 ~ y6. b2s2 ~ y7. b2s2 ~ y8.d1 ~ drain. d2 ~ drain. d3 ~ drain. d4 ~ drain. 		^(self on: sys)		edgeFrom: source to: b1s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b1s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b2s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: source to: b2s1 outRate: 1 initial: 0 inRate: 1 capacity: 2;				edgeFrom: b1s1 to: b1s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b1s1 to: b2s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s1 to: b1s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s1 to: b2s2 outRate: 1 initial: 0 inRate: 1 capacity: 2;				edgeFrom: b1s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b1s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2;		edgeFrom: b2s2 to: drain outRate: 1 initial: 0 inRate: 1 capacity: 2		! !!ExampleSDF class methodsFor: 'instance creation' stamp: 'CiprianTeodorov 6/7/2014 22:58'!on: asys	^ self new		initialize;		system: asys! !!ExampleSDF methodsFor: 'sdf mocml' stamp: 'CiprianTeodorov 6/8/2014 14:29'!actor: name	| fireA runA  readA writeA|	fireA := system clock: ('fire', name) asSymbol.	runA  := system clock: ('run', name) asSymbol.	readA := system clock: ('read', name) asSymbol.	writeA := system clock: ('write', name) asSymbol.		system moc: #sdf_actor		clocks: { readA. writeA. fireA. runA. }! !!ExampleSDF methodsFor: 'sdf standard ccsl' stamp: 'CiprianTeodorov 6/8/2014 15:24'!arc1: delay source: source outRate: out target: target inRate: in 	|read write|	read := system clock: ('read', idx printString) asSymbol.	write := system clock: ('write', idx printString) asSymbol.	idx := idx + 1.	source === (write period: ({ 1 }, (0 for: (out-1))) ).	write < (read delayFor: delay).	(read period:  (0 for: (in-1)), {1}) < target! !!ExampleSDF methodsFor: 'sdf standard ccsl' stamp: 'CiprianTeodorov 6/7/2014 23:15'!arc: delay source: source outRate: out target: target inRate: in 	|read write|	read := system clock: ('read', idx printString) asSymbol .	write := system clock: ('write', idx printString) asSymbol.	idx := idx + 1.	self output: source write: write  weight: out.	self tokens: delay read: read write: write.	self input: target read: read weight: in.! !!ExampleSDF methodsFor: 'sdf mocml' stamp: 'CiprianTeodorov 6/8/2014 14:35'!arc: size source: source outRate: out target: target inRate: in capacity: capacity	|rchan wchan|	rchan := system clock: ('rchan', idx printString) asSymbol.	wchan := system clock: ('wchan', idx printString) asSymbol.	idx := idx + 1.	self channelSize: size read: rchan write: wchan inputRate: out outputRate: in capacity: capacity.	source === wchan.	target === rchan.! !!ExampleSDF methodsFor: 'sdf mocml' stamp: 'CiprianTeodorov 6/10/2014 15:47'!channelSize: size read: read write: write inputRate: oR outputRate: iR  capacity: capacity	system 		moc: #sdf_channel		clocks: { read. write }		constants: { iR. oR. capacity }		arguments: { size }.! !!ExampleSDF methodsFor: 'sdf mocml' stamp: 'CiprianTeodorov 6/20/2014 18:55'!edgeFrom: source to: target outRate: out initial: initialTokens inRate: in capacity: capacity	self channelSize: initialTokens read: target write: source inputRate: out outputRate: in capacity: capacity.! !!ExampleSDF methodsFor: 'initialization' stamp: 'CiprianTeodorov 6/10/2014 15:41'!initialize	idx := 1.! !!ExampleSDF methodsFor: 'sdf standard ccsl' stamp: 'CiprianTeodorov 6/8/2014 14:03'!input: actor read: read weight: weight	(read period:  (0 for: (weight-1)), {1}) < actor! !!ExampleSDF methodsFor: 'sdf standard ccsl' stamp: 'CiprianTeodorov 6/8/2014 14:02'!output: actor write: write weight: weight	actor === (write period: ({ 1 }, (0 for: (weight-1))) )! !!ExampleSDF methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/7/2014 22:58'!system		^ system! !!ExampleSDF methodsFor: 'accessing' stamp: 'CiprianTeodorov 6/7/2014 22:58'!system: anObject		system := anObject! !!ExampleSDF methodsFor: 'sdf standard ccsl' stamp: 'CiprianTeodorov 6/8/2014 14:04'!tokens: delay read: read write: write	write < (read delayFor: delay).! !!SimpleSDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 19:11'!example1	^(self on: (ClockSystem named: 'ex0'))		actor: #A;		actor: #B;		edge: '' from: #A to: #B outRate: 1 initial: 0 inRate: 1 capacity: 2.				! !!SimpleSDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 19:11'!example2	^(self on: (ClockSystem named: 'ex1'))		actor: #A;		actor: #B;		actor: #C;		edge: '' from: #A to: #B outRate: 1 initial: 0 inRate: 2 capacity: 4;		edge: '' from: #B to: #C outRate: 2 initial: 0 inRate: 1 capacity: 4;		edge: '' from: #C to: #B outRate: 1 initial: 2 inRate: 2 capacity: 4.! !!SimpleSDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 19:11'!example3	^(self on: (ClockSystem named: 'ex2'))		actor: #Source;		actor: #B1S1;		actor: #B2S1;		actor: #B1S2;		actor: #B2S2;		actor: #Drain;		edge: 'x1' from: #Source to: #B1S1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'x2' from: #Source to: #B1S1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'x1' from: #Source to: #B2S1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'x2' from: #Source to: #B2S1 outRate: 1 initial: 0 inRate: 1 capacity: 1;				edge: 'y1' from: #B1S1 to: #B1S2 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y2' from: #B1S1 to: #B2S2 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y1' from: #B2S1 to: #B1S2 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y2' from: #B2S1 to: #B2S2 outRate: 1 initial: 0 inRate: 1 capacity: 1;				edge: 'y1' from: #B1S2 to: #Drain outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y2' from: #B1S2 to: #Drain outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y1' from: #B2S2 to: #Drain outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: 'y2' from: #B2S2 to: #Drain outRate: 1 initial: 0 inRate: 1 capacity: 1		! !!SimpleSDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 19:11'!example4	^(self on: (ClockSystem named: 'ex3'))		actor: #SP;		actor: #D1;		actor: #NFFT;		actor: #AVG;		actor: #TH;		actor: #D2;				edge: '' from: #SP to: #D1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edge: '' from: #SP to: #NFFT outRate: 1 initial: 0 inRate: 16 capacity: 16;		edge: '' from: #NFFT to: #AVG outRate: 16 initial: 16 inRate: 8 capacity: 16;		edge: '' from: #AVG to: #NFFT outRate: 8 initial: 0 inRate: 16 capacity: 16;		edge: '' from: #NFFT to: #TH outRate: 16 initial: 0 inRate: 4 capacity: 16;		edge: '' from: #TH to: #D2 outRate: 1 initial: 0 inRate: 1 capacity: 1.! !!SimpleSDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 18:52'!on: asys	^ self new		initialize;		system: asys! !!SimpleSDF methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 18:51'!actor: aSymbol	|start execute stop|	start := (aSymbol, '_start') asSymbol.	execute := (aSymbol, '_isExecuting') asSymbol.	stop :=  (aSymbol, '_stop') asSymbol.	system		addClocks: { execute }.	system addInternalClocks: { start. stop }.	system library: #MoCMLLibrary 		relation: #sdf_actorSES		clocks: { start. execute. stop }		constants: { 1 }		variables: { 0 }! !!SimpleSDF methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/20/2014 19:12'!edge: aName from: outActor to: inActor outRate: outR initial: initialTokens inRate: inR capacity: capacity	|read write|	read := (aName, outActor,'2', inActor, '_pop') asSymbol.	write := (aName, outActor,'2', inActor, '_push') asSymbol.	system addClocks: { read. write }.	system 		moc: #sdf_channel		clocks: { read. write }		constants: { inR. outR. capacity }		arguments: { initialTokens }.	"stop causes push"	system library: #Kernel relation: #Coincides clocks: {(outActor, '_stop') asSymbol. write}.	"pop causes start"	system library: #Kernel relation: #Coincides clocks: {read. (inActor, '_start') asSymbol}.! !!SimpleSDF methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2014 19:11'!system		^ system! !!SimpleSDF methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/20/2014 19:11'!system: anObject		system := anObject! !!ClockSystemTest methodsFor: 'utils' stamp: 'CiprianTeodorov 10/16/2013 22:27'!system1clock	|system|	system := ClockSystem new systemName: 'test'.	system clock: #a.	^system! !!ClockSystemTest methodsFor: 'utils' stamp: 'CiprianTeodorov 10/16/2013 22:10'!system2clocks	|system|	system := ClockSystem new systemName: 'test'.	system clock: #a.	system clock: #b.	^system! !!ClockSystemTest methodsFor: 'utils' stamp: 'CiprianTeodorov 10/16/2013 22:35'!system3clocks	|system|	system := ClockSystem new systemName: 'test'.	system clock: #a.	system clock: #b.	system clock: #c.	^system! !!ClockSystemTest methodsFor: 'test composites' stamp: 'CiprianTeodorov 11/1/2013 18:29'!testAlternates	|system result c|	system := self system2clocks.	system a strictlyPreceeds: system b.	c := system a delayFor: 1.	system b strictlyPreceeds: c.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph second vector includesAll: {system b. }).	self assert: (result graph third vector includesAll: {system a. c})			! !!ClockSystemTest methodsFor: 'test composites' stamp: 'CiprianTeodorov 11/1/2013 18:29'!testAlternatesSynonyms	|system result c|	system := self system2clocks.	system a < system b.	c := system a delayFor: 1.	system b < c.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph second vector includesAll: {system b. }).	self assert: (result graph third vector includesAll: {system a. c})			! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 11/1/2013 18:29'!testCoincidence	|system result |	system := self system2clocks.	system a === system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 1).	self assert: (result graph first  vector includesAll: {system a. system b}).			! !!ClockSystemTest methodsFor: 'test composites' stamp: 'CiprianTeodorov 10/16/2013 22:31'!testCoincidenceFromPrecedences	|system result |	system := self system2clocks.	system a <= system b.	system b <= system a.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 1).	self assert: (result graph first  vector includesAll: {system a. system b}).			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 10:37'!testDefered2	|system result c|	system := self system2clocks.	c := system a deferred: system b for: #(2).	result := system exploreModel.		self assert: (result configurations size = 4).	self assert: (result graph size = 12).			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 10:38'!testDefered2423	|system result|	system := self system2clocks.	system a deferred: system b for: #(2 4 2 3).	result := system exploreModel.		self assert: (result configurations size = 57).	self assert: (result graph size = 171).			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/16/2013 22:41'!testDelayFor5	|system result c|	system := self system1clock.	c := system a delayFor: 5.	result := system exploreModel.		self assert: (result configurations size = 6).	self assert: (result graph size = 6).	1 to: 5 do: [ :idx | 		self assert: ((result graph at: idx) vector includesAll: {system a. }).		 ].		self assert: (result graph last vector includesAll: {system a. c }).	! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/16/2013 22:28'!testDelayForOne	|system result c|	system := self system1clock.	c := system a delayFor: 1.	result := system exploreModel.		self assert: (result configurations size = 2).	self assert: (result graph size = 2).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph second vector includesAll: {system a. c }).	! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/16/2013 22:40'!testDelayForTwo	|system result c|	system := self system1clock.	c := system a delayFor: 2.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph third vector includesAll: {system a. c }).	! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:34'!testExclusion	|system result |	system := self system2clocks.	system a <> system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 2).	self assert: (result graph first  vector includesAll: {system b. }).	self assert: (result graph second  vector includesAll: {system a. }).! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:45'!testFilteredByAll0	| system c ccg |	system := self system1clock.	c := system a filteredBy: #((0 0) (0 0 0)).	ccg := system exploreModel.	self assert: ccg configurations size = 5.	self assert: ccg graph size = 5.	self assert: (ccg graph first vector includesAll: {system a}).	self assert: (ccg graph second vector includesAll: {system a}).	self assert: (ccg graph third vector includesAll: {system a}).	self assert: ((ccg graph at: 4) vector includesAll: {system a}).	self assert: ((ccg graph at: 5) vector includesAll: {system a})! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:45'!testFilteredByAll1	| system c ccg |	system := self system1clock.	c := system a filteredBy: #((1 1) (1 1 1)).	ccg := system exploreModel.	self assert: ccg configurations size = 5.	self assert: ccg graph size = 5.	self assert: (ccg graph first vector includesAll: {system a . c}).	self assert: (ccg graph second vector includesAll: {system a . c}).	self assert: (ccg graph third vector includesAll: {system a. c}).	self assert: ((ccg graph at: 4) vector includesAll: {system a . c}).	self assert: ((ccg graph at: 5) vector includesAll: {system a . c})! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:47'!testFilteredByOffset1010	| system c ccg |	system := self system1clock.	c := system a filteredBy: #((1 0 1 0) ()).	ccg := system exploreModel.	self assert: ccg configurations size = 4.	self assert: ccg graph size = 4.	self assert: (ccg graph first vector includesAll: {system a. c}).	self assert: (ccg graph second vector includesAll: {system a}).	self assert: (ccg graph third vector includesAll: {system a. c}).	self assert: ((ccg graph at: 4) vector includesAll: {system a}).! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:43'!testFilteredByOffset2Period3	| system c ccg |	system := self system1clock.	c := system a filteredBy: #(#(0 0) #(1 0 0)).	ccg := system exploreModel.	self assert: ccg configurations size = 5.	self assert: ccg graph size = 5.	self assert: (ccg graph first vector includesAll: {(system a)}).	self assert: (ccg graph second vector includesAll: {(system a)}).	self assert: (ccg graph third vector includesAll: {system a. c}).	self assert: ((ccg graph at: 4) vector includesAll: {(system a)}).	self assert: ((ccg graph at: 5) vector includesAll: {(system a)})! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:51'!testFilteredByPeriod1010	| system c ccg |	system := self system1clock.	c := system a filteredBy: #(() (1 0 1 0)).	ccg := system exploreModel.	self assert: ccg configurations size = 4.	self assert: ccg graph size = 4.	self assert: (ccg graph first vector includesAll: {system a. c}).	self assert: (ccg graph second vector includesAll: {system a}).	self assert: (ccg graph third vector includesAll: {system a. c}).	self assert: ((ccg graph at: 4) vector includesAll: {system a}).! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 14:52'!testFilteredByPeriod1011	| system c ccg |	system := self system1clock.	c := system a filteredBy: #(() (1 0 1 1)).	ccg := system exploreModel.	self assert: ccg configurations size = 4.	self assert: ccg graph size = 4.	self assert: (ccg graph first vector includesAll: {system a. c}).	self assert: (ccg graph second vector includesAll: {system a}).	self assert: (ccg graph third vector includesAll: {system a. c}).	self assert: ((ccg graph at: 4) vector includesAll: {system a. c}).! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:07'!testGlbBA	|system result c|	system := self system2clocks.	system b ~ system a.	c := system a glb: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system b. c}).	self assert: (result graph second vector includesAll: {system a}).	self assert: (result graph third vector includesAll: {system b. c})			! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:07'!testInfBA	|system result c|	system := self system2clocks.	system b ~ system a.	c := system a inf: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system b. c}).	self assert: (result graph second vector includesAll: {system a}).	self assert: (result graph third vector includesAll: {system b. c})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 11:06'!testInfimumAB	|system result c|	system := self system2clocks.	system a ~ system b.	c := system a infimum: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a. c}).	self assert: (result graph second vector includesAll: {system b}).	self assert: (result graph third vector includesAll: {system a. c})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 11:07'!testInfimumBA	|system result c|	system := self system2clocks.	system b ~ system a.	c := system a infimum: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system b. c}).	self assert: (result graph second vector includesAll: {system a}).	self assert: (result graph third vector includesAll: {system b. c})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/16/2013 22:24'!testIntersection	|system result c|	system := self system2clocks.	c := system a intersection: system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph second vector includesAll: {system a. }).	self assert: (result graph third vector includesAll: {system b. }).	self assert: (result graph first vector includesAll: {system a. system b. c})			! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:10'!testIntersectionAsStar	|system result c|	system := self system2clocks.	c := system a * system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph second vector includesAll: {system a. }).	self assert: (result graph third vector includesAll: {system b. }).	self assert: (result graph first vector includesAll: {system a. system b. c})			! !!ClockSystemTest methodsFor: 'test composites' stamp: 'CiprianTeodorov 10/16/2013 22:37'!testIntersectionWithCoincidence	|system result c|	system := self system3clocks.	c := system a intersection: system b.	c === system c.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph first  vector includesAll: {system a. system b. system c. c}).	self assert: (result graph second vector includesAll: {system b. }).	self assert: (result graph third vector includesAll: {system a.})			! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:08'!testLubAB	|system result c|	system := self system2clocks.	system a ~ system b.	c := system a sup: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b. c}).	self assert: (result graph third vector includesAll: {system a})			! !!ClockSystemTest methodsFor: 'test only clocks' stamp: 'CiprianTeodorov 10/16/2013 22:28'!testOneClock	|system result|	system := self system1clock.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 1).	self assert: (result graph first  vector includesAll: {system a.}).	! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:46'!testPrecedenceBoundOne	|system result |	system := self system2clocks.	system a preceeds: system b bound: 1.	result := system exploreModel.		self assert: (result configurations size = 2).	self assert: (result graph size = 4).	self assert: (result graph first vector includesAll: {system a. system b}).	self assert: (result graph second vector includesAll: {system a}).	self assert: (result graph third vector includesAll: {system b}).		self assert: (result graph fourth vector includesAll: {system a. system b}).! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:51'!testPrecedenceBoundTwo	|system result |	system := self system2clocks.	system a preceeds: system b bound: 2.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 7).	self assert: (result graph first vector includesAll: {system a. system b}).	self assert: (result graph second vector includesAll: {system a}).	self assert: (result graph third vector includesAll: {system b}).		self assert: (result graph fourth vector includesAll: {system a}).	self assert: ((result graph at: 5) vector includesAll: {system a. system b}).	self assert: ((result graph at: 6) vector includesAll: {system b}).	self assert: ((result graph at: 7) vector includesAll: {system a. system b}).! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:46'!testPrecedenceBoundZero	|system result |	system := self system2clocks.	system a preceeds: system b bound: 0.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 1).	self assert: (result graph first vector includesAll: {system a. system b}).! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 11:57'!testSamplingOn	|system result c|	system := self system2clocks.	c := system a samplingOn: system b.	result := system exploreModel.		self assert: (result configurations size = 2).	self assert: (result graph size = 6).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b}).	self assert: (result graph third vector includesAll: {system a. system b. c}).	self assert: ((result graph at: 4) vector includesAll: {system a}).	self assert: ((result graph at: 5) vector includesAll: {system b}).	self assert: ((result graph at: 6) vector includesAll: {system a. system b. c})		! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:44'!testStrictPrecedenceBoundOne	|system result |	system := self system2clocks.	system a strictlyPreceeds: system b bound: 1.	result := system exploreModel.		self assert: (result configurations size = 2).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b}).		self assert: (result graph third vector includesAll: {system a. system b}).! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:53'!testStrictPrecedenceBoundTwo	|system result |	system := self system2clocks.	system a strictlyPreceeds: system b bound: 2.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 6).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b}).		self assert: (result graph third vector includesAll: {system a}).	self assert: ((result graph at: 4) vector includesAll: {system a. system b}).	self assert: ((result graph at: 4) vector includesAll: {system b}).	self assert: ((result graph at: 4) vector includesAll: {system a. system b}).! !!ClockSystemTest methodsFor: 'test relations' stamp: 'CiprianTeodorov 10/16/2013 22:45'!testStrictPrecedenceBoundZero	|system result |	system := self system2clocks.	system a strictlyPreceeds: system b bound: 0.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 0).! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:08'!testSupAB	|system result c|	system := self system2clocks.	system a ~ system b.	c := system a sup: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b. c}).	self assert: (result graph third vector includesAll: {system a})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 11:08'!testSupremumAB	|system result c|	system := self system2clocks.	system a ~ system b.	c := system a supremum: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a}).	self assert: (result graph second vector includesAll: {system b. c}).	self assert: (result graph third vector includesAll: {system a})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/17/2013 11:08'!testSupremumBA	|system result c|	system := self system2clocks.	system b ~ system a.	c := system a supremum: system b.	result := system exploreModel.		self assert: (result configurations size = 3).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system b}).	self assert: (result graph second vector includesAll: {system a. c}).	self assert: (result graph third vector includesAll: {system b})			! !!ClockSystemTest methodsFor: 'test only clocks' stamp: 'CiprianTeodorov 10/16/2013 22:23'!testTwoClocks	|system result|	system := self system2clocks.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph first  vector includesAll: {system a. }).	self assert: (result graph third vector includesAll: {system b. }).	self assert: (result graph second vector includesAll: {system a. system b.})			! !!ClockSystemTest methodsFor: 'test expressions' stamp: 'CiprianTeodorov 10/16/2013 22:25'!testUnion	|system result c|	system := self system2clocks.	c := system a union: system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a. c}).	self assert: (result graph second vector includesAll: {system b. c}).	self assert: (result graph third vector includesAll: {system a. system b. c})			! !!ClockSystemTest methodsFor: 'test expression synonyms' stamp: 'CiprianTeodorov 10/17/2013 11:09'!testUnionAsPlus	|system result c|	system := self system2clocks.	c := system a + system b.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph first vector includesAll: {system a. c}).	self assert: (result graph second vector includesAll: {system b. c}).	self assert: (result graph third vector includesAll: {system a. system b. c})			! !!ClockSystemTest methodsFor: 'test composites' stamp: 'CiprianTeodorov 10/16/2013 22:39'!testUnionWithCoincidence	|system result c|	system := self system3clocks.	c := system a union: system b.	c === system c.	result := system exploreModel.		self assert: (result configurations size = 1).	self assert: (result graph size = 3).	self assert: (result graph second  vector includesAll: {system a. system b. system c. c}).	self assert: (result graph first  vector includesAll: {system b. system c. c}).	self assert: (result graph third vector includesAll: {system a. system c. c})			! !"ClockSystem-Tests"!!KPNStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:18'!KPNBoundedCommFSM	|one|	one := 1.	^ [:s :dCurrent :vbool :bzero :KBtotalRead :KBtotalWrite :maxSize :KBMemo_reading :KBMemo_writing|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(vbool == one) ifTrue: [								transitions add: (0 -> 0  when:{KBMemo_reading. KBMemo_writing} 								) ].							(dCurrent - KBtotalRead >= bzero) ifTrue: [								transitions add: (0 -> 0  when:{KBMemo_reading}  do: [:configuration |									|dCurrent_ | 									dCurrent_ := configuration at: 2.									configuration at: 2 put: (dCurrent_ - KBtotalRead).								]								) ].							(dCurrent + KBtotalWrite <= maxSize) ifTrue: [								transitions add: (0 -> 0  when:{KBMemo_writing}  do: [:configuration |									|dCurrent_ | 									dCurrent_ := configuration at: 2.									configuration at: 2 put: (dCurrent_ + KBtotalWrite).								]								) ].															transitions asArray.						].								} "end caseof"		]. "end #KPNBoundedCommFSM"! !!KPNStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:17'!KPNCommFSM 	|one|	one := 1.	^ [:s :currentData :kzero :xbool  :KMemo_reading :KMemo_writing|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(currentData > kzero) ifTrue: [								transitions add: (0 -> 0  when:{KMemo_reading}  do: [:configuration |									|currentData_ | 									currentData_ := configuration at: 2.									configuration at: 2 put: (currentData_ - one).								]								) ].							(xbool == one) ifTrue: [								transitions add: (0 -> 0  when:{KMemo_writing}  do: [:configuration |									|currentData_ | 									currentData_ := configuration at: 2.									configuration at: 2 put: (currentData_ + one).								]								) ].															transitions asArray.						].								} "end caseof"		]. "end #KPNCommFSM"! !!Kernel class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:20'!Alternates	^ClockKernelLibrary alternation! !!Kernel class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:23'!Coincides	^ClockKernelLibrary coincidence ! !!Kernel class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:36'!Exclusion	^ClockKernelLibrary  exclusion! !!Kernel class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:23'!Union	^ClockKernelLibrary union  ! !!ObservatoryFFTBuilder class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 22:31'!observatoryFFT16	|sys|	sys := ClockSystem named: 'observatoryFFT16'.	^(self on: sys)		actor: #SP cycles: 1;		actor: #Display1 cycles: 1;		actor: #FFT cycles: 1;		actor: #AVG cycles: 1;		actor: #Threshold cycles: 1;		actor: #Display2 cycles: 1;		edgeFrom: sys stopSP to: sys startDisplay1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: sys stopSP to: sys startFFT outRate: 1 initial: 0 inRate: 16 capacity: 16;		edgeFrom: sys stopFFT to: sys startThreshold outRate: 16 initial: 0 inRate: 4 capacity: 16;		edgeFrom: sys stopFFT to: sys startAVG outRate: 16 initial: 16 inRate: 8 capacity: 16;		edgeFrom: sys stopAVG to: sys startFFT outRate: 8 initial: 0 inRate: 16 capacity: 16;		edgeFrom: sys stopThreshold to: sys startDisplay2 outRate: 1 initial: 0 inRate: 1 capacity: 1.		! !!ObservatoryFFTBuilder class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 22:24'!on: asys	^ self new		initialize;		system: asys! !!ObservatoryFFTBuilder class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/17/2014 16:09'!test2actors	|sys|	sys := ClockSystem named: 'observatoryFFT16'.	^(self on: sys)		actor: #SP cycles: 1;		actor: #Display1 cycles: 1;		edgeFrom: sys stopSP to: sys startDisplay1 outRate: 1 initial: 0 inRate: 1 capacity: 1.		! !!ObservatoryFFTBuilder class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/17/2014 17:20'!test3actors	|sys|	sys := ClockSystem named: 'observatoryFFT16'.	^(self on: sys)		actor: #SP cycles: 1;		actor: #Display1 cycles: 1;		actor: #FFT cycles: 1;		edgeFrom: sys stopSP to: sys startDisplay1 outRate: 1 initial: 0 inRate: 1 capacity: 1;		edgeFrom: sys stopSP to: sys startFFT outRate: 1 initial: 0 inRate: 8 capacity: 8.! !!ObservatoryFFTBuilder methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 22:25'!actor: name cycles: nbCycles	|start execute stop|	start := system clock: ('start', name) asSymbol.	execute := system clock: ('execute', name) asSymbol.	stop := system clock: ('stop', name) asSymbol.		system library: #SDFStateBasedLib relation: #actorRelationDef clocks: { start. execute. stop } constants: { nbCycles } variables: { 0 }.! !!ObservatoryFFTBuilder methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/17/2014 16:02'!edgeFrom: source to: target outRate: out initial: initialTokens inRate: in capacity: capacity	| read write |	read := system clock: ('rchan' , idx printString) asSymbol.	write := system clock: ('wchan' , idx printString) asSymbol.	idx := idx + 1.	system		library: #SDFStateBasedLib		relation: #outputRelationDef		clocks: {write. source}		constants: {out}		variables: {out}.	system		library: #SDFStateBasedLib		relation: #edgeRelationDef		clocks: {read. write}		constants: {capacity}		variables: {initialTokens}.	system		library: #SDFStateBasedLib		relation: #inputRelationDef		clocks: {read. target}		constants: {in}		variables: {0}! !!ObservatoryFFTBuilder methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 22:17'!initialize	idx := 1.! !!ObservatoryFFTBuilder methodsFor: 'accessing' stamp: 'CiprianTeodorov 7/16/2014 22:32'!system		^ system! !!ObservatoryFFTBuilder methodsFor: 'accessing' stamp: 'CiprianTeodorov 7/16/2014 22:32'!system: anObject		system := anObject! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!AgentExecutionFSM	| zero one |	zero := 0. one := 1.	^ [:s :tcycle :cycleVal :AgentCycle :AgentExec_start :AgentExec_stop :AgentisExec|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(cycleVal == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|cycleVal_ | 									cycleVal_ := configuration at: 3.									configuration at: 3 put: (AgentCycle).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(tcycle < cycleVal) ifTrue:[								transitions add: (1 -> 2  when:{AgentExec_start} 								) ].								transitions asArray.						].						[2] -> [|transitions|						transitions := OrderedCollection new.						(tcycle < cycleVal) ifTrue:[								transitions add: (2 -> 2  when:{AgentisExec}  do: [:configuration |									|tcycle_ |									tcycle_ := configuration at: 2.									configuration at: 2 put: (tcycle_ + one).								]								) ].						(tcycle == cycleVal) ifTrue:[								transitions add: (2 -> 1  when:{AgentExec_stop}  do: [:configuration |									|tcycle_ |									tcycle_ := configuration at: 2.									configuration at: 2 put: (tcycle_ - cycleVal).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #AgentExecutionFSM"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!AgentExecutionRelationDef	^[:s :tcycle :cycleVal :azero :AgentCycle :AgentExec_start :AgentExec_stop :AgentisExec|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(cycleVal == azero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|cycleVal_ | 										cycleVal_ := configuration at: 3.										configuration at: 3 put: (AgentCycle).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(tcycle < cycleVal) ifTrue:[									transitions add: (1 -> 2  when:{AgentExec_start} 									) ].									transitions asArray.							].							[2] -> [|transitions|							transitions := OrderedCollection new.							(tcycle < cycleVal) ifTrue:[									transitions add: (2 -> 2  when:{AgentisExec}  do: [:configuration |										|tcycle_ |										tcycle_ := configuration at: 2.										configuration at: 2 put: (tcycle_ + 1).										]									) ].							(tcycle == cycleVal) ifTrue:[									transitions add: (2 -> 1  when:{AgentExec_stop}  do: [:configuration |										|tcycle_ |										tcycle_ := configuration at: 2.										configuration at: 2 put: (tcycle_ - cycleVal).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #AgentExecutionRelationDef"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!EdgeFSM	|zero one|	zero := 0. one := 1. 	^[:s :val :valSize :Edge_delay :Edge_size :Edge_write :Edge_read|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(val == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|valSize_ val_ | 									valSize_ := configuration at: 3.									val_ := configuration at: 2.									configuration at: 3 put: (Edge_size).									configuration at: 2 put: (Edge_delay).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(val > zero) ifTrue:[								transitions add: (1 -> 1  when:{Edge_read}  do: [:configuration |									|val_ |									val_ := configuration at: 2.									configuration at: 2 put: (val_ - one).								]								) ].						(val < valSize) ifTrue:[								transitions add: (1 -> 1  when:{Edge_write}  do: [:configuration |									|val_ |									val_ := configuration at: 2.									configuration at: 2 put: (val_ + one).								]								) ].						(val > zero) ifTrue:[								transitions add: (1 -> 1  when:{Edge_write. Edge_read} 								) ].								transitions asArray.						].								} "end caseof"		]. "end #EdgeFSM"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!EdgeRelationDef	^[:s :val :valSize :zero :Edge_delay :Edge_size :Edge_write :Edge_read|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(val == zero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|valSize_ val_ | 										valSize_ := configuration at: 3.										val_ := configuration at: 2.										configuration at: 3 put: (Edge_size).										configuration at: 2 put: (Edge_delay).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(val > zero) ifTrue:[									transitions add: (1 -> 1  when:{Edge_read}  do: [:configuration |										|val_ |										val_ := configuration at: 2.										configuration at: 2 put: (val_ - 1).										]									) ].							(val < valSize) ifTrue:[									transitions add: (1 -> 1  when:{Edge_write}  do: [:configuration |										|val_ |										val_ := configuration at: 2.										configuration at: 2 put: (val_ + 1).										]									) ].							(val > zero) ifTrue:[									transitions add: (1 -> 1  when:{Edge_write. Edge_read} 									) ].									transitions asArray.							].										} "end caseof" 			]. "end #EdgeRelationDef"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!InputFSM	|zero one|	zero := 0. one := 1.	^[:s :rcounter :rateCons :rateConsMinusOne :Input_rate_fsm :Input_actor_fsm :Input_read_fsm|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(rateCons == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|rateCons_ rateConsMinusOne_ | 									rateCons_ := configuration at: 3.									rateConsMinusOne_ := configuration at: 4.									configuration at: 3 put: (Input_rate_fsm).									configuration at: 4 put: (Input_rate_fsm - one).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(rcounter < rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ + one).								]								) ].						(rcounter == rateConsMinusOne) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm. Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ - rateConsMinusOne).								]								) ].						(rcounter == rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ - rateCons).								]								) ].						(rcounter == rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm. Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rateCons - rateConsMinusOne).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #InputFSM"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!InputRelationDef	^[:s :rcounter :izero :rateCons :Input_rate_param :Input_actor_param :Input_read_param|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(rateCons == izero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|rateCons_ | 										rateCons_ := configuration at: 4.										configuration at: 4 put: (Input_rate_param).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(rcounter < rateCons) ifTrue:[									transitions add: (1 -> 1  when:{Input_read_param}  do: [:configuration |										|rcounter_ |										rcounter_ := configuration at: 2.										configuration at: 2 put: (rcounter_ + 1).										]									) ].							(rcounter == rateCons) ifTrue:[									transitions add: (1 -> 1  when:{Input_actor_param}  do: [:configuration |										|rcounter_ |										rcounter_ := configuration at: 2.										configuration at: 2 put: (izero).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #InputRelationDef"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!OutputFSM	|zero one|	zero := 0. one := 1.	 ^[:s :orcounter :Output_rate_fsm :Output_actor_fsm :Output_write_fsm|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(orcounter == zero) ifTrue: [								transitions add: (0 -> 1  when:{Output_actor_fsm} 								) ].							(orcounter == zero) ifTrue: [								transitions add: (0 -> 1  when:{Output_actor_fsm. Output_write_fsm}  do: [:configuration |									|orcounter_ | 									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ + one).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(orcounter < Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_write_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ + one).								]								) ].						(orcounter == Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_write_fsm. Output_actor_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ - Output_rate_fsm + one).								]								) ].						(orcounter == Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_actor_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ - Output_rate_fsm).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #OutputFSM"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!OutputRelationDef	^[:s :orcounter :ozero :Output_rate_param :Output_actor_param :Output_write_param|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.																transitions add: (0 -> 1  do: [:configuration |										|orcounter_ | 										orcounter_ := configuration at: 2.										configuration at: 2 put: (0).									]									)  .																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(orcounter == ozero) ifTrue:[									transitions add: (1 -> 2  when:{Output_actor_param} 									) ].							(orcounter == ozero) ifTrue:[									transitions add: (1 -> 2  when:{Output_actor_param. Output_write_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ + 1).										]									) ].									transitions asArray.							].							[2] -> [|transitions|							transitions := OrderedCollection new.							(orcounter < Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_write_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ + 1).										]									) ].							(orcounter == Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_write_param. Output_actor_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ - Output_rate_param + 1).										]									) ].							(orcounter == Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_actor_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (ozero).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #OutputRelationDef"! !!SDF class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 19:44'!PlaceConstraintDef |one|one := 1.^[:s :currentSize :maxSize :ezero :Place_delay :Place_size :Place_popRate :Place_pushRate :Place_write :Place_read|					s caseOf: {							0 ->[ |transitions|							transitions := OrderedCollection new.							(currentSize == ezero) ifTrue: [  									transitions add: (0 -> 1  do: [:configuration |										|maxSize_ currentSize_ | 										maxSize_ := configuration at: 3.										currentSize_ := configuration at: 2.										configuration at: 3 put: (Place_size).										configuration at: 2 put: (Place_delay).																		]) ].																transitions asArray.							].							1 ->[ |transitions|							transitions := OrderedCollection new.							(currentSize > Place_popRate - one) ifTrue:[									transitions add: (1 -> 1  when:{}  do: [:configuration |										|currentSize_ |										currentSize_ := configuration at: 2.										configuration at: 2 put: (currentSize_ - Place_popRate).																			])] .							(currentSize + Place_pushRate < maxSize + one) ifTrue:[									transitions add: (1 -> 1  when:{}  do: [:configuration |										|currentSize_ |										currentSize_ := configuration at: 2.										configuration at: 2 put: (currentSize_ + Place_pushRate).																			])] .									transitions asArray.							].										} "end caseof" 			]. "end #PlaceConstraintDef"! !!SDF class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 10/15/2014 19:44'!actorRelationDef	^[:s :cycle :nbCycles :start :execute :stop | |transitions|		transitions := OrderedCollection new.		(s = 0 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: (0->1 when: { start }) ].		(s = 1 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: ( 1->1 when: { execute } do: [ :configuration | 				|cycle_|				cycle_ := configuration at: 2.				configuration at: 2 put: (cycle_ + 1)] )			].		(s = 1 and: [ cycle = nbCycles]) ifTrue: [ 			transitions add: ( 1->0 when: { stop } do: [ :configuration |				"reset cycle"				configuration at: 2 put: 0] )			].		transitions]! !!SDF class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 10/15/2014 19:44'!edgeRelationDef	^ [ :s :size :capacity :read :write | |transitions|		transitions := OrderedCollection new.		size > 0 ifTrue: [ transitions add: ( 0->0 when: { read } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ - 1 ] ) ].		size < capacity ifTrue: [ transitions add: ( 0->0 when: { write } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		"(size > 0 and: [ size < capacity ]) ifTrue: [ transitions add: ( 0->0 when: { read. write } ) ]."		transitions]! !!SDF class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 10/15/2014 19:44'!inputRelationDef	^ [ :s :size :inRate :read :actor | |transitions|		transitions := OrderedCollection new.		size < inRate ifTrue: [ transitions add: ( 0->0 when: { read } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		size = inRate ifTrue: [ transitions add: ( 0->0 when: { actor } do: [ :configuration |				configuration at: 2 put: 0 ] ) ].		"size = inRate ifTrue: [ transitions add: ( 0->0 when: { read. actor } do: [ :configuration |				configuration at: 2 put: 1 ] ) ]."		transitions]! !!SDF class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 10/15/2014 19:44'!outputRelationDef	^ [ :s :size :outRate :write :actor | |transitions|		transitions := OrderedCollection new.		size < outRate ifTrue: [ transitions add: ( 0->0 when: { write } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		size = outRate ifTrue: [ transitions add: ( 0->0 when: { actor } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: 0 ] ) ].		"size = outRate ifTrue: [ transitions add: ( 0->0 when: { write. actor } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: 1 ] ) ]."		transitions]! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:09'!AgentExecutionFSM	| zero one |	zero := 0. one := 1.	^ [:s :tcycle :cycleVal :AgentCycle :AgentExec_start :AgentExec_stop :AgentisExec|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(cycleVal == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|cycleVal_ | 									cycleVal_ := configuration at: 3.									configuration at: 3 put: (AgentCycle).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(tcycle < cycleVal) ifTrue:[								transitions add: (1 -> 2  when:{AgentExec_start} 								) ].								transitions asArray.						].						[2] -> [|transitions|						transitions := OrderedCollection new.						(tcycle < cycleVal) ifTrue:[								transitions add: (2 -> 2  when:{AgentisExec}  do: [:configuration |									|tcycle_ |									tcycle_ := configuration at: 2.									configuration at: 2 put: (tcycle_ + one).								]								) ].						(tcycle == cycleVal) ifTrue:[								transitions add: (2 -> 1  when:{AgentExec_stop}  do: [:configuration |									|tcycle_ |									tcycle_ := configuration at: 2.									configuration at: 2 put: (tcycle_ - cycleVal).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #AgentExecutionFSM"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 18:36'!AgentExecutionRelationDef	^[:s :tcycle :cycleVal :azero :AgentCycle :AgentExec_start :AgentExec_stop :AgentisExec|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(cycleVal == azero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|cycleVal_ | 										cycleVal_ := configuration at: 3.										configuration at: 3 put: (AgentCycle).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(tcycle < cycleVal) ifTrue:[									transitions add: (1 -> 2  when:{AgentExec_start} 									) ].									transitions asArray.							].							[2] -> [|transitions|							transitions := OrderedCollection new.							(tcycle < cycleVal) ifTrue:[									transitions add: (2 -> 2  when:{AgentisExec}  do: [:configuration |										|tcycle_ |										tcycle_ := configuration at: 2.										configuration at: 2 put: (tcycle_ + 1).										]									) ].							(tcycle == cycleVal) ifTrue:[									transitions add: (2 -> 1  when:{AgentExec_stop}  do: [:configuration |										|tcycle_ |										tcycle_ := configuration at: 2.										configuration at: 2 put: (tcycle_ - cycleVal).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #AgentExecutionRelationDef"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:10'!EdgeFSM	|zero one|	zero := 0. one := 1. 	^[:s :val :valSize :Edge_delay :Edge_size :Edge_write :Edge_read|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(val == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|valSize_ val_ | 									valSize_ := configuration at: 3.									val_ := configuration at: 2.									configuration at: 3 put: (Edge_size).									configuration at: 2 put: (Edge_delay).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(val > zero) ifTrue:[								transitions add: (1 -> 1  when:{Edge_read}  do: [:configuration |									|val_ |									val_ := configuration at: 2.									configuration at: 2 put: (val_ - one).								]								) ].						(val < valSize) ifTrue:[								transitions add: (1 -> 1  when:{Edge_write}  do: [:configuration |									|val_ |									val_ := configuration at: 2.									configuration at: 2 put: (val_ + one).								]								) ].						(val > zero) ifTrue:[								transitions add: (1 -> 1  when:{Edge_write. Edge_read} 								) ].								transitions asArray.						].								} "end caseof"		]. "end #EdgeFSM"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 18:36'!EdgeRelationDef	^[:s :val :valSize :zero :Edge_delay :Edge_size :Edge_write :Edge_read|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(val == zero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|valSize_ val_ | 										valSize_ := configuration at: 3.										val_ := configuration at: 2.										configuration at: 3 put: (Edge_size).										configuration at: 2 put: (Edge_delay).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(val > zero) ifTrue:[									transitions add: (1 -> 1  when:{Edge_read}  do: [:configuration |										|val_ |										val_ := configuration at: 2.										configuration at: 2 put: (val_ - 1).										]									) ].							(val < valSize) ifTrue:[									transitions add: (1 -> 1  when:{Edge_write}  do: [:configuration |										|val_ |										val_ := configuration at: 2.										configuration at: 2 put: (val_ + 1).										]									) ].							(val > zero) ifTrue:[									transitions add: (1 -> 1  when:{Edge_write. Edge_read} 									) ].									transitions asArray.							].										} "end caseof" 			]. "end #EdgeRelationDef"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:11'!InputFSM	|zero one|	zero := 0. one := 1.	^[:s :rcounter :rateCons :rateConsMinusOne :Input_rate_fsm :Input_actor_fsm :Input_read_fsm|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(rateCons == zero) ifTrue: [								transitions add: (0 -> 1  do: [:configuration |									|rateCons_ rateConsMinusOne_ | 									rateCons_ := configuration at: 3.									rateConsMinusOne_ := configuration at: 4.									configuration at: 3 put: (Input_rate_fsm).									configuration at: 4 put: (Input_rate_fsm - one).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(rcounter < rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ + one).								]								) ].						(rcounter == rateConsMinusOne) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm. Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ - rateConsMinusOne).								]								) ].						(rcounter == rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rcounter_ - rateCons).								]								) ].						(rcounter == rateCons) ifTrue:[								transitions add: (1 -> 1  when:{Input_actor_fsm. Input_read_fsm}  do: [:configuration |									|rcounter_ |									rcounter_ := configuration at: 2.									configuration at: 2 put: (rateCons - rateConsMinusOne).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #InputFSM"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 18:36'!InputRelationDef	^[:s :rcounter :izero :rateCons :Input_rate_param :Input_actor_param :Input_read_param|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.							(rateCons == izero) ifTrue: [									transitions add: (0 -> 1  do: [:configuration |										|rateCons_ | 										rateCons_ := configuration at: 4.										configuration at: 4 put: (Input_rate_param).									]									) ].																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(rcounter < rateCons) ifTrue:[									transitions add: (1 -> 1  when:{Input_read_param}  do: [:configuration |										|rcounter_ |										rcounter_ := configuration at: 2.										configuration at: 2 put: (rcounter_ + 1).										]									) ].							(rcounter == rateCons) ifTrue:[									transitions add: (1 -> 1  when:{Input_actor_param}  do: [:configuration |										|rcounter_ |										rcounter_ := configuration at: 2.										configuration at: 2 put: (izero).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #InputRelationDef"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/6/2014 23:11'!OutputFSM	|zero one|	zero := 0. one := 1.	 ^[:s :orcounter :Output_rate_fsm :Output_actor_fsm :Output_write_fsm|			s caseOf: {						[0] -> [|transitions|						transitions := OrderedCollection new.						(orcounter == zero) ifTrue: [								transitions add: (0 -> 1  when:{Output_actor_fsm} 								) ].							(orcounter == zero) ifTrue: [								transitions add: (0 -> 1  when:{Output_actor_fsm. Output_write_fsm}  do: [:configuration |									|orcounter_ | 									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ + one).								]								) ].															transitions asArray.						].						[1] -> [|transitions|						transitions := OrderedCollection new.						(orcounter < Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_write_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ + one).								]								) ].						(orcounter == Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_write_fsm. Output_actor_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ - Output_rate_fsm + one).								]								) ].						(orcounter == Output_rate_fsm) ifTrue:[								transitions add: (1 -> 1  when:{Output_actor_fsm}  do: [:configuration |									|orcounter_ |									orcounter_ := configuration at: 2.									configuration at: 2 put: (orcounter_ - Output_rate_fsm).								]								) ].								transitions asArray.						].								} "end caseof"		]. "end #OutputFSM"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/16/2014 19:26'!OutputRelationDef	^[:s :orcounter :ozero :Output_rate_param :Output_actor_param :Output_write_param|					s caseOf: {							[0] -> [|transitions|							transitions := OrderedCollection new.																transitions add: (0 -> 1  do: [:configuration |										|orcounter_ | 										orcounter_ := configuration at: 2.										configuration at: 2 put: (0).									]									)  .																transitions asArray.							].							[1] -> [|transitions|							transitions := OrderedCollection new.							(orcounter == ozero) ifTrue:[									transitions add: (1 -> 2  when:{Output_actor_param} 									) ].							(orcounter == ozero) ifTrue:[									transitions add: (1 -> 2  when:{Output_actor_param. Output_write_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ + 1).										]									) ].									transitions asArray.							].							[2] -> [|transitions|							transitions := OrderedCollection new.							(orcounter < Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_write_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ + 1).										]									) ].							(orcounter == Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_write_param. Output_actor_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (orcounter_ - Output_rate_param + 1).										]									) ].							(orcounter == Output_rate_param) ifTrue:[									transitions add: (2 -> 2  when:{Output_actor_param}  do: [:configuration |										|orcounter_ |										orcounter_ := configuration at: 2.										configuration at: 2 put: (ozero).										]									) ].									transitions asArray.							].										} "end caseof" 			]. "end #OutputRelationDef"! !!SDFStateBasedLib class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/15/2014 20:02'!PlaceConstraintDef |one|one := 1.^[:s :currentSize :maxSize :ezero :Place_delay :Place_size :Place_popRate :Place_pushRate :Place_write :Place_read|					s caseOf: {							0 ->[ |transitions|							transitions := OrderedCollection new.							(currentSize == ezero) ifTrue: [  									transitions add: (0 -> 1  do: [:configuration |										|maxSize_ currentSize_ | 										maxSize_ := configuration at: 3.										currentSize_ := configuration at: 2.										configuration at: 3 put: (Place_size).										configuration at: 2 put: (Place_delay).																		]) ].																transitions asArray.							].							1 ->[ |transitions|							transitions := OrderedCollection new.							(currentSize > (Place_popRate - one)) ifTrue:[									transitions add: (1 -> 1  when:{}  do: [:configuration |										|currentSize_ |										currentSize_ := configuration at: 2.										configuration at: 2 put: (currentSize_ - Place_popRate).																			])] .							((currentSize + Place_pushRate) < (maxSize + one)) ifTrue:[									transitions add: (1 -> 1  when:{}  do: [:configuration |										|currentSize_ |										currentSize_ := configuration at: 2.										configuration at: 2 put: (currentSize_ + Place_pushRate).																			])] .									transitions asArray.							].										} "end caseof" 			]. "end #PlaceConstraintDef"! !!SDFStateBasedLib class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 7/16/2014 22:38'!actorRelationDef	^[:s :cycle :nbCycles :start :execute :stop | |transitions|		transitions := OrderedCollection new.		(s = 0 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: (0->1 when: { start }) ].		(s = 1 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: ( 1->1 when: { execute } do: [ :configuration | 				|cycle_|				cycle_ := configuration at: 2.				configuration at: 2 put: (cycle_ + 1)] )			].		(s = 1 and: [ cycle = nbCycles]) ifTrue: [ 			transitions add: ( 1->0 when: { stop } do: [ :configuration |				"reset cycle"				configuration at: 2 put: 0] )			].		transitions]! !!SDFStateBasedLib class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 7/17/2014 17:13'!edgeRelationDef	^ [ :s :size :capacity :read :write | |transitions|		transitions := OrderedCollection new.		size > 0 ifTrue: [ transitions add: ( 0->0 when: { read } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ - 1 ] ) ].		size < capacity ifTrue: [ transitions add: ( 0->0 when: { write } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		"(size > 0 and: [ size < capacity ]) ifTrue: [ transitions add: ( 0->0 when: { read. write } ) ]."		transitions]! !!SDFStateBasedLib class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 7/17/2014 17:13'!inputRelationDef	^ [ :s :size :inRate :read :actor | |transitions|		transitions := OrderedCollection new.		size < inRate ifTrue: [ transitions add: ( 0->0 when: { read } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		size = inRate ifTrue: [ transitions add: ( 0->0 when: { actor } do: [ :configuration |				configuration at: 2 put: 0 ] ) ].		"size = inRate ifTrue: [ transitions add: ( 0->0 when: { read. actor } do: [ :configuration |				configuration at: 2 put: 1 ] ) ]."		transitions]! !!SDFStateBasedLib class methodsFor: 'handwritten-lib' stamp: 'CiprianTeodorov 7/17/2014 17:13'!outputRelationDef	^ [ :s :size :outRate :write :actor | |transitions|		transitions := OrderedCollection new.		size < outRate ifTrue: [ transitions add: ( 0->0 when: { write } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: size_ + 1 ] ) ].		size = outRate ifTrue: [ transitions add: ( 0->0 when: { actor } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: 0 ] ) ].		"size = outRate ifTrue: [ transitions add: ( 0->0 when: { write. actor } do: [ :configuration |				|size_|				size_ := configuration at: 2.				configuration at: 2 put: 1 ] ) ]."		transitions]! !"ClockSystem-Lib-DATE14"!!ClockSystem4GeMoC commentStamp: 'CiprianTeodorov 11/7/2014 11:52' prior: 0!A ClockSystem4GeMoC is xxxxxxxxx.sys := SimpleSDF example1 system.ClockSystem4GeMoC explore: sys resultIn: 'your result path here'.!!Clock methodsFor: '*ClockSystem-Lib-MoCML' stamp: 'CiprianTeodorov 2/27/2014 22:56'!rdv: write ack: ackClock	"This is a clock that encodes the COMETA CSP MoC	It synchronizes self with anotherClock and enables the ack clock when they are synchronized	"	system cspRead: self write: write ack: ackClock! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML' stamp: 'CiprianTeodorov 2/27/2014 22:49'!cspRead: r write: w ack: ok	| myClocks |	myClocks := {r. w. ok}.	self		moc: #csp		clocks: myClocks! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML-core' stamp: 'CiprianTeodorov 3/25/2014 19:18'!moc: sym clocks: clks	self moc: sym clocks: clks constants: {  } arguments: {  }! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML-core' stamp: 'CiprianTeodorov 3/25/2014 19:18'!moc: sym clocks: clks arguments: args	self moc: sym clocks: clks constants: {  } arguments: args! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML-core' stamp: 'CiprianTeodorov 3/25/2014 19:19'!moc: sym clocks: clks constants: constants	self moc: sym clocks: clks constants: constants arguments: {  }! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML-core' stamp: 'CiprianTeodorov 3/25/2014 19:25'!moc: sym clocks: clks constants: constants arguments: args	self library: MoCMLLibrary relation: sym clocks: clks constants: constants variables: args! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML' stamp: 'CiprianTeodorov 2/27/2014 22:20'!sdfRead: r rate: rRate write: w rate: wRate capacity: cap initial: size	| arguments constants myClocks |	constants := {rRate. wRate. cap}.	arguments := {size}.	myClocks := {r. w}.	self		moc: #sdf		clocks: myClocks		constants: constants		arguments: arguments! !!ClockSystem methodsFor: '*ClockSystem-Lib-MoCML' stamp: 'CiprianTeodorov 2/28/2014 15:08'!sdfRead: r rate: rRate write: w rate: wRate initial: size	| arguments constants myClocks |	constants := {rRate. wRate. -1}.	arguments := {size}.	myClocks := {r. w}.	self		moc: #sdf		clocks: myClocks		constants: constants		arguments: arguments! !!ClockSystem4GeMoC commentStamp: 'CiprianTeodorov 11/7/2014 11:52' prior: 35766526!A ClockSystem4GeMoC is xxxxxxxxx.sys := SimpleSDF example1 system.ClockSystem4GeMoC explore: sys resultIn: 'your result path here'.!!ClockSystem4GeMoC class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/7/2014 11:48'!explore: aClockSystem resultIn: resultsPath	| runtime result rccg fiacreGraph ltsFile fcrGmlFile gmlFile resultFile sysName mtxFile |	[ 	runtime := Time millisecondsToRun: [ result := ClockCartesianProductExploration exploreModel: aClockSystem ].	resultsPath := '/Users/ciprian/Playfield/GeMOC/gemoc-obp-bridge/'.	sysName := aClockSystem systemName.	"export MTX"	mtxFile := resultsPath , sysName , '.mtx'.	FileStream forceNewFileNamed: mtxFile do: [ :stream | TraConfigurationGraph2MatrixMarket mtx: result in: stream ].	rccg := TraConfigurationGraph2LTS runOn: result.	TraRemoveInternalClocks runOn: rccg.	TraRemoveInternalEvents runOn: rccg.	fiacreGraph := TraConfigurationGraph2FiacreGraph runOn: rccg.	"export LTS"	ltsFile := resultsPath , sysName , '.lts'.	FileStream forceNewFileNamed: ltsFile do: [ :stream | TraFiacreGraph2Lts lts: fiacreGraph prefix: '{sys}1' in: stream ].	"export GML with coincidence expanded"	fcrGmlFile := resultsPath , sysName , '_fcr.gml'.	FileStream forceNewFileNamed: fcrGmlFile do: [ :stream | TraFiacreGraph2GML gml: fiacreGraph in: stream ].	"export GML without coincidence expanded"	gmlFile := resultsPath , sysName , '.gml'.	FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: rccg in: stream ].	"export GML full"	gmlFile := resultsPath , sysName , '_full.gml'.	FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: result in: stream ].	resultFile := resultsPath , sysName , '_csys.results'.	FileStream		forceNewFileNamed: resultFile		do: [ :stream | 			stream				nextPutAll: 'system ' , sysName;				cr.			stream				nextPutAll: 'states: ' , result configurations size printString;				cr.			stream				nextPutAll: 'transitions: ' , result graph size printString;				cr.			stream				nextPutAll: 'time: ' , runtime printString , ' ms';				cr ] ]		on: Exception do: [ 			resultFile := resultsPath , sysName , '_csys.results'.			FileStream				forceNewFileNamed: resultFile				do: [ :stream | 					stream						nextPutAll: 'system ' , sysName;						cr;						nextPutAll: 'ERROR' ] ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 2/27/2014 22:48'!csp	"This is a clock that encodes the COMETA CSP MoC"	^ [ :s :r :w :ok | 	s = 0		ifTrue: [ 			{ 0 -> 1 when: {r. w} } ]		ifFalse: [ 			{ 1 -> 0 when: { ok } }			] ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 3/19/2014 18:27'!csp_action^ [ :s :action :endP | 	s caseOf: { 	[ 0 ] -> [{  0->1 when: { action } } ].	[ 1 ] -> [ { 1->2 when: { endP } } ].	[ 2 ] -> [ { } ].	} ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 3/19/2014 18:21'!csp_detchoice^ [ :s :visibleP :internalP :endP :visibleQ :internalQ :endQ | 	s caseOf: { 	[ 0 ] -> [{ 0->0 when: { visibleP }. 0->0 when: { internalP }. 0->1 when: { endP }.			   0->0 when: { visibleQ }. 0->0 when: { internalQ }. 0->1 when: { endQ } } ].	[ 1 ] -> [ {  } ].	} ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 3/19/2014 18:24'!csp_nondetchoice^ [ :s :visibleP :internalP :endP :visibleQ :internalQ :endQ | 	s caseOf: { 	[ 0 ] -> [{  0->1 when: { internalP }.			    0->2 when: { internalQ } } ].	[ 1 ] -> [ { 1->1 when: { visibleP }.  1->1 when: { internalP }. 1->3 when: { endP } } ].	[ 2 ] -> [ { 2->2 when: { visibleQ }. 2->2 when: { internalQ }. 2->3 when: { endQ } } ].	[ 3 ] -> [ {  } ].	} ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 3/19/2014 18:22'!csp_seq^ [ :s :visibleP :internalP :endP :visibleQ :internalQ :endQ | 	s caseOf: { 	[ 0 ] -> [{ 0->0 when: {visibleP}. 0->0 when: { internalP }. 0->1 when: { endP } } ].	[ 1 ] -> [ { 1->1 when: { visibleQ }. 1->1 when: { internalQ }. 1->2 when: { endQ } } ].	[ 2 ] -> [ {  } ]	} ]! !!MoCMLLibrary class methodsFor: 'csp' stamp: 'CiprianTeodorov 3/19/2014 18:27'!csp_skip^ [ :s :endP | 	s caseOf: { 	[ 0 ] -> [{ 0->1 when: { endP } } ].	[ 1 ] -> [ { } ].	} ]! !!MoCMLLibrary class methodsFor: 'sdf' stamp: 'CiprianTeodorov 2/28/2014 08:45'!sdf	" 1 state (0 -- initial state), n variables, m constants, k clocks"	^[:s :size :inRate :outRate :capacity :r :w  | 		s caseOf: { 			[ 0 ] -> [ |transitions|						transitions := OrderedCollection new.						size >= inRate ifTrue: [ 							transitions add: (0->0 when: { r } do: [:configuration | 								|sz| 								sz := configuration at: 2.								configuration at: 2 put: (sz - inRate) ]) ].						(capacity < 0 or: [capacity - size >= outRate]) ifTrue: [ 							transitions add: ((0->0) when: { w } do: [:configuration |								|sz| 								sz := configuration at: 2.								configuration at: 2 put: (sz + outRate) ]) ].						transitions asArray.					].		} ]! !!MoCMLLibrary class methodsFor: 'sdf' stamp: 'CiprianTeodorov 3/21/2014 16:54'!sdf_actor	" 1 state (0 -- initial state), n variables, m constants, k clocks"	^[:s :read :write :fire :run | 		s caseOf: { 			[ 0 ] -> [ { 0 -> 1 when: { fire }. } ].			[ 1 ] -> [ { 1 -> 2 when:  { read } } ].			[ 2 ] -> [ { 2 -> 3 when: { run } } ].			[ 3 ] -> [ { 3 -> 0 when: { write } } ]		} ]! !!MoCMLLibrary class methodsFor: 'sdf' stamp: 'CiprianTeodorov 10/20/2014 18:46'!sdf_actorSES	^[:s :cycle :nbCycles :start :execute :stop | |transitions|		transitions := OrderedCollection new.		(s = 0 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: (0->1 when: { start }) ].		(s = 1 and: [ cycle < nbCycles ]) ifTrue: [ 			transitions add: ( 1->1 when: { execute } do: [ :configuration | 				|cycle_|				cycle_ := configuration at: 2.				configuration at: 2 put: (cycle_ + 1)] )			].		(s = 1 and: [ cycle = nbCycles]) ifTrue: [ 			transitions add: ( 1->0 when: { stop } do: [ :configuration |				"reset cycle"				configuration at: 2 put: 0] )			].		transitions]! !!MoCMLLibrary class methodsFor: 'sdf' stamp: 'CiprianTeodorov 3/21/2014 13:23'!sdf_channel	" 1 state (0 -- initial state), n variables, m constants, k clocks"	^[:s :size :inRate :outRate :capacity :r :w  | 		s caseOf: { 			[ 0 ] -> [ |transitions|						transitions := OrderedCollection new.						size >= inRate ifTrue: [ 							transitions add: (0->0 when: { r } do: [:configuration | 								|sz| 								sz := configuration at: 2.								configuration at: 2 put: (sz - inRate) ]) ].						(capacity < 0 or: [capacity - size >= outRate]) ifTrue: [ 							transitions add: ((0->0) when: { w } do: [:configuration |								|sz| 								sz := configuration at: 2.								configuration at: 2 put: (sz + outRate) ]) ].						transitions asArray.					].		} ]! !"ClockSystem-Lib-MoCML"!!MultiWaveView class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 15:34'!openOn: model	|scene|	scene := self new model: model.	^ AthensSceneView new		scene: scene;		openInWindow.! !!MultiWaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:35'!model	^ model! !!MultiWaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:35'!model: anObject	model := anObject! !!MultiWaveView methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 15:34'!renderOn: aCanvas	model		doWithIndex: [ :each :idx | 			WaveView new				model: each;				position: 0 @ (idx * 40);				renderOn: aCanvas ]! !!TicksModel class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 3/26/2014 14:53'!example1	|m|	m := self new.	m ticks: #((a b c) (b c) (b) () () (a) (b) ).	m clocks: #(a b c).	^m! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/26/2014 14:47'!clocks		^ clocks! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/26/2014 14:47'!clocks: anObject		clocks := anObject! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/26/2014 15:07'!do: aBlock	self clocks		do: [ :clock | 			| values |			values := self ticks				withIndexCollect: [ :tickingclocks :idx | 					(tickingclocks asSet includes: clock)						ifTrue: [ 1 ]						ifFalse: [ 0 ] ].			aBlock value: clock clockName value: values ]! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/26/2014 14:47'!ticks		^ ticks! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 3/26/2014 14:47'!ticks: anObject		ticks := anObject! !!TicksModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:48'!waves	| waves |	waves := OrderedCollection new.	self do: [ :clock :data | waves add: (Wave named: clock data: data) ].	^ waves! !!Wave class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 15:43'!named: aName data: aCollection	^ self new		waveName: aName;		data: aCollection! !!Wave methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:58'!contents	^data! !!Wave methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:42'!data	^ data! !!Wave methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:42'!data: anObject	data := anObject! !!Wave methodsFor: 'printing' stamp: 'CiprianTeodorov 4/19/2015 15:56'!printOn: aStream	aStream nextPutAll: waveName printString.! !!Wave methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:42'!waveName	^ waveName! !!Wave methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:42'!waveName: anObject	waveName := anObject! !!WaveView class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 14:11'!openOn: model	|scene|	scene := self new model: model.	^ AthensSceneView new		scene: scene;		openInWindow.! !!WaveView methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 15:31'!initialize		position := 0@0.! !!WaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 14:11'!model		^ model! !!WaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 14:11'!model: anObject		model := anObject! !!WaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:35'!position	^ position! !!WaveView methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 15:35'!position: anObject	position := anObject! !!WaveView methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 15:59'!renderOn: aCanvas	| start gap current path morph |	aCanvas setPaint: Color black.	morph := model asTextMorph.	morph		position: position;		drawOnAthensCanvas: aCanvas.	start := 0.	current := position + (100 @ 22).	gap := 10.	aCanvas setPaint: Color green.	path := aCanvas		createPath: [ :builder | 			builder				absolute;				moveTo: current.			model contents				doWithIndex: [ :each :idx | 					each = start						ifTrue: [ 							current := (current x + gap) @ current y.							builder lineTo: current.							builder moveTo: current ]						ifFalse: [ 							each = 0								ifTrue: [ 									current := current x @ (current y + 20).									builder lineTo: current.									builder moveTo: current.									current := (current x + gap) @ current y.									builder lineTo: current.									builder moveTo: current ]								ifFalse: [ 									current := current x @ (current y - 20).									builder lineTo: current.									builder moveTo: current.									current := (current x + gap) @ current y.									builder lineTo: current.									builder moveTo: current ] ].					start := each ] ].	aCanvas setStrokePaint: (Color green ).	aCanvas drawShape: path! !"ClockSystem-UI-Simulator"!!ClockAbstractEditor class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 14:33'!defaultSpec	<spec: #default>		^ SpecLayout composed		newColumn: [ :c | 			c 				add: #menu height: self toolbarHeight;				add: #code ];		yourself! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/3/2015 00:40'!acceptBlock	^[ :string | self save: string ]! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 10/31/2015 14:31'!askForFileSave: aMessage	^(UITheme builder fileSave: aMessage extensions: #('ccsl' 'crd'))! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 14:34'!code	^code! !!ClockAbstractEditor methodsFor: 'api' stamp: 'CiprianTeodorov 10/31/2015 14:42'!initialExtent	^ 400@300! !!ClockAbstractEditor methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/3/2015 01:23'!initializeWidgets	menu := MenuModel new.	menu		addGroup: [ :group | 					group						addItem: [ :item | 							item								name: nil;								description: 'Open file';								icon: Smalltalk ui icons openIcon;								action: [ self open ] ].					group						addItem: [ :item | 							item								name: nil;								description: 'Save file';								icon: Smalltalk ui icons smallSaveIcon;								action: [ self save ] ].					group						addItem: [ :item | 							item								name: nil;								description: 'SaveAs file';								icon: Smalltalk ui icons smallSaveAsIcon;								action: [ self saveAs ] ] ];		addGroup: [ :group | 					group						addItem: [ :item | 							item								name: nil;								description: 'Inspect system';								icon: ClockSystemIcons inspectIcon;								action: [ self inspectSystem ] ].					group						addItem: [ :item | 							item								name: 'settings';								description: 'Settings';								action: [ (SettingBrowser forKeywords: self settingsSelector) open ] ] ].	menu applyTo: self.	code := self newText.		code		acceptBlock: self acceptBlock.	self focusOrder add: code! !!ClockAbstractEditor methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 14:36'!inspectSystem	self model inspect.! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 14:34'!menu	^menu! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 14:37'!model	^model ifNil: [ model := self modelClass new. ]	 ifNotNil: [ model ]! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 14:39'!modelClass	^ClockAbstractEditorModel ! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 11/12/2015 20:35'!open	| file |	file := UITheme builder fileOpen: 'Open a ClockSystem or ClockRDL file' extensions: #('ccsl' 'crd').	file		ifNotNil: [ 			self open: file fullName asFileReference ]! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 11/3/2015 00:35'!open: aFileReference	aFileReference readStreamDo: [ :stream | code text: stream contents ].	self model file: aFileReference! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 10/31/2015 14:31'!save	code hasUnacceptedEdits ifTrue: [ code accept ].	self save: code text! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 10/31/2015 14:31'!save: string	| file |	file := self model file		ifNil: [ 			| newFile |			newFile := self askForFileSave: 'Save ClockSystem model'.			newFile ifNil: [ ^ self ].			newFile ]		ifNotNil: [ self model file ].	self save: string inFile: file! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 10/31/2015 14:31'!save: string inFile: aFile	self model file: aFile.	FileStream		forceNewFileNamed: aFile		do: [ :stream | 			[ stream nextPutAll: string ]				ensure: [ stream ifNotNil: [ stream close ] ] ]! !!ClockAbstractEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 10/31/2015 14:31'!saveAs	| newFile |	newFile := self askForFileSave: 'SaveAs ClockSystem model'.	newFile ifNil: [ ^ self ].		code hasUnacceptedEdits ifTrue: [ code accept ].	self save: code text inFile: newFile. ! !!ClockAbstractEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2015 18:38'!settingsSelector	^self subclassResponsibility ! !!ClockSystemEditor class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 10:20'!defaultSpec	<spec: #default>		^ SpecLayout composed		newColumn: [ :c | 			c 				add: #menu height: self toolbarHeight;				add: #code ];		yourself! !!ClockSystemEditor methodsFor: 'initialization' stamp: 'CiprianTeodorov 10/31/2015 18:11'!initializeWidgets	super initializeWidgets.	menuItems := Dictionary new.	self menu autoRefresh: true.	self menu		addGroup: [ :group | 					self itemSimulate: group.					self itemExploreSystem: group ];		addGroup: [ :group | 					self itemSaveGML: group.					self itemSaveLTS: group.					self itemSaveFiacre: group.					self itemSaveFiacreGML: group.					self itemSaveIOGML: group ]."	self disableExportButtons."! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemExploreSystem: group	group		addItem: [ :item | 			item				name: nil;				description: 'Explore system';				icon: ClockSystemIcons explore;				action: [self  model exploreSystem ].			menuItems add: #explore -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:51'!itemSaveFiacre: group	group		addItem: [ :item | 			item				name: nil;				description: 'Save Fiacre';				icon: ClockSystemIcons fiacre;				action: [self  model saveFiacre ].			menuItems add: #saveFiacre -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemSaveFiacreGML: group	group		addItem: [ :item | 			item				name: nil;				description: 'Save Fiacre Graph';				icon: ClockSystemIcons fcr_graph;				action: [self  model saveFiacreGML ].			menuItems add: #saveFiacreGML -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemSaveGML: group	group		addItem: [ :item | 			item				name: nil;				description: 'Save GML';				icon: ClockSystemIcons graph;				action: [self  model saveGML ].			menuItems add: #saveGML -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemSaveIOGML: group	group		addItem: [ :item | 			item				name: nil;				description: 'Save IO Graph';				icon: ClockSystemIcons graph_io;				action: [self  model saveIOGML ].			menuItems add: #saveIOGML -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemSaveLTS: group	group		addItem: [ :item | 			item				name: nil;				description: 'Save LTS';				icon: ClockSystemIcons lts;				action: [self  model saveLTS ].			menuItems add: #saveLTS -> item ]! !!ClockSystemEditor methodsFor: 'widgets' stamp: 'CiprianTeodorov 10/31/2015 18:46'!itemSimulate: group	group		addItem: [ :item | 			item				name: nil;				description: 'Simulate';				icon: ClockSystemIcons simulate;				action: [ self model simulate ].			menuItems add: #simulate -> item ]! !!ClockSystemEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 15:42'!modelClass	^ClockSystemEditorModel ! !!ClockSystemEditor methodsFor: 'file manipulation' stamp: 'CiprianTeodorov 11/3/2015 01:28'!open: aFileReference	aFileReference		readStreamDo: [ :stream | 			aFileReference extension = 'crd'				ifTrue: [ 					code aboutToStyle: true.					code widget widget styler: (RDLStyler new view: code widget widget).					code text: stream contents ]				ifFalse: [ 					code aboutToStyle: true.					code widget widget styler: (code widget widget defaultStyler).					code text: stream contents ] ].	self model file: aFileReference! !!ClockSystemEditor methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/1/2015 18:39'!settingsSelector	^#('clockSystem')! !!ClockSystemEditor methodsFor: 'protocol' stamp: 'CiprianTeodorov 4/19/2015 10:12'!title	^'ClockSystem Editor'! !!ClockSystemBrowser class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 13:55'!defaultSpec	<spec: #default>		^ SpecLayout composed		newRow: [ :r | 			r newColumn: [ :c |				c add: #menu  height: self toolbarHeight; add: #tree] width: 250;				add: #editor];		yourself! !!ClockSystemBrowser class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 13:58'!open	^self new openWithSpec! !!ClockSystemBrowser methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 10:58'!editor		^ editor! !!ClockSystemBrowser methodsFor: 'protocol' stamp: 'CiprianTeodorov 4/19/2015 13:55'!initialExtent	^ 700@300! !!ClockSystemBrowser methodsFor: 'initialization' stamp: 'CiprianTeodorov 11/1/2015 13:12'!initializeWidgets	menu := MenuModel new.	menu		addGroup: [ :group | 			group				addItem: [ :item | 					item						name: nil;						description: 'Open directory';						icon: ClockSystemIcons open;						action: [ self open ] ].			group				addItem: [ :item | 					item						name: nil;						description: 'New file';						icon: ClockSystemIcons add;						action: [ self newFile ] ].			group				addItem: [ :item | 					item						name: nil;						description: 'Remove file';						icon: ClockSystemIcons remove;						action: [ self removeFile ] ].			group				addItem: [ :item | 					item						name: nil;						description: 'Inspect system';						icon: ClockSystemIcons refresh;						action: [ tree updateTree ] ] ].	tree := self newTree.	tree roots: {(Smalltalk imageDirectory)}.	tree		childrenBlock: [ :it | 			(it isNotNil and: [it isDirectory])				ifTrue: [ it asFileReference entries select: [ :each | each isDirectory or: [ each extension = 'ccsl' or: [ each extension = 'crd' ] ] ] ]				ifFalse: [ {} ] ].	tree displayBlock: [ :it | it ifNotNil: [ it basename ] ifNil: ['']].	tree doubleClick: [ self openModelInEditor ].	editor := self instantiate: ClockSystemEditor! !!ClockSystemBrowser methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 12:38'!menu	^menu! !!ClockSystemBrowser methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 12:40'!newFile	tree selectedItem		ifNotNil: [ 			| content |			content := tree selectedItem content.			content isDirectory				ifTrue: [ 					| name file |					name := UITheme builder textEntry: 'file name' title: 'Enter filename' entryText: 'filename'.					file := content asFileReference / (name).					file exists						ifFalse: [ 							| stream |							stream := file writeStream close ].					tree updateTree ] ]! !!ClockSystemBrowser methodsFor: 'private' stamp: 'CiprianTeodorov 4/19/2015 12:52'!open	root := UITheme builder chooseDirectory: 'Import ClockSystem models'.	tree roots: { root }.! !!ClockSystemBrowser methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 14:41'!openModelInEditor	tree selectedItem		ifNotNil: [ 			| content |			content := tree selectedItem content.			content isDirectory				ifFalse: [ editor open: content asFileReference ] ]! !!ClockSystemBrowser methodsFor: 'private' stamp: 'CiprianTeodorov 4/19/2015 13:41'!removeFile	tree selectedItem		ifNotNil: [ 			| content |			content := tree selectedItem content.			content isDirectory				ifFalse: [ 					(self confirm: 'Do you want to delete?')						ifTrue: [ content asFileReference delete ].					tree updateTree ] ]! !!ClockSystemBrowser methodsFor: 'protocol' stamp: 'CiprianTeodorov 4/19/2015 11:05'!title	^'ClockSystem Browser'! !!ClockSystemBrowser methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 10:58'!tree		^ tree! !!ClockAbstractEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 15:32'!file	^ file! !!ClockAbstractEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/31/2015 18:49'!file: anObject	file := anObject.	self fileChanged.! !!ClockAbstractEditorModel methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 18:49'!fileChanged	! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 18:54'!compile	file ifNil: [ self notify: 'No open model'. ^nil ].	file extension = 'crd'		ifTrue: [ system := self compileRDL ]		ifFalse: [ system := self compileSmalltalk ].	self inform: '[ClockSystem] compilation done'.! !!ClockSystemEditorModel methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 19:04'!compileRDL	| sys compiler |	compiler := Smalltalk		at: #RDLCompiler		ifAbsent: [ ^ self notify: 'RDLCompiler class is not in the image. Load ClockSystem-RDL-Core' ].	sys := compiler evaluate: file.	(sys isNil or: [ (sys isKindOf: ClockSystem) not ])		ifTrue: [ 			self notify: 'Invalid ClockSystem model'.			^ nil ].	^ sys! !!ClockSystemEditorModel methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 19:04'!compileSmalltalk	| sys |	sys := file readStreamDo: [ :stream | Compiler evaluate: stream contents , ' system' ].	(sys isNil or: [ (sys isKindOf: ClockSystem) not ])		ifTrue: [ 			self notify: 'Invalid ClockSystem model'.			^ nil ].	^ sys! !!ClockSystemEditorModel methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 18:15'!deriveFile: aString extension: extension	^self deriveFile: aString suffix: nil extension: extension ! !!ClockSystemEditorModel methodsFor: 'private' stamp: 'CiprianTeodorov 10/31/2015 18:15'!deriveFile: aString suffix: aSuffix extension: extension	^ file		ifNil: [ UITheme builder fileSave: aString extensions: {extension} ]		ifNotNil: [ file parent / (file base , (aSuffix ifNil: [ '' ] ifNotNil: [ '_' , aSuffix ]) , '.' , extension) ]! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!explorationResult		^ explorationResult! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!explorationResult: anObject		explorationResult := anObject! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 11/1/2015 13:04'!exploreSystem	system ifNil: [ self compile ifNil: [ ^ nil ] ].	system ifNil: [ ^nil ].	explorationResult := ClockParallelComposition exploreModel: system.	fiacreGraph := nil.	self		inform:			'[ClockSystem] exploration done (states: ' , explorationResult configurations size printString , ', transitions: '				, explorationResult graph size printString , ')'! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!fiacreGraph		^ fiacreGraph! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!fiacreGraph: anObject		fiacreGraph := anObject! !!ClockSystemEditorModel methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 18:50'!fileChanged		system := nil.	explorationResult := nil.	fiacreGraph := nil.! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 19:09'!saveFiacre	| newFile |	file ifNil: [ self notify: 'No open model'. ^nil ].	newFile := self deriveFile: 'Save fiacre' extension: 'fcr'.	newFile ifNil: [ ^ self ].	FileStream		newFileNamed: newFile		do: [ :stream | 			"generate the fiacre file"			TraFiacreGraph2Fiacre fiacre: self toFiacreGraph in: stream ].		self inform: '[ClockSystem] Fiacre saved (', newFile name printString, ')'.! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 19:12'!saveFiacreGML	| newFile |	file ifNil: [ self notify: 'No open model'. ^nil ].	newFile := self deriveFile: 'Save Fiacre GML' suffix: 'fcr' extension: 'gml'.	newFile ifNil: [ ^ self ].	FileStream		newFileNamed: newFile		do: [ :stream | 			"generate the fiacre file"			TraFiacreGraph2GML gml: self toFiacreGraph in: stream ].		self inform: '[ClockSystem] Fiacre GML saved (', newFile name printString, ')'.! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 19:13'!saveGML	| newFile |	file		ifNil: [ 			self notify: 'No open model'.			^ nil ].	newFile := self deriveFile: 'Save GML' extension: 'gml'.	newFile ifNil: [ ^ self ].	explorationResult ifNil: [ self exploreSystem ifNil: [ ^ nil ] ].	FileStream newFileNamed: newFile do: [ :stream | TraConfigurationGraph2GML gml: explorationResult in: stream ].	self inform: '[ClockSystem] GML saved (' , newFile name printString , ')'! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 19:13'!saveIOGML	| newFile |	file		ifNil: [ 			self notify: 'No open model'.			^ nil ].	newFile := self deriveFile: 'Save IO GML' suffix: 'io' extension: 'gml'.	newFile ifNil: [ ^ self ].	explorationResult ifNil: [ self exploreSystem ifNil: [ ^ nil ] ].	FileStream		newFileNamed: newFile		do: [ :stream | 			TraRemoveInternalClocks runOn: explorationResult.			TraConfigurationGraph2GML gml: explorationResult in: stream ].	self inform: '[ClockSystem] I/O GML saved (' , newFile name printString , ')'! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 19:13'!saveLTS	| prefix newFile |	file		ifNil: [ 			self notify: 'No open model'.			^ nil ].	prefix := UITheme builder		textEntry: '{sys}1'		title: 'Enter the toplevel component of your fiacre file'		entryText: '{sys}1'.	newFile := self deriveFile: 'Save LTS' extension: 'lts'.	newFile ifNil: [ ^ self ].	FileStream newFileNamed: newFile do: [ :stream | TraFiacreGraph2Lts lts: self toFiacreGraph prefix: prefix in: stream ].	self inform: '[ClockSystem] LTS saved (' , newFile name printString , ')'! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 11/1/2015 18:15'!simulate	system ifNil: [ self compile ifNil: [ ^nil ] ].	system ifNil: [ ^nil ].	explorationResult := ClockAbstractSimulation simulate: system heuristic: #randomSAT: "steps: 100".	[ | trace data  smodel |	trace := (ClockTraceExtractor from: explorationResult policy: ClockRandomPolicy new) extract.	data := (ClockTraceInterpreter run: trace) result.	smodel := TicksModel new		clocks: system clocks;		ticks: (data collect: [ :each | each vector asSet ]).	MultiWaveView openOn: smodel waves ] value.	self inform: '[ClockSystem] simulation done'.	! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!system		^ system! !!ClockSystemEditorModel methodsFor: 'accessing' stamp: 'CiprianTeodorov 4/19/2015 11:19'!system: anObject		system := anObject! !!ClockSystemEditorModel methodsFor: 'actions' stamp: 'CiprianTeodorov 10/31/2015 18:53'!toFiacreGraph	file ifNil: [ self notify: 'No open model'. ^nil ].	fiacreGraph		ifNil: [ 			explorationResult ifNil: [ self exploreSystem ifNil: [ ^nil ] ].				"remove the internal clocks from the result"			TraRemoveInternalClocks runOn: explorationResult.				"generate the fiacre graph, that generates the diamonds for the concidences"			fiacreGraph := (TraConfigurationGraph2FiacreGraph runOn: explorationResult) ].	^fiacreGraph! !!ClockSystemBranding class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 13:57'!createButton	"delete the button if it already exists"	iButton ifNotNil: [ iButton delete ].	iButton := IconicButton new		labelGraphic: ClockSystemIcons clockSystem;		color: Color transparent;		borderStyle: (BorderStyle width: 0 color: Color green);		on: #mouseDown send: #open to: ClockSystemBrowser;		position: 45 @ 45.	iButton openInWorld! !!ClockSystemBranding class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2013 23:37'!createThanks	"delete the button if it already exists"	iThanks ifNotNil: [ iThanks delete ].	iThanks := (LabelMorph contents: 'Many thanks to Luka LEROUX, and Jean-Charles ROGER!!')		"color: Color transparent;"		"borderStyle: (BorderStyle width: 0 color: Color green);		on: #mouseDown send: #open to: CCSLModelBrowser;"		position: 45 @ 130;		beSticky.	iThanks openInWorld ! !!ClockSystemBranding class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2013 23:38'!install	self setEnstaBackground.	self createButton.	self createThanks.! !!ClockSystemBranding class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 14:45'!setEnstaBackground	PolymorphSystemSettings showDesktopLogo: false.	World backgroundImage: ClockSystemIcons ensta_logo   layout: #topRight! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 4/19/2015 12:43'!add^ self icons		at: #add ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 11/2/2013 12:40'!clockSystem^ self icons		at: #clockSystem ifAbsentPut: [(Form	extent: (361@72)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 4/18/2015 14:46'!ensta_logo^self icons		at: #ensta_logo ifAbsentPut: [(Form	extent: (260@270)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 1073768593 1879074961 2147510417 2667604113 3204475025 3204475025 3204475025 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 3204475025 3204475025 2936039569 2147510417 2147510417 1342204049 1073768593 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 1073768593 2149612447 2936039569 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 3204475025 2399168657 1610639505 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 1342204049 2399168657 3472910481 4278216849 4284522938 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 2936039569 1879074961 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 1879074961 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 2667604113 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 1879074961 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 2667604113 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 2399168657 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 2147510417 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4294967295 4294967295 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 1610639505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 1610639505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4291814378 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 2147510417 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4294967295 4286624968 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4290763236 4283471795 4294967295 4294967295 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4280318879 4294967295 4294967295 4294967295 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4286624968 4278216849 4293916408 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4286624968 4278216849 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4287610319 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1610639505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4294967295 4282420909 4278216849 4285573825 4294967295 4294967295 4291814378 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4294967295 4278216849 4278216849 4279267736 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4293916408 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4293916408 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1090519039 4289712349 4286624968 4286624968 4285573825 4282420909 4282420909 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 822083583 4026531839 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4290763236 4288661206 4286624968 4283471795 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4017598148 4290763236 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4290763236 4288661206 4286624968 4282420909 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1879074961 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4282420909 4285573825 4286624968 4290763236 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4287610319 4284522938 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4282420909 4285573825 4287610319 4290763236 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4287610319 4284522938 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4282420909 4286624968 4288661206 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4289712349 4285573825 4282420909 4278216849 4286624968 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4283471795 4286624968 4289712349 4290763236 4293916408 4294967295 3489660927 285212671 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4285573825 4288661206 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4284522938 4288661206 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 2952790015 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4286624968 4289712349 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4285573825 4280318879 4278216849 4278216849 4286624968 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4290763236 4290763236 1616222902 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4285573825 4289712349 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4287610319 4288661206 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4286624968 4283471795 4281369766 4278216849 4278216849 4278216849 4278216849 4009781393 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4292865265 4289712349 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4285573825 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4283471795 4288661206 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4284522938 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4293916408 4294967295 4294967295 4294967295 4294967295 4288661206 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4014248110 553648127 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4292865265 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4285573825 4289712349 4294967295 4294967295 3221225471 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4283471795 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4289712349 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4284522938 4288661206 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 1358954495 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4281369766 4278216849 4279267736 4284522938 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4283471795 4287610319 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293917438 4289717754 4285583861 4281384177 3741363694 268479982 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4280318879 4287610319 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4286624968 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4292865265 4294967295 4294967295 4294967295 4292865265 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4287610319 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4286633719 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 2147528174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4279267736 4283471795 4287610319 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4286633719 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4009799150 536915438 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4288661206 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4293916408 4294967295 4294967295 4294967295 4292865265 4284522938 4287610319 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293917438 4289717754 4286633719 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 2667621870 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292867581 4288667897 4285583861 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 536915438 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4283471795 4286624968 4290763236 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4287618040 4283484147 4280334320 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 2670968305 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4284522938 4287610319 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288667897 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4289717754 4026531839 285212671 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4280318879 4278216849 4278216849 4282420909 4283471795 4286624968 4289712349 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292867581 4289717754 4287618040 4294967295 4294967295 4294967295 4294967295 4289717754 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4293917438 4294967295 4294967295 2164260863 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292867581 4289717754 4286633719 4282434290 4279284463 4278234606 4278234606 4278234606 4292867581 4294967295 4294967295 4294967295 4294967295 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4290767867 4294967295 4294967295 4294967295 4294967295 3749754056 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4283471795 4286624968 4289712349 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4288667897 4285583861 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4294967295 4291817724 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4285583861 4293917438 4294967295 4294967295 4294967295 4291814378 4281369766 4278216849 1610639505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4291814378 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4282420909 4285573825 4286624968 4289712349 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291817724 4289717754 4286633719 4283484147 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4291817724 4294967295 4294967295 4294967295 4294967295 4284534004 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4290767867 4294967295 4294967295 4294967295 4294967295 4287610319 4279267736 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4291814378 4294967295 4294967295 4294967295 4279267736 4282420909 4282420909 4286624968 4286624968 4290763236 4290763236 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291817724 4289717754 4286633719 4283484147 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4288667897 4290767867 4290767867 4288667897 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4285583861 4293917438 4294967295 4294967295 4294967295 4292865265 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4278216849 4278216849 4278216849 4279267736 4282420909 4282420909 4285573825 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292867581 4290767867 4287618040 4286633719 4282434290 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4289717754 4294967295 4294967295 4294967295 4294967295 4289712349 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4282420909 4282420909 4284522938 4286624968 4290763236 4294967295 4294967295 4294967295 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291817724 4290767867 4287618040 4286633719 4282434290 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4283484147 4293917438 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4286624968 4286624968 4286624968 4286624968 4286624968 4289712349 4290763236 4290763236 4290763236 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4286633719 4286633719 4283484147 4282434290 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4289717754 4294967295 4294967295 4294967295 4294967295 4290763236 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293917438 4290767867 4289717754 4286633719 4286633719 4284534004 4282434290 4282434290 4287618040 4294967295 4294967295 4294967295 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4292867581 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292867581 4290767867 4290767867 4290767867 4290767867 4286633719 4286633719 4286633719 4284534004 4282434290 4282434290 4282434290 4289717754 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4287618040 4294967295 4294967295 4294967295 4294967295 4291814378 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4287618040 4286633719 4286633719 4286633719 4286633719 4286633719 4286633719 4282434290 4282434290 4282434290 4282434290 4282434290 4282434290 4282434290 4282434290 4282434290 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4291817724 4294967295 4294967295 4294967295 4294967295 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4292865265 4294967295 4294967295 4294967295 4294967295 4293917438 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4285583861 4293917438 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1879074961 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4294967295 4292867581 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4294967295 4294967295 4294967295 4282434290 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4289717754 4294967295 4294967295 4294967295 4294967295 4290763236 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4289717754 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4294967295 4294967295 4294967295 4285583861 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4293917438 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4290763236 4294967295 4294967295 4294967295 4294967295 4293917438 4285583861 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4294967295 4293916408 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4292865265 4294967295 4294967295 4294967295 4294967295 4290767867 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4290767867 4294967295 4294967295 4294967295 4294967295 4290763236 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1879074961 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4293917438 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4290763236 4294967295 4294967295 4294967295 4294967295 4291817724 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4285583861 4294967295 4294967295 4294967295 4294967295 4293916408 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399168657 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4292867581 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4288667897 4294967295 4294967295 4294967295 4294967295 4290763236 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4289712349 4294967295 4294967295 4294967295 4294967295 4291817724 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4287618040 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4291817724 4294967295 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4293916408 4294967295 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4293917438 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1610639505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4289712349 4294967295 4294967295 4294967295 4294967295 4291817724 4280334320 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4294967295 4291814378 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4293916408 4294967295 4294967295 4294967295 4293917438 4284534004 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4294967295 4294967295 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4289712349 4294967295 4294967295 4294967295 4294967295 4289717754 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4293917438 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4288661206 4290763236 4289712349 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4292867581 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4291817724 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4291814378 4294967295 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4291817724 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4290767867 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4292867581 4294967295 4294967295 4294967295 4293916408 4281369766 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4293916408 4294967295 4294967295 4294967295 4293917438 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4293917438 4294967295 4294967295 4294967295 4291814378 4280318879 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4291814378 4294967295 4294967295 4294967295 4294967295 4285583861 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4293917438 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4288667897 4279284463 4278234606 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4293917438 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4293917438 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4293916408 4294967295 4294967295 4294967295 4291817724 4280334320 4278234606 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4293917438 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4291814378 4294967295 4294967295 4294967295 4293917438 4282434290 4278234606 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4291817724 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4289712349 4294967295 4294967295 4294967295 4294967295 4284534004 4278234606 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4289717754 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4291817724 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4291814378 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4289717754 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4292865265 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4293916408 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4293916408 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4292865265 4294967295 4293916408 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4288661206 4294967295 4294967295 4294967295 4294967295 4293916408 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4288661206 4294967295 4294967295 4294967295 4294967295 4293916408 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4292865265 4294967295 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4281384177 4293917438 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4282420909 4278216849 4278216849 4278216849 4278216849 4282420909 4293916408 4294967295 4294967295 4294967295 4294967295 4291814378 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4287618040 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4291817724 4294967295 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4280318879 4278216849 4278216849 4278216849 4280318879 4291814378 4294967295 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4294967295 4288667897 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4292865265 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4280318879 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288667897 4279284463 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4279267736 4278216849 4278216849 4283471795 4293916408 4294967295 4294967295 4294967295 4294967295 4292865265 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291817724 4279284463 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4293917438 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4293916408 4294967295 4294967295 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4293916408 4294967295 4294967295 4294967295 4294967295 4293916408 4286624968 4279267736 4278216849 4279267736 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4287610319 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4291814378 4294967295 4294967295 4294967295 4294967295 4291817724 4279284463 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4288661206 4294967295 4294967295 4294967295 4294967295 4294967295 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4288661206 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4286624968 4279267736 4278216849 4285573825 4293916408 4294967295 4294967295 4294967295 4294967295 4292865265 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4286624968 4282420909 4293916408 4294967295 4294967295 4294967295 4291817724 4279284463 4278234606 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4285583861 4294967295 4294967295 4294967295 4293916408 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4288661206 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4287610319 4280318879 4280318879 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4286624968 4278216849 4281369766 4293916408 4294967295 4294967295 4294967295 4291817724 4279284463 4286633719 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4293917438 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4288661206 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4280318879 4283471795 4293916408 4294967295 4294967295 4294967295 4294967295 4293916408 4286624968 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4281369766 4292865265 4294967295 4294967295 4294967295 4293917438 4289717754 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1879074961 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4288661206 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4283471795 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4283484147 4294967295 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4279284463 4292867581 4294967295 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4285573825 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4286633719 4294967295 4294967295 4294967295 4293916408 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4281384177 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4293917438 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4288661206 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4292865265 4294967295 4294967295 4294967295 4291817724 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4285573825 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4294967295 4294967295 4288667897 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399168657 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4288661206 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4283484147 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4284522938 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4287610319 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4293917438 4280334320 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4285573825 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4284522938 4279267736 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4288667897 4294967295 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4285573825 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4284522938 4278216849 4286624968 4294967295 4294967295 4294967295 4288661206 4294967295 4294967295 4294967295 4285583861 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4280334320 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4292865265 4294967295 4294967295 4294967295 4279267736 4293916408 4294967295 4294967295 4293917438 4280334320 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4287618040 4294967295 4294967295 4294967295 4292865265 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4281369766 4283471795 4294967295 4294967295 4294967295 4290767867 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4293917438 4294967295 4294967295 4294967295 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4279267736 4284522938 4288661206 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4294967295 4294967295 4294967295 4294967295 4283484147 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4294967295 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4286624968 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399168657 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4283471795 4287610319 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293917438 4289717754 4286633719 4282434290 4280334320 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4278234606 4290767867 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4284522938 4289712349 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290767867 4289717754 4286633719 4283484147 4281384177 4280334320 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4284522938 4287610319 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4291814378 4283471795 4287610319 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4282420909 4283471795 4286624968 4286624968 4288661206 4290763236 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4288661206 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4282420909 4282420909 4286624968 4286624968 4285573825 4282420909 4282420909 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4280318879 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4288661206 4292865265 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4290763236 4287610319 4284522938 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4293917438 4282434290 4286633719 4288667897 4290767867 4293917438 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4290763236 4287610319 4283471795 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1879074961 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4289712349 4285573825 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4285583861 4278234606 4278234606 4278234606 4278234606 4278234606 4282434290 4290767867 4294967295 4294967295 4294967295 4292865265 4290763236 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4290763236 4290763236 4287610319 4286624968 4284522938 4282420909 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4293917438 4279284463 4278234606 4278234606 4278234606 4278234606 4278234606 4293917438 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4293390513 4292142192 4291091004 4290828079 4290828079 4290828079 4290828079 4293127844 4294967295 4294967295 4294967295 4294967295 4294967295 4293916107 4294704626 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4288661206 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4278234606 4278234606 4284534004 4294967295 4294967295 4294967295 4293916408 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4285573825 4294967295 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293653438 4294967295 4294967295 4294967295 4294967295 4293127844 4290828079 4291353673 4292404861 4293390513 4294704626 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4287610319 4281369766 4278216849 4278216849 4278216849 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4293917438 4279284463 4278234606 4278234606 4278234606 4289717754 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294967295 4294967295 4294967295 4292404861 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294179032 4294967295 4294967295 4294967295 4294967295 4292142192 4290828079 4290828079 4290828079 4290828079 4291616598 4293127844 4294441701 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291814378 4284522938 4279267736 4278216849 4282420909 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4286633719 4278234606 4278234606 4279284463 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4291814378 4294967295 4294967295 4294967295 4294967295 4294441701 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291616598 4294704626 4294967295 4294967295 4294967295 4294704626 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291616598 4293127844 4294441701 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4288661206 4285573825 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4293917438 4279284463 4278234606 4284534004 4294967295 4294967295 4294967295 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3204475025 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4294179032 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292404861 4294967295 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4293390513 4294704626 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4286633719 4278234606 4289717754 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294967295 4294967295 4294967295 4294704626 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293653438 4294967295 4294967295 4294967295 4294967295 4292667786 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4292667786 4294441701 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4292867581 4279284463 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294441701 4294967295 4294967295 4294967295 4294704626 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4293916107 4294967295 4294967295 4294967295 4294967295 4294967295 4292865265 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4290767867 4294967295 4294967295 4294967295 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4292865265 4294967295 4294967295 4294967295 4294967295 4293916107 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4294967295 4293653438 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292142192 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4281369766 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879074961 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4287610319 4294967295 4294967295 4294967295 4294967295 4294441701 4291616598 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293127844 4294967295 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4280318879 4278216849 4278216849 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4293916408 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4292865265 4294967295 4294967295 4294967295 4294967295 4292404861 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294441701 4294967295 4294967295 4294967295 4294441701 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293653438 4293916107 4294967295 4294967295 4294967295 4294967295 4293916408 4286624968 4279267736 4290763236 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4287610319 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4287610319 4294967295 4294967295 4294967295 4294967295 4293390513 4290828079 4290828079 4290828079 4290828079 4290828079 4292142192 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4292930455 4290828079 4291879267 4294441701 4294967295 4294967295 4294967295 4294967295 4292865265 4292865265 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2936039569 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4292865265 4294967295 4294967295 4294967295 4293916107 4291091004 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4294704626 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4292667786 4294704626 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4288661206 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4287610319 4294967295 4294967295 4294967295 4294179032 4291353673 4290828079 4290828079 4290828079 4291616598 4294967295 4294967295 4294967295 4294967295 4293127844 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4291091004 4293127844 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4294967295 4294967295 4294967295 4294967295 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4282420909 4293916408 4294967295 4294967295 4294704626 4291616598 4290828079 4290828079 4290828079 4293390513 4294967295 4294967295 4294967295 4294967295 4291353673 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291616598 4293916107 4294967295 4294967295 4294967295 4294967295 4293916408 4285573825 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4290763236 4294967295 4294967295 4291814378 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4290763236 4294967295 4294967295 4294704626 4291616598 4290828079 4290828079 4291353673 4294967295 4294967295 4294967295 4294967295 4293390513 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293390513 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4280318879 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4287610319 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294704626 4291616598 4290828079 4290828079 4293390513 4294967295 4294967295 4294967295 4294967295 4291353673 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 3472910481 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4293916408 4294967295 4294704626 4291616598 4290828079 4291353673 4294967295 4294967295 4294967295 4294967295 4293390513 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293653438 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536897681 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4294704626 4291616598 4290828079 4293390513 4294967295 4294967295 4294967295 4294704626 4291091004 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4291616598 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4291814378 4294967295 4294704626 4291091004 4291616598 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4290828079 4291091004 4293390513 4294967295 4294967295 4294967295 4294967295 4293916408 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4291814378 4294967295 4294179032 4291091004 4293916107 4294967295 4294967295 4294967295 4294441701 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4292404861 4294967295 4294967295 4294967295 4294967295 4294967295 4286624968 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4293916408 4294967295 4293390513 4292404861 4294967295 4294967295 4294967295 4294967295 4292404861 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4291616598 4294704626 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4281369766 4293916408 4294967295 4292930455 4294704626 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4291616598 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294179032 4294967295 4294967295 4294967295 4294967295 4291353673 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291353673 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667604113 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4291814378 4294967295 4294967295 4294967295 4294967295 4294967295 4294441701 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291616598 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294704626 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294179032 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4294967295 4293127844 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4291616598 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294704626 4294967295 4294967295 4294967295 4294967295 4291814378 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4292865265 4294967295 4294967295 4294967295 4294967295 4294441701 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291616598 4294704626 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4294967295 4291616598 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292142192 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4292865265 4294967295 4294967295 4294967295 4294967295 4292667786 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4294967295 4294967295 4284522938 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147510417 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4286624968 4294967295 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4294967295 4294967295 4281369766 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073768593 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4279267736 4294967295 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294704626 4294967295 4294967295 4294967295 4294967295 4292865265 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 2936039569 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4288661206 4294967295 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292667786 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292142192 4294967295 4294967295 4294967295 4294967295 4294967295 4289712349 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342204049 4009781393 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4283471795 4294967295 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291353673 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293653438 4294967295 4294967295 4294967295 4294967295 4294967295 4283471795 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2399168657 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268462225 2399168657 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4293916408 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291091004 4294704626 4294967295 4294967295 4294967295 4294967295 4293916408 4279267736 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 1073768593 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805333137 3204475025 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4289712349 4294967295 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292404861 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 2147510417 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 3741345937 4278216849 4278216849 4278216849 4278216849 4278216849 4284522938 4294967295 4294967295 4294967295 4294967295 4291616598 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294179032 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 3741345937 4278216849 4278216849 4278216849 4280318879 4294967295 4294967295 4294967295 4294967295 4292404861 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 3741345937 4278216849 4278216849 4293916408 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 2667604113 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610639505 3472910481 4290763236 4294967295 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4293390513 4294967295 4294967295 4294967295 4291879267 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293653438 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4294967295 4294967295 4290763236 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4009781393 2399168657 536897681 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1086314980 2952790015 4294967295 4294967295 4294441701 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4292142192 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4294967295 4294967295 4282420909 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 4278216849 3472910481 1610639505 268462225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 553648127 1895825407 3489660927 4290828079 4290828079 4290828079 4292930455 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294967295 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4291879267 4294967295 4294967295 4294967295 4294967295 4294967295 4288661206 4278216849 4278216849 4278216849 4278216849 4278216849 3741345937 2399168657 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 549508911 1891686191 3485521711 4292930455 4294967295 4294967295 4294967295 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4294704626 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4294441701 4294967295 4294967295 4294967295 4294967295 4294967295 4279267736 4278216849 3741345937 2399168657 1342204049 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 553648127 1895825407 3221225471 4026531839 4292930455 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4293916107 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4292667786 4294967295 4294967295 4294967295 4294967295 3489660927 1883870128 805333137 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 817944367 1891686191 2680215343 3485521711 4290828079 4290828079 4290828079 4294179032 4294967295 4294967295 4293916107 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4022918219 3221225471 2415919103 1627389951 285212671 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1086379823 1623250735 2164260863 3221225471 3221225471 4025414856 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 4290828079 3485521711 3217086255 2411779887 2160121647 1086379823 549508911 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 817944367 1086379823 1086379823 1086379823 1086379823 1086379823 1086379823 1086379823 1086379823 1086379823 1086379823 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 1342201993 2147508361 2667602057 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 2936037513 2147508361 1342201993 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342201993 2667602057 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 1879072905 268460169 0 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 268460169 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 1073766537 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 1073766537 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 268460169 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 2667602057 1342201993 268460169 0 0 0 0 536895625 1610637449 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 268460169 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 268460169 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 268460169 0 0 0 0 0 0 0 0 0 0 1073766537 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 805331081 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 268460169 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 3204472969 1879072905 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 2667602057 1610637449 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 2667602057 1879072905 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 3204472969 2147508361 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 2147508361 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 268460169 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 268460169 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 1610637449 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 1610637449 2936037513 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 1610637449 2399166601 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 1879072905 2936037513 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 2399166601 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2147508361 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 1879072905 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 1610637449 805331081 0 0 0 0 0 536895625 1073766537 2399166601 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 0 0 2936037513 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3472908425 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 805331081 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1879072905 0 0 0 0 0 0 0 0 536895625 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 268460169 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 1342201993 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 1610637449 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3204472969 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 2147508361 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2399166601 0 0 0 0 0 0 1073766537 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 0 0 0 0 0 0 0 0 0 0 0 0 1073766537 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 2147508361 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399166601 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1610637449 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2667602057 0 0 0 0 0 0 0 4009779337 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 2936037513 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147508361 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3741343881 2147508361 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3204472969 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 1073766537 0 0 0 0 0 1610637449 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4009779337 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2667602057 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 536895625 0 0 0 0 0 0 0 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 536895625 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342201993 2667602057 3741343881 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 4278214793 3472908425 2399166601 1342201993 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805331081 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 0 0 0 0 0 0 805331081 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 805331081 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536895625 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 1073766537 268460169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268460169 1073766537 1879072905 2147508361 2147508361 2667602057 3204472969 3204472969 3204472969 2399166601 2147508361 2147508361 1610637449 1073766537 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 1082163588 1082163588 1350599044 2155905412 2155905412 2155905412 1619034500 1082163588 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 2155905412 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3481305476 1082163588 276857220 0 0 813728132 1619034500 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1350599044 2407563652 1350599044 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 813728132 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 2675999108 4018176388 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 4286611844 1887469956 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 2155905412 2675999108 2675999108 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 545292676 1619034500 2155905412 2675999108 3212870020 2155905412 2155905412 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 2155905412 2155905412 2675999108 3212870020 2155905412 2155905412 1350599044 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 2155905412 2155905412 3212870020 2407563652 2155905412 1350599044 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 1887469956 2155905412 3212870020 2675999108 2155905412 1350599044 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 2155905412 2155905412 2944434564 2944434564 2155905412 1887469956 813728132 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4018176388 0 276857220 3212870020 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 1082163588 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 2155905412 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 1082163588 2944434564 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 2155905412 0 1887469956 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 1082163588 0 1082163588 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 1887469956 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 276857220 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 813728132 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 2407563652 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 1887469956 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 2944434564 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 3212870020 3212870020 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1887469956 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 3212870020 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 276857220 0 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 276857220 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 3212870020 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 1619034500 3749740932 4286611844 4286611844 4286611844 4286611844 3481305476 276857220 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 2944434564 2944434564 2407563652 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 4018176388 1619034500 0 0 0 0 1887469956 4018176388 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 1082163588 1082163588 2675999108 4286611844 4286611844 4286611844 4286611844 2675999108 1082163588 1082163588 1082163588 1082163588 1082163588 545292676 0 0 0 0 0 0 0 545292676 4286611844 4286611844 3212870020 1350599044 276857220 0 0 0 276857220 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 1350599044 0 0 545292676 2155905412 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 1350599044 1082163588 1350599044 2944434564 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 0 0 0 3481305476 4286611844 4286611844 4286611844 4286611844 3481305476 1082163588 0 0 0 276857220 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3749740932 2155905412 2155905412 2155905412 2407563652 3212870020 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 276857220 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1887469956 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4018176388 813728132 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4018176388 276857220 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3749740932 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 813728132 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 1082163588 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3481305476 276857220 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1350599044 0 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 1350599044 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 1887469956 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 2944434564 0 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 4018176388 0 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4018176388 276857220 0 0 0 0 0 0 0 0 3749740932 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 1619034500 0 0 0 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 1887469956 4286611844 4286611844 4286611844 4286611844 1887469956 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4018176388 3212870020 3212870020 3212870020 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 276857220 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 0 0 1887469956 4286611844 4286611844 4286611844 4286611844 1619034500 0 0 0 0 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 813728132 1887469956 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 276857220 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 276857220 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 1619034500 2155905412 2407563652 3212870020 3212870020 3749740932 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 1350599044 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 3749740932 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 2944434564 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 3749740932 4286611844 4286611844 4286611844 4286611844 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 4018176388 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 2675999108 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 276857220 4286611844 4286611844 4286611844 4286611844 4286611844 276857220 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 4018176388 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 545292676 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 3749740932 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 2944434564 2155905412 2155905412 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 276857220 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 545292676 4018176388 4286611844 4286611844 4286611844 4286611844 4018176388 2155905412 545292676 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3749740932 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4018176388 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 3749740932 545292676 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 813728132 4286611844 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4018176388 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 3481305476 4286611844 4286611844 4286611844 4286611844 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 276857220 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 1350599044 0 0 0 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 3749740932 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 1887469956 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 3749740932 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 1887469956 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 0 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 1887469956 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 276857220 4018176388 4286611844 4286611844 4286611844 4286611844 3481305476 276857220 0 0 0 0 0 0 0 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 276857220 2944434564 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 276857220 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 545292676 0 0 0 0 276857220 2675999108 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 4018176388 1350599044 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 545292676 1350599044 2675999108 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 545292676 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 1619034500 276857220 0 0 0 0 545292676 1619034500 2944434564 4018176388 1350599044 0 0 0 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 545292676 0 276857220 1082163588 276857220 0 0 0 0 0 0 4018176388 4286611844 4286611844 4286611844 4286611844 3481305476 813728132 0 0 0 1082163588 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2944434564 1887469956 1350599044 2407563652 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 813728132 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 2944434564 1350599044 0 0 0 0 0 813728132 1887469956 3481305476 4018176388 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 813728132 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 3212870020 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 2407563652 0 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 3212870020 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 1619034500 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 3212870020 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 545292676 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 545292676 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 4286611844 4286611844 4286611844 4286611844 3212870020 0 0 0 0 0 0 0 0 0 0 0 276857220 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3212870020 276857220 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 1082163588 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 2407563652 813728132 0 0 0 0 0 0 0 0 0 0 0 0 0 2155905412 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 3749740932 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3481305476 1887469956 0 0 0 0 0 0 0 0 0 0 0 0 1350599044 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 1082163588 0 0 0 0 0 0 0 276857220 2407563652 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 3749740932 1350599044 0 4018176388 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 2675999108 3749740932 4286611844 4286611844 4286611844 4286611844 4018176388 2944434564 1082163588 0 0 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 1082163588 4286611844 4286611844 4286611844 4286611844 4286611844 0 0 0 0 0 0 0 0 0 0 3212870020 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 276857220 2155905412 4018176388 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2944434564 1350599044 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 1082163588 1082163588 1887469956 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 2155905412 1350599044 1082163588 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 545292676 1082163588 1082163588 1082163588 1082163588 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 2155905412 2675999108 3212870020 3212870020 3212870020 3212870020 2944434564 2155905412 1350599044 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 1887469956 2944434564 3212870020 3212870020 3212870020 2675999108 1619034500 276857220 0 0 0 0 0 0 0 0 0 545292676 2155905412 2944434564 3212870020 3212870020 3212870020 2155905412 1350599044 0 0 0 813728132 1082163588 1082163588 1082163588 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 813728132 1082163588 0 0 0 0 0 276857220 4286611844 4286611844 4286611844 4286611844 3481305476 0 0 0 0 0 0 0 0 0 276857220 1082163588 1082163588 1082163588 1082163588 1082163588 0 0 0 0 0 0 0 0 0 0 813728132 1082163588 1082163588 1082163588 1082163588 545292676 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1350599044 2155905412 3212870020 3212870020 3212870020 3212870020 3212870020 2407563652 2155905412 1082163588 276857220 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1350599044 4286611844 4286611844 4286611844 4286611844 2944434564 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2675999108 4286611844 4286611844 4286611844 4286611844 2155905412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 545292676 4286611844 4286611844 4286611844 4286611844 4286611844 813728132 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 276857220 0 0 0 0 0 0 0 0 0 0 276857220 3481305476 4286611844 4286611844 4286611844 4286611844 3749740932 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1619034500 4286611844 3212870020 1350599044 0 0 0 0 0 0 0 813728132 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 1350599044 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2944434564 4286611844 4286611844 4286611844 4018176388 2944434564 2155905412 1887469956 1887469956 2155905412 3481305476 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 2675999108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 276857220 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 545292676 2155905412 3212870020 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4286611844 4018176388 2944434564 1619034500 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1082163588 1082163588 1082163588 1082163588 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/31/2015 14:48'!explore^ self icons		at: #explore ifAbsentPut: [(Form	extent: (53@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912 536870912 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147483648 2147483648 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2147483648 2147483648 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 2147483648 536870912 0 822018048 1895759872 0 0 1358888960 1358888960 536870912 1073741824 805306368 2147483648 805306368 0 0 2147483648 2147483648 0 0 536870912 1879048192 1342177280 0 0 0 1610612736 536870912 1610612736 0 268435456 1879048192 1610612736 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399141888 2936012800 1342177280 3204448256 1073741824 0 3221159936 1627324416 553582592 3758030848 285147136 1073741824 4009754624 2667577344 1342177280 3472883712 1610612736 0 2147483648 2147483648 0 1342177280 3472883712 1342177280 2147483648 3472883712 0 0 3472883712 3204448256 1610612736 536870912 3741319168 1610612736 2147483648 2936012800 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3741319168 0 0 1342177280 2667577344 0 553582592 3758030848 2952724480 1358888960 0 1073741824 3741319168 0 0 536870912 3472883712 0 2147483648 2147483648 0 3472883712 536870912 0 0 2667577344 1342177280 0 4278190080 536870912 0 2147483648 1610612736 0 0 3472883712 536870912 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 4009754624 3204448256 3204448256 3204448256 2399141888 0 0 2684289024 4026466304 0 0 1073741824 3204448256 0 0 0 4278190080 0 2147483648 2147483648 0 4278190080 0 0 0 2147483648 2147483648 0 4278190080 0 0 3204448256 3472883712 3204448256 3204448256 3204448256 805306368 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268435456 3741319168 0 0 0 0 0 822018048 3758030848 2952724480 1895759872 0 1073741824 3472883712 0 0 536870912 3472883712 0 2147483648 2147483648 0 3472883712 536870912 0 0 2667577344 1342177280 0 4278190080 0 0 2399141888 1610612736 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2399141888 2936012800 1073741824 1342177280 536870912 0 3489595392 1090453504 553582592 3758030848 553582592 1073741824 4009754624 2147483648 1342177280 3472883712 1342177280 0 2147483648 2147483648 0 1342177280 3472883712 1342177280 2147483648 3472883712 0 0 4278190080 0 0 536870912 3741319168 1610612736 1073741824 1342177280 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805306368 2147483648 1610612736 536870912 822018048 1895759872 0 0 1358888960 1358888960 1073741824 3204448256 805306368 2147483648 805306368 0 0 1073741824 1073741824 0 0 536870912 1879048192 1342177280 0 0 0 2147483648 0 0 0 268435456 1610612736 2147483648 1073741824 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 3204448256 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 3204448256 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/26/2013 14:45'!fcr_graph^ self icons		at: #fcr_graph ifAbsentPut: [(Form	extent: (48@14)	depth: 32	fromArray: #( 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1140850688 3992977408 4278190080 570425344 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 4278190080 1140850688 16777215 16777215 16777215 16777215 16777215 16777215 16777215 3707764736 2566914048 285212672 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 16777215 16777215 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 16777215 16777215 16777215 3707764736 4278190080 4278190080 3137339392 570425344 3137339392 4278190080 4278190080 1711276032 1140850688 4278190080 3137339392 3992977408 16777215 16777215 16777215 16777215 855638016 3422552064 4278190080 3137339392 4278190080 1140850688 1140850688 4278190080 3137339392 3992977408 1426063360 3707764736 4278190080 3707764736 1140850688 16777215 1140850688 4278190080 2852126720 4278190080 3707764736 1140850688 16777215 4278190080 3137339392 3992977408 4278190080 1996488704 16777215 16777215 16777215 16777215 4278190080 1711276032 16777215 3707764736 2852126720 285212672 570425344 285212672 1711276032 4278190080 2852126720 1140850688 16777215 16777215 16777215 16777215 3992977408 2566914048 285212672 1996488704 4278190080 1711276032 1711276032 4278190080 2852126720 1140850688 570425344 855638016 16777215 2281701376 3992977408 16777215 1711276032 4278190080 2281701376 285212672 2566914048 3992977408 285212672 4278190080 3137339392 285212672 1711276032 4278190080 570425344 16777215 16777215 16777215 4278190080 1711276032 1140850688 4278190080 285212672 16777215 16777215 16777215 1711276032 4278190080 285212672 1140850688 4278190080 4278190080 4278190080 1140850688 4278190080 285212672 16777215 16777215 4278190080 1711276032 1711276032 4278190080 285212672 16777215 570425344 2852126720 4278190080 4278190080 4278190080 16777215 1711276032 4278190080 16777215 16777215 285212672 4278190080 1140850688 4278190080 1711276032 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 4278190080 1711276032 1140850688 4278190080 285212672 16777215 16777215 16777215 1711276032 4278190080 16777215 16777215 16777215 16777215 16777215 1140850688 4278190080 285212672 16777215 16777215 4278190080 1711276032 1711276032 4278190080 16777215 16777215 3707764736 2852126720 570425344 1711276032 4278190080 16777215 1711276032 4278190080 16777215 16777215 285212672 4278190080 1140850688 4278190080 1711276032 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 4278190080 1711276032 16777215 3992977408 2852126720 285212672 570425344 285212672 1711276032 4278190080 16777215 16777215 16777215 16777215 16777215 285212672 3992977408 2281701376 16777215 1996488704 4278190080 1711276032 1711276032 4278190080 16777215 16777215 4278190080 1996488704 285212672 2852126720 4278190080 16777215 1711276032 4278190080 1996488704 285212672 2566914048 3992977408 16777215 4278190080 1711276032 16777215 16777215 4278190080 1711276032 16777215 16777215 16777215 4278190080 1140850688 16777215 855638016 3422552064 4278190080 4278190080 1711276032 1140850688 4278190080 16777215 16777215 16777215 16777215 16777215 16777215 1140850688 3992977408 4278190080 3137339392 4278190080 1140850688 1140850688 4278190080 16777215 16777215 1996488704 4278190080 4278190080 2852126720 4278190080 285212672 1711276032 4278190080 3137339392 4278190080 3707764736 855638016 16777215 4278190080 1140850688 16777215 16777215 4278190080 1140850688 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 855638016 570425344 285212672 1996488704 4278190080 285212672 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1711276032 4278190080 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 2281701376 4278190080 4278190080 3422552064 1140850688 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1711276032 4278190080 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1140850688 4278190080 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215)	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/26/2013 14:45'!fiacre^ self icons		at: #fiacre ifAbsentPut: [(Form	extent: (28@14)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/26/2013 14:45'!graph^ self icons		at: #graph ifAbsentPut: [(Form	extent: (31@14)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 2/27/2014 19:22'!graph_io^ self icons		at: #graph_io ifAbsentPut: [(Form	extent: (50@14)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 12:38'!icons	^ icons ifNil: [icons := Dictionary new] ! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 14:47'!importIcons	|toGet|	toGet := #(fiacre graph graph_io lts fcr_graph ensta_logo clockSystem simulate explore).	self importIcons: toGet fromFolder: 'icons' inClass: self category: 'icons'! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/30/2015 15:11'!importIcons:  iconsList fromFolder: aString inClass: aClass category: aCategory	iconsList		do: [:each |			| method form |			form := PNGReadWriter formFromFileNamed: aString, '/', each , '.png'.			method := each , Character cr asString ,				'^ self icons		at: #',each,' ifAbsentPut: [',						form storeString,				']'.			aClass class compile: method classified: aCategory ].	aClass initialize! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 10:46'!inspectIcon^ self icons		at: #inspect ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray: #( 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777216 4009754624 2566914048 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 167772160 4278190080 4009754624 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 117440512 33554432 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 2147483648 2785017856 2348810240 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 67108864 4278190080 3741319168 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 3489660928 3741319168 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 3489660928 3741319168 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 3489660928 3741319168 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 2566914048 4278190080 4278190080 2785017856 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215)	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/26/2013 14:45'!lts^ self icons		at: #lts ifAbsentPut: [(Form	extent: (12@14)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 4/19/2015 12:42'!open^ self icons		at: #open ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/19/2015 10:48'!play^ self icons		at: #play ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 4/19/2015 13:43'!refresh^ self icons		at: #refresh ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 4/19/2015 12:43'!remove^ self icons		at: #remove ifAbsentPut: [(Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))]! !!ClockSystemIcons class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/24/2013 12:38'!resetIcons	icons := nil! !!ClockSystemIcons class methodsFor: 'icons' stamp: 'CiprianTeodorov 10/30/2015 15:11'!simulate^ self icons		at: #simulate ifAbsentPut: [(Form	extent: (53@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1627324416 1090453504 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 268435456 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1358888960 822018048 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 1073741824 3204448256 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 805306368 2147483648 805306368 0 1090453504 1090453504 0 1610612736 268435456 1879048192 1610612736 0 1073741824 2147483648 536870912 0 0 2147483648 0 0 0 2147483648 0 0 4278190080 0 0 1342177280 2147483648 1073741824 0 536870912 2667577344 3741319168 2147483648 536870912 0 1073741824 2147483648 536870912 0 0 0 0 0 0 0 0 0 0 0 0 1073741824 3472883712 1073741824 1342177280 0 2164195328 2164195328 0 3204448256 2936012800 1073741824 3472883712 2936012800 2147483648 1342177280 4009754624 536870912 0 4278190080 0 0 0 4278190080 0 0 4278190080 0 805306368 1610612736 1073741824 3472883712 1342177280 268435456 1879048192 3472883712 1073741824 268435456 2399141888 2936012800 1342177280 3204448256 1073741824 0 0 0 0 0 0 0 0 0 0 0 1879048192 2936012800 268435456 0 0 2164195328 2164195328 0 3204448256 1342177280 0 1073741824 3472883712 0 0 2399141888 2147483648 0 4278190080 0 0 0 4278190080 0 0 4278190080 0 0 0 536870912 1879048192 3204448256 0 1073741824 3204448256 0 0 3741319168 0 0 1342177280 2667577344 0 0 0 0 0 0 0 0 0 0 0 0 2399141888 4009754624 1610612736 0 2164195328 2164195328 0 3204448256 1073741824 0 1073741824 3204448256 0 0 2147483648 2147483648 0 4278190080 0 0 0 4278190080 0 0 4278190080 0 805306368 3204448256 2667577344 2667577344 3204448256 0 1073741824 3204448256 0 1073741824 4009754624 3204448256 3204448256 3204448256 2399141888 0 0 0 0 0 0 0 0 0 0 0 0 0 805306368 4009754624 0 2164195328 2164195328 0 3204448256 1073741824 0 1073741824 3204448256 0 0 2147483648 2147483648 0 4278190080 268435456 0 268435456 4278190080 0 0 4278190080 0 2667577344 1342177280 0 1073741824 3204448256 0 1073741824 3204448256 0 268435456 3741319168 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1342177280 1342177280 1879048192 3204448256 0 2164195328 2164195328 0 3204448256 1073741824 0 1073741824 3204448256 0 0 2147483648 2147483648 0 2667577344 2667577344 1073741824 2936012800 4009754624 0 0 4278190080 0 2667577344 2667577344 1342177280 3204448256 3204448256 0 536870912 4009754624 1073741824 268435456 2399141888 2936012800 1073741824 1342177280 536870912 0 0 0 0 0 0 0 0 0 0 0 805306368 1879048192 1610612736 268435456 0 1090453504 1090453504 0 1610612736 536870912 0 536870912 1610612736 0 0 1073741824 1073741824 0 268435456 1610612736 1879048192 536870912 1610612736 0 0 2147483648 0 0 1610612736 1610612736 268435456 1610612736 0 0 1073741824 2147483648 268435456 0 805306368 2147483648 1610612736 536870912 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))]! !"ClockSystem-UI"!!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 11:18'!benchCoincident	ClockCartesianProductExploration exploreModel: (self coincident: 10)! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 11:04'!benchCoincidentBDD	[ClockCartesianProductBDDExploration exploreModel: (self coincident: 25)] ifError: [ 0 ]! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 11:18'!benchExclusive	 ClockCartesianProductExploration exploreModel: (self exclusive: 10)! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 16:20'!benchExclusiveBDD	[ClockCartesianProductBDDExploration exploreModel: (self exclusive: 25)] ifError: [ 0 ]! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 11:18'!benchIndependent	ClockCartesianProductExploration exploreModel: (self independent: 10).! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 16:21'!benchIndependentBDD	[ClockCartesianProductBDDExploration exploreModel: (self independent: 15)] ifError: [ 0 ]! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 12:20'!coincident: n	| sys |	sys := self independent: n.	sys		systemName: 'coincident';		allCoincide: sys clocks asOrderedCollection.	^ sys! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 12:19'!exclusive: n	| sys |	sys := self independent: n.	sys		systemName: 'exclusive';		allExclusive: sys clocks asOrderedCollection.	^ sys! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 12:17'!independent: n	| sys |	sys := ClockSystem named: 'independent'.	1 to: n do: [ :i | sys clock: ('clk' , i printString) asSymbol ].	^ sys! !!ClockBenchmark methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 4/18/2015 13:05'!myRunScript	FileStream		forceNewFileNamed: '../../../coincidentClocks_time.csv'		do: [ :stream | 			stream				nextPutAll: 'Nb clocks; State-space size; Time';				cr.			1 to: 25 do: [ :n | 				| time composition |				time := Time					microsecondsToRun: [ composition := ClockCartesianProductBDDExploration exploreModel: (self coincident: n) ].				stream					nextPutAll: n printString , ';' , composition graph size printString , '; ' , time printString;					cr;					flush ] ]! !"ClockSystem-Benchmark"!!ProducerConsumer commentStamp: 'CiprianTeodorov 10/1/2015 11:49' prior: 0!ProducerConsumer explore: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer explore: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer simulate: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer simulate: ProducerConsumer producerConsumerPreemptiveScheduler. !!ProducerConsumer commentStamp: 'CiprianTeodorov 10/1/2015 11:49' prior: 36483748!ProducerConsumer explore: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer explore: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer simulate: ProducerConsumer producerConsumerNonPreemptiveScheduler.ProducerConsumer simulate: ProducerConsumer producerConsumerPreemptiveScheduler. !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 10/1/2015 00:23'!code	^[ :s :run :down :unblock :up :cs |		s caseOf: { 			[ 0 ] -> [ { 0->1 when: { run } } ].			[ 1 ] -> [ { 1->2 when: { run. down} } ].			[ 2 ] -> [ { 2->3 when: { run. cs }. 2->1 when: { unblock } } ].			[ 3 ] -> [ { 3->1 when: { run. up } } ].		}	]! !!ProducerConsumer class methodsFor: 'executionAPI' stamp: 'CiprianTeodorov 10/3/2015 20:32'!explore: sys	| result |	result := ClockCartesianProductBDDExploration exploreModel: sys.	FileStream		newFileNamed: (UITheme builder fileSave: 'res' extensions: {'gml'})		do: [ :stream | TraConfigurationGraph2GML gml: result in: stream ].	^ result! !!ProducerConsumer class methodsFor: 'moc compositions' stamp: 'CiprianTeodorov 10/4/2015 21:51'!producerConsumerNonPreemptiveScheduler|pc cc t1c t2c sec sfc sc clocks sys |"producer code clocks"pc := #(execute1 downE unblock1 upF critical1)."consumer code clocks"cc := #(execute2 downF unblock2 upE critical2)."task1 clocks"t1c := #(ready1 execute1 block1 unblock1 stop1)."task2 clocks"t2c := #(ready2 execute2 block2 unblock2 stop2)."semaphore empty clocks"sec := #(downE upE block1 unblock1)."semaphore full clocks"sfc := #(downF upF block2 unblock2)."scheduler clocks"sc := #(ready1 ready2 execute1 execute2 block1 block2 stop1 stop2).clocks := (pc, cc, t1c, t2c, sec, sfc, sc) asSet.sys := ClockSystem named: 'ProducerConsumer'.sys addClocks: clocks.sys library: ProducerConsumer relation: #code clocks: pc.sys library: ProducerConsumer relation: #code clocks: cc.sys library: ProducerConsumer relation: #task clocks: t1c.sys library: ProducerConsumer relation: #task clocks: t2c.sys library: ProducerConsumer relation: #semaphore clocks: sec variables: {10. OrderedCollection new}.sys library: ProducerConsumer relation: #semaphore clocks: sfc variables: {0. OrderedCollection new}.sys library: ProducerConsumer relation: #scheduler clocks: sc "constants: {false}" variables: {OrderedCollection new. -1}.^sys.! !!ProducerConsumer class methodsFor: 'moc compositions' stamp: 'CiprianTeodorov 10/4/2015 21:50'!producerConsumerPreemptiveScheduler| pc cc t1c t2c sec sfc sc clocks sys  |"producer code clocks"pc := #(execute1 downE unblock1 upF critical1)."consumer code clocks"cc := #(execute2 downF unblock2 upE critical2)."task1 clocks"t1c := #(ready1 execute1 block1 unblock1 stop1)."task2 clocks"t2c := #(ready2 execute2 block2 unblock2 stop2)."semaphore empty clocks"sec := #(downE upE block1 unblock1)."semaphore full clocks"sfc := #(downF upF block2 unblock2)."scheduler clocks"sc := #(ready1 ready2 execute1 execute2 block1 block2 stop1 stop2).clocks := (pc, cc, t1c, t2c, sec, sfc, sc) asSet.sys := ClockSystem named: 'ProducerConsumer'.sys addClocks: clocks.sys library: ProducerConsumer relation: #code clocks: pc.sys library: ProducerConsumer relation: #code clocks: cc.sys library: ProducerConsumer relation: #task clocks: t1c.sys library: ProducerConsumer relation: #task clocks: t2c.sys library: ProducerConsumer relation: #semaphore clocks: sec variables: {2. OrderedCollection new}.sys library: ProducerConsumer relation: #semaphore clocks: sfc variables: {0. OrderedCollection new}.sys library: ProducerConsumer relation: #scheduler1 clocks: sc "constants: #(true)" variables: {OrderedCollection new. -1}.^sys.! !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 10/1/2015 00:26'!scheduler	^[ :s :queue :eID :queue1 :queue2 :executing1 :executing2 :block1 :block2 :stop1 :stop2 |			s caseOf: { 			[ 0 ] -> [ |transitions|				transitions := OrderedCollection new.				transitions add: (0->0 when: {queue1} do: [:c | (c at: 2) add: 1]).				transitions add: (0->0 when: {queue2} do: [:c | (c at: 2) add: 2]).				queue ifNotEmpty: [ 					queue first caseOf: { 						[ 1 ] -> [ transitions add: (0->1 when: {executing1} do: [:c | (c at: 2) removeFirst. c at: 3 put: 1]) ].						[ 2 ] -> [ transitions add: (0->1 when: {executing2} do: [:c | (c at: 2) removeFirst. c at: 3 put: 2]) ]					}				 ].				transitions.			].			[ 1 ] -> [ |transitions|				transitions := OrderedCollection new.				eID = 2 ifTrue: [  					transitions add: (1->1 when: {queue1} do: [:c | (c at: 2) add: 1]).					transitions add: (1->1 when: {executing2}).					transitions add: (1->0 when: {executing2. block2} do: [:c | c at: 3 put: -2 ])]				ifFalse: [ 					transitions add: (1->1 when: {queue2} do: [:c | (c at: 2) add: 2]).					transitions add: (1->1 when: {executing1}).					transitions add: (1->0 when: {executing1. block1} do: [:c | c at: 3 put: -2])].				transitions. 				].		 }		 ]! !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 10/1/2015 00:19'!scheduler1	^[ :s :queue :eID :queue1 :queue2 :executing1 :executing2 :block1 :block2 :stop1 :stop2|			s caseOf: { 			[ 0 ] -> [ |transitions|				transitions := OrderedCollection new.				transitions add: (0->0 when: {queue1} do: [:c | (c at: 2) add: 1]).				transitions add: (0->0 when: {queue2} do: [:c | (c at: 2) add: 2]).				queue ifNotEmpty: [ 					queue first caseOf: { 						[ 1 ] -> [ transitions add: (0->1 when: {executing1} do: [:c | (c at: 2) removeFirst. c at: 3 put: 1]) ].						[ 2 ] -> [ transitions add: (0->1 when: {executing2} do: [:c | (c at: 2) removeFirst. c at: 3 put: 2]) ]					}				 ].				transitions.			].			[ 1 ] -> [ |transitions|				transitions := OrderedCollection new.							eID = 2 ifTrue: [  					transitions add: (1->1 when: {queue1} do: [:c | (c at: 2) add: 1]).					queue ifNotEmpty: [ transitions add: (1->1 when: {executing1. stop2} do: [:c | (c at: 2) removeFirst. c at: 3 put: 1]) ].					transitions add: (1->1 when: {executing2}).					transitions add: (1->0 when: {executing2. block2} do: [:c | c at: 3 put: -2 ])]				ifFalse: [ 					transitions add: (1->1 when: {queue2} do: [:c | (c at: 2) add: 2]).					queue ifNotEmpty: [ transitions add: (1->1 when: {executing2. stop1} do: [:c | (c at: 2) removeFirst. c at: 3 put: 2]) ].					transitions add: (1->1 when: {executing1}).					transitions add: (1->0 when: {executing1. block1} do: [:c | c at: 3 put: -2])].				transitions. 				].		 }		 ]! !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 10/3/2015 20:34'!scheduler2	^[:s :queue :eID :isPreemptive :schedule1 :schedule2 :execute1 :execute2 :block1 :block2 :stop1 :stop2|	s caseOf: {		[0] -> [|transitions|			transitions := OrderedCollection new.			transitions add: (0->0 when: {schedule1} do:[:c | (c at: 2) add: 1]).			transitions add: (0->0 when: {schedule2} do:[:c | (c at: 2) add: 2]).			transitions add:				((queue isNotEmpty and: [ queue first = 1 ]) ifTrue:[					0->1 when: {execute1} do: [:c | (c at: 2) removeFirst. c at: 3 put: 1]]).			transitions add:				((queue isNotEmpty and: [ queue first = 2 ]) ifTrue:[					0->1 when: {execute2} do: [:c | (c at: 2) removeFirst. c at: 3 put: 2]]).			transitions reject: #isNil].		[1] -> [|transitions|			transitions := OrderedCollection new.			eID=1 ifTrue: [				transitions add: (1->1 when: {execute1}).				transitions add: (1->0 when: {execute1. block1} do: [:c | c at: 3 put: 0]).				transitions add: ((isPreemptive and: [queue isNotEmpty])ifTrue: [1->0 when: {stop1} do: [:c | c at: 3 put: 0]]).				transitions add: (1->1 when: {schedule2} do:[:c | (c at: 2) add: 2]).			].			eID=2 ifTrue: [				transitions add: (1->1 when: {execute2}).				transitions add: (1->0 when: {execute2. block2} do: [:c | c at: 3 put: 0]).				transitions add: ((isPreemptive and: [queue isNotEmpty])ifTrue: [1->0 when: {stop2} do: [:c | c at: 3 put: 0]]).				transitions add: (1->1 when: {schedule1} do:[:c | (c at: 2) add: 1]).			].			transitions reject: #isNil]}]! !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 9/30/2015 23:30'!semaphore	"in this version the emptyCount can only block the producer. and the fullCount the consumer"	"in this case we do not need the queue"	"BUT: generally we need to know the ID of the guy doing the block to enqueue it so that unblock the first one"	^[ :s :count :queue :down :up :block :unblock |		s caseOf: { 			[ 0 ] -> [ |transitions|				transitions := OrderedCollection new.				count > 0 ifTrue: [ 						transitions add: (0->0 when: { down } do: [:c| c at: 2 put: (c at: 2) - 1 ]).						transitions add: (0->0 when: { up } do: [:c| c at: 2 put: (c at: 2) + 1 ])]					ifFalse: [ "down clockName = #downE ifTrue: [ self halt]."						transitions add: (0->0 when: {down. block} do: [:c| (c at: 3) add: 1]).						queue ifEmpty: [ transitions add: (0->0 when: { up } do: [:c| c at: 2 put: (c at: 2) + 1 ]) ]							ifNotEmpty: [ transitions add: (0->0 when: {up. unblock} do: [:c| c at: 2 put: (c at: 2) + 1. (c at: 3) removeFirst])]].					transitions.				].					}			]! !!ProducerConsumer class methodsFor: 'executionAPI' stamp: 'CiprianTeodorov 10/3/2015 20:32'!simulate: sys	| simtrace |	simtrace := ClockBDDSimulation simulate: sys heuristic: #randomSAT:.	[ | trace data model |	trace := (ClockTraceExtractor from: simtrace policy: ClockRandomPolicy new) extract.	data := (ClockTraceInterpreter run: trace for: 400) result.	model := TicksModel new		clocks: sys clocks;		ticks: (data collect: [ :each | each vector asSet ]).	MultiWaveView openOn: model waves ] value.	^ simtrace! !!ProducerConsumer class methodsFor: 'mocs' stamp: 'CiprianTeodorov 10/1/2015 00:20'!task	|start waiting executing pending|	start := 0. waiting := 1. executing := 2. pending := 3.	^[ :s :ready :execute :block :unblock :stop |		s caseOf: { 			[ start ] -> [ { start->waiting when: { ready } } ].			[ waiting ] -> [ { waiting->executing when: { execute } } ].			[ executing ] -> [ { executing->executing when: { execute }. executing->pending when: { execute. block }. executing->start when: { stop } } ].			[ pending ] -> [ { pending->start when: { unblock } } ].		}	]! !!SchedulerGenerator class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/3/2015 19:56'!new	^self shouldNotImplement ! !!SchedulerGenerator class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/3/2015 19:55'!new: nbTasks	^ super new		initialize;		nbTasks: nbTasks! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 20:25'!emit0Transitions	|code|	code := '' writeStream.	code 		nextPutAll: '<t><t>[0] -> [|transitions|<n>' expandMacros;		nextPutAll: '<t><t><t>transitions := OrderedCollection new.<n>' expandMacros;		nextPutAll: ('<1s>' expandMacrosWith: self emitStartingTransitions);		nextPutAll: '<t><t><t>transitions reject: #isNil].<n>' expandMacros.	^code contents! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 20:30'!emit1Transitions	|code|	code := '' writeStream.	code 		nextPutAll: '<t><t>[1] -> [|transitions|<n>' expandMacros;		nextPutAll: '<t><t><t>transitions := OrderedCollection new.<n>' expandMacros.	1 to: nbTasks do: [ :each |		code nextPutAll: (self emitExecutingTransitions: each).	].	code		nextPutAll: '<t><t><t>transitions reject: #isNil]' expandMacros.	^code contents! !!SchedulerGenerator methodsFor: 'emit signature' stamp: 'CiprianTeodorov 10/3/2015 20:31'!emitArguments	^':s :queue :eID :isPreemptive'	, (self emitClocks: 'schedule')	, (self emitClocks: 'execute')	, (self emitClocks: 'block')	, (self emitClocks: 'stop')	! !!SchedulerGenerator methodsFor: 'emit transitions' stamp: 'CiprianTeodorov 10/3/2015 20:07'!emitBlocking: taskID	^'(1->0 when: {execute<1p>. block<1p>} do: [:c | c at: 3 put: 0])' expandMacrosWith: taskID! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 20:00'!emitCaseOf	^'<t>s caseOf: {<n><1s><2s>}' expandMacrosWith: (self emit0Transitions) with: (self emit1Transitions).! !!SchedulerGenerator methodsFor: 'emit signature' stamp: 'CiprianTeodorov 10/3/2015 19:54'!emitClocks: aName	|clocks|	clocks := '' writeStream.	1 to: nbTasks do: [ :i | clocks nextPutAll: ' :', aName, i printString ].	^clocks contents! !!SchedulerGenerator methodsFor: 'emit transitions' stamp: 'CiprianTeodorov 10/3/2015 19:59'!emitEnqueue: processID state: stateID	^'(<1p>-><1p> when: {schedule<2p>} do:[:c | (c at: 2) add: <2p>])' expandMacrosWith: stateID with: processID ! !!SchedulerGenerator methodsFor: 'emit transitions' stamp: 'CiprianTeodorov 10/3/2015 20:06'!emitExecuting: taskID	^'(1->1 when: {execute<1p>})' expandMacrosWith: taskID! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 20:30'!emitExecutingTransitions: taskID	|others code|	others := (1 to: nbTasks) asSet \ {taskID}.	code := '' writeStream.	code 		nextPutAll: ('<t><t><t>eID=<1p> ifTrue: [<n>' expandMacrosWith: taskID);		nextPutAll: ('<t><t><t><t>transitions add: <1s>.<n>' expandMacrosWith: (self emitExecuting: taskID));		nextPutAll: ('<t><t><t><t>transitions add: <1s>.<n>' expandMacrosWith: (self emitBlocking: taskID));		nextPutAll: ('<t><t><t><t>transitions add: <1s>.<n>' expandMacrosWith: (self emitPreempt: taskID)).	others do: [ :each | 		code nextPutAll: ('<t><t><t><t>transitions add: <1s>.<n>' expandMacrosWith: (self emitEnqueue: each state: 1))].	code nextPutAll: '<t><t><t>].<n>' expandMacros.	^code contents! !!SchedulerGenerator methodsFor: 'emit transitions' stamp: 'CiprianTeodorov 10/3/2015 20:32'!emitPreempt: taskID	^'((isPreemptive and: [queue isNotEmpty]) ifTrue: [1->0 when: {stop<1p>} do: [:c | c at: 3 put: 0]])' expandMacrosWith: taskID! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 19:54'!emitScheduler	^'[<1s>|<n><2s>]' expandMacrosWith: self emitArguments with: self emitCaseOf.! !!SchedulerGenerator methodsFor: 'emit transitions' stamp: 'CiprianTeodorov 10/3/2015 20:15'!emitStartExecuting: taskID	^'<t><t><t><t>((queue isNotEmpty and: [ queue first = <1p> ]) ifTrue:[<n><t><t><t><t><t>0->1 when: {execute<1p>} do: [:c | (c at: 2) removeFirst. c at: 3 put: <1p>]])' expandMacrosWith: taskID! !!SchedulerGenerator methodsFor: 'emit code' stamp: 'CiprianTeodorov 10/3/2015 20:14'!emitStartingTransitions	| code|	code := '' writeStream.	1 to: nbTasks  do: [ :each | 		code nextPutAll: ('<t><t><t>transitions add: <1s>.<n>' expandMacrosWith: (self emitEnqueue: each state: 0))].	1 to: nbTasks do: [ :each |		code nextPutAll: ('<t><t><t>transitions add:<n><1s>.<n>' expandMacrosWith: (self emitStartExecuting: each)).		 ].	^code contents! !!SchedulerGenerator methodsFor: 'generation' stamp: 'CiprianTeodorov 10/3/2015 20:43'!generateScheduler: n	|automataBlock code|	nbTasks := n.	automataBlock := self emitScheduler.	code := 'scheduler<1p>Tasks<n><t>^<2s>' expandMacrosWith: n with: automataBlock.	ProducerConsumer compile: code.! !!SchedulerGenerator methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/3/2015 19:54'!nbTasks	^ nbTasks! !!SchedulerGenerator methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/3/2015 19:54'!nbTasks: anObject	nbTasks := anObject! !"ClockSystem-MocOS"!!RDLAbstractValue class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/28/2015 21:57'!resetPrimitives	primitives := nil.! !!RDLArray class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/28/2015 21:57'!primitives	^ primitives		ifNil: [ primitives := {(#size -> [ :array | [ :args | array size ] ])} asDictionary ]		ifNotNil: [ primitives ]! !!RDLArray class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 10:08'!withAll: aCollection	^self new array: aCollection! !!RDLArray methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/27/2015 21:44'!= anotherArray	^array = anotherArray array! !!RDLArray methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 21:45'!array	^array! !!RDLArray methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 20:04'!array: arr	array := arr! !!RDLArray methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/28/2015 22:00'!at: aSymbolOrIndex	aSymbolOrIndex isSymbol ifTrue: [ ^(self class primitives at: aSymbolOrIndex) value: array ].	^array at: aSymbolOrIndex  ! !!RDLArray methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/27/2015 21:46'!hash	|hash|	hash := self species hash.	hash := (hash + array hash) hashMultiply.	^hash	! !!RDLArray methodsFor: 'initialization' stamp: 'CiprianTeodorov 10/28/2015 21:55'!initialize	super initialize.	array := #().! !!RDLArray methodsFor: 'printing' stamp: 'CiprianTeodorov 10/28/2015 22:01'!printOn: aStream	aStream nextPut: $[.	array do: [ :each | each printOn: aStream ].	aStream nextPut: $].! !!RDLQueue class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/28/2015 21:53'!primitives	^ primitives		ifNil: [ 			primitives := {(#size -> [ :queue | [:args | queue size ]]).			(#isEmpty -> [ :queue | [:args | queue isEmpty ]]).			(#isNotEmpty -> [ :queue | [:args | queue isNotEmpty ]]).			(#first -> [ :queue | [:args | queue first ]]).			(#last -> [ :queue | [:args | queue last ]]).			(#removeFirst -> [ :queue | [:args | queue removeFirst ]]).			(#removeLast -> [ :queue | [:args | queue removeLast ]]).			(#remove -> [ :queue | [:args | queue remove ]]).			(#add -> [ :queue | [:args | queue add: args first ]]).			(#addFirst -> [ :queue | [:args | queue addFirst: args first ]]).			(#addLast -> [ :queue | [:args | queue addLast: args first ]])} asDictionary ]		ifNotNil: [ primitives ]! !!RDLQueue class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 10:08'!withAll: aCollection	^self new queue: aCollection asOrderedCollection ! !!RDLQueue methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/27/2015 21:47'!= anotherQueue	^queue = anotherQueue queue! !!RDLQueue methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/28/2015 21:59'!at: aSymbolOrIndex	aSymbolOrIndex isSymbol ifTrue: [ ^(self class primitives at: aSymbolOrIndex) value: queue ].	^queue at: aSymbolOrIndex  ! !!RDLQueue methodsFor: 'comparing' stamp: 'CiprianTeodorov 10/27/2015 21:47'!hash	|hash|	hash := self species hash.	hash := (hash + queue hash) hashMultiply.	^hash	! !!RDLQueue methodsFor: 'initialization' stamp: 'CiprianTeodorov 10/28/2015 21:54'!initialize	super initialize.	queue := OrderedCollection new.! !!RDLQueue methodsFor: 'printing' stamp: 'CiprianTeodorov 10/28/2015 22:02'!printOn: aStream	aStream nextPutAll: '{|'.	queue do: [ :each | each printOn: aStream ].	aStream nextPutAll: '|}'.! !!RDLQueue methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 21:48'!queue	^queue! !!RDLQueue methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 09:59'!queue: anOrderedCollection	queue  := anOrderedCollection ! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/12/2015 21:23'!clockRDLJarPath	^ ClockRDLJarPath		ifNil: [ ClockRDLJarPath := 'ClockRDL/jars/ClockRDL.jar' ]		ifNotNil: [ 			ClockRDLJarPath asFileReference exists				ifTrue: [ ClockRDLJarPath ]				ifFalse: [ 					| fileStream |					fileStream := UITheme builder fileOpen: 'Please locate ClockRDL.jar library' extensions: #(#jar).					fileStream ifNil: [ ClockRDLJarPath := '<>' ] ifNotNil: [ ClockRDLJarPath := fileStream fullName ] ] ]! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 18:57'!clockRDLJarPath: aPathString	ClockRDLJarPath := aPathString! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/31/2015 19:00'!evaluate: aCRDFile	^self new		infile: aCRDFile;		instance! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/12/2015 21:46'!javaExePath	^JavaExePath ifNil: [ JavaExePath := '/usr/bin/jdava' ] ifNotNil: [ 			JavaExePath asFileReference exists				ifTrue: [ JavaExePath ]				ifFalse: [ 					| fileStream |					fileStream := UITheme builder fileOpen: 'Please locate java executable' extensions: nil.					fileStream ifNil: [ JavaExePath := '<>' ] ifNotNil: [ JavaExePath := fileStream fullName ] ] ]! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:10'!javaExePath: aPath	JavaExePath := aPath! !!RDLCompiler class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/4/2015 21:54'!rdlCompilerSettingsOn: aBuilder	<systemsettings>	<clockSystem>	(aBuilder setting: #rdlCompilerJavaPath)		parent: #ClockSystem;		label: 'Path to java executable';		target: RDLCompiler;		type: #FilePathEncoder;		getSelector: #javaExePath;		setSelector: #javaExePath:;		notInStyle;		default: '/usr/bin/java';		description: 'Path to the java executable'.			 (aBuilder setting: #rdlCompiler)		parent: #ClockSystem;		label: 'Path to ClockRDL.jar';		target: RDLCompiler;		type: #FilePathEncoder;		getSelector: #clockRDLJarPath;		setSelector: #clockRDLJarPath:;		notInStyle;		default: 'ClockRDL/jars/ClockRDL.jar';		description: 'The fullpath of the ClockRDL jar'.		! !!RDLCompiler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/12/2015 21:41'!compile	| process out err errors stopSteps |	process := ExternalOSProcess concreteClass		programName: self class javaExePath		arguments:			{'-cp'.			(self class clockRDLJarPath).			'ClockRDL.rdl2st80.ClockRDL2Smalltalk'.			'-libraryPath'.			('"' , Smalltalk imageDirectory asFileReference fullName , '/"').			'-in'.			(infile fullName).			'-out'.			'generatedRDL.st'}		initialEnvironment: OSProcess thisOSProcess environment copy.	out := FileStream forceNewFileNamed: 'out.stream'.	err := FileStream forceNewFileNamed: 'err.stream'.	process		pwd: '.' asFileReference fullName;		initialStdOut: out;		initialStdErr: err;		initialize.	process value.		"the following line are a hack for windows"	stopSteps := 10.	[ process isRunning and: [ stopSteps ~= 0 ] ]		whileTrue: [ 			(Delay forMilliseconds: 50) wait.			stopSteps := stopSteps - 1 ].		"[ process isRunning ] whileTrue: [ (Delay forMilliseconds: 50) wait ]."	errors := err contentsOfEntireFile.	errors ~= ''		ifTrue: [ 			Transcript				show: errors;				open.			^ nil ]! !!RDLCompiler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 19:34'!import	| file packages |	self compile ifNil: [ ^ nil ].	"remove all classes from the package where we will import the code"	packages := RPackageOrganizer default packages select: [ :p | p name = #'RDL-RelationLibrary-Test' ].	packages ifNotEmpty: [ packages first definedClasses do: [ :classToRemove | classToRemove removeFromSystem ] ].	file := 'generatedRDL.st' asFileReference.	file fileIn! !!RDLCompiler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/30/2015 13:50'!infile: inFile	infile :=inFile .! !!RDLCompiler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/1/2015 13:02'!instance	self import ifNil: [ ^ nil ].	^ (Smalltalk at: #RDLRelationInstance ifAbsent: [self notify: 'ClockSystem cannot analyze ClockRDL models without a root instance'. ^nil]) root! !!RDLPrimitiveRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 10/26/2015 13:43'!do: aTransition withState: aState	|block|	block := aTransition action.	block ifNotNil: [ 		variables := aState.		block value ].! !!RDLPrimitiveRelation methodsFor: 'private' stamp: 'CiprianTeodorov 10/27/2015 20:31'!instances	^Array with: self! !!RDLPrimitiveRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 10/28/2015 19:24'!startState	| pragmas |	pragmas := Pragma allNamed: #RDLInitialization in: self class.	pragmas do: [ :each | self withArgs: {} executeMethod: each method ].	^ variables! !!RDLPrimitiveRelation methodsFor: 'private' stamp: 'CiprianTeodorov 10/26/2015 13:43'!transitions	^self subclassResponsibility ! !!RDLPrimitiveRelation methodsFor: 'explore - api' stamp: 'CiprianTeodorov 10/26/2015 13:43'!transitionsInState: aState	variables := aState.	^self transitions.! !!RDLRelation class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 20:50'!instanceNamed:  iname	^self new 		instanceName: iname.! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 20:36'!allInstances 	|result|	result := OrderedCollection new.	self instances do: [ :instance | result addAll: instance instances ].	^result! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 13:29'!alphabet	^alphabet ifNil: [ alphabet := clocks asSet ] ifNotNil: [ alphabet  ]! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 11:50'!clocks	^ clocks! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 12:27'!clocks: anObject	clocks := anObject.	alphabet := clocks asSet.! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 11:50'!constants	^ constants! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 11:50'!constants: anObject	constants := anObject! !!RDLRelation methodsFor: 'initialization' stamp: 'CiprianTeodorov 10/26/2015 11:49'!initialize	super initialize.	! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 20:39'!instanceName	^ instanceName! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 20:39'!instanceName: anObject	instanceName := anObject! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/27/2015 20:31'!instances	^self subclassResponsibility ! !!RDLRelation methodsFor: 'testing' stamp: 'CiprianTeodorov 10/26/2015 12:28'!isAlways	^false! !!RDLRelation methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 20:43'!printOn: aStream	aStream nextPutAll: instanceName printString, ':', self class name ! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 11:50'!variables	^ variables! !!RDLRelation methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 11:50'!variables: anObject	variables := anObject! !!RDLTransition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 09:47'!vector: vector	^ self vector: vector action: nil! !!RDLTransition class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/26/2015 12:01'!vector: vector action: action	^self new 		vector: vector;		action: action.! !!RDLTransition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 12:02'!action	^ action! !!RDLTransition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 12:02'!action: anObject	action := anObject! !!RDLTransition methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/27/2015 21:29'!isFireableIn: automaton with: assignment	| stalled |	"check if the clocks that need to fire are assigned tick"	vector		do: [ :clock | 			(assignment at: clock index) == Tristate tick				ifFalse: [ ^ false ] ].		"check if the clock that are not allowed to fire are assigned notick"	stalled := automaton alphabet \ vector.	stalled		do: [ :clock | 			(assignment at: clock index) == Tristate notick				ifFalse: [ ^ false ] ].	^ true! !!RDLTransition methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 10/28/2015 21:36'!printOn: aStream	aStream nextPut: ${. vector do: [ :clk | clk printOn: aStream ]. aStream nextPut: $}.	action printOn: aStream.! !!RDLTransition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 12:02'!vector	^ vector! !!RDLTransition methodsFor: 'accessing' stamp: 'CiprianTeodorov 10/26/2015 12:02'!vector: anObject	vector := anObject! !!RDLStyler methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 01:28'!privateStyle: aText	^RDLStylingGrammar highlight: aText! !!ClockSystem methodsFor: '*ClockSystem-RDL-Core' stamp: 'CiprianTeodorov 10/27/2015 21:39'!fromRDL: aRDLRelationInstance	| rdlRelations rdlClocks|	rdlRelations := aRDLRelationInstance allInstances.	rdlClocks := OrderedCollection new.	rdlRelations do: [ :relation | rdlClocks addAll: relation clocks ].	(rdlClocks select: [ :each | each isNil ]) ifNotEmpty: [ ^self error: 'Some clocks are not mapped' ].	rdlClocks do: [ :each | each system: self ].	self clocks: rdlClocks.	self relations addAll: rdlRelations.! !!RDLStylingGrammar class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 00:09'!highlight: aModelString|styler|styler :=		Styler ifNil: [Styler := PPStyler new		parser: self new;		addAttribute: (TextColor color: (Color darkGray)) for: 'comment';		addAttribute: (TextColor color: (Color darkGray)) for: 'singleLineComment';		addAttribute: TextEmphasis underlined for: 'DEF';		addAttribute: (TextColor color:  (Color blue muchDarker)) for: 'top';		addAttribute: (TextEmphasis bold) for: 'top';				addAttribute: (TextColor color: (Color r: 0.51 g: 0.282 b: 0.573) darker) for: 'category';		bold: 'category';		addAttribute: TextEmphasis italic for: 'INTERNAL';		addAttribute: (TextColor color: Color brown) for: 'formal';		addAttribute: (TextColor color: Color green muchDarker) for: 'string';		addAttribute: (TextColor color:  (Color blue)) for: 'number';		addAttribute: (TextColor color:  (Color blue)) for: 'TRUE';		addAttribute: (TextColor color:  (Color blue)) for: 'FALSE';		bold: 'logical';		bold: 'statement';		addAttribute: (TextColor color: (Color r: 0.51 g: 0.282 b: 0.573) darker) for: 'SQUARES';		bold: 'SQUARES'] ifNotNil: [ Styler ].	^styler highlight: aModelString asText! !!RDLStylingGrammar class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 22:44'!openEditor	| model txtMorph window |	model := [ :txt :mo | 	txt isText		ifTrue: [ 						mo stylerStyled: (self highlight: txt).						 ] ].	txtMorph := PluggableTextMorph on: model text: #value:value: accept: #value:value:.	txtMorph autoAccept:  true.	window := SystemWindow labelled: 'FM3 Model Editor'.	window addMorph: txtMorph frame: (0 @ 0 corner: 1 @ 1).	window openInWorld! !!RDLStylingGrammar class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 20:47'!resetStyler	Styler := nil.! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:32'!FALSE	^'false' asParser, stop! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:32'!INTERNAL	^'internal' asParser, stop! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 00:13'!SQUARES	^$[ asParser / $] asParser ! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:32'!TRUE	^'true' asParser, stop! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:33'!category	^('clock' asParser / 'var' asParser / 'const' asParser / 'def' asParser), stop! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 20:55'!comment	| end |	end := '*/' asParser.	^ ('/*' asParser, (#any asParser starLazy: end), end)! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:33'!formal	^ identifier, $: asParser, $= asParser not! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 21:02'!identifier	^ (#letter asParser / $_ asParser , (#letter asParser / $_ asParser / #digit asParser) star) flatten! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:37'!logical	^ ((PPPredicateObjectParser anyOf: {$!!. $&. $|}), $= asParser not) 	/ ('nand' asParser, stop)	/ ('nor' asParser, stop )	/ ('xor' asParser, stop)! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 21:02'!number	^(#digit asParser) plus! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 00:16'!queueDelim	^'{|' asParser / '|}' asParser! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 20:55'!singleLineComment	| end |	end := #newline asParser.	^ ('//' asParser, (#any asParser starLazy: end), end)! !!RDLStylingGrammar methodsFor: 'accessing' stamp: 'CiprianTeodorov 11/3/2015 00:17'!start	^(	string	/ comment	/ singleLineComment	/ top	/ category	/ queueDelim	/ logical 	/ statement	/ FALSE 	/ INTERNAL   	/ TRUE 	/ formal	/ identifier	/ number	/ SQUARES	/ #any asParser) star! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:35'!statement	^ ('if' asParser / 'else' asParser / 'while' asParser / 'return' asParser ), stop! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:31'!stop	^(#letter asParser / #digit asParser / $_ asParser) not! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/2/2015 23:05'!string	| end |	end := $" asParser.	^ ($" asParser, (#any asParser starLazy: end), end)		name: 'string';		yourself.! !!RDLStylingGrammar methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 11/3/2015 19:36'!top	^('import' asParser / 'library' asParser / 'relation' asParser), stop! !"ClockSystem-RDL-Core"!----QUIT----2016-01-05T15:13:08.341184+01:00 ClockSystem.image priorSource: 386057!----STARTUP----2016-01-05T15:13:08.671961+01:00 as /var/lib/jenkins/jobs/ClockSystemP4/workspace/ClockSystem.image!----QUIT----2016-01-05T15:13:08.863017+01:00 ClockSystem.image priorSource: 2963173!----STARTUP----2016-01-05T15:13:09.318831+01:00 as /var/lib/jenkins/jobs/ClockSystemP4/workspace/ClockSystem.image!----QUIT----2016-01-05T15:13:09.425987+01:00 ClockSystem.image priorSource: 2963376!----STARTUP----2016-03-10T13:02:13.229749+01:00 as C:\Users\Vincent\AppData\Local\Temp\win_vm\ClockSystemBis\ClockSystem.image!!Kernel class methodsFor: 'as yet unclassified' stamp: 'VincentLEILDE 3/10/2016 13:03'!Precedes	^ClockKernelLibrary precedence ! !!ClockSystem4GeMoC class methodsFor: 'as yet unclassified' stamp: 'VincentLEILDE 3/10/2016 13:03' prior: 35769041!explore: aClockSystem resultIn: resultsPath	| runtime result rccg fiacreGraph ltsFile fcrGmlFile gmlFile resultFile sysName mtxFile fullLtsFile |	[ 	runtime := Time millisecondsToRun: [ result := ClockCartesianProductExploration exploreModel: aClockSystem ].	"resultsPath := '/Users/ciprian/Playfield/GeMOC/gemoc-obp-bridge/'."	sysName := aClockSystem systemName.	"export MTX"	mtxFile := resultsPath , sysName , '.mtx'.	FileStream forceNewFileNamed: mtxFile do: [ :stream | TraConfigurationGraph2MatrixMarket mtx: result in: stream ].	rccg := TraConfigurationGraph2LTS runOn: result.	TraRemoveInternalClocks runOn: rccg.	TraRemoveInternalEvents runOn: rccg.	"fiacreGraph := TraConfigurationGraph2FiacreGraph runOn: rccg."	"export LTS"	ltsFile := resultsPath , sysName , '.lts'.	"FileStream forceNewFileNamed: ltsFile do: [ :stream | TraFiacreGraph2Lts lts: fiacreGraph prefix: '{sys}1' in: stream ]."	"export GML with coincidence expanded"	fullLtsFile := resultsPath , sysName , '_obp.lts'.		FileStream forceNewFileNamed: fullLtsFile do: [ :stream | TraFullGraph2LTS lts: result in: stream ].	"fcrGmlFile := resultsPath , sysName , '_fcr.gml'.	FileStream forceNewFileNamed: fcrGmlFile do: [ :stream | TraFiacreGraph2GML gml: fiacreGraph in: stream ]."		"export GML without coincidence expanded"	gmlFile := resultsPath , sysName , '.gml'.	FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: rccg in: stream ].		"export GML full"	gmlFile := resultsPath , sysName , '_full.gml'.	FileStream forceNewFileNamed: gmlFile do: [ :stream | TraConfigurationGraph2GML gml: result in: stream ].	resultFile := resultsPath , sysName , '_csys.results'.	FileStream		forceNewFileNamed: resultFile		do: [ :stream | 			stream				nextPutAll: 'system ' , sysName;				cr.			stream				nextPutAll: 'states: ' , result configurations size printString;				cr.			stream				nextPutAll: 'transitions: ' , result graph size printString;				cr.			stream				nextPutAll: 'time: ' , runtime printString , ' ms';				cr ] ]		on: Exception do: [ 			resultFile := resultsPath , sysName , '_csys.results'.			FileStream				forceNewFileNamed: resultFile				do: [ :stream | 					stream						nextPutAll: 'system ' , sysName;						cr;						nextPutAll: 'ERROR' ] ]! !----SNAPSHOT----2016-03-10T13:04:03.222749+01:00 ClockSystem.image priorSource: 2963580!----QUIT----2016-03-10T13:04:07.015749+01:00 ClockSystem.image priorSource: 2966347!----STARTUP----2016-03-10T13:08:58.140909+01:00 as C:\Users\Vincent\AppData\Local\Temp\win_vm\ClockSystemBis\ClockSystem.image!----SNAPSHOT----2016-03-10T13:09:09.654909+01:00 ClockSystem.image priorSource: 2966437!----QUIT----2016-03-10T13:09:12.793909+01:00 ClockSystem.image priorSource: 2966653!